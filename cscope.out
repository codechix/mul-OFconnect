cscope 15 $HOME/kajal-git/mul-cc               0001894405
	@application/cli/mul_cli.c

19 
	~"mul_˛i.h
"

21 
˛i_°ru˘_t
 *
	g˛i
;

27 
	$vty_dump
(*
vty
, *
pbuf
)

29 
	`vty_out
((
vty
 *)vty, "%s", 
pbuf
);

30 
	}
}

38 
	$˛i_ªcv_îr_msg
(
˛i_°ru˘_t
 *
˛i
 
UNUSED
, 
c_oÂ_îr‹_msg_t
 *
coÂ_îr
)

40 
	`c_log_îr
("%s: C⁄åﬁÀ∏£¡Éº‹Åy≥ %hu codê%hu", 
FN
,

41 
	`¡ohs
(
coÂ_îr
->
ty≥
),Çtohs(coÂ_îr->
code
));

44 
	}
}

53 
	$˛i_evít_nŸifõr
(*
›q
 
UNUSED
, *
pkt_¨g
)

55 
cbuf
 *
b
 = 
pkt_¨g
;

56 
oÂ_hódî
 *
hdr
;

57 
uöt64_t
 
dpid
 = 0;

59 i‡(!
b
) {

60 
	`c_log_îr
("%s: InvÆidárg", 
FN
);

64 
hdr
 = (*)(
b
->
d©a
);

66 
hdr
->
ty≥
) {

67 
C_OFPT_RECONN_APP
:

68 
	`mul_ªgi°î_≠p
(
NULL
, 
CLI_APP_NAME
, 0, 0, 1, &
dpid
, 
˛i_evít_nŸifõr
);

70 
C_OFPT_NOCONN_APP
:

72 
C_OFPT_ERR_MSG
:

73 
	`˛i_ªcv_îr_msg
(
˛i
, (*)
hdr
);

77 
	}
}

80 
	$mul_c‹e_£rvi˚_c⁄n_evít
(*
£rvi˚
 
UNUSED
, 
c⁄n_evít
)

82 
	`c_log_îr
("%s: %d", 
FN
, 
c⁄n_evít
);

83 
	}
}

86 
	$mul_å_£rvi˚_c⁄n_evít
(*
£rvi˚
 
UNUSED
, 
c⁄n_evít
)

88 
	`c_log_îr
("%s: %d", 
FN
, 
c⁄n_evít
);

89 
	}
}

93 
	$mul_Áb_£rvi˚_c⁄n_evít
(*
£rvi˚
 
UNUSED
, 
c⁄n_evít
)

95 
	`c_log_îr
("%s: %d", 
FN
, 
c⁄n_evít
);

96 
	}
}

100 
	$˛i_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED, *
¨g
 UNUSED)

102 
timevÆ
 
upd©e_tv
 = { 
CLI_TIMER_TS
, 
CLI_TIMER_TUS
 };

104 
	`evtimî_add
(
˛i
->
timî_evít
, &
upd©e_tv
);

105 
	}
}

113 
	$˛i_moduÀ_öô
(*
ba£_¨g
)

115 
evít_ba£
 *
ba£
 = 
ba£_¨g
;

116 
uöt64_t
 
dpid
 = 0;

117 
timevÆ
 
upd©e_tv
 = { 
CLI_TIMER_INIT_TS
, 
CLI_TIMER_INIT_TUS
 };

119 
	`c_log_debug
("%s", 
FN
);

121 
˛i
 = 
	`ˇŒoc
(1, (
˛i_°ru˘_t
));

122 
	`as£π
(
˛i
);

124 
	`c_rw_lock_öô
(&
˛i
->
lock
);

125 
˛i
->
ba£
 = base;

127 
˛i
->
mul_£rvi˚
 = 
	`mul_≠p_gë_£rvi˚_nŸify
(
MUL_CORE_SERVICE_NAME
,

128 
mul_c‹e_£rvi˚_c⁄n_evít
,

129 
Ál£
);

130 i‡(
˛i
->
mul_£rvi˚
 =
NULL
) {

131 
	`c_log_îr
("%s: Mu»c‹ê£rvi˚ in°™tüti⁄ faûed", 
FN
);

133 
˛i
->
å_£rvi˚
 = 
	`mul_≠p_gë_£rvi˚_nŸify
(
MUL_TR_SERVICE_NAME
,

134 
mul_å_£rvi˚_c⁄n_evít
,

135 
Ál£
);

136 i‡(
˛i
->
å_£rvi˚
 =
NULL
) {

137 
	`c_log_îr
("%s: Mu»TR sîvi˚ in°™tüti⁄ faûed", 
FN
);

139 
˛i
->
Áb_£rvi˚
 = 
	`mul_≠p_gë_£rvi˚_nŸify
(
MUL_FAB_CLI_SERVICE_NAME
,

140 
mul_Áb_£rvi˚_c⁄n_evít
,

141 
Ál£
);

142 i‡(
˛i
->
Áb_£rvi˚
 =
NULL
) {

143 
	`c_log_îr
("%s: Mu»Áb sîvi˚ in°™tüti⁄ faûed", 
FN
);

146 
˛i
->
˛i_li°
 = 
	`g_¶i°_≠≥nd
(cli->cli_list, "mul-core");

147 
˛i
->
˛i_li°
 = 
	`g_¶i°_≠≥nd
(cli->cli_list, "mul-tr");

148 
˛i
->
˛i_li°
 = 
	`g_¶i°_≠≥nd
(cli->cli_list, "mul-fab");

150 
˛i
->
timî_evít
 = 
	`evtimî_√w
(
ba£
, 
˛i_timî
, (*)cli);

151 
	`evtimî_add
(
˛i
->
timî_evít
, &
upd©e_tv
);

153 
	`mul_ªgi°î_≠p
(
NULL
, 
CLI_APP_NAME
, 0, 0, 1, &
dpid
, 
˛i_evít_nŸifõr
);

156 
	}
}

158 
cmd_node
 
	gmul_c⁄f_node
 =

160 
MUL_NODE
,

163 
NULL
,

164 
NULL


167 
cmd_node
 
	gå_c⁄f_node
 =

169 
MULTR_NODE
,

172 
NULL
,

173 
NULL


176 
cmd_node
 
	gÁb_c⁄f_node
 =

178 
MULFAB_NODE
,

181 
NULL
,

182 
NULL


185 
cmd_node
 
	gÊow_a˘i⁄s_node
 =

187 
FLOW_NODE
,

190 
NULL
,

191 
NULL


194 
DEFUN
 (
mul_c⁄f
,

195 
mul_c⁄f_cmd
,

199 i‡(!
	g˛i
->
	gmul_£rvi˚
) {

200 
	g˛i
->
	gmul_£rvi˚
 = 
mul_≠p_gë_£rvi˚_nŸify
(
MUL_CORE_SERVICE_NAME
,

201 
mul_c‹e_£rvi˚_c⁄n_evít
,

202 
Ál£
);

203 i‡(!
	g˛i
->
	gmul_£rvi˚
) {

204 
vty_out
(
vty
, "mul-core service isÇotálive");

205  
	gCMD_WARNING
;

209 
	gvty
->
	gnode
 = 
MUL_NODE
;

210  
	gCMD_SUCCESS
;

213 
DEFUN
 (
mul_c⁄f_exô
,

214 
mul_c⁄f_exô_cmd
,

218 i‡(
	g˛i
->
	gmul_£rvi˚
) {

219 
mul_≠p_de°roy_£rvi˚
(
˛i
->
mul_£rvi˚
);

220 
	g˛i
->
	gmul_£rvi˚
 = 
NULL
;

222 
	gvty
->
	gnode
 = 
ENABLE_NODE
;

223  
	gCMD_SUCCESS
;

226 
DEFUN
 (
mul_å_c⁄f
,

227 
mul_å_c⁄f_cmd
,

231 i‡(!
	g˛i
->
	gå_£rvi˚
) {

232 
	g˛i
->
	gå_£rvi˚
 = 
mul_≠p_gë_£rvi˚_nŸify
(
MUL_TR_SERVICE_NAME
,

233 
mul_å_£rvi˚_c⁄n_evít
,

234 
Ál£
);

235 i‡(!
	g˛i
->
	gå_£rvi˚
) {

236  
	gCMD_WARNING
;

240 
	gvty
->
	gnode
 = 
MULTR_NODE
;

241  
	gCMD_SUCCESS
;

244 
DEFUN
 (
mul_å_c⁄f_exô
,

245 
mul_å_c⁄f_exô_cmd
,

249 i‡(
	g˛i
->
	gå_£rvi˚
) {

250 
mul_≠p_de°roy_£rvi˚
(
˛i
->
å_£rvi˚
);

251 
	g˛i
->
	gå_£rvi˚
 = 
NULL
;

253 
	gvty
->
	gnode
 = 
ENABLE_NODE
;

254  
	gCMD_SUCCESS
;

258 
DEFUN
 (
mul_Áb_c⁄f
,

259 
mul_Áb_c⁄f_cmd
,

263 i‡(!
	g˛i
->
	gÁb_£rvi˚
) {

264 
	g˛i
->
	gÁb_£rvi˚
 = 
mul_≠p_gë_£rvi˚_nŸify
(
MUL_FAB_CLI_SERVICE_NAME
,

265 
mul_Áb_£rvi˚_c⁄n_evít
,

266 
Ál£
);

267 i‡(!
	g˛i
->
	gÁb_£rvi˚
) {

268  
	gCMD_WARNING
;

272 
	gvty
->
	gnode
 = 
MULFAB_NODE
;

273  
	gCMD_SUCCESS
;

276 
DEFUN
 (
mul_Áb_c⁄f_exô
,

277 
mul_Áb_c⁄f_exô_cmd
,

281 i‡(
	g˛i
->
	gÁb_£rvi˚
) {

282 
mul_≠p_de°roy_£rvi˚
(
˛i
->
Áb_£rvi˚
);

283 
	g˛i
->
	gÁb_£rvi˚
 = 
NULL
;

285 
	gvty
->
	gnode
 = 
ENABLE_NODE
;

286  
	gCMD_SUCCESS
;

289 
DEFUN
 (
Êow_a˘i⁄s
,

290 
Êow_a˘i⁄s_cmd
,

295 
	gvty
->
	gnode
 = 
FLOW_NODE
;

297  
	gCMD_SUCCESS
;

300 
DEFUN
 (
show_of_swôch
,

301 
show_of_swôch_cmd
,

303 
SHOW_STR


307 
cbuf
 *
	gb
;

308 *
	gpbuf
 = 
NULL
;

310 
vty_out
 (
vty
,

313 
VTY_NEWLINE
, VTY_NEWLINE);

315 
vty_out
 (
vty
,

318 
VTY_NEWLINE
, VTY_NEWLINE);

320 
	gb
 = 
mul_gë_swôches_brõf
(
˛i
->
mul_£rvi˚
);

321 i‡(
	gb
) {

322 
	gpbuf
 = 
mul_dump_swôches_brõf
(
b
, 
åue
);

323 i‡(
	gpbuf
) {

324 
vty_out
 (
vty
, "%s", 
pbuf
);

325 
‰ì
(
pbuf
);

329 
vty_out
 (
vty
,

332 
VTY_NEWLINE
, VTY_NEWLINE);

334  
	gCMD_SUCCESS
;

338 
DEFUN
 (
show_of_swôch_dëaû
,

339 
show_of_swôch_dëaû_cmd
,

341 
SHOW_STR


346 
uöt64_t
 
	gdp_id
;

347 
cbuf
 *
	gb
;

348 * 
	gpbuf
;

350 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

352 
vty_out
 (
vty
,

355 
VTY_NEWLINE
, VTY_NEWLINE);

358 
	gb
 = 
mul_gë_swôch_dëaû
(
˛i
->
mul_£rvi˚
, 
dp_id
);

359 i‡(
	gb
) {

360 
	gpbuf
 = 
mul_dump_swôch_dëaû
(
b
, 
åue
);

361 i‡(
	gpbuf
) {

362 
vty_out
 (
vty
, "%s", 
pbuf
);

363 
‰ì
(
pbuf
);

367 
vty_out
 (
vty
,

370 
VTY_NEWLINE
, VTY_NEWLINE);

372  
	gCMD_SUCCESS
;

376 
DEFUN
 (
show_of_swôch_Êow
,

377 
show_of_swôch_Êow_cmd
,

379 
SHOW_STR


384 
uöt64_t
 
	gdp_id
;

386 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

388 
mul_gë_Êow_öfo
(
˛i
->
mul_£rvi˚
, 
dp_id
, 
Ál£
,

389 
Ál£
, 
vty
, 
vty_dump
);

391  
	gCMD_SUCCESS
;

395 
DEFUN
 (
show_of_Êow_Æl
,

396 
show_of_Êow_Æl_cmd
,

398 
SHOW_STR


402 
mul_gë_Êow_öfo
(
˛i
->
mul_£rvi˚
, 0, 
Ál£
,

403 
Ál£
, 
vty
, 
vty_dump
);

405  
	gCMD_SUCCESS
;

408 
DEFUN
 (
show_of_swôch_Êow_°©ic
,

409 
show_of_swôch_Êow_°©ic_cmd
,

411 
SHOW_STR


416 
uöt64_t
 
	gdp_id
;

418 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

420 
mul_gë_Êow_öfo
(
˛i
->
mul_£rvi˚
, 
dp_id
, 
åue
,

421 
Ál£
, 
vty
, 
vty_dump
);

423  
	gCMD_SUCCESS
;

426 
DEFUN
 (
show_of_Êow_Æl_°©ic
,

427 
show_of_Êow_Æl_°©ic_cmd
,

429 
SHOW_STR


433 
mul_gë_Êow_öfo
(
˛i
->
mul_£rvi˚
, 0, 
åue
,

434 
Ál£
, 
vty
, 
vty_dump
);

436  
	gCMD_SUCCESS
;

440 
DEFUN
 (
of_Êow_vty_dñ
,

441 
of_Êow_vty_dñ_cmd
,

475 
	gi
;

476 
uöt64_t
 
	gdp_id
;

477 
Êow
 *
	gÊow
;

478 
	gªt
;

479 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

480 
uöt32_t
 
	gwûdˇrds
 = 0;

481 
¥efix_ùv4
 
	gd°_p
, 
	g§c_p
;

482 
uöt32_t
 
	gnmask
;

484 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

485 
as£π
(
Êow
);

487 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

489 
	gªt
 = 
°r2¥efix
(
¨gv
[1], (*)&
d°_p
);

490 i‡(
	gªt
 <= 0) {

491 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

492 
	g‰ì_îr_out
;

495 i‡(
	gd°_p
.
	g¥efixÀn
) {

496 
	gnmask
 = 
make_öë_mask
(
d°_p
.
¥efixÀn
);

497 
	gwûdˇrds
 |((32 - 
d°_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_DST_BITS
)-1))

498 << 
OFPFW_NW_DST_SHIFT
;

500 
	gwûdˇrds
 |
OFPFW_NW_DST_ALL
;

501 
	gnmask
 = ~0;

505 
	gÊow
->
	gnw_d°
 = 
d°_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

507 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
§c_p
);

508 i‡(
	gªt
 <= 0) {

509 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

510 
	g‰ì_îr_out
;

513 i‡(
	g§c_p
.
	g¥efixÀn
) {

514 
	gnmask
 = (
make_öë_mask
(
§c_p
.
¥efixÀn
));

515 
	gwûdˇrds
 |((32 - 
§c_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_SRC_BITS
)-1))

516 << 
OFPFW_NW_SRC_SHIFT
;

518 
	gwûdˇrds
 |
OFPFW_NW_SRC_ALL
;

519 
	gnmask
 = ~0;

522 
	gÊow
->
	gnw_§c
 = 
§c_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

524 i‡(!
°∫cmp
(
¨gv
[3], "*", 
°æí
(argv[3]))) {

525 
	gÊow
->
	gnw_¥Ÿo
 = 0;

526 
	gwûdˇrds
 |
OFPFW_NW_PROTO
;

528 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

532 i‡(!
°∫cmp
(
¨gv
[4], "*", 
°æí
(argv[4]))) {

533 
	gÊow
->
	gnw_tos
 = 0;

534 
	gwûdˇrds
 |
OFPFW_NW_TOS
;

536 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

539 i‡(!
°∫cmp
(
¨gv
[5], "*", 
°æí
(argv[5]))) {

540 
	gÊow
->
	gç_d°
 = 0;

541 
	gwûdˇrds
 |
OFPFW_TP_DST
;

543 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

546 i‡(!
°∫cmp
(
¨gv
[6], "*", 
°æí
(argv[6]))) {

547 
	gÊow
->
	gç_§c
 = 0;

548 
	gwûdˇrds
 |
OFPFW_TP_SRC
;

550 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

553 i‡(!
°∫cmp
(
¨gv
[7], "*", 
°æí
(argv[7]))) {

554 
mem£t
(&
Êow
->
dl_§c
, 0, 6);

555 
	gwûdˇrds
 |
OFPFW_DL_SRC
;

557 
	gmac_°r
 = (*)
¨gv
[7];

558 
	gi
 = 0; i < 6; i++) {

559 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

560 if(
	gmac_°r
 =
√xt
)

562 
	gmac_°r
 = 
√xt
 + 1;

565 i‡(
	gi
 != 6) {

566 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

567 
	g‰ì_îr_out
;

572 i‡(!
°∫cmp
(
¨gv
[8], "*", 
°æí
(argv[8]))) {

573 
mem£t
(&
Êow
->
dl_d°
, 0, 6);

574 
	gwûdˇrds
 |
OFPFW_DL_DST
;

576 
	gmac_°r
 = (*)
¨gv
[8];

577 
	gi
 = 0; i < 6; i++) {

578 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

579 if(
	gmac_°r
 =
√xt
)

581 
	gmac_°r
 = 
√xt
 + 1;

584 i‡(
	gi
 != 6) {

585 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

586 
	g‰ì_îr_out
;

590 i‡(!
°∫cmp
(
¨gv
[9], "*", 
°æí
(argv[9]))) {

591 
	gÊow
->
	gdl_ty≥
 = 0;

592 
	gwûdˇrds
 |
OFPFW_DL_TYPE
;

594 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

597 i‡(!
°∫cmp
(
¨gv
[10], "*", 
°æí
(argv[10]))) {

598 
	gÊow
->
	gdl_vœn
 = 0;

599 
	gwûdˇrds
 |
OFPFW_DL_VLAN
;

601 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

604 i‡(!
°∫cmp
(
¨gv
[11], "*", 
°æí
(argv[11]))) {

605 
	gÊow
->
	gdl_vœn_p˝
 = 0;

606 
	gwûdˇrds
 |
OFPFW_DL_VLAN_PCP
;

608 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

611 i‡(!
°∫cmp
(
¨gv
[12], "*", 
°æí
(argv[12]))) {

612 
	gÊow
->
	gö_p‹t
 = 0;

613 
	gwûdˇrds
 |
OFPFW_IN_PORT
;

615 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

618 
mul_£rvi˚_£nd_Êow_dñ
(
˛i
->
mul_£rvi˚
, 
dp_id
, 
Êow
, 
wûdˇrds
,

619 
OFPP_NONE
, 
C_FL_PRIO_DFL
, 
C_FL_ENT_STATIC
);

621 i‡(
c_£rvi˚_timed_throw_ª•
(
˛i
->
mul_£rvi˚
) > 0) {

622 
vty_out
(
vty
, "FailedÅo deleteá flow. CheckÜog messages%s",

623 
VTY_NEWLINE
);

626 
‰ì
(
Êow
);

628  
	gCMD_SUCCESS
;

630 
	g‰ì_îr_out
:

631 
‰ì
(
Êow
);

632  
	gCMD_WARNING
;

636 
DEFUN_NOSH
 (
of_Êow_vty_add
,

637 
of_Êow_vty_add_cmd
,

671 
	gi
;

672 
Êow
 *
	gÊow
;

673 
	gªt
;

674 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

675 
uöt32_t
 
	gwûdˇrds
 = 0;

676 
¥efix_ùv4
 
	gd°_p
, 
	g§c_p
;

677 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
;

678 
uöt32_t
 
	gnmask
;

680 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

681 
as£π
(
Êow
);

683 
	g¨gs
 = 
ˇŒoc
(1, (*
¨gs
));

684 
as£π
(
¨gs
);

686 
	g¨gs
->
	ga˘i⁄s
 = 
ˇŒoc
(1, 
OF_MAX_ACTION_LEN
);

687 
	g¨gs
->
	ga˘i⁄_Àn
 = 0;

689 
	g¨gs
->
	gdpid
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

691 
	gªt
 = 
°r2¥efix
(
¨gv
[1], (*)&
d°_p
);

692 i‡(
	gªt
 <= 0) {

693 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

694 
	g‰ì_îr_out
;

697 i‡(
	gd°_p
.
	g¥efixÀn
) {

698 
	gnmask
 = 
make_öë_mask
(
d°_p
.
¥efixÀn
);

699 
	gwûdˇrds
 |((32 - 
d°_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_DST_BITS
)-1))

700 << 
OFPFW_NW_DST_SHIFT
;

703 
	gwûdˇrds
 |
OFPFW_NW_DST_ALL
;

704 
	gnmask
 = ~0;

708 
	gÊow
->
	gnw_d°
 = 
d°_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

710 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
§c_p
);

711 i‡(
	gªt
 <= 0) {

712 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

713 
	g‰ì_îr_out
;

716 i‡(
	g§c_p
.
	g¥efixÀn
) {

717 
	gnmask
 = (
make_öë_mask
(
§c_p
.
¥efixÀn
));

718 
	gwûdˇrds
 |((32 - 
§c_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_SRC_BITS
)-1))

719 << 
OFPFW_NW_SRC_SHIFT
;

722 
	gwûdˇrds
 |
OFPFW_NW_SRC_ALL
;

723 
	gnmask
 = ~0;

726 
	gÊow
->
	gnw_§c
 = 
§c_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

728 i‡(!
°∫cmp
(
¨gv
[3], "*", 
°æí
(argv[3]))) {

729 
	gÊow
->
	gnw_¥Ÿo
 = 0;

730 
	gwûdˇrds
 |
OFPFW_NW_PROTO
;

732 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

736 i‡(!
°∫cmp
(
¨gv
[4], "*", 
°æí
(argv[4]))) {

737 
	gÊow
->
	gnw_tos
 = 0;

738 
	gwûdˇrds
 |
OFPFW_NW_TOS
;

740 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

743 i‡(!
°∫cmp
(
¨gv
[5], "*", 
°æí
(argv[5]))) {

744 
	gÊow
->
	gç_d°
 = 0;

745 
	gwûdˇrds
 |
OFPFW_TP_DST
;

747 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

750 i‡(!
°∫cmp
(
¨gv
[6], "*", 
°æí
(argv[6]))) {

751 
	gÊow
->
	gç_§c
 = 0;

752 
	gwûdˇrds
 |
OFPFW_TP_SRC
;

754 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

757 i‡(!
°∫cmp
(
¨gv
[7], "*", 
°æí
(argv[7]))) {

758 
mem£t
(&
Êow
->
dl_§c
, 0, 6);

759 
	gwûdˇrds
 |
OFPFW_DL_SRC
;

761 
	gmac_°r
 = (*)
¨gv
[7];

762 
	gi
 = 0; i < 6; i++) {

763 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

764 if(
	gmac_°r
 =
√xt
)

766 
	gmac_°r
 = 
√xt
 + 1;

769 i‡(
	gi
 != 6) {

770 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

771 
	g‰ì_îr_out
;

776 i‡(!
°∫cmp
(
¨gv
[8], "*", 
°æí
(argv[8]))) {

777 
mem£t
(&
Êow
->
dl_d°
, 0, 6);

778 
	gwûdˇrds
 |
OFPFW_DL_DST
;

780 
	gmac_°r
 = (*)
¨gv
[8];

781 
	gi
 = 0; i < 6; i++) {

782 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

783 if(
	gmac_°r
 =
√xt
)

785 
	gmac_°r
 = 
√xt
 + 1;

788 i‡(
	gi
 != 6) {

789 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

790 
	g‰ì_îr_out
;

794 i‡(!
°∫cmp
(
¨gv
[9], "*", 
°æí
(argv[9]))) {

795 
	gÊow
->
	gdl_ty≥
 = 0;

796 
	gwûdˇrds
 |
OFPFW_DL_TYPE
;

798 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

801 i‡(!
°∫cmp
(
¨gv
[10], "*", 
°æí
(argv[10]))) {

802 
	gÊow
->
	gdl_vœn
 = 0;

803 
	gwûdˇrds
 |
OFPFW_DL_VLAN
;

805 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

808 i‡(!
°∫cmp
(
¨gv
[11], "*", 
°æí
(argv[11]))) {

809 
	gÊow
->
	gdl_vœn_p˝
 = 0;

810 
	gwûdˇrds
 |
OFPFW_DL_VLAN_PCP
;

812 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

815 i‡(!
°∫cmp
(
¨gv
[12], "*", 
°æí
(argv[12]))) {

816 
	gÊow
->
	gö_p‹t
 = 0;

817 
	gwûdˇrds
 |
OFPFW_IN_PORT
;

819 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

823 *
	gÊ_°r
 = 
of_dump_Êow
(
Êow
);

824 
¥ötf
 ("%s\n", 
Ê_°r
);

825 
¥ötf
 ("0x%x\n", 
wûdˇrds
);

826 
‰ì
(
Ê_°r
);

829 
	gwûdˇrds
 = 
ht⁄l
(
wûdˇrds
);

830 
of_Êow_c‹ª˘i⁄
(
Êow
, &
wûdˇrds
);

832 
	g¨gs
->
	gÊ
 = 
Êow
;

833 
	g¨gs
->
	gwûdˇrds
 = 
¡ohl
(
wûdˇrds
);

835 
	gvty
->
	gödex
 = 
¨gs
;

837 i‡((
	gªt
 = 
Êow_a˘i⁄s_cmd
.
func
(
£lf
, 
vty
, 
¨gc
, 
¨gv
)Ë!
CMD_SUCCESS
) {

838 
‰ì_îr_out
;

841  
	gCMD_SUCCESS
;

843 
	g‰ì_îr_out
:

844 
‰ì
(
¨gs
);

845 
‰ì
(
Êow
);

846  
	gCMD_WARNING
;

849 
DEFUN
 (
of_add_ouçut_a˘i⁄
,

850 
of_add_ouçut_a˘i⁄_cmd
,

856 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

857 
uöt8_t
 *
	ga˘_wr_±r
;

859 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

860 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_ouçut
((**)&
a˘_wr_±r
,

861 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

862 
©oi
(
¨gv
[0]));

864  
	gCMD_SUCCESS
;

867 
DEFUN
 (
of_add_£t_vid_a˘i⁄
,

868 
of_add_£t_vid_a˘i⁄_cmd
,

874 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

875 
uöt8_t
 *
	ga˘_wr_±r
;

877 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

878 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_vid
((**)&
a˘_wr_±r
,

879 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

880 
°πouŒ
(
¨gv
[0], 
NULL
, 10));

882  
	gCMD_SUCCESS
;

885 
DEFUN
 (
of_add_°rù_vœn_a˘i⁄
,

886 
of_add_°rù_vœn_a˘i⁄_cmd
,

891 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

892 
uöt8_t
 *
	ga˘_wr_±r
;

894 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

895 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_°rù_vœn
((**)&
a˘_wr_±r
,

896 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
);

898  
	gCMD_SUCCESS
;

901 
DEFUN
 (
of_add_£t_vp˝_a˘i⁄
,

902 
of_add_£t_vp˝_a˘i⁄_cmd
,

908 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

909 
uöt8_t
 *
	ga˘_wr_±r
;

911 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

912 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_vœn_p˝
((**)&
a˘_wr_±r
,

913 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

914 
°πouŒ
(
¨gv
[0], 
NULL
, 10));

916  
	gCMD_SUCCESS
;

919 
DEFUN
 (
of_add_£t_dmac_a˘i⁄
,

920 
of_add_£t_dmac_a˘i⁄_cmd
,

926 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

927 
uöt8_t
 *
	ga˘_wr_±r
;

928 
uöt8_t
 
	gdmac
[6];

929 *
	gmac_°r
, *
	g√xt
 = 
NULL
;

930 
	gi
 = 0;

933 
	gmac_°r
 = (*)
¨gv
[0];

934 
	gi
 = 0; i < 6; i++) {

935 
	gdmac
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

936 if(
	gmac_°r
 =
√xt
)

938 
	gmac_°r
 = 
√xt
 + 1;

941 i‡(
	gi
 != 6) {

942 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

943  
	gCMD_WARNING
;

947 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

948 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_dmac
((**)&
a˘_wr_±r
,

949 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

950 
dmac
);

952  
	gCMD_SUCCESS
;

955 
DEFUN
 (
of_add_£t_smac_a˘i⁄
,

956 
of_add_£t_smac_a˘i⁄_cmd
,

962 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

963 
uöt8_t
 *
	ga˘_wr_±r
;

964 
uöt8_t
 
	gsmac
[6];

965 *
	gmac_°r
, *
	g√xt
 = 
NULL
;

966 
	gi
 = 0;

969 
	gmac_°r
 = (*)
¨gv
[0];

970 
	gi
 = 0; i < 6; i++) {

971 
	gsmac
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

972 if(
	gmac_°r
 =
√xt
)

974 
	gmac_°r
 = 
√xt
 + 1;

977 i‡(
	gi
 != 6) {

978 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

979  
	gCMD_WARNING
;

983 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

984 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_smac
((**)&
a˘_wr_±r
,

985 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

986 
smac
);

988  
	gCMD_SUCCESS
;

991 
DEFUN
 (
of_add_£t_nw_ßddr_a˘i⁄
,

992 
of_add_£t_nw_ßddr_a˘i⁄_cmd
,

998 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

999 
uöt8_t
 *
	ga˘_wr_±r
;

1000 
ö_addr
 
	gù_addr
;

1002 i‡(
öë_©⁄
(
¨gv
[0], &
ù_addr
) <= 0) {

1003 
vty_out
(
vty
, "MÆf‹med i∞addªss%s", 
VTY_NEWLINE
);

1004  
	gCMD_WARNING
;

1006 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

1007 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_nw_ßddr
((**)&
a˘_wr_±r
,

1008 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

1009 
¡ohl
(
ù_addr
.
s_addr
));

1011  
	gCMD_SUCCESS
;

1014 
DEFUN
 (
of_add_£t_nw_daddr_a˘i⁄
,

1015 
of_add_£t_nw_daddr_a˘i⁄_cmd
,

1021 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

1022 
uöt8_t
 *
	ga˘_wr_±r
;

1023 
ö_addr
 
	gù_addr
;

1025 i‡(
öë_©⁄
(
¨gv
[0], &
ù_addr
) <= 0) {

1026 
vty_out
(
vty
, "MÆf‹med i∞addªss%s", 
VTY_NEWLINE
);

1027  
	gCMD_WARNING
;

1029 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

1030 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_nw_daddr
((**)&
a˘_wr_±r
,

1031 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

1032 
¡ohl
(
ù_addr
.
s_addr
));

1034  
	gCMD_SUCCESS
;

1037 
DEFUN
 (
of_add_dr›_a˘i⁄
,

1038 
of_add_dr›_a˘i⁄_cmd
,

1043 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

1046 
	g¨gs
->
	gdr›_pkt
 = 
åue
;

1048  
	gCMD_SUCCESS
;

1051 
DEFUN
 (
Êow_a˘i⁄s_commô
,

1052 
Êow_a˘i⁄s_commô_cmd
,

1056 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

1057 *
	ga˘i⁄s
 = 
NULL
;

1058 
uöt8_t
 
	g¥io
;

1059 
size_t
 
	ga˘i⁄_Àn
 = 0;

1061 i‡(
	g¨gs
) {

1062 i‡(
	g¨gs
->
	ga˘i⁄_Àn
 >4 || 
¨gs
->
dr›_pkt
) {

1065 i‡(!
¨gs
->
dr›_pkt
) {

1066 
a˘i⁄s
 = 
¨gs
->actions;

1067 
	ga˘i⁄_Àn
 = 
¨gs
->
a˘i⁄_Àn
;

1068 
	g¥io
 = 
C_FL_PRIO_DFL
;

1073 
	g¥io
 = 
C_FL_PRIO_DFL
;

1074 
vty_out
(
vty
, "IgnoringállÇon-dropáctions ifány%s",

1075 
VTY_NEWLINE
);

1077 
mul_£rvi˚_£nd_Êow_add
(
˛i
->
mul_£rvi˚
, 
¨gs
->
dpid
,

1078 
¨gs
->
Ê
, 
CLI_UNK_BUFFER_ID
,

1079 
a˘i⁄s
, 
a˘i⁄_Àn
,

1080 0, 0, 
¨gs
->
wûdˇrds
,

1081 
¥io
, 
C_FL_ENT_STATIC
);

1082 i‡(
c_£rvi˚_timed_throw_ª•
(
˛i
->
mul_£rvi˚
) > 0) {

1083 
vty_out
(
vty
, "FailedÅoáddá flow. CheckÜog messages%s",

1084 
VTY_NEWLINE
);

1087 
vty_out
(
vty
, "Nÿa˘i⁄†added.FlowÇŸádded%s", 
VTY_NEWLINE
);

1090 i‡(
	g¨gs
->
	gÊ
) {

1091 
‰ì
(
¨gs
->
Ê
);

1093 i‡(
	g¨gs
->
	ga˘i⁄s
) {

1094 
‰ì
(
¨gs
->
a˘i⁄s
);

1096 
‰ì
(
¨gs
);

1097 
	gvty
->
	gödex
 = 
NULL
;

1100 
	gvty
->
	gnode
 = 
MUL_NODE
;

1101  
	gCMD_SUCCESS
;

1106 
DEFUN
 (
Êow_a˘i⁄s_exô
,

1107 
Êow_a˘i⁄s_exô_cmd
,

1111 
˛i_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

1113 i‡(
	g¨gs
) {

1114 i‡(
	g¨gs
->
	gÊ
Ë
‰ì
(
¨gs
->
Ê
);

1115 i‡(
	g¨gs
->
	ga˘i⁄s
Ë
‰ì
(
¨gs
->
a˘i⁄s
);

1116 
‰ì
(
¨gs
);

1119 
	gvty
->
	gnode
 = 
MUL_NODE
;

1120  
	gCMD_SUCCESS
;

1124 
DEFUN
 (
show_√igh_swôch_dëaû
,

1125 
show_√igh_swôch_dëaû_cmd
,

1127 
SHOW_STR


1131 
uöt64_t
 
	gdpid
;

1132 
cbuf
 *
	gb
;

1133 *
	gpbuf
 = 
NULL
;

1135 
	gdpid
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

1138 
vty_out
 (
vty
,

1141 
VTY_NEWLINE
);

1142 
vty_out
 (
vty
,"%12s | %10s | %10s | %s%s","port #","status","neighbor #",

1143 "√ighb‹Ö‹à#",
VTY_NEWLINE
);

1144 
vty_out
 (
vty
,

1147 
VTY_NEWLINE
);

1148 
	gb
 = 
mul_√igh_gë
(
˛i
->
å_£rvi˚
, 
dpid
);

1149 i‡(
	gb
) {

1150 
	gpbuf
 = 
mul_dump_√igh
(
b
, 
åue
);

1151 i‡(
	gpbuf
) {

1152 
vty_out
(
vty
, "%s", 
pbuf
);

1153 
‰ì
(
pbuf
);

1157 
vty_out
 (
vty
,

1160 
VTY_NEWLINE
, VTY_NEWLINE);

1163  
	gCMD_SUCCESS
;

1168 
	$__add_Áb_ho°_cmd
(
vty
 *vty, c⁄° **
¨gv
, 
boﬁ
 
is_gw
)

1170 
uöt16_t
 
ã«¡_id
;

1171 
uöt16_t
 
√tw‹k_id
;

1172 
uöt64_t
 
dpid
;

1173 
Êow
 
Ê
;

1174 
¥efix_ùv4
 
ho°_ù
;

1175 *
mac_°r
 = 
NULL
, *
√xt
 = NULL;

1176 
i
 = 0, 
ªt
 = 0;

1178 
	`mem£t
(&
Ê
, 0, (fl));

1180 
ã«¡_id
 = 
	`©oi
(
¨gv
[0]);

1181 
√tw‹k_id
 = 
	`©oi
(
¨gv
[1]);

1182 
dpid
 = 
	`°πouŒ
(
¨gv
[4], 
NULL
, 16);

1183 
Ê
.
ö_p‹t

	`ht⁄s
(
	`©oi
(
¨gv
[5]));

1185 
ªt
 = 
	`°r2¥efix
(
¨gv
[2], (*)&
ho°_ù
);

1186 i‡(
ªt
 <= 0) {

1187 
	`vty_out
(
vty
, "MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1188  
CMD_WARNING
;

1191 
Ê
.
nw_§c
 = 
ho°_ù
.
¥efix
.
s_addr
;

1192 
	`Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
ã«¡_id
);

1193 
	`Áb_add_√tw‹k_id
(&
Ê
, 
√tw‹k_id
);

1194 
Ê
.
FL_DFL_GW
 = 
is_gw
;

1196 
mac_°r
 = (*)
¨gv
[3];

1197 
i
 = 0; i < 6; i++) {

1198 
Ê
.
dl_§c
[
i
] = (
uöt8_t
)
	`°πoul
(
mac_°r
, &
√xt
, 16);

1199 if(
mac_°r
 =
√xt
)

1201 
mac_°r
 = 
√xt
 + 1;

1204 i‡(
i
 != 6) {

1205 
	`vty_out
(
vty
, "MÆf‹med mac-addªss%s", 
VTY_NEWLINE
);

1206  
CMD_WARNING
;

1209 i‡(
	`mul_Ábric_ho°_mod
(
˛i
->
Áb_£rvi˚
, 
dpid
, &
Ê
, 
åue
)) {

1210 
	`vty_out
(
vty
, "Ho°-add faûed %s", 
VTY_NEWLINE
);

1211  
CMD_WARNING
;

1214  
CMD_SUCCESS
;

1215 
	}
}

1217 
DEFUN
 (
add_Áb_ho°_n⁄gw
,

1218 
add_Áb_ho°_n⁄gw_cmd
,

1239  
__add_Áb_ho°_cmd
(
vty
, 
¨gv
, 
Ál£
);

1242 
DEFUN
 (
add_Áb_ho°_gw
,

1243 
add_Áb_ho°_gw_cmd
,

1264  
__add_Áb_ho°_cmd
(
vty
, 
¨gv
, 
åue
);

1268 
DEFUN
 (
dñ_Áb_ho°
,

1269 
dñ_Áb_ho°_cmd
,

1281 
uöt16_t
 
	gã«¡_id
;

1282 
uöt16_t
 
	g√tw‹k_id
;

1283 
Êow
 
	gÊ
;

1284 
¥efix_ùv4
 
	gho°_ù
;

1285 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

1286 
	gi
 = 0, 
	gªt
 = 0;

1288 
mem£t
(&
Ê
, 0, (fl));

1290 
	gã«¡_id
 = 
©oi
(
¨gv
[0]);

1291 
	g√tw‹k_id
 = 
©oi
(
¨gv
[1]);

1293 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
ho°_ù
);

1294 i‡(
	gªt
 <= 0) {

1295 
vty_out
(
vty
, "MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1296  
	gCMD_WARNING
;

1299 
	gÊ
.
	gnw_§c
 = 
ho°_ù
.
¥efix
.
s_addr
;

1300 
Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
ã«¡_id
);

1301 
Áb_add_√tw‹k_id
(&
Ê
, 
√tw‹k_id
);

1303 
	gmac_°r
 = (*)
¨gv
[3];

1304 
	gi
 = 0; i < 6; i++) {

1305 
	gÊ
.
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

1306 if(
	gmac_°r
 =
√xt
)

1308 
	gmac_°r
 = 
√xt
 + 1;

1311 i‡(
	gi
 != 6) {

1312 
vty_out
(
vty
, "MÆf‹med mac-addªss%s", 
VTY_NEWLINE
);

1313  
	gCMD_WARNING
;

1316 i‡(
mul_Ábric_ho°_mod
(
˛i
->
Áb_£rvi˚
, 0, &
Ê
, 
Ál£
)) {

1317 
vty_out
(
vty
, "Ho° dñëêÁûed%s", 
VTY_NEWLINE
);

1318  
	gCMD_WARNING
;

1321  
	gCMD_SUCCESS
;

1324 
DEFUN
 (
show_Áb_ho°_Æl_a˘ive
,

1325 
show_Áb_ho°_Æl_a˘ive_cmd
,

1327 
SHOW_STR


1331 
vty_out
 (
vty
,

1335 
VTY_NEWLINE
);

1337 
mul_Ábric_show_ho°s
(
˛i
->
Áb_£rvi˚
, 
åue
, 
Ál£
,

1338 (*)
vty
, 
vty_dump
);

1340 
vty_out
 (
vty
,

1344 
VTY_NEWLINE
);

1346  
	gCMD_SUCCESS
;

1349 
DEFUN
 (
show_Áb_ho°_Æl_öa˘ive
,

1350 
show_Áb_ho°_Æl_öa˘ive_cmd
,

1352 
SHOW_STR


1356 
vty_out
 (
vty
,

1360 
VTY_NEWLINE
);

1362 
mul_Ábric_show_ho°s
(
˛i
->
Áb_£rvi˚
, 
Ál£
, false,

1363 (*)
vty
, 
vty_dump
);

1366 
vty_out
 (
vty
,

1370 
VTY_NEWLINE
);

1372  
	gCMD_SUCCESS
;

1376 
	$vty_§c_ho°_dump
(*
vty_¨g
, *
pbuf
)

1378 
vty
 *vty = 
vty_¨g
;

1379 
	`vty_out
 (
vty
,

1383 
VTY_NEWLINE
);

1386 
	`vty_out
(
vty
, "%10s:", "Source" );

1387 
	`vty_dump
(
vty
, 
pbuf
);

1388 
	}
}

1391 
	$vty_d°_ho°_dump
(*
vty_¨g
, *
pbuf
)

1393 
vty
 *vty = 
vty_¨g
;

1394 
	`vty_out
(
vty
, "%10s:", "Dest" );

1395 
	`vty_dump
(
vty
, 
pbuf
);

1396 
	}
}

1399 
	$vty_rouã_dump
(*
vty_¨g
, *
pbuf
)

1401 
vty
 *vty = 
vty_¨g
;

1403 
	`vty_out
(
vty
, "%10s:", "Route" );

1404 
	`vty_dump
(
vty
, 
pbuf
);

1405 
	`vty_out
(
vty
, "|||%s", 
VTY_NEWLINE
);

1407 
	`vty_out
 (
vty
,

1411 
VTY_NEWLINE
);

1413 
	}
}

1415 
DEFUN
 (
show_Áb_rouã_Æl
,

1416 
show_Áb_rouã_Æl_cmd
,

1418 
SHOW_STR


1422 
mul_Ábric_show_rouãs
(
˛i
->
Áb_£rvi˚
, 
vty
, 
vty_§c_ho°_dump
,

1423 
vty_d°_ho°_dump
, 
vty_rouã_dump
);

1426  
	gCMD_SUCCESS
;

1436 
	$˛i_moduÀ_vty_öô
(*
¨g
 
UNUSED
)

1438 
	`c_log_debug
("%s:", 
FN
);

1439 
	`ö°Æl_node
(&
mul_c⁄f_node
, 
NULL
);

1440 
	`ö°Æl_node
(&
å_c⁄f_node
, 
NULL
);

1441 
	`ö°Æl_node
(&
Áb_c⁄f_node
, 
NULL
);

1442 
	`ö°Æl_node
(&
Êow_a˘i⁄s_node
, 
NULL
);

1444 
	`ö°Æl_deÁu…
(
MUL_NODE
);

1445 
	`ö°Æl_deÁu…
(
MULTR_NODE
);

1446 
	`ö°Æl_deÁu…
(
MULFAB_NODE
);

1447 
	`ö°Æl_deÁu…
(
FLOW_NODE
);

1448 
	`ö°Æl_ñemít_©å_ty≥
(
CONFIG_NODE
, &
mul_c⁄f_cmd
, 
MUL_NODE
);

1449 
	`ö°Æl_ñemít
(
MUL_NODE
, &
mul_c⁄f_exô_cmd
);

1450 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_cmd
);

1451 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_dëaû_cmd
);

1452 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_Êow_cmd
);

1453 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_Êow_Æl_cmd
);

1454 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_Êow_°©ic_cmd
);

1455 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_Êow_Æl_°©ic_cmd
);

1456 
	`ö°Æl_ñemít
(
MUL_NODE
, &
of_Êow_vty_add_cmd
);

1457 
	`ö°Æl_ñemít
(
MUL_NODE
, &
of_Êow_vty_dñ_cmd
);

1458 
	`ö°Æl_ñemít
(
MUL_NODE
, &
mul_c⁄f_exô_cmd
);

1459 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_ouçut_a˘i⁄_cmd
, 
MUL_NODE
);

1460 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_vid_a˘i⁄_cmd
, 
MUL_NODE
);

1461 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_dmac_a˘i⁄_cmd
, 
MUL_NODE
);

1462 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
Êow_a˘i⁄s_exô_cmd
, 
MUL_NODE
);

1463 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
Êow_a˘i⁄s_commô_cmd
, 
MUL_NODE
);

1464 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_nw_ßddr_a˘i⁄_cmd
, 
MUL_NODE
);

1465 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_nw_daddr_a˘i⁄_cmd
, 
MUL_NODE
);

1466 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_smac_a˘i⁄_cmd
, 
MUL_NODE
);

1467 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_°rù_vœn_a˘i⁄_cmd
, 
MUL_NODE
);

1468 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_£t_vp˝_a˘i⁄_cmd
, 
MUL_NODE
);

1469 
	`ö°Æl_ñemít_©å_ty≥
(
FLOW_NODE
, &
of_add_dr›_a˘i⁄_cmd
, 
MUL_NODE
);

1471 
	`ö°Æl_ñemít_©å_ty≥
(
CONFIG_NODE
, &
mul_å_c⁄f_cmd
, 
MULTR_NODE
);

1472 
	`ö°Æl_ñemít
(
MULTR_NODE
, &
mul_å_c⁄f_exô_cmd
);

1473 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_√igh_swôch_dëaû_cmd
);

1475 
	`ö°Æl_ñemít_©å_ty≥
(
CONFIG_NODE
, &
mul_Áb_c⁄f_cmd
, 
MULFAB_NODE
);

1476 
	`ö°Æl_ñemít
(
MULFAB_NODE
, &
mul_Áb_c⁄f_exô_cmd
);

1477 
	`ö°Æl_ñemít
(
MULFAB_NODE
, &
add_Áb_ho°_gw_cmd
);

1478 
	`ö°Æl_ñemít
(
MULFAB_NODE
, &
add_Áb_ho°_n⁄gw_cmd
);

1479 
	`ö°Æl_ñemít
(
MULFAB_NODE
, &
dñ_Áb_ho°_cmd
);

1480 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_ho°_Æl_a˘ive_cmd
);

1481 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_ho°_Æl_öa˘ive_cmd
);

1482 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_rouã_Æl_cmd
);

1484 
	`ho°_c⁄fig_£t
(
CLI_CONF_FILE
);

1485 
	}
}

1487 
moduÀ_öô
(
˛i_moduÀ_öô
);

1488 
moduÀ_vty_öô
(
˛i_moduÀ_vty_öô
);

	@application/cli/mul_cli.h

19 #i‚de‡
__MUL_CLI_H__


20 
	#__MUL_CLI_H__


	)

22 
	~"c⁄fig.h
"

23 
	~"mul_comm⁄.h
"

24 
	~"mul_vty.h
"

25 
	~"mul_Ábric_£rvÀt.h
"

27 
	#CLI_APP_NAME
 "mul-˛i"

	)

28 
	#CLI_CONF_FILE
 "mul˛i.c⁄f"

	)

30 
	#CLI_TIMER_TS
 (2)

	)

31 
	#CLI_TIMER_TUS
 (0)

	)

33 
	#CLI_TIMER_INIT_TS
 (5)

	)

34 
	#CLI_TIMER_INIT_TUS
 (0)

	)

36 
	#CLI_UNK_BUFFER_ID
 (0xffffffff)

	)

38 
	s˛i_Êow_a˘i⁄_∑rms
 {

39 
uöt64_t
 
	mdpid
;

40 *
	mÊ
;

41 
	#OF_MAX_ACTION_LEN
 (4096)

	)

42 
uöt8_t
 
	ma˘i⁄_Àn
;

43 *
	ma˘i⁄s
;

44 
uöt32_t
 
	mwûdˇrds
;

45 
boﬁ
 
	mdr›_pkt
;

49 
	s˛i_°ru˘
 {

50 
GSLi°
 *
	m˛i_li°
;

51 
c_rw_lock_t
 
	mlock
;

52 *
	mba£
;

53 
boﬁ
 
	möô_evíts_åiggîed
;

54 
evít
 *
	mtimî_evít
;

55 
mul_£rvi˚_t
 *
	mmul_£rvi˚
;

56 
mul_£rvi˚_t
 *
	må_£rvi˚
;

57 
mul_£rvi˚_t
 *
	mÁb_£rvi˚
;

59 
˛i_°ru˘
 
	t˛i_°ru˘_t
;

61 
	s˛i_c⁄fig_wr_¨g
 {

62 
vty
 *
	mvty
;

63 
	mwrôe
;

66 
˛i_moduÀ_öô
(*
˘x
);

67 
˛i_moduÀ_vty_öô
(*
¨g
);

	@application/fabric/mul_fabric.c

19 
	~"mul_Ábric_comm⁄.h
"

21 
Áb_°ru˘_t
 *
	gÁb_˘x
;

29 
	$Áb_timî_evít
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

30 *
¨g
)

32 
Áb_°ru˘_t
 *
Áb_˘x
 = 
¨g
;

33 
timevÆ
 
tv
 = { 
FAB_TIMER_SEC_INT
, 
FAB_TIMER_USEC_INT
};

35 
	`Áb_rouã_≥r_£c_timî
(
Áb_˘x
);

37 
	`evtimî_add
(
Áb_˘x
->
Áb_timî_evít
, &
tv
);

38 
	}
}

46 
	$Áb_pkt_rcv
(*
›q
, 
Áb_°ru˘_t
 *
Áb_˘x
, 
c_oÂ_∑ckë_ö_t
 *
pö
)

48 
	`Áb_À¨n_ho°
(
›q
, 
Áb_˘x
, 
pö
);

49 
	}
}

57 
	$Áb_swôch_add_nŸifõr
(*
›q
, 
Áb_°ru˘_t
 *
Áb_˘x
,

58 
c_oÂ_swôch_add_t
 *
oÂ_ß
)

60 
size_t
 
num_p‹t
;

61 
i
 = 0, 
ªt
 = -1;

62 
oÂ_phy_p‹t
 *
p‹t
;

64 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

65 i‡((
ªt
 = 
	`__Áb_swôch_add
(
Áb_˘x
, 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
),

66 
	`C_GET_ALIAS_IN_SWADD
(
oÂ_ß
)))) {

67 
	`c_log_îr
("%s: Switch(0x%llx)ádd failed",

68 
FN
, 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
));

69 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

73 
num_p‹t
 = ( 
	`¡ohs
((
oÂ_ß
->
hódî
).
Àngth
) -

74 (
c_oÂ_swôch_add_t
ËË/ (
oÂ_phy_p‹t
);

76 
i
 = 0; i < 
num_p‹t
; i++){

77 
p‹t
 = &((
oÂ_phy_p‹t
 *Ë&(
oÂ_ß
[1]))[
i
];

78 
	`__Áb_p‹t_add
(
Áb_˘x
,

79 
	`__Áb_swôch_föd
(
Áb_˘x
, 
	`C_GET_ALIAS_IN_SWADD
(
oÂ_ß
)),

80 
	`¡ohs
(
p‹t
->
p‹t_no
));

83 
	`__Áb_a˘iv©e_Æl_ho°s_⁄_swôch
(
Áb_˘x
, 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
));

85 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

86 
	}
}

95 
	$Áb_swôch_dñëe_nŸifõr
(
Áb_°ru˘_t
 *
Áb_˘x
, 
sw_Æüs
, 
boﬁ
 
locked
)

97 
Áb_swôch_t
 *
sw
;

99 i‡(!
locked
Ë
	`c_wr_lock
(&
Áb_˘x
->
lock
);

101 
sw
 = 
	`__Áb_swôch_föd
(
Áb_˘x
, 
sw_Æüs
);

102 i‡(!
sw
) {

103 
	`c_log_îr
("%s: Swôch◊lü†%dËnŸ found", 
FN
, 
sw_Æüs
);

104 i‡(!
locked
Ë
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

108 
	`__Áb_dñëe_Æl_ho°s_⁄_swôch
(
Áb_˘x
, 
sw
->
dpid
);

109 
	`__Áb_swôch_dñ
(
Áb_˘x
, 
sw_Æüs
);

111 i‡(!
locked
Ë
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

112 
	}
}

120 
	$Áb_ªcv_îr_msg
(
Áb_°ru˘_t
 *
Áb_˘x
 
UNUSED
, 
c_oÂ_îr‹_msg_t
 *
coÂ_îr
)

122 
	`c_log_îr
("%s: C⁄åﬁÀ∏£¡Éº‹Åy≥ %hu codê%hu", 
FN
,

123 
	`¡ohs
(
coÂ_îr
->
ty≥
),Çtohs(coÂ_îr->
code
));

126 
	}
}

134 
	$Áb_p‹t_°©us_h™dÀr
(*
›q
 
UNUSED
, 
Áb_°ru˘_t
 *
Áb_˘x
,

135 
c_oÂ_p‹t_°©us_t
 *
p‹t_°©
)

137 
uöt32_t
 
c⁄fig
, 
°©e
;

138 
uöt32_t
 
c⁄fig_mask
, 
°©e_mask
;

139 
uöt16_t
 
p‹t_no
;

141 
p‹t_no
 = 
	`¡ohs
(
p‹t_°©
->
desc
.port_no);

142 i‡(
p‹t_no
 > 
OFPP_MAX
){

147 
c⁄fig
 = 
	`¡ohl
(
p‹t_°©
->
desc
.config);

148 
c⁄fig_mask
 = 
	`¡ohl
(
p‹t_°©
->config_mask);

149 
°©e
 = 
	`¡ohl
(
p‹t_°©
->
desc
.state);

150 
°©e_mask
 = 
	`¡ohl
(
p‹t_°©
->state_mask);

152 
	`c_log_debug
("%s: P‹à%huádmö %†lök %s\n", 
FN
, 
p‹t_no
,

153 (
c⁄fig
 & 
OFPPC_PORT_DOWN
)? "down": "up",

154 (
°©e
 & 
OFPPS_LINK_DOWN
)? "down" : "up");

156 
p‹t_°©
->
ªas⁄
){

157 
OFPPR_ADD
:

160 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

161 
	`__Áb_p‹t_add
(
Áb_˘x
,

162 
	`__Áb_swôch_föd
(
Áb_˘x
, 
	`¡ohl
(
p‹t_°©
->
sw_Æüs
)),

163 
p‹t_no
);

164 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

166 
OFPPR_MODIFY
:

167 i‡((
c⁄fig_mask
 & 
OFPPC_PORT_DOWN
)||

168 (
°©e_mask
 & 
OFPPS_LINK_DOWN
)) {

169 i‡(!(
c⁄fig
 & 
OFPPC_PORT_DOWN
Ë&& !(
°©e
 & 
OFPPS_LINK_DOWN
)) {

170 
Áb_˘x
->
π_sˇn_Æl_≥ndög
 = 
åue
;

175 
OFPPR_DELETE
:

176 
	`c_log_debug
("%s: %hu ->DOWN", 
FN
, 
p‹t_no
);

177 
	`Áb_dñëe_rouãs_wôh_p‹t
(
Áb_˘x
,

178 (Ë
	`¡ohl
(
p‹t_°©
->
sw_Æüs
),

179 
p‹t_no
);

182 
	`c_log_îr
("%s: unknow¿ªas⁄ %d", 
FN
, 
p‹t_°©
->
ªas⁄
);

185 
	}
}

193 
	$Áb_evít_nŸifõr
(*
›q
, *
pkt_¨g
)

195 
cbuf
 *
b
 = 
pkt_¨g
;

196 
oÂ_hódî
 *
hdr
;

198 i‡(!
b
) {

199 
	`c_log_îr
("%s: InvÆidárg", 
FN
);

203 
hdr
 = (*)(
b
->
d©a
);

205 
hdr
->
ty≥
) {

206 
C_OFPT_SWITCH_ADD
:

207 
	`Áb_swôch_add_nŸifõr
(
›q
, 
Áb_˘x
, (*)
hdr
);

209 
C_OFPT_SWITCH_DELETE
:

211 
c_oÂ_swôch_dñëe_t
 *
oÂ_sd
 = (*)(
hdr
);

212 
	`Áb_swôch_dñëe_nŸifõr
(
Áb_˘x
, 
	`¡ohl
(
oÂ_sd
->
sw_Æüs
), 
Ál£
);

213 
	`Áb_ª£t_Æl_rouãs
(
Áb_˘x
);

216 
C_OFPT_PACKET_IN
:

218 
	`Áb_pkt_rcv
(
›q
, 
Áb_˘x
, (*)
hdr
);

221 
C_OFPT_PORT_STATUS
:

223 
	`Áb_p‹t_°©us_h™dÀr
(
›q
, 
Áb_˘x
, (*)
hdr
);

226 
C_OFPT_RECONN_APP
:

227 
	`mul_ªgi°î_≠p
(
NULL
, 
FAB_APP_NAME
,

228 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

229 0, 
NULL
, 
Áb_evít_nŸifõr
);

231 
C_OFPT_NOCONN_APP
:

232 
	`Áb_swôches_ª£t
(
Áb_˘x
, 
__Áb_dñëe_Æl_ho°s_⁄_swôch
);

234 
C_OFPT_ERR_MSG
:

235 
	`Áb_ªcv_îr_msg
(
Áb_˘x
, (*)
hdr
);

239 
	}
}

247 
	$Ábric_£rvi˚_îr‹
(*
å_£rvi˚
, 
cbuf
 *
b
,

248 
uöt16_t
 
ty≥
, uöt16_à
code
)

250 
cbuf
 *
√w_b
;

251 
c_oÂ_îr‹_msg_t
 *
coÂ_em
;

252 *
d©a
;

253 
size_t
 
d©a_Àn
;

255 
d©a_Àn
 = 
b
->
Àn
 > 
C_OFP_MAX_ERR_LEN
?

256 
C_OFP_MAX_ERR_LEN
 : 
b
->
Àn
;

258 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_em
Ë+ 
d©a_Àn
, 
C_OFPT_ERR_MSG
, 0);

260 
coÂ_em
 = (*)(
√w_b
->
d©a
);

261 
coÂ_em
->
ty≥
 = 
	`ht⁄s
(type);

262 
coÂ_em
->
code
 = 
	`ht⁄l
(code);

264 
d©a
 = (*)(
coÂ_em
 + 1);

265 
	`mem˝y
(
d©a
, 
b
->d©a, 
d©a_Àn
);

267 
	`c_£rvi˚_£nd
(
å_£rvi˚
, 
√w_b
);

268 
	}
}

277 
	$Ábric_£rvi˚_suc˚ss
(*
Áb_£rvi˚
)

279 
cbuf
 *
√w_b
;

280 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
;

282 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_Øc
), 
C_OFPT_AUX_CMD
, 0);

284 
coÂ_Øc
 = (*)(
√w_b
->
d©a
);

285 
coÂ_Øc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_SUCCESS
);

287 
	`c_£rvi˚_£nd
(
Áb_£rvi˚
, 
√w_b
);

288 
	}
}

294 
	$Ábric_put_rouã_ñem
(*
π_¨g
, *
u_¨g
)

296 
c_oÂ_rouã_lök
 *
coÂ_æ
 = *(c_oÂ_rouã_lök **)(
u_¨g
);

297 
π_∑th_ñem_t
 *
π_ñem
 = 
π_¨g
;

298 
Áb_swôch_t
 *
Áb_sw
;

300 
Áb_sw
 = 
	`__Áb_swôch_föd
(
Áb_˘x
, 
π_ñem
->
sw_Æüs
);

301 i‡(!
Áb_sw
) {

303 
coÂ_æ
->
d©≠©h_id
 = 0;

305 
coÂ_æ
->
d©≠©h_id
 = 
	`ht⁄Œ
(
Áb_sw
->
dpid
);

308 
coÂ_æ
->
§c_lök
 = 
	`ht⁄s
(
π_ñem
->
lök
.
œ
);

309 
coÂ_æ
->
d°_lök
 = 
	`ht⁄s
(
π_ñem
->
lök
.
lb
);

311 *(
c_oÂ_rouã_lök
 **)(
u_¨g
Ë
coÂ_æ
 + 1;

312 
	}
}

319 
	$Áb_£rvi˚_£nd_sögÀ_rouã
(*
rouã
, *
Áb_£rvi˚
)

321 
Áb_rouã_t
 *
‰ouã
 = 
rouã
;

322 
cbuf
 *
b
;

323 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
;

324 
c_oÂ_rouã
 *
coÂ_r
;

325 
c_oÂ_rouã_lök
 *
coÂ_æ
;

326 
size_t
 
n_löks
 = 
	`g_¶i°_Àngth
(
‰ouã
->
úouã
);

327 
uöt64_t
 
dpid
 = 0;

329 
b
 = 
	`of_¥ï_msg
((*
coÂ_Øc
) +

330 (*
coÂ_r
Ë+ (
n_löks
 * (*
coÂ_æ
)),

331 
C_OFPT_AUX_CMD
, 0);

332 
coÂ_Øc
 = (*)(
b
->
d©a
);

333 
coÂ_Øc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_FAB_ROUTE
);

334 
coÂ_r
 = (*)(
coÂ_Øc
->
d©a
);

335 
coÂ_æ
 = (*)(
coÂ_r
->
rouã_löks
);

337 
	`Áb_dump_sögÀ_ho°_to_Êow
(
‰ouã
->
§c
, &
coÂ_r
->
§c_ho°
.
ho°_Êow
, &
dpid
);

338 
coÂ_r
->
§c_ho°
.
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

340 
	`Áb_dump_sögÀ_ho°_to_Êow
(
‰ouã
->
d°
, &
coÂ_r
->
d°_ho°
.
ho°_Êow
, &
dpid
);

341 
coÂ_r
->
d°_ho°
.
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

343 
	`mul_rouã_∑th_åavî£
(
‰ouã
->
úouã
, 
Ábric_put_rouã_ñem
,

344 (*)(&
coÂ_æ
));

346 
	`c_£rvi˚_£nd
(
Áb_£rvi˚
, 
b
);

347 
	}
}

353 
	$__Ábric_£rvi˚_show_ho°_rouã
(*
ho°_¨g
, *
vÆue
 
UNUSED
,

354 *
Áb_£rvi˚
)

356 
	`Áb_lo›_Æl_ho°_rouãs
(
ho°_¨g
, 
Áb_£rvi˚_£nd_sögÀ_rouã
,

357 
Áb_£rvi˚
);

358 
	}
}

366 
	$Ábric_£rvi˚_show_rouãs
(*
Áb_£rvi˚
)

368 
	`Áb_lo›_Æl_ho°s
(
Áb_˘x
, (
GHFunc
)
__Ábric_£rvi˚_show_ho°_rouã
, 
Áb_£rvi˚
);

370  
	`Ábric_£rvi˚_suc˚ss
(
Áb_£rvi˚
);

371 
	}
}

378 
	$Ábric_£rvi˚_£nd_ho°_öfo
(*
ho°
, *
v_¨g
 
UNUSED
,

379 *
Áb_£rvi˚
)

381 
c_oÂ_ho°_mod
 *
coÂ_hm
;

382 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
;

383 
cbuf
 *
b
;

384 
uöt64_t
 
dpid
 = 0;

387 
b
 = 
	`of_¥ï_msg
((*
coÂ_Øc
Ë+ (*
coÂ_hm
), 
C_OFPT_AUX_CMD
, 0);

388 
coÂ_Øc
 = (*)(
b
->
d©a
);

389 
coÂ_Øc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_FAB_HOST_ADD
);

390 
coÂ_hm
 = (*)(
coÂ_Øc
->
d©a
);

392 
	`Áb_dump_sögÀ_ho°_to_Êow
(
ho°
, &
coÂ_hm
->
ho°_Êow
, &
dpid
);

393 
coÂ_hm
->
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

395 
	`c_£rvi˚_£nd
(
Áb_£rvi˚
, 
b
);

396 
	}
}

404 
	$Ábric_£rvi˚_show_ho°s
(*
Áb_£rvi˚
, 
boﬁ
 
a˘ive
)

406 i‡(
a˘ive
) {

407 
	`Áb_lo›_Æl_ho°s
(
Áb_˘x
, 
Ábric_£rvi˚_£nd_ho°_öfo
, 
Áb_£rvi˚
);

409 
	`Áb_lo›_Æl_öa˘ive_ho°s
(
Áb_˘x
, 
Ábric_£rvi˚_£nd_ho°_öfo
,

410 
Áb_£rvi˚
);

413  
	`Ábric_£rvi˚_suc˚ss
(
Áb_£rvi˚
);

414 
	}
}

422 
	$Ábric_£rvi˚_ho°_mod
(*
Áb_£rvi˚
, 
cbuf
 *
b
,

423 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
,

424 
boﬁ
 
add
)

426 
ªt
 = -1;

427 
c_oÂ_ho°_mod
 *
coÂ_hm
;

429 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
) <

430 (*
coÂ_Øc
Ë+ (*
coÂ_hm
)) {

431 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
,

432 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

433 (*
coÂ_Øc
Ë+ (*
coÂ_hm
));

434 
îr
;

437 
coÂ_hm
 = (*)(
coÂ_Øc
->
d©a
);

439 i‡(
add
) {

440 
ªt
 = 
	`Áb_ho°_add
(
Áb_˘x
, 
	`¡ohŒ
(
coÂ_hm
->
swôch_id
.
d©≠©h_id
),

441 &
coÂ_hm
->
ho°_Êow
);

443 
ªt
 = 
	`Áb_ho°_dñëe
(
Áb_˘x
, &
coÂ_hm
->
ho°_Êow
, 
NULL
, NULL);

447 i‡(!
ªt
) {

448  
	`Ábric_£rvi˚_suc˚ss
(
Áb_£rvi˚
);

451 
îr
:

452  
	`Ábric_£rvi˚_îr‹
(
Áb_£rvi˚
, 
b
, 
OFPET_BAD_REQUEST
,

453 
OFPBRC_BAD_GENERIC
);

454 
	}
}

462 
	$Ábric_£rvi˚_h™dÀr
(*
Áb_£rvi˚
, 
cbuf
 *
b
)

464 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
 = (*)(
b
->
d©a
);

466 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
Ë< (
c_oÂ_aux≠p_cmd
)) {

467 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
,

468 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

469 (
c_oÂ_aux≠p_cmd
));

470  
	`Ábric_£rvi˚_îr‹
(
Áb_£rvi˚
, 
b
, 
OFPET_BAD_REQUEST
,

471 
OFPBRC_BAD_LEN
);

474 
	`¡ohl
(
coÂ_Øc
->
cmd_code
)) {

475 
C_AUX_CMD_FAB_HOST_ADD
:

476  
	`Ábric_£rvi˚_ho°_mod
(
Áb_£rvi˚
, 
b
, 
coÂ_Øc
,

477 
åue
);

478 
C_AUX_CMD_FAB_HOST_DEL
:

479  
	`Ábric_£rvi˚_ho°_mod
(
Áb_£rvi˚
, 
b
, 
coÂ_Øc
,

480 
Ál£
);

481 
C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS
:

482  
	`Ábric_£rvi˚_show_ho°s
(
Áb_£rvi˚
, 
åue
);

483 
C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS
:

484  
	`Ábric_£rvi˚_show_ho°s
(
Áb_£rvi˚
, 
Ál£
);

485 
C_AUX_CMD_FAB_SHOW_ROUTES
:

486  
	`Ábric_£rvi˚_show_rouãs
(
Áb_£rvi˚
);

488 
	`Ábric_£rvi˚_îr‹
(
Áb_£rvi˚
, 
b
, 
OFPET_BAD_REQUEST
,

489 
OFPBRC_BAD_GENERIC
);

492 
	}
}

500 
	$Ábric_moduÀ_öô
(*
ba£_¨g
)

502 
evít_ba£
 *
ba£
 = 
ba£_¨g
;

503 
timevÆ
 
tv
 = { 
FAB_TIMER_SEC_INT
, 
FAB_TIMER_USEC_INT
 };

505 
	`c_log_debug
("%s", 
FN
);

507 
Áb_˘x
 = 
	`Áb_zÆloc
((
Áb_°ru˘_t
));

509 
Áb_˘x
->
ba£
 = base;

510 
	`c_rw_lock_öô
(&
Áb_˘x
->
lock
);

512 
	`Áb_swôches_öô
(
Áb_˘x
);

514 
Áb_˘x
->
ho°_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
Áb_ho°_hash_func
,

515 
Áb_ho°_equÆ_func
,

516 
NULL
, 
__Áb_ho°_dñëe
);

517 
	`as£π
(
Áb_˘x
->
ho°_htbl
);

519 
Áb_˘x
->
öa˘_ho°_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
Áb_ho°_hash_func
,

520 
Áb_ho°_equÆ_func
,

521 
NULL
, 
__Áb_ho°_dñëe
);

522 
	`as£π
(
Áb_˘x
->
öa˘_ho°_htbl
);

524 
Áb_˘x
->
ã«¡_√t_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
Áb_ã«¡_nw_hash_func
,

525 
Áb_ã«¡_nw_equÆ_func
,

526 
NULL
, 
__Áb_ã«¡_nw_dñëe
);

527 
	`as£π
(
Áb_˘x
->
ã«¡_√t_htbl
);

529 
Áb_˘x
->
Áb_timî_evít
 = 
	`evtimî_√w
(
ba£
,

530 
Áb_timî_evít
,

531 (*)
Áb_˘x
);

533 
Áb_˘x
->
Áb_˛i_£rvi˚
 = 
	`mul_≠p_¸óã_£rvi˚
(
MUL_FAB_CLI_SERVICE_NAME
,

534 
Ábric_£rvi˚_h™dÀr
);

535 
	`as£π
(
Áb_˘x
->
Áb_˛i_£rvi˚
);

537 
Áb_˘x
->
rouã_£rvi˚
 = 
	`mul_≠p_gë_£rvi˚
(
MUL_ROUTE_SERVICE_NAME
);

538 
	`as£π
(
Áb_˘x
->
rouã_£rvi˚
);

540 
	`evtimî_add
(
Áb_˘x
->
Áb_timî_evít
, &
tv
);

542 
	`mul_ªgi°î_≠p
(
NULL
, 
FAB_APP_NAME
,

543 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

544 0, 
NULL
, 
Áb_evít_nŸifõr
);

547 
	}
}

555 
	$Ábric_moduÀ_vty_öô
(*
¨g
)

557 
	`c_log_debug
("%s:", 
FN
);

559 
	`Ábric_vty_öô
(
¨g
);

560 
	}
}

562 
moduÀ_öô
(
Ábric_moduÀ_öô
);

563 
moduÀ_vty_öô
(
Ábric_moduÀ_vty_öô
);

	@application/fabric/mul_fabric.h

19 #i‚de‡
__MUL_FABRIC_H__


20 
	#__MUL_FABRIC_H__


	)

22 
	#FAB_APP_NAME
 "mul-Ábric"

	)

24 
	#FAB_UNK_BUFFER_ID
 (0xffffffff)

	)

27 
	#FAB_TIMER_SEC_INT
 (1)

	)

28 
	#FAB_TIMER_USEC_INT
 (0)

	)

30 
	#FAB_MAX_PENDING_LOOPS
 (10)

	)

33 
	sÁb_ho°_sw


35 
uöt64_t
 
	mswid
;

36 
uöt32_t
 
	mÆüs
;

37 
uöt16_t
 
	mp‹t
;

39 
Áb_ho°_sw
 
	tÁb_ho°_sw_t
;

42 
	sÁb_hkey


44 
uöt32_t
 
	mho°_ù
;

45 
uöt32_t
 
	mä_id
;

46 
uöt8_t
 
	mho°_mac
[6];

48 
Áb_hkey
 
	tÁb_hkey_t
;

50 
	sÁb_ã«¡_√t


52 
uöt32_t
 
	mä_id
;

53 
c_©omic_t
 
	mªf
;

54 
GSLi°
 *
	mho°_li°
;

56 
Áb_ã«¡_√t
 
	tÁb_ã«¡_√t_t
;

58 
	sÁb_ho°


60 
Áb_hkey_t
 
	mhkey
;

61 
c_©omic_t
 
	mªf
;

62 
c_rw_lock_t
 
	mlock
;

63 
Áb_ho°_sw_t
 
	msw
;

64 
Áb_ã«¡_√t_t
 *
	mã«¡_nw
;

65 
GSLi°
 *
	mho°_rouãs
;

66 
boﬁ
 
	mdód
;

67 
boﬁ
 
	mdÊ_gw
;

69 
Áb_ho°
 
	tÁb_ho°_t
;

71 
	sÁb_rouã


73 
Áb_ho°_t
 *
	m§c
;

74 
Áb_ho°_t
 *
	md°
;

75 
	#FAB_ROUTE_DIRTY
 0x1

	)

76 
	#FAB_ROUTE_STATIC
 0x2

	)

77 
	#FAB_ROUTE_TIMED
 0x4

	)

78 
	#FAB_ROUTE_DEAD
 0x8

	)

79 
	#FAB_ROUTE_SAME_SWITCH
 0x10

	)

80 
uöt8_t
 
	mÊags
;

81 
uöt16_t
 
	m¥io
;

82 
	#FAB_ROUTE_RETRY_INIT_TS
 (1)

	)

83 
	#FAB_ROUTE_RETRY_TS
 (4)

	)

84 
time_t
 
	mexpúy_ts
;

85 
uöt32_t
 
	mπ_wûdˇrds
;

86 
Êow
 
	mπ_Êow
;

87 
GSLi°
 *
	múouã
;

89 
Áb_rouã
 
	tÁb_rouã_t
;

91 
	sÁb_swôch


93 
uöt64_t
 
	mdpid
;

94 
	mÆüs
;

95 
boﬁ
 
	mvÆid
;

96 
GHashTabÀ
 *
	mp‹t_htbl
;

98 
Áb_swôch
 
	tÁb_swôch_t
;

100 
	sÁb_p‹t


102 
uöt16_t
 
	mp‹t_no
;

103 
uöt16_t
 
	m∑d
;

104 
uöt32_t
 
	mäid
;

106 
Áb_p‹t
 
	tÁb_p‹t_t
;

109 
	sÁb_°ru˘
 {

110 
c_rw_lock_t
 
	mlock
;

111 *
	mba£
;

112 
GHashTabÀ
 *
	mho°_htbl
;

113 
GHashTabÀ
 *
	möa˘_ho°_htbl
;

114 
GHashTabÀ
 *
	mã«¡_√t_htbl
;

115 *
	msw_li°
;

116 
evít
 *
	mÁb_timî_evít
;

118 
boﬁ
 
	mπ_ªˇlc_≥ndög
;

119 
boﬁ
 
	mπ_sˇn_Æl_≥ndög
;

120 
	#FAB_RT_RECALC_TS
 2

	)

121 
time_t
 
	mπ_ªˇlc_ts
;

122 
GSLi°
 *
	mπ_≥ndög_li°
;

124 
mul_£rvi˚_t
 *
	mÁb_˛i_£rvi˚
;

125 
mul_£rvi˚_t
 *
	mrouã_£rvi˚
;

127 
Áb_°ru˘
 
	tÁb_°ru˘_t
;

129 *
Áb_dump_sögÀ_ho°
(
Áb_ho°_t
 *
ho°
);

130 
Áb_dump_sögÀ_ho°_to_Êow
(
Áb_ho°_t
 *
ho°
, 
Êow
 *
Ê
,

131 
uöt64_t
 *
dpid
);

132 
Áb_ho°_gë
(
Áb_ho°_t
 *
ho°
);

133 
Áb_ho°_put
(
Áb_ho°_t
 *
ho°
);

134 
Áb_ho°_put_locked
(
Áb_ho°_t
 *
ho°
);

135 
Áb_ho°_hash_func
(c⁄° *
key
);

136 
Áb_ho°_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
);

137 
Áb_ho°_dñëe
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Êow
 *
Ê
, 
boﬁ
 
locked
,

138 
boﬁ
 
öa˘ive
);

139 
__Áb_ho°_dñëe
(*
ho°
);

140 
__Áb_dñëe_Æl_ho°s_⁄_swôch
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
);

141 
__Áb_a˘iv©e_Æl_ho°s_⁄_swôch
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
);

142 
Áb_ho°_add
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
);

143 
Áb_À¨n_ho°
(*
›q
 
UNUSED
, 
Áb_°ru˘_t
 *
Áb_˘x
,

144 
c_oÂ_∑ckë_ö_t
 *
pö
);

145 
__Áb_ã«¡_nw_dñëe
(*
d©a
);

146 
Áb_ã«¡_nw_dñëe
(
Áb_ã«¡_√t_t
 *
ã«¡
);

147 
Áb_ã«¡_nw_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
);

148 
Áb_ã«¡_nw_hash_func
(c⁄° *
key
);

149 
__Áb_ã«¡_nw_lo›_Æl_ho°s
(
Áb_ã«¡_√t_t
 *
ã«¡
, 
GFunc
 
ôî_‚
,

150 *
u_d©a
);

151 
Áb_lo›_Æl_ho°s
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
);

152 
Áb_lo›_Æl_ho°s_wr
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
);

153 
Áb_lo›_Æl_öa˘ive_ho°s
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
);

156 
Áb_rouã_≥r_£c_timî
(
Áb_°ru˘_t
 *
Áb_˘x
);

157 
__Áb_rouãs_to‰o_ho°_add
(*
ho°
, *
Áb_˘x
);

158 
__Áb_ho°_rouã_dñëe
(*
ho°
, *
v
, *
Áb_˘x
);

159 
Áb_ª£t_Æl_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
);

160 
Áb_add_Æl_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
);

161 
Áb_dñëe_rouãs_wôh_p‹t
(
Áb_°ru˘_t
 *
Áb_˘x
, 
sw_Æüs
,

162 
uöt16_t
 
p‹t_no
);

163 
Áb_lo›_Æl_ho°_rouãs
(
Áb_ho°_t
 *
ho°
, 
GFunc
 
ôî_‚
, *
u_d©a
);

164 
Áb_Êush_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
);

165 
Áb_dump_sögÀ_≥ndög_rouã
(*
rouã
, *
¨g
);

166 
__Áb_lo›_Æl_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GFunc
 
ôî_‚
,

167 *
u_d©a
);

168 
__Áb_dñ_≥ndög_rouãs_to‰o_ho°
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Áb_ho°_t
 *
ho°
);

170 
Áb_add_¨p_èp_≥r_swôch
(*
›q
, 
uöt64_t
 
dpid
);

171 
Áb_¨p_rcv
(*
›q
, 
Áb_°ru˘_t
 *
Áb_˘x
 
UNUSED
, 
c_oÂ_∑ckë_ö_t
 *
pö
);

173 
Áb_swôch_t
 *
__Áb_swôch_föd_wôh_dpid
(
Áb_°ru˘_t
 *
˘x
, 
uöt64_t
 
dpid
);

174 
Áb_swôch_t
 *
__Áb_swôch_föd
(
Áb_°ru˘_t
 *
˘x
, 
Æüs
);

175 
__Áb_p‹t_dñëe_Æl
(
Áb_°ru˘_t
 *
˘x
 
UNUSED
, 
Áb_swôch_t
 *
sw
);

176 
__Áb_p‹t_add
(
Áb_°ru˘_t
 *
˘x
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
);

177 
__Áb_p‹t_dñëe
(
Áb_°ru˘_t
 *
˘x
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
);

178 
boﬁ
 
__Áb_p‹t_vÆid
(
Áb_°ru˘_t
 *
˘x
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
);

179 
__Áb_swôch_add
(
Áb_°ru˘_t
 *
˘x
, 
uöt64_t
 
dpid
, 
Æüs
);

180 
__Áb_swôch_dñ
(
Áb_°ru˘_t
 *
˘x
, 
Æüs
);

181 
Áb_swôches_ª£t
(
Áb_°ru˘_t
 *
˘x
,

182 (*
dó˘_ho°s_‚
)(
Áb_°ru˘_t
 *
˘x
,

183 
uöt64_t
 
dpid
));

184 
	`Áb_swôches_öô
(
Áb_°ru˘_t
 *
Áb_˘x
);

186 
	`Ábric_vty_öô
(*
¨g
);

188 
	`Áb_swôch_dñëe_nŸifõr
(
Áb_°ru˘_t
 *
Áb_˘x
, 
sw_Æüs
,

189 
boﬁ
 
locked
);

190 
	`Ábric_moduÀ_öô
(*
˘x
);

191 
	`Ábric_moduÀ_vty_öô
(*
¨g
);

	@application/fabric/mul_fabric_common.h

19 #i‚de‡
__MUL_FABRIC_COMMON_H__


20 
	#__MUL_FABRIC_COMMON_H__


	)

22 
	~"c⁄fig.h
"

23 
	~"mul_comm⁄.h
"

24 
	~"mul_vty.h
"

25 
	~"mul_Ábric.h
"

26 
	~"mul_Ábric_utû.h
"

	@application/fabric/mul_fabric_host.c

19 
	~"mul_Ábric_comm⁄.h
"

21 
Áb_°ru˘_t
 *
Áb_˘x
;

29 
	$Áb_dump_sögÀ_ho°
(
Áb_ho°_t
 *
ho°
)

31 *
pbuf
 = 
	`ˇŒoc
(1, 
HOST_PBUF_SZ
);

32 
Àn
 = 0;

34 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
HOST_PBUF_SZ
-len-1,

38 
	`Áb_äid_to_tid
(
ho°
->
hkey
.
ä_id
),

39 
	`Áb_äid_to_nid
(
ho°
->
hkey
.
ä_id
),

40 
ho°
->
hkey
.
ho°_ù
,

41 
ho°
->
hkey
.
ho°_mac
[0], host->hkey.host_mac[1],

42 
ho°
->
hkey
.
ho°_mac
[2], host->hkey.host_mac[3],

43 
ho°
->
hkey
.
ho°_mac
[4], host->hkey.host_mac[5],

44 
ho°
->
sw
.
swid
, ho°->sw.
Æüs
, ho°->sw.
p‹t
,

45 
ho°
->
dÊ_gw
?"dfl-gw":"non-gw",

46 
ho°
->
dód
 ? "dead":"alive");

47 
	`as£π
(
Àn
 < 
HOST_PBUF_SZ
-1);

49  
pbuf
;

50 
	}
}

58 
	$Áb_dump_sögÀ_ho°_to_Êow
(
Áb_ho°_t
 *
ho°
, 
Êow
 *
Ê
,

59 
uöt64_t
 *
dpid
)

62 *
dpid
 = 
ho°
->
sw
.
swid
;

63 
Ê
->
ö_p‹t
 = 
	`ht⁄s
(
ho°
->
sw
.
p‹t
);

64 
	`Áb_add_ã«¡_id
(
Ê
, 
NULL
, 
	`Áb_äid_to_tid
(
ho°
->
hkey
.
ä_id
));

65 
	`Áb_add_√tw‹k_id
(
Ê
, 
	`Áb_äid_to_nid
(
ho°
->
hkey
.
ä_id
));

66 
Ê
->
nw_§c
 = 
	`ht⁄l
(
ho°
->
hkey
.
ho°_ù
);

67 
	`mem˝y
(
Ê
->
dl_§c
, 
ho°
->
hkey
.
ho°_mac
, 6);

68 
Ê
->
FL_DFL_GW
 = 
ho°
->
dÊ_gw
;

69 
	}
}

78 
	$Áb_ã«¡_nw_hash_func
(c⁄° *
key
)

80 c⁄° 
Áb_ã«¡_√t_t
 *
ã«¡_nw
 = 
key
;

82  
ã«¡_nw
->
ä_id
;

83 
	}
}

93 
	$Áb_ã«¡_nw_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
)

95 c⁄° 
Áb_ã«¡_√t_t
 *
t1
 = 
key1
;

96 c⁄° 
Áb_ã«¡_√t_t
 *
t2
 = 
key2
;

98  
t1
->
ä_id
 =
t2
->tn_id;

99 
	}
}

108 
	$Áb_ã«¡_nw_put
(
Áb_ã«¡_√t_t
 *
ã«¡_nw
)

110 if(!
	`©omic_ªad
(&
ã«¡_nw
->
ªf
)) {

111 
	`‰ì
(
ã«¡_nw
);

113 
	`©omic_dec
(&
ã«¡_nw
->
ªf
, 1);

115 
	}
}

125 
	$__Áb_ho°_≥r_ã«¡_nw_dñëe
(*
h¨g
, *
ˇrg
 
UNUSED
)

127 
Áb_ho°_t
 *
ho°
 = 
h¨g
;

129 
	`__Áb_ho°_dñëe
(
ho°
);

130 
	}
}

142 
	$__Áb_ã«¡_nw_lo›_Æl_ho°s
(
Áb_ã«¡_√t_t
 *
ã«¡_nw
, 
GFunc
 
ôî_‚
,

143 *
u_d©a
)

145 i‡(
ã«¡_nw
->
ho°_li°
) {

146 
	`g_¶i°_f‹óch
(
ã«¡_nw
->
ho°_li°
,

147 (
GFunc
)
ôî_‚
, 
u_d©a
);

149 
	}
}

160 
	$__Áb_ã«¡_nw_dñëe
(*
ãn_nw
)

162 
	`__Áb_ã«¡_nw_lo›_Æl_ho°s
(
ãn_nw
,

163 
__Áb_ho°_≥r_ã«¡_nw_dñëe
,

164 
NULL
);

165 
	`Áb_ã«¡_nw_put
((
Áb_ã«¡_√t_t
 *)
ãn_nw
);

166 
	}
}

175 
	$Áb_ã«¡_nw_dñëe
(
Áb_ã«¡_√t_t
 *
ãn_nw
)

177 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

179 
	`g_hash_èbÀ_ªmove
(
Áb_˘x
->
ã«¡_√t_htbl
, 
ãn_nw
);

181 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

182 
	}
}

191 
	$Áb_ho°_uƒef
(
Áb_ho°_t
 *
ho°
)

193 
Áb_ã«¡_√t_t
 *
ãn_nw
 = 
ho°
->
ã«¡_nw
;

194 i‡(!
	`©omic_ªad
(&
ho°
->
ªf
)) {

195 
	`c_log_debug
("%s: Host Destroyed (TNID %u: ip(0x%x) "

197 
FN
, 
ho°
->
hkey
.
ä_id
, ho°->hkey.
ho°_ù
,

198 
ho°
->
hkey
.
ho°_mac
[0], host->hkey.host_mac[1],

199 
ho°
->
hkey
.
ho°_mac
[2], host->hkey.host_mac[3],

200 
ho°
->
hkey
.
ho°_mac
[4], host->hkey.host_mac[5]);

201 
ãn_nw
->
ho°_li°
 = 
	`g_¶i°_ªmove
—í_nw->ho°_li°, 
ho°
);

202 
	`Áb_ã«¡_nw_put
(
ãn_nw
);

203 
	`Áb_‰ì
(
ho°
);

205 
	`©omic_dec
(&
ho°
->
ªf
, 1);

207 
	}
}

220 
	$Áb_lo›_Æl_ho°s
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
)

222 
	`c_rd_lock
(&
Áb_˘x
->
lock
);

223 i‡(
Áb_˘x
->
ho°_htbl
) {

224 
	`g_hash_èbÀ_f‹óch
(
Áb_˘x
->
ho°_htbl
,

225 (
GHFunc
)
ôî_‚
, 
¨g
);

227 
	`c_rd_u∆ock
(&
Áb_˘x
->
lock
);

228 
	}
}

241 
	$Áb_lo›_Æl_öa˘ive_ho°s
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
)

243 
	`c_rd_lock
(&
Áb_˘x
->
lock
);

244 i‡(
Áb_˘x
->
öa˘_ho°_htbl
) {

245 
	`g_hash_èbÀ_f‹óch
(
Áb_˘x
->
öa˘_ho°_htbl
,

246 (
GHFunc
)
ôî_‚
, 
¨g
);

248 
	`c_rd_u∆ock
(&
Áb_˘x
->
lock
);

249 
	}
}

262 
	$Áb_lo›_Æl_ho°s_wr
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GHFunc
 
ôî_‚
, *
¨g
)

264 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

265 i‡(
Áb_˘x
->
ho°_htbl
) {

266 
	`g_hash_èbÀ_f‹óch
(
Áb_˘x
->
ho°_htbl
,

267 (
GHFunc
)
ôî_‚
, 
¨g
);

269 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

270 
	}
}

279 
	$Áb_ho°_gë
(
Áb_ho°_t
 *
ho°
)

281 
	`©omic_öc
(&
ho°
->
ªf
, 1);

282 
	}
}

291 
	$Áb_ho°_put
(
Áb_ho°_t
 *
ho°
)

293 
	`Áb_ho°_uƒef
(
ho°
);

294 
	}
}

303 
	$Áb_ho°_put_locked
(
Áb_ho°_t
 *
ho°
)

305 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

306 
	`Áb_ho°_uƒef
(
ho°
);

307 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

308 
	}
}

317 
	$Áb_ho°_hash_func
(c⁄° *
key
)

319 c⁄° 
Áb_ho°_t
 *
ho°
 = 
key
;

321  
	`hash_byãs
(
ho°
, (
Áb_hkey_t
), 1);

322 
	}
}

332 
	$Áb_ho°_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
)

334  !
	`memcmp
(
key1
, 
key2
, (
Áb_hkey_t
) - 6);

335 
	}
}

345 
	$__Áb_ho°_dñëe
(*
d©a
)

347 
	`Áb_ho°_put
((
Áb_ho°_t
 *)
d©a
);

348 
	}
}

355 
Áb_ho°_t
 *

356 
	$Áb_ho°_¸óã
(
uöt64_t
 
dpid
, 
uöt16_t
 
sw_Æüs
, 
Êow
 *
Ê
)

358 
Áb_ho°_t
 *
ho°
;

360 
ho°
 = 
	`Áb_zÆloc
((
Áb_ho°_t
));

362 
	`c_rw_lock_öô
(&
ho°
->
lock
);

363 
ho°
->
sw
.
swid
 = 
dpid
;

364 
ho°
->
sw
.
Æüs
 = 
sw_Æüs
;

365 
ho°
->
sw
.
p‹t
 = 
	`¡ohs
(
Ê
->
ö_p‹t
);

366 
	`FAB_MK_TEN_NET_ID
(
ho°
->
hkey
.
ä_id
,

367 
	`Áb_exåa˘_ã«¡_id
(
Ê
),

368 
	`Áb_exåa˘_√tw‹k_id
(
Ê
));

369 
ho°
->
hkey
.
ho°_ù
 = 
	`¡ohl
(
Ê
->
nw_§c
);

370 
	`mem˝y
(
ho°
->
hkey
.
ho°_mac
, 
Ê
->
dl_§c
, 6);

371 
ho°
->
dÊ_gw
 = 
Ê
->
FL_DFL_GW
;

373  
ho°
;

374 
	}
}

381 
boﬁ


382 
	$Áb_ho°_cmp_assocüti⁄
(
Áb_ho°_t
 *
ho°1
, fab_ho°_à*
ho°2
)

384 i‡(
ho°1
->
sw
.
swid
 =
ho°2
->sw.swid &&

385 
ho°1
->
sw
.
Æüs
 =
ho°2
->sw.alias &&

386 
ho°1
->
sw
.
p‹t
 =
ho°2
->sw.port &&

387 
ho°1
->
dÊ_gw
 =
ho°2
->dfl_gw) {

388  
åue
;

391  
Ál£
;

392 
	}
}

405 
	$Áb_ho°_dñëe
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Êow
 *
Ê
,

406 
boﬁ
 
locked
, boﬁ 
öa˘ive
)

408 
Áb_ho°_t
 *
lkup_ho°
, *
ho°
;

409 *
ho°_p°r
;

411 
lkup_ho°
 = 
	`Áb_ho°_¸óã
(0, 0, 
Ê
);

413 i‡(!
locked
Ë
	`c_wr_lock
(&
Áb_˘x
->
lock
);

415 i‡(!(
ho°
 = 
	`g_hash_èbÀ_lookup
(
Áb_˘x
->
ho°_htbl
, 
lkup_ho°
))) {

416 i‡(!
öa˘ive
 &&

417 (
ho°
 = 
	`g_hash_èbÀ_lookup
(
Áb_˘x
->
öa˘_ho°_htbl
, 
lkup_ho°
))) {

418 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

419 
	`c_log_îr
("%s: I«˘ivêHo° dñëed %s", 
FN
, 
ho°_p°r
);

420 
	`‰ì
(
ho°_p°r
);

422 
ho°
->
ã«¡_nw
->
ho°_li°
 =

423 
	`g_¶i°_ªmove
(
ho°
->
ã«¡_nw
->
ho°_li°
, host);

424 
	`g_hash_èbÀ_ªmove
(
Áb_˘x
->
öa˘_ho°_htbl
, 
ho°
);

426 
	`c_log_îr
("%s: Nÿsuch ho° o∏Æªady i«˘ive", 
FN
);

429 i‡(!
locked
Ë
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

433 
ho°
->
dód
 = 
åue
;

434 
	`__Áb_ho°_rouã_dñëe
(
ho°
, 
NULL
, 
Áb_˘x
);

435 
	`__Áb_dñ_≥ndög_rouãs_to‰o_ho°
(
Áb_˘x
, 
ho°
);

437 i‡(
öa˘ive
) {

438 
	`Áb_ho°_gë
(
ho°
);

439 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

440 
	`c_log_îr
("%s: Ho° A˘ive->I«˘vê%s", 
FN
, 
ho°_p°r
);

441 
	`‰ì
(
ho°_p°r
);

442 
	`g_hash_èbÀ_ö£π
(
Áb_˘x
->
öa˘_ho°_htbl
, 
ho°
, host);

445 
ho°
->
ã«¡_nw
->
ho°_li°
 =

446 
	`g_¶i°_ªmove
(
ho°
->
ã«¡_nw
->
ho°_li°
, host);

448 
	`g_hash_èbÀ_ªmove
(
Áb_˘x
->
ho°_htbl
, 
ho°
);

450 i‡(!
öa˘ive
) {

451 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
lkup_ho°
);

452 
	`c_log_îr
("%s: Ho° Dñëed %s", 
FN
, 
ho°_p°r
);

453 
	`‰ì
(
ho°_p°r
);

456 i‡(!
locked
Ë
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

459 
	}
}

467 
	$Áb_ho°_⁄_swôch
(*
h_¨g
, *
v_¨g
 
UNUSED
, *
u_¨g
)

469 
Áb_ho°_t
 *
ho°
 = 
h_¨g
;

470 
uöt64_t
 
dpid
 = *(uöt64_à*)
u_¨g
;

472 i‡(
ho°
->
sw
.
swid
 =
dpid
Ë 
åue
;

474  
Ál£
;

475 
	}
}

485 
	$__Áb_dñëe_Æl_ho°s_⁄_swôch
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
)

487 
Áb_ho°_t
 *
ho°
;

488 
Êow
 
Ê
;

490 (
ho°
 = 
	`g_hash_èbÀ_föd
(
Áb_˘x
->
ho°_htbl
, 
Áb_ho°_⁄_swôch
,

491 &
dpid
))) {

492 
	`mem£t
(&
Ê
, 0, (fl));

493 
Ê
.
nw_§c
 = 
	`ht⁄l
(
ho°
->
hkey
.
ho°_ù
);

494 
	`Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
	`Áb_äid_to_tid
(
ho°
->
hkey
.
ä_id
));

495 
	`mem˝y
(
Ê
.
dl_§c
, 
ho°
->
hkey
.
ho°_mac
, 6);

496 
	`Áb_ho°_dñëe
(
Áb_˘x
, &
Ê
, 
åue
,Årue);

498 
	}
}

508 
	$__Áb_a˘iv©e_Æl_ho°s_⁄_swôch
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
)

510 
Áb_ho°_t
 *
ho°
;

511 
Êow
 
Ê
;

513 (
ho°
 = 
	`g_hash_èbÀ_föd
(
Áb_˘x
->
öa˘_ho°_htbl
, 
Áb_ho°_⁄_swôch
,

514 &
dpid
))) {

515 
	`mem£t
(&
Ê
, 0, (fl));

516 
Ê
.
nw_§c
 = 
	`ht⁄l
(
ho°
->
hkey
.
ho°_ù
);

517 
Ê
.
ö_p‹t
 = 
	`ht⁄s
(
ho°
->
sw
.
p‹t
);

518 
Ê
.
FL_DFL_GW
 = 
ho°
->
dÊ_gw
;

519 
	`Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
	`Áb_äid_to_tid
(
ho°
->
hkey
.
ä_id
));

520 
	`mem˝y
(
Ê
.
dl_§c
, 
ho°
->
hkey
.
ho°_mac
, 6);

522 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

526 
	`Áb_ho°_add
(
Áb_˘x
, 
dpid
, &
Ê
);

527 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

529 
	}
}

541 
	$Áb_ho°_add
(
Áb_°ru˘_t
 *
Áb_˘x
, 
uöt64_t
 
dpid
,

542 
Êow
 *
Ê
)

544 
Áb_swôch_t
 *
sw
;

545 
Áb_ho°_t
 *
ho°
 = 
NULL
, *
exi°_ho°
 = NULL;

546 
Áb_ã«¡_√t_t
 *
ã«¡_nw
 = 
NULL
;

547 
boﬁ
 
ö°Æl_rouã_∑ú
 = 
åue
;

548 *
ho°_p°r
;

550 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

552 
sw
 = 
	`__Áb_swôch_föd_wôh_dpid
(
Áb_˘x
, 
dpid
);

553 i‡(!
sw
) {

554 
	`c_log_îr
("%s: Swôch(0x%ŒxËnŸ found", 
FN
, 
dpid
);

555 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

557 } i‡(!
	`__Áb_p‹t_vÆid
(
Áb_˘x
, 
sw
, 
	`¡ohs
(
Ê
->
ö_p‹t
))) {

558 
	`c_log_îr
("%s: P‹t(%huË⁄ Swôch(0x%ŒxËnŸ found", 
FN
,

559 
	`¡ohs
(
Ê
->
ö_p‹t
), 
dpid
);

560 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

564 
ho°
 = 
	`Áb_ho°_¸óã
(
dpid
, 
sw
->
Æüs
, 
Ê
);

566 i‡((
exi°_ho°
 = 
	`g_hash_èbÀ_lookup
(
Áb_˘x
->
öa˘_ho°_htbl
, 
ho°
))) {

567 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

568 
	`c_log_îr
("%s: Know¿Ho° i«˘ive->a˘ivê%s", 
FN
, 
ho°_p°r
);

569 
	`‰ì
(
ho°_p°r
);

571 
exi°_ho°
->
ã«¡_nw
->
ho°_li°
 =

572 
	`g_¶i°_ªmove
(
exi°_ho°
->
ã«¡_nw
->
ho°_li°
,Éxist_host);

573 
	`g_hash_èbÀ_ªmove
(
Áb_˘x
->
öa˘_ho°_htbl
, 
exi°_ho°
);

577 
	`as£π
(
Áb_˘x
->
ho°_htbl
);

578 i‡((
exi°_ho°
 = 
	`g_hash_èbÀ_lookup
(
Áb_˘x
->
ho°_htbl
, 
ho°
))) {

580 i‡(
	`Áb_ho°_cmp_assocüti⁄
(
exi°_ho°
, 
ho°
)) {

581 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

582 
	`c_log_îr
("%s: Know¿Ho° %s", 
FN
, 
ho°_p°r
);

583 
	`‰ì
(
ho°_p°r
);

584 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

588 
	`c_log_îr
("%s: Know¿ho° buàmodifõd\n", 
FN
);

590 
	`Áb_ho°_dñëe
(
Áb_˘x
, 
Ê
, 
åue
, 
Ál£
);

593 
	`as£π
(
Áb_˘x
->
ã«¡_√t_htbl
);

594 i‡(!(
ã«¡_nw
 = 
	`g_hash_èbÀ_lookup
(
Áb_˘x
->
ã«¡_√t_htbl
,

595 &(
ho°
->
hkey
.
ä_id
)))) {

596 
ã«¡_nw
 = 
	`Áb_zÆloc
((
Áb_ã«¡_√t_t
));

598 
ã«¡_nw
->
ä_id
 = 
ho°
->
hkey
.tn_id;

599 
	`g_hash_èbÀ_ö£π
(
Áb_˘x
->
ã«¡_√t_htbl
, 
ã«¡_nw
,Åenant_nw);

602 
	`©omic_öc
(&
ã«¡_nw
->
ªf
, 1);

603 
ho°
->
ã«¡_nw
 =Åenant_nw;

604 
	`g_hash_èbÀ_ö£π
(
Áb_˘x
->
ho°_htbl
, 
ho°
, host);

605 
ã«¡_nw
->
ho°_li°
 = 
	`g_¶i°_≠≥nd
—í™t_nw->ho°_li°, 
ho°
);

607 
	`__Áb_rouãs_to‰o_ho°_add
(
ho°
, &
ö°Æl_rouã_∑ú
);

609 
ho°_p°r
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

610 
	`c_log_îr
("%s: Ho° Added %s", 
FN
, 
ho°_p°r
);

611 
	`‰ì
(
ho°_p°r
);

613 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

616 
	}
}

627 
	$Áb_À¨n_ho°
(*
›q
 
UNUSED
, 
Áb_°ru˘_t
 *
Áb_˘x
 UNUSED,

628 
c_oÂ_∑ckë_ö_t
 *
pö
 
UNUSED
)

633 
	}
}

	@application/fabric/mul_fabric_pkt.c

19 
	~"mul_Ábric_comm⁄.h
"

21 
Áb_°ru˘_t
 *
Áb_˘x
;

23 
uöt8_t
 
	gÁb_mac
[
ETH_ADDR_LEN
] = { 0x0a, 0x0b, 0x0c, 0x0d, 0xe, 0xff };

26 
	$Áb_add_¨p_èp_≥r_swôch
(*
›q
 
UNUSED
, 
uöt64_t
 
dpid
 UNUSED)

28 
	}
}

31 
	$Áb_¨p_rcv
(*
›q
 
UNUSED
, 
Áb_°ru˘_t
 *
Áb_˘x
 UNUSED, 
c_oÂ_∑ckë_ö_t
 *
pö
 UNUSED)

33 
	}
}

	@application/fabric/mul_fabric_route.c

19 
	~"mul_Ábric_comm⁄.h
"

21 
Áb_°ru˘_t
 *
Áb_˘x
;

29 
	$Áb_rouã_‰om_ho°_cmp
(*
rouã_ñem
, *
h_¨g
)

31 
Áb_rouã_t
 *
‰ouã
 = 
rouã_ñem
;

32 
Áb_ho°_t
 *
ho°
 = 
h_¨g
;

34 i‡(
ho°
 =
‰ouã
->
§c
)  0;

37 
	}
}

45 
	$Áb_rouã_to_ho°_cmp
(*
rouã_ñem
, *
h_¨g
)

47 
Áb_rouã_t
 *
‰ouã
 = 
rouã_ñem
;

48 
Áb_ho°_t
 *
ho°
 = 
h_¨g
;

50 i‡(
ho°
 =
‰ouã
->
d°
)  0;

53 
	}
}

61 
	$Áb_dump_sögÀ_≥ndög_rouã
(*
rouã
, *
¨g
 
UNUSED
)

63 
Áb_rouã_t
 *
‰ouã
 = 
rouã
;

65 
	`c_log_debug
("%s: PendingÑoute between (0x%llx:%d -Port(%u)) -> (0x%llx:%d - Port (%u))",

66 
FN
, 
‰ouã
->
§c
->
sw
.
swid
, frouã->§c->sw.
Æüs
 , frouã->§c->sw.
p‹t
,

67 
‰ouã
->
d°
->
sw
.
swid
, frouã->d°->sw.
Æüs
, frouã->d°->sw.
p‹t
);

68 
	}
}

79 
	$__Áb_lo›_Æl_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
, 
GFunc
 
ôî_‚
, *
u_d©a
)

81 i‡(
Áb_˘x
->
π_≥ndög_li°
) {

82 
	`g_¶i°_f‹óch
(
Áb_˘x
->
π_≥ndög_li°
,

83 (
GFunc
)
ôî_‚
, 
u_d©a
);

85 
	}
}

93 
	$Áb_rouã_ñem_›‹t_cmp
(*
π_∑th_¨g
, *
sw_¨g
)

95 
π_∑th_ñem_t
 *
π_ñem
 = 
π_∑th_¨g
;

96 
Áb_ho°_sw_t
 *
sw
 = 
sw_¨g
;

98 i‡(
π_ñem
->
sw_Æüs
 =
sw
->
Æüs
 &&

99 
π_ñem
->
lök
.
œ
 =
sw
->
p‹t
) {

100 
	`c_log_îr
("%s: M©ch", 
FN
);

105 
	}
}

115 
	$Áb_≥r_swôch_rouã_ö°Æl
(*
π
, *
u_¨g
)

117 
π_∑th_ñem_t
 *
π_ñem
 = 
π
;

118 
Áb_rouã_t
 *
‰ouã
 = 
u_¨g
;

119 
uöt8_t
 *
a˘i⁄s
, *
∑˘i⁄s
;

120 
size_t
 
a˘i⁄_Àn
 = (
oÂ_a˘i⁄_ouçut
);

121 
uöt16_t
 
out_p‹t
;

122 
uöt16_t
 
ã«¡_id
;

123 
boﬁ
 
fh›
, 
lh›
;

124 
boﬁ
 
add_pkt_ã«¡
 = 
Ál£
, 
°rù_pkt_ã«¡
 = false;

126 
	`c_log_îr
("%s: ", 
FN
);

128 
lh›
 = 
π_ñem
->
Êags
 & 
RT_PELEM_LAST_HOP
 ? 
åue
: 
Ál£
;

129 
fh›
 = 
π_ñem
->
Êags
 & 
RT_PELEM_FIRST_HOP
 ? 
åue
: 
Ál£
;

131 
ã«¡_id
 = 
	`Áb_äid_to_tid
(
‰ouã
->
§c
->
hkey
.
ä_id
);

132 
out_p‹t
 = 
lh›
 ? 
‰ouã
->
d°
->
sw
.
p‹t
 : 
π_ñem
->
lök
.
œ
;

138 
π_ñem
->
lök
.
œ
 = 
out_p‹t
;

140 i‡(
ã«¡_id
) {

141 i‡(
lh›
 && 
fh›
) {

142 
≠∂y_rouã
;

143 } i‡(
fh›
) {

144 
a˘i⁄_Àn
 +(
oÂ_a˘i⁄_vœn_vid
);

145 
add_pkt_ã«¡
 = 
åue
;

146 
≠∂y_rouã
;

147 } i‡(!
lh›
) {

148 
a˘i⁄_Àn
 +(
oÂ_a˘i⁄_vœn_vid
);

149 
add_pkt_ã«¡
 = 
åue
;

152 
a˘i⁄_Àn
 +(
oÂ_a˘i⁄_hódî
);

153 
°rù_pkt_ã«¡
 = 
åue
;

156 
	`Áb_add_ã«¡_id
(&
‰ouã
->
π_Êow
, &‰ouã->
π_wûdˇrds
, 
ã«¡_id
);

159 
≠∂y_rouã
:

160 
a˘i⁄s
 = 
	`Áb_zÆloc
(
a˘i⁄_Àn
);

161 
∑˘i⁄s
 = 
a˘i⁄s
;

163 i‡(
add_pkt_ã«¡
) {

164 
	`of_make_a˘i⁄_£t_vid
((**)&
∑˘i⁄s
,

165 (
oÂ_a˘i⁄_vœn_vid
),

166 
ã«¡_id
);

167 
∑˘i⁄s
 +(
oÂ_a˘i⁄_vœn_vid
);

168 } i‡(
°rù_pkt_ã«¡
) {

169 
	`of_make_a˘i⁄_°rù_vœn
((**)&
∑˘i⁄s
,

170 (
oÂ_a˘i⁄_hódî
));

171 
∑˘i⁄s
 +(
oÂ_a˘i⁄_hódî
);

174 
	`of_make_a˘i⁄_ouçut
((**)&
∑˘i⁄s
,

175 (
oÂ_a˘i⁄_ouçut
),

176 
out_p‹t
);

178 
	`mul_≠p_£nd_Êow_add
(
FAB_APP_NAME
, 
NULL
, (
uöt64_t
)(
π_ñem
->
sw_Æüs
),

179 &
‰ouã
->
π_Êow
, 
FAB_UNK_BUFFER_ID
,

180 
a˘i⁄s
, 
a˘i⁄_Àn
,

181 0, 0, 
‰ouã
->
π_wûdˇrds
,

182 
‰ouã
->
¥io
, 
C_FL_ENT_SWALIAS
);

184 
‰ouã
->
π_Êow
.
dl_ty≥
 = 
	`¡ohs
(
ETH_TYPE_ARP
);

185 
	`mul_≠p_£nd_Êow_add
(
FAB_APP_NAME
, 
NULL
, (
uöt64_t
)(
π_ñem
->
sw_Æüs
),

186 &
‰ouã
->
π_Êow
, 
FAB_UNK_BUFFER_ID
,

187 
a˘i⁄s
, 
a˘i⁄_Àn
,

188 0, 0, 
‰ouã
->
π_wûdˇrds
,

189 
‰ouã
->
¥io
, 
C_FL_ENT_SWALIAS
);

192 
‰ouã
->
π_Êow
.
dl_ty≥
 = 
	`¡ohs
(
ETH_TYPE_IP
);

193 i‡(
ã«¡_id
) {

194 
	`Áb_ª£t_ã«¡_id
(&
‰ouã
->
π_Êow
, &‰ouã->
π_wûdˇrds
);

196 
	}
}

206 
	$Áb_≥r_swôch_rouã_unö°Æl
(*
π
, *
u_¨g
)

208 
π_∑th_ñem_t
 *
π_ñem
 = 
π
;

209 
Áb_rouã_t
 *
‰ouã
 = 
u_¨g
;

210 
uöt16_t
 
ã«¡_id
 = 
	`Áb_äid_to_tid
(
‰ouã
->
§c
->
hkey
.
ä_id
);

211 
boﬁ
 
fh›
;

214 
	`c_log_debug
("%s: ", 
FN
);

216 
fh›
 = 
π_ñem
->
Êags
 & 
RT_PELEM_FIRST_HOP
 ? 
åue
: 
Ál£
;

217 i‡(
ã«¡_id
 && !
fh›
) {

218 
	`Áb_add_ã«¡_id
(&
‰ouã
->
π_Êow
, &‰ouã->
π_wûdˇrds
, 
ã«¡_id
);

221 
	`mul_≠p_£nd_Êow_dñ
(
FAB_APP_NAME
, 
NULL
, (
uöt64_t
)(
π_ñem
->
sw_Æüs
),

222 &
‰ouã
->
π_Êow
, frouã->
π_wûdˇrds
, 
OFPP_NONE
,

223 
‰ouã
->
¥io
, 
C_FL_ENT_SWALIAS
);

225 #i‚de‡
CONFIG_HAVE_PROXY_ARP


226 
‰ouã
->
π_Êow
.
dl_ty≥
 = 
	`¡ohs
(
ETH_TYPE_ARP
);

227 
	`mul_≠p_£nd_Êow_dñ
(
FAB_APP_NAME
, 
NULL
, (
uöt64_t
)(
π_ñem
->
sw_Æüs
),

228 &
‰ouã
->
π_Êow
, frouã->
π_wûdˇrds
, 
OFPP_NONE
,

229 
‰ouã
->
¥io
, 
C_FL_ENT_SWALIAS
);

232 
‰ouã
->
π_Êow
.
dl_ty≥
 = 
	`¡ohs
(
ETH_TYPE_IP
);

233 i‡(
ã«¡_id
 && !
fh›
) {

234 
	`Áb_ª£t_ã«¡_id
(&
‰ouã
->
π_Êow
, &‰ouã->
π_wûdˇrds
);

236 
	}
}

245 
	$Áb_rouã_ö°Æl
(
Áb_rouã_t
 *
‰ouã
)

247 
‰ouã
->
Êags
 &~
FAB_ROUTE_DIRTY
;

248 
	`mul_rouã_∑th_åavî£
(
‰ouã
->
úouã
, 
Áb_≥r_swôch_rouã_ö°Æl
,

249 
‰ouã
);

250 
	}
}

259 
	$Áb_rouã_unö°Æl
(
Áb_rouã_t
 *
‰ouã
)

261 
	`mul_rouã_∑th_åavî£
(
‰ouã
->
úouã
, 
Áb_≥r_swôch_rouã_unö°Æl
,

262 
‰ouã
);

263 
‰ouã
->
Êags
 |
FAB_ROUTE_DEAD
;

264 
	}
}

273 
	$Áb_z≠rouã
(*
rouã
)

275 
Áb_rouã_t
 *
‰ouã
 = 
rouã
;

277 i‡(
‰ouã
->
úouã
) {

278 
	`mul_de°roy_rouã
(
‰ouã
->
úouã
);

281 
	`Áb_ho°_put
(
‰ouã
->
§c
);

282 
	`Áb_ho°_put
(
‰ouã
->
d°
);

284 
	`Áb_‰ì
(
‰ouã
);

285 
	}
}

296 
	$__Áb_dñ_≥ndög_rouã
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Áb_rouã_t
 *
‰ouã
)

298 
Áb_˘x
->
π_≥ndög_li°
 = 
	`g_¶i°_ªmove
(Áb_˘x->π_≥ndög_li°, 
‰ouã
);

299 
	}
}

310 
	$__Áb_dñ_≥ndög_rouãs_to‰o_ho°
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Áb_ho°_t
 *
ho°
)

312 
GSLi°
 *
ôî©‹
;

314 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
Áb_˘x
->
π_≥ndög_li°
,

315 
ho°
,

316 (
GCom∑ªFunc
)
Áb_rouã_‰om_ho°_cmp
);

318 i‡(
ôî©‹
) {

319 
	`__Áb_dñ_≥ndög_rouã
(
Áb_˘x
, 
ôî©‹
->
d©a
);

322 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
Áb_˘x
->
π_≥ndög_li°
,

323 
ho°
,

324 (
GCom∑ªFunc
)
Áb_rouã_to_ho°_cmp
);

326 i‡(
ôî©‹
) {

327 
	`__Áb_dñ_≥ndög_rouã
(
Áb_˘x
, 
ôî©‹
->
d©a
);

329 
	}
}

340 
	$__Áb_add_to_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
, 
Áb_rouã_t
 *
‰ouã
)

342 
‰ouã
->
expúy_ts
 = 
	`time
(
NULL
Ë+ 
FAB_ROUTE_RETRY_INIT_TS
;

343 
Áb_˘x
->
π_≥ndög_li°
 = 
	`g_¶i°_≠≥nd
(Áb_˘x->π_≥ndög_li°, 
‰ouã
);

344 
	}
}

353 
	$Áb_Êush_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
)

355 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

356 
	`g_¶i°_‰ì_fuŒ
(
Áb_˘x
->
π_≥ndög_li°
, (
GDe°royNŸify
)
Áb_z≠rouã
);

357 
Áb_˘x
->
π_≥ndög_li°
 = 
NULL
;

358 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

359 
	}
}

369 
	$Áb_ªåy_≥ndög_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
, 
time_t
 
cuº_ts
)

371 
GSLi°
 *
ôî©‹
, *
¥ev
 = 
NULL
;

372 
Áb_rouã_t
 *
‰ouã
;

373 
boﬁ
 
sˇn_Æl_≥ndög
;

374 
num_runs
 = 0;

376 
°¨t
:

377 
sˇn_Æl_≥ndög
 = 
Áb_˘x
->
π_sˇn_Æl_≥ndög
;

378 
Áb_˘x
->
π_sˇn_Æl_≥ndög
 ^= fab_ctx->rt_scan_all_pending;

380 
	`c_wr_lock
(&
Áb_˘x
->
lock
);

382 
ª°¨t
:

383 
¥ev
 = 
NULL
;

384 
ôî©‹
 = 
Áb_˘x
->
π_≥ndög_li°
;

385 
ôî©‹
) {

386 
‰ouã
 = 
ôî©‹
->
d©a
;

387 if(
sˇn_Æl_≥ndög
 ||

388 
cuº_ts
 > 
‰ouã
->
expúy_ts
) {

389 
	`c_log_debug
("%s: PendingÑoute between (0x%x) -> (0x%x)",

390 
FN
, 
‰ouã
->
§c
->
hkey
.
ho°_ù
, frouã->
d°
->hkey.host_ip);

393 i‡((
‰ouã
->
úouã
 = 
	`mul_rouã_gë
(
Áb_˘x
->
rouã_£rvi˚
,

394 
‰ouã
->
§c
->
sw
.
Æüs
,

395 
‰ouã
->
d°
->
sw
.
Æüs
)) ||

396 
‰ouã
->
§c
->
dód
 || frouã->
d°
->dead) {

398 i‡(!
‰ouã
->
§c
->
dód
 && !‰ouã->
d°
->dead) {

401 
	`c_wr_lock
(&
‰ouã
->
d°
->
lock
);

402 
‰ouã
->
d°
->
ho°_rouãs
 =

403 
	`g_¶i°_≠≥nd
(
‰ouã
->
d°
->
ho°_rouãs
, froute);

404 
	`Áb_rouã_ö°Æl
(
‰ouã
);

405 
	`c_wr_u∆ock
(&
‰ouã
->
d°
->
lock
);

407 
	`c_log_debug
("%s: Z≠≥dÑouã(%d)->(%d)", 
FN
,

408 
‰ouã
->
§c
->
sw
.
Æüs
, frouã->
d°
->sw.alias);

409 
	`Áb_z≠rouã
(
‰ouã
);

413 i‡(
¥ev
) {

414 
¥ev
->
√xt
 = 
ôî©‹
->next;

416 
Áb_˘x
->
π_≥ndög_li°
 = 
ôî©‹
->
√xt
;

418 
	`g_¶i°_‰ì_1
(
ôî©‹
);

419 
ª°¨t
;

421 
‰ouã
->
expúy_ts
 = 
cuº_ts
 + 
FAB_ROUTE_RETRY_TS
;

424 
¥ev
 = 
ôî©‹
;

425 
ôî©‹
 = iãøt‹->
√xt
;

428 
	`c_wr_u∆ock
(&
Áb_˘x
->
lock
);

430 i‡(
Áb_˘x
->
π_sˇn_Æl_≥ndög
 && ++
num_runs
 > 
FAB_MAX_PENDING_LOOPS
) {

431 
°¨t
;

434 i‡(
num_runs
 > 
FAB_MAX_PENDING_LOOPS
) {

435 
	`c_log_îr
("%s: R™Åoÿm™yÅimes", 
FN
);

437 
	}
}

446 
Áb_rouã_t
 *

447 
	$Áb_mkrouã
(
Áb_ho°_t
 *
§c
, fab_ho°_à*
d°
)

449 
Áb_rouã_t
 *
‰ouã
;

451 
‰ouã
 = 
	`Áb_zÆloc
((
Áb_rouã_t
));

453 
	`Áb_ho°_gë
(
§c
);

454 
	`Áb_ho°_gë
(
d°
);

455 
‰ouã
->
§c
 = src;

456 
‰ouã
->
d°
 = dst;

457 
‰ouã
->
Êags
 = 
FAB_ROUTE_DIRTY
;

458 i‡(
‰ouã
->
§c
->
sw
.
Æüs
 =‰ouã->
d°
->sw.alias) {

459 
‰ouã
->
Êags
 |
FAB_ROUTE_SAME_SWITCH
;

462 
‰ouã
->
π_wûdˇrds
 = 
OFPFW_ALL
;

465 
	`Áb_add_ã«¡_id
(&
‰ouã
->
π_Êow
, &‰ouã->
π_wûdˇrds
,

466 
	`Áb_äid_to_tid
(
§c
->
hkey
.
ä_id
));

469 i‡(
§c
->
dÊ_gw
 || 
d°
->dfl_gw) {

470 
‰ouã
->
¥io
 = 
C_FL_PRIO_DFL
;

472 
‰ouã
->
¥io
 = 
C_FL_PRIO_FWD
;

475 i‡(!
§c
->
dÊ_gw
) {

476 
‰ouã
->
π_Êow
.
nw_§c
 = 
	`¡ohl
(
§c
->
hkey
.
ho°_ù
);

477 
‰ouã
->
π_wûdˇrds
 &~(
OFPFW_NW_SRC_MASK
);

480 i‡(!
d°
->
dÊ_gw
) {

481 
‰ouã
->
π_Êow
.
nw_d°
 = 
	`¡ohl
(
d°
->
hkey
.
ho°_ù
);

482 
‰ouã
->
π_wûdˇrds
 &~(
OFPFW_NW_DST_MASK
);

485 
‰ouã
->
π_Êow
.
dl_ty≥
 = 
	`¡ohs
(
ETH_TYPE_IP
);

486 
‰ouã
->
π_wûdˇrds
 &~(
OFPFW_DL_TYPE
);

488 
‰ouã
->
úouã
 = 
	`mul_rouã_gë
(
Áb_˘x
->
rouã_£rvi˚
,

489 
§c
->
sw
.
Æüs
, 
d°
->sw.alias);

490 i‡(!
‰ouã
->
úouã
) {

491 
	`c_log_îr
("%s: No hostÑoute src(0x%x)[0x%llx:%d]->dst(0x%x)[0x%llx:%d]",

492 
FN
, 
§c
->
hkey
.
ho°_ù
, src->
sw
.
swid
, src->sw.
Æüs
,

493 
d°
->
hkey
.
ho°_ù
, d°->
sw
.
swid
, d°->sw.
Æüs
);

494 
	`__Áb_add_to_≥ndög_rouãs
(
Áb_˘x
, 
‰ouã
);

496  
NULL
;

499  
‰ouã
;

500 
	}
}

511 
	$__Áb_lo›_Æl_ho°_rouãs
(
Áb_ho°_t
 *
ho°
, 
GFunc
 
ôî_‚
, *
u_d©a
)

513 i‡(
ho°
->
ho°_rouãs
) {

514 
	`g_¶i°_f‹óch
(
ho°
->
ho°_rouãs
,

515 (
GFunc
)
ôî_‚
, 
u_d©a
);

517 
	}
}

529 
	$Áb_lo›_Æl_ho°_rouãs
(
Áb_ho°_t
 *
ho°
, 
GFunc
 
ôî_‚
, *
u_d©a
)

531 
	`c_rd_lock
(&
ho°
->
lock
);

532 i‡(
ho°
->
ho°_rouãs
) {

533 
	`g_¶i°_f‹óch
(
ho°
->
ho°_rouãs
,

534 (
GFunc
)
ôî_‚
, 
u_d©a
);

536 
	`c_rd_u∆ock
(&
ho°
->
lock
);

537 
	}
}

547 
	$Áb_ho°_rouã_dñëe_1
(*
úouã
, *
u_¨g
 
UNUSED
)

549 
	`Áb_rouã_unö°Æl
(
úouã
);

550 
	`Áb_z≠rouã
(
úouã
);

551 
	}
}

559 
	$Áb_ho°_rouã_add
(
Áb_ho°_t
 *
§c
, fab_ho°_à*
d°
)

561 
Áb_rouã_t
 *
‰ouã
;

563 i‡(
§c
 =
d°
) {

567 
‰ouã
 = 
	`Áb_mkrouã
(
§c
, 
d°
);

568 i‡(
‰ouã
) {

569 
	`c_wr_lock
(&
d°
->
lock
);

570 
d°
->
ho°_rouãs
 = 
	`g_¶i°_≠≥nd
(d°->ho°_rouãs, 
‰ouã
);

571 
	`Áb_rouã_ö°Æl
(
‰ouã
);

572 
	`c_wr_u∆ock
(&
d°
->
lock
);

578 
	}
}

588 
	$Áb_ho°_≥r_ã«¡_nw_add_rouã_∑ú
(*
sho°
, *
dho°
)

590 
	`Áb_ho°_rouã_add
(
sho°
, 
dho°
);

591 
	`Áb_ho°_rouã_add
(
dho°
, 
sho°
);

592 
	}
}

602 
	$Áb_ho°_≥r_ã«¡_nw_add_rouã
(*
sho°
, *
dho°
)

604 
	`Áb_ho°_rouã_add
(
sho°
, 
dho°
);

605 
	}
}

613 
	$Áb_rouã_p‹t_cmp
(*
rouã_ñem
, *
sw_¨g
)

615 
Áb_rouã_t
 *
‰ouã
 = 
rouã_ñem
;

616 
GSLi°
 *
ôî©‹
;

618 i‡(!
‰ouã
->
úouã
)  1;

620 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
‰ouã
->
úouã
,

621 
sw_¨g
,

622 (
GCom∑ªFunc
)
Áb_rouã_ñem_›‹t_cmp
);

623 i‡(
ôî©‹
)  0;

626 
	}
}

636 
	$Áb_ho°_≥r_ã«¡_nw_dñëe_rouã
(*
ñem_ho°
, *
¨g_ho°
)

638 
Áb_ho°_t
 *
ho°
 = 
ñem_ho°
;

639 
Áb_ho°_t
 *
dñ_ho°
 = 
¨g_ho°
;

640 
GSLi°
 *
ôî©‹
;

642 i‡(
ho°
 =
dñ_ho°
) {

646 
	`c_wr_lock
(&
ho°
->
lock
);

647 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
ho°
->
ho°_rouãs
,

648 
dñ_ho°
,

649 (
GCom∑ªFunc
)
Áb_rouã_‰om_ho°_cmp
);

650 i‡(!
ôî©‹
) {

651 
	`c_log_îr
("%s: No hostÑoute between (0x%llx:%d) -> (0x%llx:%d)",

652 
FN
, 
dñ_ho°
->
sw
.
swid
, dñ_ho°->sw.
Æüs
,

653 
ho°
->
sw
.
swid
, ho°->sw.
Æüs
);

654 
	`c_wr_u∆ock
(&
ho°
->
lock
);

658 
	`Áb_ho°_rouã_dñëe_1
(
ôî©‹
->
d©a
, 
NULL
);

660 
ho°
->
ho°_rouãs
 = 
	`g_¶i°_ªmove
(ho°->ho°_rouãs, 
ôî©‹
->
d©a
);

661 
	`c_wr_u∆ock
(&
ho°
->
lock
);

664 
	}
}

676 
	$__Áb_rouãs_to‰o_ho°_add
(*
ho°_¨g
, *
u_¨g
)

678 
Áb_ho°_t
 *
ho°
 = 
ho°_¨g
;

679 
boﬁ
 
ö°Æl_∑ú
 = *(boﬁ *)
u_¨g
;

682 i‡(
Áb_˘x
->
π_ªˇlc_≥ndög
) {

683 
	`c_log_îr
("%s: C™àadd ho°Ñouã - PídögÑeˇ»evít", 
FN
);

687 
	`__Áb_ã«¡_nw_lo›_Æl_ho°s
(
ho°
->
ã«¡_nw
,

688 
ö°Æl_∑ú
 ?

689 
Áb_ho°_≥r_ã«¡_nw_add_rouã_∑ú
 :

690 
Áb_ho°_≥r_ã«¡_nw_add_rouã
,

691 
ho°
);

692 
	}
}

699 
	$__Áb_ho°_rouã_dñ_wôh_p‹t
(*
ho°_¨g
, *
key_¨g
 
UNUSED
,

700 *
sw_¨g
)

702 
Áb_ho°_t
 *
ho°
 = 
ho°_¨g
;

703 
GSLi°
 *
ôî©‹
;

704 
Áb_rouã_t
 *
‰ouã
;

706 
	`c_wr_lock
(&
ho°
->
lock
);

707 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
ho°
->
ho°_rouãs
,

708 
sw_¨g
,

709 (
GCom∑ªFunc
)
Áb_rouã_p‹t_cmp
);

710 i‡(!
ôî©‹
) {

711 
	`c_wr_u∆ock
(&
ho°
->
lock
);

715 
‰ouã
 = 
ôî©‹
->
d©a
;

716 
	`Áb_rouã_unö°Æl
(
‰ouã
);

718 
ho°
->
ho°_rouãs
 = 
	`g_¶i°_ªmove
(ho°->ho°_rouãs, 
ôî©‹
->
d©a
);

719 
	`c_wr_u∆ock
(&
ho°
->
lock
);

721 
	`mul_de°roy_rouã
(
‰ouã
->
úouã
);

722 
‰ouã
->
úouã
 = 
NULL
;

724 
	`u¶ìp
(10000);

725 
	`Áb_ho°_≥r_ã«¡_nw_add_rouã
(
‰ouã
->
§c
, frouã->
d°
);

726 
	`Áb_z≠rouã
(
‰ouã
);

734 
	}
}

747 
	$__Áb_ho°_rouã_dñëe
(*
ho°_¨g
, *
v_¨g
 
UNUSED
, *
˘x_¨g
 UNUSED)

749 
Áb_ho°_t
 *
ho°
 = 
ho°_¨g
;

751 
	`c_log_îr
("%s", 
FN
);

752 
	`c_wr_lock
(&
ho°
->
lock
);

754 
	`__Áb_lo›_Æl_ho°_rouãs
(
ho°
, 
Áb_ho°_rouã_dñëe_1
, 
Áb_˘x
);

755 
	`g_¶i°_‰ì
(
ho°
->
ho°_rouãs
);

756 
ho°
->
ho°_rouãs
 = 
NULL
;

758 
	`c_wr_u∆ock
(&
ho°
->
lock
);

760 
	`__Áb_ã«¡_nw_lo›_Æl_ho°s
(
ho°
->
ã«¡_nw
,

761 
Áb_ho°_≥r_ã«¡_nw_dñëe_rouã
,

762 
ho°
);

763 
	}
}

772 
	$Áb_ª£t_Æl_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
)

774 
Áb_˘x
->
π_ªˇlc_≥ndög
 = 
åue
;

775 
Áb_˘x
->
π_ªˇlc_ts
 = 
	`time
(
NULL
Ë+ 
FAB_RT_RECALC_TS
;

777 
	`Áb_lo›_Æl_ho°s
(
Áb_˘x
, (
GHFunc
)
__Áb_ho°_rouã_dñëe
, fab_ctx);

779 
	}
}

788 
	$Áb_add_Æl_rouãs
(
Áb_°ru˘_t
 *
Áb_˘x
)

790 
boﬁ
 
add_∑ú
 = 
Ál£
;

791 
	`Áb_lo›_Æl_ho°s
(
Áb_˘x
, (
GHFunc
)
__Áb_rouãs_to‰o_ho°_add
, &
add_∑ú
);

792 
	}
}

803 
	$Áb_dñëe_rouãs_wôh_p‹t
(
Áb_°ru˘_t
 *
Áb_˘x
, 
sw_Æüs
, 
uöt16_t
 
p‹t_no
)

805 
Áb_ho°_sw_t
 
sw
 = { 0, 0, 0};

806 
sw
.
Æüs
 = 
sw_Æüs
;

807 
sw
.
p‹t
 = 
p‹t_no
;

809 
	`Áb_lo›_Æl_ho°s_wr
(
Áb_˘x
, (
GHFunc
)
__Áb_ho°_rouã_dñ_wôh_p‹t
, &
sw
);

810 
	}
}

819 
	$Áb_rouã_≥r_£c_timî
(
Áb_°ru˘_t
 *
Áb_˘x
)

821 
time_t
 
cuº_ts
 = 
	`time
(
NULL
);

823 i‡(
Áb_˘x
->
π_ªˇlc_≥ndög
 &&

824 
cuº_ts
 > 
Áb_˘x
->
π_ªˇlc_ts
) {

825 
Áb_˘x
->
π_ªˇlc_≥ndög
 = 
Ál£
;

826 
	`Áb_add_Æl_rouãs
(
Áb_˘x
);

830 i‡(!
Áb_˘x
->
π_ªˇlc_≥ndög
) {

831 
	`Áb_ªåy_≥ndög_rouãs
(
Áb_˘x
, 
cuº_ts
);

834 
	}
}

	@application/fabric/mul_fabric_servlet.c

20 
	~"mul_Ábric_£rvÀt.h
"

27 
	$Áb_dump_add_ho°_cmd_‰om_Êow
(
uöt64_t
 
dpid
, 
Êow
 *
Ê
)

29 *
pbuf
 = 
	`ˇŒoc
(1, 
HOST_PBUF_SZ
);

30 
Àn
 = 0;

31 
ö_addr
 in_add∏{ .
s_addr
 = 
Ê
->
nw_§c
 };

33 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
HOST_PBUF_SZ
-len-1,

37 
	`Áb_exåa˘_ã«¡_id
(
Ê
),

38 
	`Áb_exåa˘_√tw‹k_id
(
Ê
),

39 
	`öë_¡ﬂ
(
ö_addr
),

40 
Ê
->
dl_§c
[0], fl->dl_src[1],

41 
Ê
->
dl_§c
[2], fl->dl_src[3],

42 
Ê
->
dl_§c
[4], fl->dl_src[5],

43 
dpid
,

44 
	`¡ohs
(
Ê
->
ö_p‹t
),

45 
Ê
->
FL_DFL_GW
 ? "gw" : "non-gw");

46 
	`as£π
(
Àn
 < 
HOST_PBUF_SZ
-1);

47  
pbuf
;

48 
	}
}

50 
boﬁ


51 
	$check_ª∂y_ty≥
(
cbuf
 *
b
, 
uöt32_t
 
cmd_code
)

53 
c_oÂ_aux≠p_cmd_t
 *
coÂ_auc
 = (*)(
b
->
d©a
);

55 i‡(
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
) < (*cofp_auc)) {

56  
Ál£
;

59 i‡(
coÂ_auc
->
hódî
.
ty≥
 !
C_OFPT_AUX_CMD
 ||

60 
coÂ_auc
->
cmd_code
 !
	`ht⁄l
(cmd_code)) {

61  
Ál£
;

64  
åue
;

65 
	}
}

68 
	$mul_Ábric_rouã_lök_dump
(
c_oÂ_rouã_lök
 *
æ
, 
size_t
 
n_löks
)

70 
i
 = 0 , 
Àn
 = 0;

71 *
pbuf
 = 
	`ˇŒoc
(1, 
FAB_DFL_PBUF_SZ
);

73 i‡(!
pbuf
) {

74  
NULL
;

77 ; 
i
 < 
n_löks
; i++) {

78 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FAB_DFL_PBUF_SZ
-len-1,

80 
	`¡ohŒ
(
æ
->
d©≠©h_id
), 
	`¡ohs
‘l->
§c_lök
));

81 i‡(
Àn
 >
FAB_DFL_PBUF_SZ
-1) {

82 
	`c_log_îr
("%s:Öröàbu‡ovîrun", 
FN
);

83 
	`‰ì
(
pbuf
);

84  
NULL
;

86 
æ
++;

89  
pbuf
;

90 
	}
}

97 
	$mul_Ábric_ho°_mod
(*
£rvi˚
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
boﬁ
 
add
)

99 
cbuf
 *
b
;

100 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

101 
c_oÂ_ho°_mod
 *
coÂ_hm
;

102 
ªt
 = -1;

104 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
) +

105 (
c_oÂ_ho°_mod
),

106 
C_OFPT_AUX_CMD
, 0);

108 
coÂ_auc
 = (*)(
b
->
d©a
);

109 
coÂ_auc
->
cmd_code
 = 
add
 ? 
	`ht⁄l
(
C_AUX_CMD_FAB_HOST_ADD
):

110 
	`ht⁄l
(
C_AUX_CMD_FAB_HOST_DEL
);

111 
coÂ_hm
 = (*)(
coÂ_auc
->
d©a
);

112 
coÂ_hm
->
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

113 
	`mem˝y
(&
coÂ_hm
->
ho°_Êow
, 
Ê
, (*fl));

115 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

116 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

117 i‡(
b
) {

118 i‡(
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_SUCCESS
)) {

119 
ªt
 = 0;

122 
	`‰ì_cbuf
(
b
);

125  
ªt
;

126 
	}
}

133 
mul_Ábric_show_ho°s
(*
£rvi˚
, 
boﬁ
 
a˘ive
, boﬁ 
dump_cmd
,

134 *
¨g
, (*
cb_‚
)(*¨g, *
pbuf
))

136 
cbuf
 *
b
;

137 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

138 
c_oÂ_ho°_mod
 *
coÂ_hm
;

139 *
pbuf
;

141 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
),

142 
C_OFPT_AUX_CMD
, 0);

144 
coÂ_auc
 = (*)(
b
->
d©a
);

145 
coÂ_auc
->
cmd_code
 = 
a˘ive
 ?

146 
	`ht⁄l
(
C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS
):

147 
	`ht⁄l
(
C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS
);

148 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

150 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

151 i‡(
b
) {

152 i‡(
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_SUCCESS
) ||

153 !
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_FAB_HOST_ADD
)) {

154 
	`‰ì_cbuf
(
b
);

157 
coÂ_auc
 = (*)(
b
->
d©a
);

158 
coÂ_hm
 = (*)(
coÂ_auc
->
d©a
);

160 i‡(
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
) <

161 (*
coÂ_auc
Ë+ (*
coÂ_hm
)) {

162 
	`‰ì_cbuf
(
b
);

167 i‡(!
dump_cmd
) {

168 
pbuf
 = 
	`Áb_dump_sögÀ_ho°_‰om_Êow
(

169 
	`¡ohŒ
(
coÂ_hm
->
swôch_id
.
d©≠©h_id
),

170 &
coÂ_hm
->
ho°_Êow
);

172 
pbuf
 = 
	`Áb_dump_add_ho°_cmd_‰om_Êow
(

173 
	`¡ohŒ
(
coÂ_hm
->
swôch_id
.
d©≠©h_id
),

174 &
coÂ_hm
->
ho°_Êow
);

176 i‡(
pbuf
) {

177 
	`cb_‚
(
¨g
, 
pbuf
);

178 
	`‰ì
(
pbuf
);

180 
	`‰ì_cbuf
(
b
);

185 
	}
}

193 
mul_Ábric_show_rouãs
(*
£rvi˚
,

194 *
¨g
,

195 (*
show_§c_ho°
)(*
¨g
, *
pbuf
),

196 (*
show_d°_ho°
)(*
¨g
, *
pbuf
),

197 (*
show_rouã_löks
)(*
¨g
, *
pbuf
))

199 
cbuf
 *
b
;

200 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

201 
c_oÂ_rouã
 *
coÂ_r
;

202 
c_oÂ_rouã_lök
 *
coÂ_æ
;

203 *
pbuf
;

204 
size_t
 
n_löks
 = 0;

206 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
),

207 
C_OFPT_AUX_CMD
, 0);

209 
coÂ_auc
 = (*)(
b
->
d©a
);

210 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_FAB_SHOW_ROUTES
);

211 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

213 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

214 i‡(
b
) {

215 i‡(
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_SUCCESS
) ||

216 !
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_FAB_ROUTE
)) {

217 
	`‰ì_cbuf
(
b
);

220 
coÂ_auc
 = (*)(
b
->
d©a
);

222 i‡(
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
) <

223 (*
coÂ_auc
Ë+ (*
coÂ_r
)) {

224 
	`‰ì_cbuf
(
b
);

227 
n_löks
 = (
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
) -

228 ((*
coÂ_auc
Ë+ (*
coÂ_r
)))/(*
coÂ_æ
);

229 
coÂ_r
 = (*)(
coÂ_auc
->
d©a
);

230 
pbuf
 = 
	`Áb_dump_sögÀ_ho°_‰om_Êow
(

231 
	`¡ohŒ
(
coÂ_r
->
§c_ho°
.
swôch_id
.
d©≠©h_id
),

232 &
coÂ_r
->
§c_ho°
.
ho°_Êow
);

233 i‡(
pbuf
) {

234 
	`show_§c_ho°
(
¨g
, 
pbuf
);

235 
	`‰ì
(
pbuf
);

237 
pbuf
 = 
	`Áb_dump_sögÀ_ho°_‰om_Êow
(

238 
	`¡ohŒ
(
coÂ_r
->
d°_ho°
.
swôch_id
.
d©≠©h_id
),

239 &
coÂ_r
->
d°_ho°
.
ho°_Êow
);

240 i‡(
pbuf
) {

241 
	`show_d°_ho°
(
¨g
, 
pbuf
);

242 
	`‰ì
(
pbuf
);

245 
pbuf
 = 
	`mul_Ábric_rouã_lök_dump
(

246 (*)(
coÂ_r
->
rouã_löks
), 
n_löks
);

247 i‡(
pbuf
) {

248 
	`show_rouã_löks
(
¨g
, 
pbuf
);

249 
	`‰ì
(
pbuf
);

252 
	`‰ì_cbuf
(
b
);

257 
	}
}

	@application/fabric/mul_fabric_servlet.h

19 #i‚de‡ 
__MUL_FABRIC_SERVLET_H__


20 
	#__MUL_FABRIC_SERVLET_H__


	)

22 
	~"mul_comm⁄.h
"

23 
	~"mul_Ábric_utû.h
"

24 
	~"mul_rouã.h
"

25 
	~"mul_rouã_≠•.h
"

28 
	#FAB_DFL_PBUF_SZ
 (4096)

	)

30 
mul_Ábric_ho°_mod
(*
£rvi˚
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
boﬁ
 
add
);

31 
mul_Ábric_show_ho°s
(*
£rvi˚
, 
boﬁ
 
a˘ive
, boﬁ 
dump_cmd
,

32 *
¨g
, (*
cb_‚
)(*¨g, *
pbuf
));

33 
	`mul_Ábric_show_rouãs
(*
£rvi˚
,

34 *
¨g
,

35 (*
show_§c_ho°
)(*
¨g
, *
pbuf
),

36 (*
show_d°_ho°
)(*
¨g
, *
pbuf
),

37 (*
show_rouã_löks
)(*
¨g
, *
pbuf
));

	@application/fabric/mul_fabric_switches.c

19 
	~"mul_Ábric_comm⁄.h
"

21 
Áb_°ru˘_t
 *
Áb_˘x
;

29 
	$Áb_p‹tid_hash_func
(c⁄° * 
key
)

31  *((
uöt16_t
 *)
key
);

32 
	}
}

40 
	$Áb_p‹tid_eq_func
(c⁄° *
key1
, c⁄° *
key2
)

42 
uöt16_t
 
idA
 = *((uöt16_à*)
key1
);

43 
uöt16_t
 
idB
 = *((uöt16_à*)
key2
);

45  
idA
 =
idB
;

46 
	}
}

53 
Áb_swôch_t
 *

54 
	$__Áb_swôch_föd_wôh_dpid
(
Áb_°ru˘_t
 *
˘x
, 
uöt64_t
 
dpid
)

56 
Áb_swôch_t
 *
Áb_sw
;

57 
i
 = 0;

59 ; 
i
 < 
MAX_SWITCHES_PER_CLUSTER
; i++) {

60 
Áb_sw
 = (((
Áb_swôch_t
 *)(
˘x
->
sw_li°
)Ë+ 
i
);

61 i‡(!
Áb_sw
->
vÆid
) {

65 i‡(
Áb_sw
->
dpid
 == dpid)  fab_sw;

68  
NULL
;

69 
	}
}

76 
Áb_swôch_t
 *

77 
	$__Áb_swôch_föd
(
Áb_°ru˘_t
 *
˘x
, 
Æüs
)

79 
Áb_swôch_t
 *
Áb_sw
;

81 i‡(
Æüs
 < 0 ||álü†>
MAX_SWITCHES_PER_CLUSTER
) {

82 
	`c_log_îr
("%s: Swôchálü†id (%dËouào‡bound", 
FN
, 
Æüs
);

83  
NULL
;

86 
Áb_sw
 = (((
Áb_swôch_t
 *)(
˘x
->
sw_li°
)Ë+ 
Æüs
);

88 i‡(!
Áb_sw
->
vÆid
) {

89  
NULL
;

92  
Áb_sw
;

93 
	}
}

101 
	$__Áb_p‹t_add
(
Áb_°ru˘_t
 *
˘x
 
UNUSED
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
)

103 
Áb_p‹t_t
 *
p‹t
;

105 i‡(!
sw
) {

106 
	`c_log_îr
("%s: NuŒ swôch", 
FN
);

110 i‡(
p‹t_no
 > 
OFPP_MAX
){

114 
p‹t
 = 
	`Áb_zÆloc
((
Áb_p‹t_t
));

115 
p‹t
->
p‹t_no
 =Öort_no;

117 i‡(
	`g_hash_èbÀ_lookup
(
sw
->
p‹t_htbl
, 
p‹t
)) {

118 
	`c_log_îr
("%s: Sw(0x%llx)Öort (%u)álreadyÖresent",

119 
FN
, 
sw
->
dpid
, 
p‹t_no
);

120 
	`Áb_‰ì
(
p‹t
);

124 
	`g_hash_èbÀ_ö£π
(
sw
->
p‹t_htbl
, 
p‹t
,Öort);

126 
	`c_log_debug
("%s:swôch (0x%ŒxËp‹t(%dËadded", 
FN
, 
sw
->
dpid
, 
p‹t_no
);

129 
	}
}

137 
	$__Áb_p‹t_dñëe
(
Áb_°ru˘_t
 *
˘x
 
UNUSED
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
)

139 
Áb_p‹t_t
 *
p‹t
;

141 i‡(!
sw
) {

142 
	`c_log_îr
("%s: NuŒ swôch", 
FN
);

146 
p‹t
 = 
	`Áb_zÆloc
((
Áb_p‹t_t
));

147 
p‹t
->
p‹t_no
 =Öort_no;

149 
	`g_hash_èbÀ_ªmove
(
sw
->
p‹t_htbl
, 
p‹t
);

152 
	}
}

160 
	$__Áb_p‹t_dñëe_Æl
(
Áb_°ru˘_t
 *
˘x
 
UNUSED
, 
Áb_swôch_t
 *
sw
)

162 
	`g_hash_èbÀ_de°roy
(
sw
->
p‹t_htbl
);

163 
	}
}

170 
boﬁ


171 
	$__Áb_p‹t_vÆid
(
Áb_°ru˘_t
 *
˘x
 
UNUSED
, 
Áb_swôch_t
 *
sw
, 
uöt16_t
 
p‹t_no
)

173 
Áb_p‹t_t
 
p‹t
;

175 i‡(!
sw
) {

176 
	`c_log_îr
("%s: NuŒ swôch", 
FN
);

180 
	`mem£t
(&
p‹t
, 0, (port));

181 
p‹t
.
p‹t_no
 =Öort_no;

183 i‡(
	`g_hash_èbÀ_lookup
(
sw
->
p‹t_htbl
, &
p‹t
)) {

184  
åue
;

187  
Ál£
;

188 
	}
}

196 
	$__Áb_swôch_add
(
Áb_°ru˘_t
 *
˘x
, 
uöt64_t
 
dpid
, 
Æüs
)

198 
Áb_swôch_t
 *
Áb_sw
;

200 i‡(
Æüs
 < 0 ||álü†>
MAX_SWITCHES_PER_CLUSTER
) {

201 
	`c_log_îr
("%s: Swôchálü†id (%dËouào‡bound", 
FN
, 
Æüs
);

206 
Áb_sw
 = (((
Áb_swôch_t
 *)(
˘x
->
sw_li°
)Ë+ 
Æüs
);

208 i‡(
Áb_sw
->
vÆid
) {

209 i‡(
Áb_sw
->
dpid
 == dpid ||

210 
Áb_sw
->
Æüs
 ==álias) {

211 
	`c_log_îr
("%s: Switchálreadyádded (0x%llx:%d)\n",

212 
FN
, 
dpid
, 
Æüs
);

213  -
EEXIST
;

216 
	`Áb_swôch_dñëe_nŸifõr
(
˘x
, 
Æüs
, 
åue
);

219 
Áb_sw
->
Æüs
 =álias;

220 
Áb_sw
->
dpid
 = dpid;

221 
Áb_sw
->
vÆid
 = 
åue
;

223 
Áb_sw
->
p‹t_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
Áb_p‹tid_hash_func
,

224 
Áb_p‹tid_eq_func
,

225 
NULL
, 
Áb_‰ì
);

226 i‡(!
Áb_sw
->
p‹t_htbl
){

227 
	`c_log_îr
("%s: Eº‹ i¿p‹t†èbÀáŒoc", 
FN
);

231 
	`c_log_debug
("%s:swôch (0x%ŒxËadded", 
FN
, 
dpid
);

234 
	}
}

242 
	$__Áb_swôch_dñ
(
Áb_°ru˘_t
 *
˘x
, 
Æüs
)

244 
Áb_swôch_t
 *
Áb_sw
;

246 i‡(
Æüs
 < 0 ||álü†>
MAX_SWITCHES_PER_CLUSTER
) {

247 
	`c_log_îr
("%s: Swôchálü†id (%dËouào‡bound", 
FN
, 
Æüs
);

251 
Áb_sw
 = (((
Áb_swôch_t
 *)(
˘x
->
sw_li°
)Ë+ 
Æüs
);

253 i‡(!
Áb_sw
->
vÆid
) {

254 
	`c_log_îr
("%s: Switch(alias %d)álready deleted",

255 
FN
, 
Æüs
);

259 
	`g_hash_èbÀ_de°roy
(
Áb_sw
->
p‹t_htbl
);

261 
	`c_log_debug
("%s:swôch (0x%ŒxËdñëed", 
FN
, 
Áb_sw
->
dpid
);

263 
	`mem£t
(
Áb_sw
, 0, (*fab_sw));

266 
	}
}

274 
Áb_swôches_ª£t
(
Áb_°ru˘_t
 *
˘x
,

275 (*
dó˘_ho°s_‚
)(
Áb_°ru˘_t
 *
˘x
,

276 
uöt64_t
 
dpid
))

278 
Æüs
 = 0;

279 
Áb_swôch_t
 *
Áb_sw
;

281 
	`c_wr_lock
(&
˘x
->
lock
);

282 ; 
Æüs
 < 
MAX_SWITCHES_PER_CLUSTER
;álias++) {

283 
Áb_sw
 = (((
Áb_swôch_t
 *)(
˘x
->
sw_li°
)Ë+ 
Æüs
);

285 i‡(!
Áb_sw
->
vÆid
) ;

287 
	`dó˘_ho°s_‚
(
˘x
, 
Áb_sw
->
dpid
);

289 
	`g_hash_èbÀ_de°roy
(
Áb_sw
->
p‹t_htbl
);

290 
	`mem£t
(
Áb_sw
, 0, (*fab_sw));

293 
	`c_wr_u∆ock
(&
˘x
->
lock
);

295 
	`c_log_debug
("%s: ", 
FN
);

296 
	}
}

304 
	$Áb_swôches_öô
(
Áb_°ru˘_t
 *
Áb_˘x
)

306 
	`as£π
(
Áb_˘x
);

308 i‡(!
Áb_˘x
->
sw_li°
) {

309 
Áb_˘x
->
sw_li°
 = 
	`Áb_zÆloc
((
Áb_swôch_t
) *

310 
MAX_SWITCHES_PER_CLUSTER
);

312 
	`c_log_îr
("%s: Swôch iM≠áÃódyáŒoˇãd", 
FN
);

316 
	`as£π
(
Áb_˘x
->
sw_li°
);

319 
	}
}

	@application/fabric/mul_fabric_util.h

19 #i‚de‡
__MUL_FABRIC_UTIL_H__


20 
	#__MUL_FABRIC_UTIL_H__


	)

22 
	#FAB_MK_TEN_NET_ID
(
äid
, 
tid
, 
nid
) \

24 
äid
 = (((
uöt16_t
)(
tid
)Ë<< 16 | (uöt16_t)(
nid
)); \

25 }0)

	)

28 
ölöe
 *

29 
	$Áb_zÆloc
(
size_t
 
sz
)

31 *
±r
;

33 
±r
 = 
	`ˇŒoc
(1, 
sz
);

34 
	`as£π
(
±r
);

36  
±r
;

37 
	}
}

39 
ölöe
 *

40 
	$Áb_mÆloc
(
size_t
 
sz
)

42 *
±r
;

44 
±r
 = 
	`mÆloc
(
sz
);

45 
	`as£π
(
±r
);

47  
±r
;

48 
	}
}

50 
ölöe
 

51 
	$Áb_‰ì
(*
buf
)

53 
	`‰ì
(
buf
);

54 
	}
}

64 
ölöe
 

65 
	$Áb_add_ã«¡_id
(
Êow
 *
Ê
, 
uöt32_t
 *
wûdˇrds
, 
uöt16_t
 
ã«¡_id
)

68 i‡(
wûdˇrds
)

69 *
wûdˇrds
 &~(
OFPFW_DL_VLAN
);

71 
Ê
->
dl_vœn
 = 
	`ht⁄s
(
ã«¡_id
);

72 
	}
}

81 
ölöe
 

82 
	$Áb_ª£t_ã«¡_id
(
Êow
 *
Ê
, 
uöt32_t
 *
wûdˇrds
)

85 i‡(
wûdˇrds
)

86 *
wûdˇrds
 |(
OFPFW_DL_VLAN
);

88 
Ê
->
dl_vœn
 = 0;

89 
	}
}

98 
ölöe
 
uöt16_t


99 
	$Áb_exåa˘_ã«¡_id
(
Êow
 *
Ê
)

101  
	`¡ohs
(
Ê
->
dl_vœn
);

102 
	}
}

111 
ölöe
 

112 
	$Áb_add_√tw‹k_id
(
Êow
 *
Ê
, 
uöt16_t
 
√tw‹k_id
)

114 *(
uöt16_t
 *)&
Ê
->
∑d
[1] = 
	`ht⁄s
(
√tw‹k_id
);

115 
	}
}

124 
ölöe
 
uöt16_t


125 
	$Áb_exåa˘_√tw‹k_id
(
Êow
 *
Ê
)

127  
	`¡ohs
(*(
uöt16_t
 *)&
Ê
->
∑d
[1]);

128 
	}
}

131 
ölöe
 
uöt16_t


132 
	$Áb_äid_to_tid
(
uöt32_t
 
äid
)

134  (
uöt16_t
)((
äid
 > 16) & 0xffff);

135 
	}
}

137 
ölöe
 
uöt16_t


138 
	$Áb_äid_to_nid
(
uöt32_t
 
äid
)

140  (
uöt16_t
)(
äid
 & 0xffff);

141 
	}
}

144 
	#HOST_PBUF_SZ
 512

	)

151 
ölöe
 *

152 
	$Áb_dump_sögÀ_ho°_‰om_Êow
(
uöt64_t
 
dpid
, 
Êow
 *
Ê
)

154 *
pbuf
 = 
	`ˇŒoc
(1, 
HOST_PBUF_SZ
);

155 
Àn
 = 0;

157 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
HOST_PBUF_SZ
-len-1,

161 
	`Áb_exåa˘_ã«¡_id
(
Ê
),

162 
	`Áb_exåa˘_√tw‹k_id
(
Ê
),

163 
	`¡ohl
(
Ê
->
nw_§c
),

164 
Ê
->
dl_§c
[0], fl->dl_src[1],

165 
Ê
->
dl_§c
[2], fl->dl_src[3],

166 
Ê
->
dl_§c
[4], fl->dl_src[5],

167 
dpid
,

168 
	`¡ohs
(
Ê
->
ö_p‹t
),

169 
Ê
->
FL_DFL_GW
 ? "dfl-gw" : "non-gw");

170 
	`as£π
(
Àn
 < 
HOST_PBUF_SZ
-1);

171  
pbuf
;

172 
	}
}

	@application/fabric/mul_fabric_vty.c

18 
	~"mul_Ábric_comm⁄.h
"

19 
	~"mul_vty.h
"

21 
Áb_°ru˘_t
 *
Áb_˘x
;

24 
	$Áb_dump_≥r_rouã_ñem
(*
π_¨g
, *
vty
)

26 
π_∑th_ñem_t
 *
π_ñem
 = 
π_¨g
;

28 
	`vty_out
(
vty
, "Node(%d):Lök(%hu)->", 
π_ñem
->
sw_Æüs
,Ñt_ñem->
lök
.
œ
);

29 
	}
}

31 
DEFUN
 (
show_Áb_rouã
,

32 
show_Áb_rouã_cmd
,

34 
SHOW_STR


40 
	g§c_Æüsid
;

41 
	gd°_Æüsid
;

42 
GSLi°
 *
	gúouã
 = 
NULL
;

44 
	g§c_Æüsid
 = 
©oi
(
¨gv
[0]);

45 
	gd°_Æüsid
 = 
©oi
(
¨gv
[1]);

47 
	gúouã
 = 
mul_rouã_gë
(
Áb_˘x
->
rouã_£rvi˚
, 
§c_Æüsid
, 
d°_Æüsid
);

48 i‡(!
	gúouã
) {

49 
vty_out
(
vty
, "Nÿrouã found%s", 
VTY_NEWLINE
);

50  
	gCMD_SUCCESS
;

53 
vty_out
 (
vty
,

56 
VTY_NEWLINE
);

58 
mul_rouã_∑th_åavî£
(
úouã
, 
Áb_dump_≥r_rouã_ñem
, 
vty
);

60 
vty_out
(
vty
, "%s", 
VTY_NEWLINE
);

62 
vty_out
 (
vty
,

65 
VTY_NEWLINE
);

67 
mul_de°roy_rouã
(
úouã
);

69  
	gCMD_SUCCESS
;

73 
	$__add_Áb_ho°_cmd
(
vty
 *vty, c⁄° **
¨gv
, 
boﬁ
 
is_gw
)

75 
uöt16_t
 
ã«¡_id
;

76 
uöt16_t
 
√tw‹k_id
;

77 
uöt64_t
 
dpid
;

78 
Êow
 
Ê
;

79 
¥efix_ùv4
 
ho°_ù
;

80 *
mac_°r
 = 
NULL
, *
√xt
 = NULL;

81 
i
 = 0, 
ªt
 = 0;

83 
	`mem£t
(&
Ê
, 0, (fl));

85 
ã«¡_id
 = 
	`©oi
(
¨gv
[0]);

86 
√tw‹k_id
 = 
	`©oi
(
¨gv
[1]);

87 
dpid
 = 
	`°πouŒ
(
¨gv
[4], 
NULL
, 16);

88 
Ê
.
ö_p‹t

	`ht⁄s
(
	`©oi
(
¨gv
[5]));

90 
ªt
 = 
	`°r2¥efix
(
¨gv
[2], (*)&
ho°_ù
);

91 i‡(
ªt
 <= 0) {

92 
	`vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

93  
CMD_WARNING
;

96 
Ê
.
nw_§c
 = 
ho°_ù
.
¥efix
.
s_addr
;

97 
	`Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
ã«¡_id
);

98 
	`Áb_add_√tw‹k_id
(&
Ê
, 
√tw‹k_id
);

99 
Ê
.
FL_DFL_GW
 = 
is_gw
;

101 
mac_°r
 = (*)
¨gv
[3];

102 
i
 = 0; i < 6; i++) {

103 
Ê
.
dl_§c
[
i
] = (
uöt8_t
)
	`°πoul
(
mac_°r
, &
√xt
, 16);

104 if(
mac_°r
 =
√xt
)

106 
mac_°r
 = 
√xt
 + 1;

109 i‡(
i
 != 6) {

110 
	`vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

111  
CMD_WARNING
;

114 
	`Áb_ho°_add
(
Áb_˘x
, 
dpid
, &
Ê
);

116  
CMD_SUCCESS
;

118 
	}
}

120 
DEFUN
 (
add_Áb_ho°_n⁄gw
,

121 
add_Áb_ho°_n⁄gw_cmd
,

142  
__add_Áb_ho°_cmd
(
vty
, 
¨gv
, 
Ál£
);

145 
DEFUN
 (
add_Áb_ho°_gw
,

146 
add_Áb_ho°_gw_cmd
,

167  
__add_Áb_ho°_cmd
(
vty
, 
¨gv
, 
åue
);

171 
	$Áb_ho°_rouã_show
(*
rouã
, *
u_¨g
)

173 
Áb_rouã_t
 *
‰ouã
 = 
rouã
;

174 
vty
 *vty = 
u_¨g
;

176 
	`vty_out
(
vty
, "Tenant(%hu) Net(%hu) (0x%x:%02x:%02x:%02x:%02x:%02x:%02x)=>"

178 
	`Áb_äid_to_tid
(
‰ouã
->
§c
->
hkey
.
ä_id
),

179 
	`Áb_äid_to_nid
(
‰ouã
->
§c
->
hkey
.
ä_id
),

180 
‰ouã
->
§c
->
hkey
.
ho°_ù
,

181 
‰ouã
->
§c
->
hkey
.
ho°_mac
[0], froute->src->hkey.host_mac[1],

182 
‰ouã
->
§c
->
hkey
.
ho°_mac
[2], froute->src->hkey.host_mac[3],

183 
‰ouã
->
§c
->
hkey
.
ho°_mac
[4], froute->src->hkey.host_mac[5],

184 
‰ouã
->
d°
->
hkey
.
ho°_ù
,

185 
‰ouã
->
d°
->
hkey
.
ho°_mac
[0], froute->dst->hkey.host_mac[1],

186 
‰ouã
->
d°
->
hkey
.
ho°_mac
[2], froute->dst->hkey.host_mac[3],

187 
‰ouã
->
d°
->
hkey
.
ho°_mac
[4], froute->dst->hkey.host_mac[5],

188 
VTY_NEWLINE
);

189 
	`vty_out
(
vty
, "\t");

190 
	`mul_rouã_∑th_åavî£
(
‰ouã
->
úouã
, 
Áb_dump_≥r_rouã_ñem
, 
vty
);

191 
	`vty_out
(
vty
, "%s", 
VTY_NEWLINE
);

192 
	}
}

195 
	$__Áb_show_ho°_rouã
(*
ho°_¨g
, *
vÆue
 
UNUSED
, *
vty_¨g
)

197 
vty
 *vty = 
vty_¨g
;

199 
	`vty_out
 (
vty
,

202 
VTY_NEWLINE
);

204 
	`Áb_lo›_Æl_ho°_rouãs
(
ho°_¨g
, 
Áb_ho°_rouã_show
, 
vty
);

206 
	`vty_out
 (
vty
,

209 
VTY_NEWLINE
);

210 
	}
}

212 
DEFUN
 (
show_Áb_rouã_Æl
,

213 
show_Áb_rouã_Æl_cmd
,

215 
SHOW_STR


219 
Áb_lo›_Æl_ho°s
(
Áb_˘x
, (
GHFunc
)
__Áb_show_ho°_rouã
, 
vty
);

221  
	gCMD_SUCCESS
;

224 
DEFUN
 (
dñ_Áb_ho°
,

225 
dñ_Áb_ho°_cmd
,

237 
uöt16_t
 
	gã«¡_id
;

238 
uöt16_t
 
	g√tw‹k_id
;

239 
Êow
 
	gÊ
;

240 
¥efix_ùv4
 
	gho°_ù
;

241 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

242 
	gi
 = 0, 
	gªt
 = 0;

244 
mem£t
(&
Ê
, 0, (fl));

246 
	gã«¡_id
 = 
©oi
(
¨gv
[0]);

247 
	g√tw‹k_id
 = 
©oi
(
¨gv
[1]);

249 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
ho°_ù
);

250 i‡(
	gªt
 <= 0) {

251 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

252  
	gCMD_WARNING
;

255 
	gÊ
.
	gnw_§c
 = 
ho°_ù
.
¥efix
.
s_addr
;

256 
Áb_add_ã«¡_id
(&
Ê
, 
NULL
, 
ã«¡_id
);

257 
Áb_add_√tw‹k_id
(&
Ê
, 
√tw‹k_id
);

259 
	gmac_°r
 = (*)
¨gv
[3];

260 
	gi
 = 0; i < 6; i++) {

261 
	gÊ
.
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

262 if(
	gmac_°r
 =
√xt
)

264 
	gmac_°r
 = 
√xt
 + 1;

267 i‡(
	gi
 != 6) {

268 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

269  
	gCMD_WARNING
;

272 
Áb_ho°_dñëe
(
Áb_˘x
, &
Ê
, 
Ál£
, false);

274  
	gCMD_SUCCESS
;

278 
	$show_vty_Áb_ho°_≥r_ã«¡
(*
ho°
, *
vty_¨g
)

280 *
pbuf
;

281 
vty
 *vty = 
vty_¨g
;

283 
pbuf
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

285 
	`vty_out
(
vty
, "%s", 
pbuf
);

286 
	`‰ì
(
pbuf
);

287 
	}
}

290 
	$show_vty_Áb_ho°
(*
ho°
, *
v_¨g
 
UNUSED
, *
vty_¨g
)

292 *
pbuf
;

293 
vty
 *vty = 
vty_¨g
;

295 
pbuf
 = 
	`Áb_dump_sögÀ_ho°
(
ho°
);

297 
	`vty_out
(
vty
, "%s", 
pbuf
);

298 
	`‰ì
(
pbuf
);

299 
	}
}

302 
DEFUN
 (
show_Áb_ho°
,

303 
show_Áb_ho°_cmd
,

305 
SHOW_STR


313 
uöt32_t
 
	gä_id
;

314 
Áb_ã«¡_√t_t
 *
	gã«¡_nw
 = 
NULL
;

316 
FAB_MK_TEN_NET_ID
(
ä_id
, 
©oi
(
¨gv
[0]),átoi(argv[1]));

318 
c_rd_lock
(&
Áb_˘x
->
lock
);

319 i‡(!(
	gã«¡_nw
 = 
g_hash_èbÀ_lookup
(
Áb_˘x
->
ã«¡_√t_htbl
,

320 &
ä_id
))) {

321 
vty_out
(
vty
, "Tí™à(%xËnŸ found\r\n", 
ä_id
);

322 
c_rd_u∆ock
(&
Áb_˘x
->
lock
);

323  
	gCMD_WARNING
;

326 
vty_out
 (
vty
,

330 
VTY_NEWLINE
);

332 
__Áb_ã«¡_nw_lo›_Æl_ho°s
(
ã«¡_nw
,

333 
show_vty_Áb_ho°_≥r_ã«¡
, 
vty
);

334 
c_rd_u∆ock
(&
Áb_˘x
->
lock
);

336 
vty_out
 (
vty
,

340 
VTY_NEWLINE
);

342  
	gCMD_SUCCESS
;

345 
DEFUN
 (
show_Áb_ho°_Æl_a˘ive
,

346 
show_Áb_ho°_Æl_a˘ive_cmd
,

348 
SHOW_STR


352 
vty_out
 (
vty
,

356 
VTY_NEWLINE
);

358 
Áb_lo›_Æl_ho°s
(
Áb_˘x
, 
show_vty_Áb_ho°
, 
vty
);

360 
vty_out
 (
vty
,

364 
VTY_NEWLINE
);

366  
	gCMD_SUCCESS
;

369 
DEFUN
 (
show_Áb_ho°_Æl_öa˘ive
,

370 
show_Áb_ho°_Æl_öa˘ive_cmd
,

372 
SHOW_STR


376 
vty_out
 (
vty
,

380 
VTY_NEWLINE
);

382 
Áb_lo›_Æl_öa˘ive_ho°s
(
Áb_˘x
, 
show_vty_Áb_ho°
, 
vty
);

384 
vty_out
 (
vty
,

388 
VTY_NEWLINE
);

390  
	gCMD_SUCCESS
;

395 
	$Ábric_vty_öô
(*
¨g
 
UNUSED
)

398 
	`c_log_debug
("%s: in°Ælög fabri¯vty comm™d", 
FN
);

399 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_rouã_cmd
);

400 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_rouã_Æl_cmd
);

401 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
add_Áb_ho°_gw_cmd
);

402 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
add_Áb_ho°_n⁄gw_cmd
);

403 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
dñ_Áb_ho°_cmd
);

404 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_ho°_cmd
);

405 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_ho°_Æl_a˘ive_cmd
);

406 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Áb_ho°_Æl_öa˘ive_cmd
);

407 
	}
}

	@application/l2switch/l2switch.c

19 
	~"c⁄fig.h
"

20 
	~"mul_comm⁄.h
"

21 
	~"mul_vty.h
"

22 
	~"l2swôch.h
"

24 
l2p‹t_t
 *
l2sw_p‹t_föd
(
l2sw_t
 *
sw
, 
uöt16_t
 
p‹t_no
);

25 
l2sw_mod_Êow
(*
¨g
, 
l2sw_t
 *
l2sw
, 
l2fdb_ít_t
 *
fdb
,

26 
boﬁ
 
add_dñ
, 
uöt32_t
 
buf„r_id
);

27 
l2sw_ö°Æl_dÊ_Êows
(
uöt64_t
 
dpid
);

28 
l2_¶i°_ít_‰ì
(*
¨g
);

30 
l2sw_hdl_t
 *
	gl2sw_hdl
;

32 #i‚de‡
CONFIG_L2SW_FDB_CACHE


34 
	$l2sw_£t_Â_›s
(
l2sw_t
 *
l2sw
)

36 
c_oÂ_£t_Â_›s_t
 *
coÂ_Â
;

37 
cbuf
 *
b
;

39 
b
 = 
	`of_¥ï_msg
((*
coÂ_Â
), 
C_OFPT_SET_FPOPS
, 0);

41 
coÂ_Â
 = (*)(
b
->
d©a
);

42 
coÂ_Â
->
d©≠©h_id
 = 
	`ht⁄Œ
(
l2sw
->
swid
);

43 
coÂ_Â
->
Â_ty≥
 = 
	`ht⁄l
(
C_FP_TYPE_L2
);

45  
	`mul_≠p_comm™d_h™dÀr
(
L2SW_APP_NAME
, 
b
);

46 
	}
}

49 
ölöe
 

50 
	$l2sw_put
(
l2sw_t
 *
sw
)

52 i‡(
	`©omic_ªad
(&
sw
->
ªf
) == 0){

53 i‡(
sw
->
l2fdb_htbl
Ë
	`g_hash_èbÀ_de°roy
(sw->l2fdb_htbl);

54 i‡(
sw
->
p‹t_li°
Ë
	`g_¶i°_‰ì_fuŒ
(sw->p‹t_li°, 
l2_¶i°_ít_‰ì
);

55 
	`‰ì
(
sw
);

57 
	`©omic_dec
(&
sw
->
ªf
, 1);

59 
	}
}

62 
	$l2sw_‰ì
(*
¨g
)

64 
	`l2sw_put
((
l2sw_t
 *)
¨g
);

65 
	}
}

68 
	$l2_¶i°_ít_‰ì
(*
¨g
)

70 
	`‰ì
(
¨g
);

71 
	}
}

74 
	$l2fdb_key
(c⁄° *
p
)

76 c⁄° 
uöt8_t
 *
mac_da
 = 
p
;

78  
	`hash_byãs
(
mac_da
, 
OFP_ETH_ALEN
, 1);

79 
	}
}

82 
	$l2fdb_equÆ
(c⁄° *
p1
, c⁄° *
p2
)

84  !
	`memcmp
(
p1
, 
p2
, 
OFP_ETH_ALEN
);

85 
	}
}

88 
	$l2p‹t_equÆ
(c⁄° *
p1
, c⁄° *
p2
)

90  !(((
l2p‹t_t
 *)
p1
)->
p‹t_no
 =*(
uöt16_t
 *)(
p2
));

91 
	}
}

93 
l2p‹t_t
 *

94 
	$l2sw_p‹t_föd
(
l2sw_t
 *
sw
, 
uöt16_t
 
p‹t_no
)

96 
GSLi°
 *
ôî©‹
;

97 
l2p‹t_t
 *
p‹t
 = 
NULL
;

99 
	`c_rd_lock
(&
sw
->
lock
);

101 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
sw
->
p‹t_li°
, &
p‹t_no
, 
l2p‹t_equÆ
);

102 i‡(
ôî©‹
) {

103 
p‹t
 = 
ôî©‹
->
d©a
;

106 
	`c_rd_u∆ock
(&
sw
->
lock
);

108  
p‹t
;

109 
	}
}

111 
l2p‹t_t
 *

112 
	$__l2sw_p‹t_föd
(
l2sw_t
 *
sw
, 
uöt16_t
 
p‹t_no
)

114 
GSLi°
 *
ôî©‹
;

115 
l2p‹t_t
 *
p‹t
 = 
NULL
;

117 
ôî©‹
 = 
	`g_¶i°_föd_cu°om
(
sw
->
p‹t_li°
, &
p‹t_no
, 
l2p‹t_equÆ
);

118 i‡(
ôî©‹
) {

119 
p‹t
 = 
ôî©‹
->
d©a
;

122  
p‹t
;

123 
	}
}

126 
	$__l2sw_p‹t_dñ
(
l2sw_t
 *
sw
, 
l2p‹t_t
 *
p‹t
)

128 
sw
->
p‹t_li°
 = 
	`g_¶i°_ªmove
(sw->p‹t_li°, 
p‹t
);

131 
	}
}

134 
	$l2p‹t_åavî£_Æl
(
l2sw_t
 *
l2sw
, 
GFunc
 
ôî_‚
, *
¨g
)

137 
	`c_rd_lock
(&
l2sw
->
lock
);

138 i‡(
l2sw
->
p‹t_li°
) {

139 
	`g_¶i°_f‹óch
(
l2sw
->
p‹t_li°
, (
GFunc
)
ôî_‚
, 
¨g
);

141 
	`c_rd_u∆ock
(&
l2sw
->
lock
);

144 
	}
}

146 #ifde‡
CONFIG_L2SW_FDB_CACHE


148 
	$check_l2p‹t_down_l2sw_fdb
(*
key
 
UNUSED
, *
ít
, *
u_¨g
)

150 
l2fdb_ít_t
 *
fdb
 = 
ít
;

151 
l2sw_fdb_p‹t_¨gs
 *
¨gs
 = 
u_¨g
;

152 
l2sw_t
 *
l2sw
 = 
¨gs
->
sw
;

154 i‡(
fdb
->
Ãn_p‹t
 !
¨gs
->
p‹t
) {

158 
	`l2sw_mod_Êow
(
NULL
, 
l2sw
, 
fdb
, 
Ál£
, 
L2SW_UNK_BUFFER_ID
);

160 
	}
}

164 
	$l2sw_åavî£_Æl
(
l2sw_hdl_t
 *
l2sw_hdl
, 
GHFunc
 
ôî_‚
, *
¨g
)

167 
	`c_rd_lock
(&
l2sw_hdl
->
lock
);

168 i‡(
l2sw_hdl
->
l2sw_htbl
) {

169 
	`g_hash_èbÀ_f‹óch
(
l2sw_hdl
->
l2sw_htbl
,

170 (
GHFunc
)
ôî_‚
, 
¨g
);

172 
	`c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

175 
	}
}

178 
	$l2sw_add
(
l2sw_hdl_t
 *
l2sw_hdl
, 
uöt64_t
 
dpid
, 
c_oÂ_swôch_add_t
 *
coÂ_ß
)

180 
uöt32_t
 
n_p‹ts
, 
idx
 = 0;

181 
l2sw_t
 *
l2sw
 = 
NULL
;

183 
n_p‹ts
 = ((
	`¡ohs
(
coÂ_ß
->
hódî
.
Àngth
)

184 - 
	`off£tof
(
c_oÂ_swôch_add_t
, 
p‹ts
))

185 /  *
coÂ_ß
->
p‹ts
);

187 
	`c_wr_lock
(&
l2sw_hdl
->
lock
);

188 i‡(
	`g_hash_èbÀ_lookup
(
l2sw_hdl
->
l2sw_htbl
, &
dpid
)) {

189 
	`c_wr_u∆ock
(&
l2sw_hdl
->
lock
);

190 
	`c_log_îr
("%s: sw(0x%ŒxËexi°s", 
FN
, ()
dpid
);

194 i‡(!(
l2sw
 = 
	`ˇŒoc
(1, (*l2sw)))) {

195 
	`c_wr_u∆ock
(&
l2sw_hdl
->
lock
);

196 
	`c_log_îr
("%s:Ü2swáŒo¯Áûed", 
FN
);

200 
l2sw
->
swid
 = 
dpid
;

201 
l2sw
->
l2fdb_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
l2fdb_key
,

202 
l2fdb_equÆ
,

203 
NULL
,

204 
l2_¶i°_ít_‰ì
);

205 
	`as£π
(
l2sw
->
l2fdb_htbl
);

207 ; 
idx
 < 
n_p‹ts
; idx++) {

208 
oÂ_phy_p‹t
 *
›p
 = &
coÂ_ß
->
p‹ts
[
idx
];

209 
l2p‹t_t
 *
p‹t
 = 
	`ˇŒoc
(1, (l2port_t));

211 
p‹t
->
p‹t_no
 = 
	`¡ohs
(
›p
->port_no);

212 
p‹t
->
°©e
 = 
	`¡ohl
(
›p
->state);

213 
p‹t
->
c⁄fig
 = 
	`¡ohl
(
›p
->config);

214 
l2sw
->
p‹t_li°
 = 
	`g_¶i°_≠≥nd
÷2sw->p‹t_li°, 
p‹t
);

217 
	`c_rw_lock_öô
(&
l2sw
->
lock
);

218 
	`©omic_öc
(&
l2sw
->
ªf
, 1);

220 
	`g_hash_èbÀ_ö£π
(
l2sw_hdl
->
l2sw_htbl
, &
l2sw
->
swid
,Ü2sw);

221 
	`c_wr_u∆ock
(&
l2sw_hdl
->
lock
);

223 #i‚de‡
CONFIG_L2SW_FDB_CACHE


225 
	`l2sw_£t_Â_›s
(
l2sw
);

229 
	`l2sw_ö°Æl_dÊ_Êows
(
dpid
);

231 
	`l2sw_put
(
l2sw
);

233 
	`c_log_debug
("L2 Swôch 0x%Œxádded", ()
dpid
);

236 
	}
}

239 
	$l2sw_ö°Æl_dÊ_Êows
(
uöt64_t
 
dpid
)

241 
Êow
 
Ê
;

243 
	`mem£t
(&
Ê
, 0, (fl));

246 
	`mul_≠p_£nd_Êow_dñ
(
L2SW_APP_NAME
, 
NULL
, 
dpid
, &
Ê
,

247 
OFPFW_ALL
, 
OFPP_NONE
, 0, 
C_FL_ENT_NOCACHE
);

250 
	`mul_≠p_£nd_Êow_add
(
L2SW_APP_NAME
, 
NULL
, 
dpid
, &
Ê
, 
L2SW_UNK_BUFFER_ID
,

251 
NULL
, 0, 0, 0, 
OFPFW_ALL
 & ~(
OFPFW_DL_DST
),

252 
C_FL_PRIO_DRP
, 
C_FL_ENT_NOCACHE
);

255 
	`mul_≠p_£nd_Êow_add
(
L2SW_APP_NAME
, 
NULL
, 
dpid
, &
Ê
, 
L2SW_UNK_BUFFER_ID
,

256 
NULL
, 0, 0, 0, 
OFPFW_ALL
 & ~(
OFPFW_DL_SRC
),

257 
C_FL_PRIO_DRP
, 
C_FL_ENT_NOCACHE
);

260 
	`mem£t
(&
Ê
.
dl_§c
, 0xff, 
OFP_ETH_ALEN
);

261 
	`mul_≠p_£nd_Êow_add
(
L2SW_APP_NAME
, 
NULL
, 
dpid
, &
Ê
, 
L2SW_UNK_BUFFER_ID
,

262 
NULL
, 0, 0, 0, 
OFPFW_ALL
 & ~(
OFPFW_DL_SRC
),

263 
C_FL_PRIO_DRP
, 
C_FL_ENT_NOCACHE
);

265 #ifde‡
CONFIG_L2SW_FDB_CACHE


267 
	`mem£t
(&
Ê
, 0, (fl));

268 
	`mul_≠p_£nd_Êow_add
(
L2SW_APP_NAME
, 
NULL
, 
dpid
, &
Ê
, 
L2SW_UNK_BUFFER_ID
,

269 
NULL
, 0, 0, 0, 
OFPFW_ALL
, 
C_FL_PRIO_DFL
,

270 
C_FL_ENT_LOCAL
);

272 
	}
}

275 
	$l2sw_dñ
(
l2sw_hdl_t
 *
l2sw_hdl
, 
uöt64_t
 
dpid
)

277 
	`c_wr_lock
(&
l2sw_hdl
->
lock
);

279 
	`g_hash_èbÀ_ªmove
(
l2sw_hdl
->
l2sw_htbl
, &
dpid
);

281 
	`c_wr_u∆ock
(&
l2sw_hdl
->
lock
);

283 
	`c_log_debug
("L2 Swôch 0x%ŒxÑemoved", ()
dpid
);

285 
	}
}

289 
	$l2sw_mod_Êow
(*
¨g
, 
l2sw_t
 *
l2sw
, 
l2fdb_ít_t
 *
fdb
,

290 
boﬁ
 
add
, 
uöt32_t
 
buf„r_id
)

292 
oÂ_a˘i⁄_ouçut
 
›_a˘
, *
p_›_a˘
 = 
NULL
;

293 
uöt32_t
 
wûdˇrds
 = 
OFPFW_ALL
;

294 
Êow
 
Ê
 = { 0 , 0, 0, 0, 0, 0, 0,

299 
wûdˇrds
 &~(
OFPFW_DL_DST
);

300 
	`mem˝y
(&
Ê
.
dl_d°
, 
fdb
->
mac_da
, 
OFP_ETH_ALEN
);

302 i‡(
add
) {

303 
p_›_a˘
 = &
›_a˘
;

304 
	`of_make_a˘i⁄_ouçut
((**)&
p_›_a˘
,

305 (
oÂ_a˘i⁄_ouçut
),

306 
fdb
->
Ãn_p‹t
);

307 
	`mul_≠p_£nd_Êow_add
(
L2SW_APP_NAME
, 
¨g
, 
l2sw
->
swid
, &
Ê
, 
buf„r_id
,

308 
p_›_a˘
, (
oÂ_a˘i⁄_ouçut
),

309 
L2FDB_ITIMEO_DFL
, 
L2FDB_HTIMEO_DFL
,

310 
wûdˇrds
, 
C_FL_PRIO_DFL
, 
C_FL_ENT_NOCACHE
);

312 
	`mul_≠p_£nd_Êow_dñ
(
L2SW_APP_NAME
, 
¨g
, 
l2sw
->
swid
, &
Ê
,

313 
wûdˇrds
, 
OFPP_NONE
, 
C_FL_PRIO_DFL
, 
C_FL_ENT_NOCACHE
);

317 
	}
}

319 
__Á°∑th


320 
	$l2sw_À¨n_™d_fwd
(*
›aque_c_¨g
,

321 
l2sw_hdl_t
 *
l2sw_hdl
, 
uöt64_t
 
dpid
,

322 
Êow
 *
Ê
, 
cbuf
 *
pkt
)

324 
l2sw_t
 *
l2sw
 = 
NULL
;

325 #ifde‡
CONFIG_L2SW_FDB_CACHE


326 
l2fdb_ít_t
 *
fdb
;

328 
uöt32_t
 
›‹t
 = 
OFPP_ALL
;

329 
size_t
 
pkt_Àn
, 
pkt_ofs
;

330 
of_pkt_out_∑øms
 
∑rms
;

331 
oÂ_a˘i⁄_ouçut
 
›_a˘
;

332 
c_oÂ_∑ckë_ö
 *
›i
 =(*)(
pkt
->
d©a
);

335 i‡(
	`is_zîo_ëhî_addr
(
Ê
->
dl_§c
) ||

336 
	`is_zîo_ëhî_addr
(
Ê
->
dl_d°
) ||

337 
	`is_mu…iˇ°_ëhî_addr
(
Ê
->
dl_§c
) ||

338 
	`is_brﬂdˇ°_ëhî_addr
(
Ê
->
dl_§c
)) {

339 
	`c_log_debug
("%s: InvÆid src/d° ma¯addr", 
FN
);

343 
pkt_ofs
 = 
	`off£tof
(
c_oÂ_∑ckë_ö
, 
d©a
);

344 
pkt_Àn
 = 
	`¡ohs
(
›i
->
hódî
.
Àngth
Ë- 
pkt_ofs
;

346 
	`c_rd_lock
(&
l2sw_hdl
->
lock
);

347 i‡(!(
l2sw
 = 
	`g_hash_èbÀ_lookup
(
l2sw_hdl
->
l2sw_htbl
, &
dpid
))) {

348 
	`c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

349 
	`c_log_îr
("%s: sw(0x%ŒxËd€†nŸÉxi°", 
FN
, ()
dpid
);

353 
	`©omic_öc
(&
l2sw
->
ªf
, 1);

354 
	`c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

356 #ifde‡
CONFIG_L2SW_FDB_CACHE


357 
	`c_wr_lock
(&
l2sw
->
lock
);

358 
fdb
 = 
	`g_hash_èbÀ_lookup
(
l2sw
->
l2fdb_htbl
, 
Ê
->
dl_§c
);

359 i‡(
fdb
) {

361 i‡(
	`¡ohs
(
Ê
->
ö_p‹t
Ë!
fdb
->
Ãn_p‹t
) {

362 
	`l2sw_mod_Êow
(
›aque_c_¨g
, 
l2sw
, 
fdb
, 
Ál£
, (
uöt32_t
)(-1));

363 
fdb
->
Ãn_p‹t
 = 
	`¡ohs
(
Ê
->
ö_p‹t
);

364 
	`l2sw_mod_Êow
(
›aque_c_¨g
, 
l2sw
, 
fdb
, 
åue
, (
uöt32_t
)(-1));

367 
l2_fwd
;

369 
fdb
 = 
	`mÆloc
((*fdb));

370 
	`mem˝y
(
fdb
->
mac_da
, 
Ê
->
dl_§c
, 
OFP_ETH_ALEN
);

371 
fdb
->
Ãn_p‹t
 = 
	`¡ohs
(
Ê
->
ö_p‹t
);

372 
	`g_hash_èbÀ_ö£π
(
l2sw
->
l2fdb_htbl
, 
fdb
->
mac_da
, fdb);

374 
l2_fwd
:

376 
fdb
 = 
	`g_hash_èbÀ_lookup
(
l2sw
->
l2fdb_htbl
, 
Ê
->
dl_d°
);

377 i‡(
fdb
) {

378 
›‹t
 = 
fdb
->
Ãn_p‹t
;

379 
	`l2sw_mod_Êow
(
›aque_c_¨g
, 
l2sw
, 
fdb
, 
åue
, 
L2SW_UNK_BUFFER_ID
);

381 
	`c_wr_u∆ock
(&
l2sw
->
lock
);

384 
	`l2sw_put
(
l2sw
);

386 i‡(
›i
->
buf„r_id
 !
L2SW_UNK_BUFFER_ID
) {

387 
pkt_Àn
 = 0;

390 
∑rms
.
buf„r_id
 = 
	`¡ohl
(
›i
->buffer_id);

391 
∑rms
.
ö_p‹t
 = 
	`¡ohs
(
›i
->in_port);

392 
∑rms
.
a˘i⁄_li°
 = &
›_a˘
;

393 
	`of_make_a˘i⁄_ouçut
((**)&
∑rms
.
a˘i⁄_li°
, (
›_a˘
), 
›‹t
);

394 
∑rms
.
a˘i⁄_Àn
 = (
›_a˘
);

395 
∑rms
.
d©a_Àn
 = 
pkt_Àn
;

396 
∑rms
.
d©a
 = 
›i
->data;

397 
	`mul_≠p_£nd_pkt_out
(
›aque_c_¨g
, 
l2sw
->
swid
, &
∑rms
);

400 
	}
}

403 
	$__l2sw_fdb_åavî£_Æl
(
l2sw_t
 *
l2sw
, 
GHFunc
 
ôî_‚
, *
¨g
)

405 i‡(
l2sw
->
l2fdb_htbl
) {

406 
	`g_hash_èbÀ_f‹óch
(
l2sw
->
l2fdb_htbl
,

407 (
GHFunc
)
ôî_‚
, 
¨g
);

411 
	}
}

414 #ifde‡
CONFIG_L2SW_FDB_CACHE


416 
	$__l2sw_fdb_dñ_Æl_wôh_öp‹t
(
l2sw_t
 *
l2sw
, 
uöt16_t
 
ö_p‹t
)

418 
l2sw_fdb_p‹t_¨gs
 
¨gs
;

420 
¨gs
.
sw
 = 
l2sw
;

421 
¨gs
.
p‹t
 = 
ö_p‹t
;

422 
	`g_hash_èbÀ_f‹óch_ªmove
(
l2sw
->
l2fdb_htbl
, 
check_l2p‹t_down_l2sw_fdb
,

423 (*)&
¨gs
);

426 
	}
}

431 
	$__l2sw_fdb_dñ_Æl_wôh_öp‹t
(
l2sw_t
 *
l2sw
, 
uöt16_t
 
ö_p‹t
)

433 
c_oÂ_Êow_mod_t
 *
coÂ_fm
;

434 
uöt32_t
 
wûdˇrds
 = 
OFPFW_ALL
;

435 
cbuf
 *
b
;

437 
b
 = 
	`of_¥ï_msg
((*
coÂ_fm
), 
C_OFPT_FLOW_MOD
, 0);

439 
coÂ_fm
 = (*)(
b
->
d©a
);

440 
coÂ_fm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
l2sw
->
swid
);

441 
coÂ_fm
->
comm™d
 = 
C_OFPC_DEL
;

442 
coÂ_fm
->
Êags
 = 
C_FL_ENT_NOCACHE
;

443 
coÂ_fm
->
wûdˇrds
 = 
	`ht⁄l
(wildcards);

444 
coÂ_fm
->
ôimeo
 = 
	`ht⁄s
(
L2FDB_ITIMEO_DFL
);

445 
coÂ_fm
->
htimeo
 = 
	`ht⁄s
(
L2FDB_HTIMEO_DFL
);

446 
coÂ_fm
->
buf„r_id
 = (
uöt32_t
)(-1);

447 
coÂ_fm
->
›‹t
 = 
	`ht⁄s
(
ö_p‹t
);

449  
	`mul_≠p_comm™d_h™dÀr
(
L2SW_APP_NAME
, 
b
);

450 
	}
}

454 
	$l2sw_p‹t_h™dÀr
(
l2sw_hdl_t
 *
l2sw_hdl
, 
uöt64_t
 
dpid
,

455 
c_oÂ_p‹t_°©us_t
 *
oÂ_p°s
)

457 
l2sw_t
 *
l2sw
;

458 
l2p‹t_t
 *
p‹t
;

459 
uöt16_t
 
ö_p‹t
 = 0;

460 
uöt32_t
 
c⁄fig_mask
, 
°©e_mask
;

461 
oÂ_phy_p‹t
 *
oÂp
 = &
oÂ_p°s
->
desc
;

463 
c⁄fig_mask
 = 
	`¡ohl
(
oÂ_p°s
->config_mask);

464 
°©e_mask
 = 
	`¡ohl
(
oÂ_p°s
->state_mask);

465 
ö_p‹t
 = 
	`¡ohs
(
oÂ_p°s
->
desc
.
p‹t_no
);

467 
	`c_rd_lock
(&
l2sw_hdl
->
lock
);

468 i‡(!(
l2sw
 = 
	`g_hash_èbÀ_lookup
(
l2sw_hdl
->
l2sw_htbl
, &
dpid
))) {

469 
	`c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

470 
	`c_log_îr
("%s: sw(0x%ŒxËd€†nŸÉxi°", 
FN
, ()
dpid
);

474 
	`©omic_öc
(&
l2sw
->
ªf
, 1);

475 
	`c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

478 
	`c_wr_lock
(&
l2sw
->
lock
);

479 
p‹t
 = 
	`__l2sw_p‹t_föd
(
l2sw
, 
ö_p‹t
);

481 
oÂ_p°s
->
ªas⁄
) {

482 
OFPPR_ADD
:

483 i‡(!
p‹t
) {

484 
p‹t
 = 
	`ˇŒoc
(1, (*port));

485 
l2sw
->
p‹t_li°
 = 
	`g_¶i°_≠≥nd
÷2sw->p‹t_li°, 
p‹t
);

487 
p‹t
->
p‹t_no
 = 
	`¡ohs
(
oÂp
->port_no);

489 
OFPPR_MODIFY
:

490 i‡(
p‹t
) {

491 
p‹t
->
°©e
 = 
	`¡ohl
(
oÂp
->state);

492 
p‹t
->
c⁄fig
 = 
	`¡ohl
(
oÂp
->config);

495 
OFPPR_DELETE
:

496 i‡(
p‹t
Ë
	`__l2sw_p‹t_dñ
(
l2sw
,Öort);

499 
	`c_log_îr
("%s: unknow¿p‹àch™gêcode", 
FN
);

503 i‡(
c⁄fig_mask
 & 
OFPPC_PORT_DOWN
 ||

504 
°©e_mask
 & 
OFPPS_LINK_DOWN
) {

505 
	`__l2sw_fdb_dñ_Æl_wôh_öp‹t
(
l2sw
, 
ö_p‹t
);

508 
	`c_wr_u∆ock
(&
l2sw
->
lock
);

509 
	`l2sw_put
(
l2sw
);

510 
	}
}

512 
__Á°∑th


513 
	$l2sw_evít_nŸifõr
(*
≠p_¨g
, *
pkt_¨g
)

515 
cbuf
 *
b
 = 
pkt_¨g
;

516 
oÂ_hódî
 *
hdr
;

518 i‡(!
b
) {

519 
	`c_log_îr
("%s: InvÆidárg", 
FN
);

523 
hdr
 = (*)(
b
->
d©a
);

525 
hdr
->
ty≥
) {

526 
C_OFPT_SWITCH_ADD
:

528 
c_oÂ_swôch_add_t
 *
oÂ_ß
 = (*)(
hdr
);

529 
	`l2sw_add
(
l2sw_hdl
, 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
), ofp_sa);

532 
C_OFPT_SWITCH_DELETE
:

534 
c_oÂ_swôch_dñëe_t
 *
oÂ_sd
 = (*)(
hdr
);

535 
	`l2sw_dñ
(
l2sw_hdl
, 
	`¡ohŒ
(
oÂ_sd
->
d©≠©h_id
));

538 
C_OFPT_PACKET_IN
:

540 
c_oÂ_∑ckë_ö_t
 *
oÂ_pö
 = (*)(
hdr
);

542 
	`l2sw_À¨n_™d_fwd
(
≠p_¨g
, 
l2sw_hdl
, 
	`¡ohŒ
(
oÂ_pö
->
d©≠©h_id
),

543 &
oÂ_pö
->
Ê
, 
b
);

546 
C_OFPT_PORT_STATUS
:

548 
c_oÂ_p‹t_°©us_t
 *
oÂ_p°s
 = (*)(
hdr
);

550 
	`l2sw_p‹t_h™dÀr
(
l2sw_hdl
, 
	`¡ohŒ
(
oÂ_p°s
->
d©≠©h_id
),

551 
oÂ_p°s
);

554 
C_OFPT_RECONN_APP
:

555 
	`mul_ªgi°î_≠p
(
NULL
, 
L2SW_APP_NAME
,

556 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

557 0, 
NULL
, 
l2sw_evít_nŸifõr
);

559 
C_OFPT_NOCONN_APP
:

566 
	`g_hash_èbÀ_ªmove_Æl
(
l2sw_hdl
->
l2sw_htbl
);

571 
	}
}

575 
	$l2sw_maö_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

576 *
¨g
)

578 
l2sw_hdl_t
 *
hdl
 = 
¨g
;

579 
timevÆ
 
tv
 = { 1 , 0 };

581 
	`evtimî_add
(
hdl
->
l2sw_timî_evít
, &
tv
);

582 
	}
}

585 
	$l2sw_moduÀ_öô
(*
ba£_¨g
)

587 
evít_ba£
 *
ba£
 = 
ba£_¨g
;

588 
timevÆ
 
tv
 = { 1, 0 };

589 
l2sw_hdl_t
 *
hdl
 = 
NULL
;

591 
	`c_log_debug
("%s", 
FN
);

593 
hdl
 = 
	`ˇŒoc
(1, (
l2sw_hdl_t
));

594 i‡(!
hdl
) {

595 
	`c_log_îr
("%s:áŒo¯Áûed", 
FN
);

599 
hdl
->
ba£
 = base;

600 
	`c_rw_lock_öô
(&
hdl
->
lock
);

601 
hdl
->
l2sw_htbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
g_öt64_hash
,

602 
g_öt64_equÆ
,

603 
NULL
, 
l2sw_‰ì
);

605 
hdl
->
l2sw_timî_evít
 = 
	`evtimî_√w
(
ba£
,

606 
l2sw_maö_timî
,

607 (*)
hdl
);

608 
	`evtimî_add
(
hdl
->
l2sw_timî_evít
, &
tv
);

609 
l2sw_hdl
 = 
hdl
;

611 
	`mul_ªgi°î_≠p
(
NULL
, 
L2SW_APP_NAME
,

612 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

613 0, 
NULL
, 
l2sw_evít_nŸifõr
);

616 
	}
}

619 
	$show_l2p‹t_öfo
(*
p‹t_¨g
, *
u¨g
)

621 
l2p‹t_t
 *
p‹t
 = 
p‹t_¨g
;

622 
vty
 *vty = 
u¨g
;

624 
	`vty_out
(
vty
, "%hu(%x:%xË", 
p‹t
->
p‹t_no
,

625 !(
p‹t
->
c⁄fig
 & 
OFPPC_PORT_DOWN
),

626 !(
p‹t
->
°©e
 & 
OFPPS_LINK_DOWN
));

627 
	}
}

630 
	$show_l2sw_öfo
(*
key
 
UNUSED
, *
sw_¨g
, *
u¨g
)

632 
l2sw_t
 *
sw
 = 
sw_¨g
;

633 
vty
 *vty = 
u¨g
;

635 
	`vty_out
(
vty
, "0x%-16Œx ", ()
sw
->
swid
);

636 
	`l2p‹t_åavî£_Æl
(
sw
, 
show_l2p‹t_öfo
, 
vty
);

637 
	`vty_out
(
vty
, "%s%s", 
VTY_NEWLINE
, VTY_NEWLINE);

638 
	}
}

641 
	$show_l2sw_fdb_öfo
(*
key
 
UNUSED
, *
fdb_¨g
, *
u¨g
)

643 
l2fdb_ít_t
 *
fdb
 = 
fdb_¨g
;

644 
vty
 *vty = 
u¨g
;

646 
	`vty_out
(
vty
, "%02x:%02x:%02x:%02x:%02x:%02x %5hu%s",

647 
fdb
->
mac_da
[0], fdb->mac_da[1], fdb->mac_da[2],

648 
fdb
->
mac_da
[3], fdb->mac_da[4], fdb->mac_da[5],

649 
fdb
->
Ãn_p‹t
, 
VTY_NEWLINE
);

650 
	}
}

652 
DEFUN
 (
show_l2sw
,

653 
show_l2sw_cmd
,

655 
SHOW_STR


660 
vty_out
 (
vty
,

663 
VTY_NEWLINE
);

665 
vty_out
(
vty
, "%10s %18s %s%s", "l2sw-id",

666 "P‹t-li°","<p‹t-num>◊dmö:lök)", 
VTY_NEWLINE
);

667 
vty_out
 (
vty
,

670 
VTY_NEWLINE
);

672 
l2sw_åavî£_Æl
(
l2sw_hdl
, 
show_l2sw_öfo
, 
vty
);

674 
vty_out
 (
vty
,

677 
VTY_NEWLINE
, VTY_NEWLINE);

679  
	gCMD_SUCCESS
;

683 
DEFUN
 (
show_l2sw_fdb
,

684 
show_l2sw_fdb_cmd
,

686 
SHOW_STR


691 
uöt64_t
 
	gswid
;

692 
l2sw_t
 *
	gl2sw
;

694 
	gswid
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

696 
c_rd_lock
(&
l2sw_hdl
->
lock
);

697 i‡(!(
	gl2sw
 = 
g_hash_èbÀ_lookup
(
l2sw_hdl
->
l2sw_htbl
, &
swid
))) {

698 
c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

699 
vty_out
(
vty
, "sw(0x%ŒxËd€†nŸÉxi°", ()
swid
);

700  
	gCMD_WARNING
;

703 
©omic_öc
(&
l2sw
->
ªf
, 1);

704 
c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

706 
vty_out
 (
vty
,

709 
VTY_NEWLINE
);

711 
vty_out
 (
vty
, "%8†%18s%s", "mac", "Ãn_p‹t", 
VTY_NEWLINE
);

713 
vty_out
 (
vty
,

716 
VTY_NEWLINE
);

718 
c_rd_lock
(&
l2sw_hdl
->
lock
);

719 
__l2sw_fdb_åavî£_Æl
(
l2sw
, 
show_l2sw_fdb_öfo
, 
vty
);

720 
c_rd_u∆ock
(&
l2sw_hdl
->
lock
);

722 
l2sw_put
(
l2sw
);

724 
vty_out
 (
vty
,

727 
VTY_NEWLINE
);

729  
	gCMD_SUCCESS
;

733 
	$l2sw_moduÀ_vty_öô
(*
¨g
 
UNUSED
)

735 
	`c_log_debug
("%s:", 
FN
);

736 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_l2sw_cmd
);

737 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_l2sw_fdb_cmd
);

738 
	}
}

740 
moduÀ_öô
(
l2sw_moduÀ_öô
);

741 
moduÀ_vty_öô
(
l2sw_moduÀ_vty_öô
);

	@application/l2switch/l2switch.h

19 #i‚de‡
__L2SW_H__


20 
	#__L2SW_H__


	)

22 
	#L2SW_APP_NAME
 "mul-l2sw"

	)

24 
	#L2FDB_ITIMEO_DFL
 (60)

	)

25 
	#L2FDB_HTIMEO_DFL
 (0)

	)

27 
	#L2SW_UNK_BUFFER_ID
 (0xffffffff)

	)

29 
	sl2fdb_ít_


31 
uöt8_t
 
	mmac_da
[
OFP_ETH_ALEN
];

32 
uöt16_t
 
	mÃn_p‹t
;

34 
l2fdb_ít_
 
	tl2fdb_ít_t
;

36 
	sl2p‹t_


38 
uöt16_t
 
	mp‹t_no
;

39 
uöt32_t
 
	mc⁄fig
;

40 
uöt32_t
 
	m°©e
;

42 
l2p‹t_
 
	tl2p‹t_t
;

44 
	sl2sw_


46 
c_rw_lock_t
 
	mlock
;

47 
c_©omic_t
 
	mªf
;

48 
uöt64_t
 
	mswid
;

49 
GSLi°
 *
	mp‹t_li°
;

50 
GHashTabÀ
 *
	ml2fdb_htbl
;

53 
l2sw_
 
	tl2sw_t
;

55 
	sl2sw_hdl_
 {

56 
c_rw_lock_t
 
	mlock
;

57 *
	mba£
;

58 
GHashTabÀ
 *
	ml2sw_htbl
;

59 
evít
 *
	ml2sw_timî_evít
;

62 
l2sw_hdl_
 
	tl2sw_hdl_t
;

64 
	sl2sw_fdb_p‹t_¨gs


66 
l2sw_t
 *
	msw
;

67 
uöt16_t
 
	mp‹t
;

70 
l2sw_moduÀ_öô
(*
˘x
);

71 
l2sw_moduÀ_vty_öô
(*
¨g
);

	@common-libs/3rd-party/derived-lib/include/clog.h

23 #i‚de‡
_ZEBRA_LOG_H


24 
	#_ZEBRA_LOG_H


	)

26 
	~<sy¶og.h
>

46 
	mCLOG_NONE
,

47 
	mCLOG_DEFAULT
,

48 
	mCLOG_MUL
,

49 
	mCLOG_EX


50 } 
	t˛og_¥Ÿo_t
;

54 
	#CLOG_DISABLED
 (
LOG_EMERG
-1)

	)

58 
	mCLOG_DEST_SYSLOG
 = 0,

59 
	mCLOG_DEST_STDOUT
,

60 
	mCLOG_DEST_MONITOR
,

61 
	mCLOG_DEST_FILE


62 } 
	t˛og_de°_t
;

63 
	#CLOG_NUM_DESTS
 (
CLOG_DEST_FILE
+1)

	)

65 
	s˛og


67 c⁄° *
	midít
;

68 
˛og_¥Ÿo_t
 
	m¥Ÿocﬁ
;

69 
	mmaxlvl
[
CLOG_NUM_DESTS
];

71 
	mdeÁu…_lvl
;

72 
FILE
 *
	mÂ
;

73 *
	mfûíame
;

74 
	mÁcûôy
;

75 
	mªc‹d_¥i‹ôy
;

77 
	msy¶og_›ti⁄s
;

78 
	mtime°amp_¥ecisi⁄
;

82 
	smesßge


84 
	mkey
;

85 c⁄° *
	m°r
;

89 
˛og
 *
˛og_deÁu…
;

92 
˛og
 *
›í˛og
 (c⁄° *
¥og«me
, 
˛og_¥Ÿo_t
 
¥Ÿocﬁ
,

93 
sy¶og_›ti⁄s
, 
sy¶og_Ácûôy
);

96 
˛o£˛og
 (
˛og
 *
zl
);

99 #ifde‡
__GNUC__


100 
	#PRINTF_ATTRIBUTE
(
a
,
b
Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
,á, b)))

	)

102 
	#PRINTF_ATTRIBUTE
(
a
,
b
)

	)

106 
	$c_log
 (
˛og
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, ...)

107 
	`PRINTF_ATTRIBUTE
(3, 4);

110 
	$c_log_îr
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

111 
	$c_log_w¨n
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

112 
	$c_log_öfo
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

113 
	$c_log_nŸi˚
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

114 
	$c_log_debug
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

117 
	$∂og_îr
 (
˛og
 *, c⁄° *
f‹m©
, ...)

118 
	`PRINTF_ATTRIBUTE
(2, 3);

119 
	$∂og_w¨n
 (
˛og
 *, c⁄° *
f‹m©
, ...)

120 
	`PRINTF_ATTRIBUTE
(2, 3);

121 
	$∂og_öfo
 (
˛og
 *, c⁄° *
f‹m©
, ...)

122 
	`PRINTF_ATTRIBUTE
(2, 3);

123 
	$∂og_nŸi˚
 (
˛og
 *, c⁄° *
f‹m©
, ...)

124 
	`PRINTF_ATTRIBUTE
(2, 3);

125 
	$∂og_debug
 (
˛og
 *, c⁄° *
f‹m©
, ...)

126 
	`PRINTF_ATTRIBUTE
(2, 3);

132 
	`˛og_£t_Àvñ
 (
˛og
 *
zl
, 
˛og_de°_t
, 
log_Àvñ
);

135 
	`˛og_£t_fûe
 (
˛og
 *
zl
, c⁄° *
fûíame
, 
log_Àvñ
);

137 
	`˛og_ª£t_fûe
 (
˛og
 *
zl
);

140 
	`˛og_rŸ©e
 (
˛og
 *);

143 
	#LOOKUP
(
x
, 
y
Ë
	`mes_lookup
(x, x ## 
_max
, y, "“ÿôem found)", #x)

	)

145 c⁄° *
	`lookup
 (c⁄° 
mesßge
 *, );

146 c⁄° *
	`mes_lookup
 (c⁄° 
mesßge
 *
me¶i°
,

147 
max
, 
ödex
,

148 c⁄° *
no_ôem
, c⁄° *
me¢ame
);

150 c⁄° *
˛og_¥i‹ôy
[];

151 c⁄° *
˛og_¥Ÿo_«mes
[];

154 c⁄° *
	`ß„_°ªº‹
(
î∫um
);

157 
	`˛og_sig«l
(
signo
, c⁄° *
a˘i⁄


158 #ifde‡
SA_SIGINFO


159 , 
sigöfo_t
 *
sigöfo
, *
¥ogøm_cou¡î


164 
	`˛og_backåa˚
(
¥i‹ôy
);

170 
	`˛og_backåa˚_sigß„
(
¥i‹ôy
, *
¥ogøm_cou¡î
);

178 
size_t
 
	`log_time°amp
(
time°amp_¥ecisi⁄
 ,

179 *
buf
, 
size_t
 
buÊí
);

182 
	stime°amp_c⁄åﬁ
 {

183 
size_t
 
Àn
;

184 
¥ecisi⁄
;

185 
Æªady_ªndîed
;

186 
buf
[40];

191 
	#LOG_LEVELS
 "”mîgícõs|Æîts|¸ôiˇl|îr‹s|w¨nögs|nŸifiˇti⁄s|öf‹m©i⁄Æ|debuggög)"

	)

193 
	#LOG_LEVEL_DESC
 \

201 "Debuggög mesßges\n"

	)

203 
	#LOG_FACILITIES
 "(kîn|u£r|maû|d´m⁄|auth|sy¶og|Õr|√ws|uu˝|¸⁄|loˇl0|loˇl1|loˇl2|loˇl3|loˇl4|loˇl5|loˇl6|loˇl7)"

	)

205 
	#LOG_FACILITY_DESC
 \

223 "Loˇ»u£\n"

	)

225 
	#LOGFILE_MASK
 0600

	)

	@common-libs/3rd-party/derived-lib/include/hash.h

33 #i‚de‡
HASH_H


34 
	#HASH_H
 1

	)

36 
	~<°ddef.h
>

37 
	~<°döt.h
>

39 
uöt32_t
 
hash_w‹ds
(c⁄° uöt32_à*, 
size_t
 
n_w‹d
, uöt32_à
basis
);

40 
uöt32_t
 
hash_byãs
(c⁄° *, 
size_t
 
n_byãs
, uöt32_à
basis
);

	@common-libs/3rd-party/derived-lib/include/nicira-ext.h

6 #i‚de‡
OPENFLOW_NICIRA_EXT_H


7 
	#OPENFLOW_NICIRA_EXT_H
 1

	)

9 
	~"›íÊow/›íÊow.h
"

11 
	#NICIRA_OUI_STR
 "002320"

	)

17 
	#NX_VENDOR_ID
 0x00002320

	)

19 
	enicúa_ty≥
 {

23 
	mNXT_STATUS_REQUEST
,

27 
	mNXT_STATUS_REPLY
,

31 
	mNXT_ACT_SET_CONFIG
,

34 
	mNXT_ACT_GET_CONFIG
,

39 
	mNXT_COMMAND_REQUEST
,

43 
	mNXT_COMMAND_REPLY
,

46 
	mNXT_FLOW_END_CONFIG
,

50 
	mNXT_FLOW_END


53 
	snicúa_hódî
 {

54 
oÂ_hódî
 
	mhódî
;

55 
uöt32_t
 
	mvíd‹
;

56 
uöt32_t
 
	msubty≥
;

58 
OFP_ASSERT
((
nicúa_hódî
Ë=(
oÂ_víd‹_hódî
) + 4);

61 
	enx_¢©_comm™d
 {

62 
	mNXSC_ADD
,

63 
	mNXSC_DELETE


67 
	snx_¢©_c⁄fig
 {

68 
uöt8_t
 
	mcomm™d
;

69 
uöt8_t
 
	m∑d
[3];

70 
uöt16_t
 
	mp‹t
;

71 
uöt16_t
 
	mmac_timeout
;

76 
uöt32_t
 
	mù_addr_°¨t
;

77 
uöt32_t
 
	mù_addr_íd
;

81 
uöt16_t
 
	mt˝_°¨t
;

82 
uöt16_t
 
	mt˝_íd
;

83 
uöt16_t
 
	mudp_°¨t
;

84 
uöt16_t
 
	mudp_íd
;

91 
uöt8_t
 
	mmac_addr
[
OFP_ETH_ALEN
];

92 
uöt8_t
 
	m∑d2
[2];

94 
OFP_ASSERT
((
nx_¢©_c⁄fig
) == 32);

97 
	snx_a˘_c⁄fig
 {

98 
nicúa_hódî
 
	mhódî
;

99 
uöt16_t
 
	mty≥
;

100 
uöt8_t
 
	m∑d
[2];

102 
nx_¢©_c⁄fig
 
	m¢©
[0];

107 
OFP_ASSERT
((
nx_a˘_c⁄fig
) == 20);

110 
	enx_a˘i⁄_subty≥
 {

111 
	mNXAST_SNAT


115 
	snx_a˘i⁄_¢©
 {

116 
uöt16_t
 
	mty≥
;

117 
uöt16_t
 
	mÀn
;

118 
uöt32_t
 
	mvíd‹
;

119 
uöt16_t
 
	msubty≥
;

120 
uöt16_t
 
	mp‹t
;

122 
uöt8_t
 
	m∑d
[4];

124 
OFP_ASSERT
((
nx_a˘i⁄_¢©
) == 16);

127 
	snx_a˘i⁄_hódî
 {

128 
uöt16_t
 
	mty≥
;

129 
uöt16_t
 
	mÀn
;

130 
uöt32_t
 
	mvíd‹
;

131 
uöt16_t
 
	msubty≥
;

132 
uöt8_t
 
	m∑d
[6];

134 
OFP_ASSERT
((
nx_a˘i⁄_hódî
) == 16);

138 
	mNXT_STATUS_EXITED
 = 1 << 31,

139 
	mNXT_STATUS_SIGNALED
 = 1 << 30,

140 
	mNXT_STATUS_UNKNOWN
 = 1 << 29,

141 
	mNXT_STATUS_COREDUMP
 = 1 << 28,

142 
	mNXT_STATUS_ERROR
 = 1 << 27,

143 
	mNXT_STATUS_STARTED
 = 1 << 26,

144 
	mNXT_STATUS_EXITSTATUS
 = 0xff,

145 
	mNXT_STATUS_TERMSIG
 = 0xff,

149 
	snx_comm™d_ª∂y
 {

150 
nicúa_hódî
 
	mnxh
;

151 
uöt32_t
 
	m°©us
;

154 
OFP_ASSERT
((
nx_comm™d_ª∂y
) == 20);

156 
	enx_Êow_íd_ªas⁄
 {

157 
	mNXFER_IDLE_TIMEOUT
,

158 
	mNXFER_HARD_TIMEOUT
,

159 
	mNXFER_DELETE
,

160 
	mNXFER_EJECT


163 
	snx_Êow_íd_c⁄fig
 {

164 
nicúa_hódî
 
	mhódî
;

165 
uöt8_t
 
	míabÀ
;

167 
uöt8_t
 
	m∑d
[3];

169 
OFP_ASSERT
((
nx_Êow_íd_c⁄fig
) == 20);

171 
	snx_Êow_íd
 {

172 
nicúa_hódî
 
	mhódî
;

173 
oÂ_m©ch
 
	mm©ch
;

174 
uöt64_t
 
	mcookõ
;

176 
uöt16_t
 
	m¥i‹ôy
;

177 
uöt8_t
 
	mªas⁄
;

179 
uöt8_t
 
	mt˝_Êags
;

180 
uöt8_t
 
	mù_tos
;

182 
uöt8_t
 
	m£nd_Êow_exp
;

184 
uöt16_t
 
	midÀ_timeout
;

186 
uöt64_t
 
	möô_time
;

187 
uöt64_t
 
	mu£d_time
;

188 
uöt64_t
 
	míd_time
;

190 
uöt64_t
 
	m∑ckë_cou¡
;

191 
uöt64_t
 
	mbyã_cou¡
;

193 
OFP_ASSERT
((
nx_Êow_íd
) == 112);

	@common-libs/3rd-party/derived-lib/include/openflow-ext.h

6 #i‚de‡
OPENFLOW_OPENFLOW_EXT_H


7 
	#OPENFLOW_OPENFLOW_EXT_H
 1

	)

9 
	~"›íÊow/›íÊow.h
"

19 
	#OPENFLOW_VENDOR_ID
 0x000026e1

	)

21 
	eoÂ_exãnsi⁄_comm™ds
 {

23 
	mOFP_EXT_QUEUE_MODIFY
,

24 
	mOFP_EXT_QUEUE_DELETE
,

25 
	mOFP_EXT_SET_DESC
,

27 
	mOFP_EXT_COUNT


30 
	soÂ_exãnsi⁄_hódî
 {

31 
oÂ_hódî
 
	mhódî
;

32 
uöt32_t
 
	mvíd‹
;

33 
uöt32_t
 
	msubty≥
;

35 
OFP_ASSERT
((
oÂ_exãnsi⁄_hódî
) == 16);

43 
	s›íÊow_queue_comm™d_hódî
 {

44 
oÂ_exãnsi⁄_hódî
 
	mhódî
;

45 
uöt16_t
 
	mp‹t
;

46 
uöt8_t
 
	m∑d
[6];

47 
uöt8_t
 
	mbody
[0];

49 
OFP_ASSERT
((
›íÊow_queue_comm™d_hódî
) == 24);

63 
	e›íÊow_queue_îr‹_code
 {

64 
	mOFQ_ERR_NONE
,

65 
	mOFQ_ERR_FAIL
,

66 
	mOFQ_ERR_NOT_FOUND
,

67 
	mOFQ_ERR_DISCIPLINE
,

68 
	mOFQ_ERR_BW_UNAVAIL
,

69 
	mOFQ_ERR_QUEUE_UNAVAIL
,

70 
	mOFQ_ERR_COUNT


73 
	#OPENFLOW_QUEUE_ERROR_STRINGS_DEF
 { \

80 }

	)

82 *
›íÊow_queue_îr‹_°rögs
[];

84 
	s›íÊow_ext_£t_dp_desc
 {

85 
oÂ_exãnsi⁄_hódî
 
	mhódî
;

86 
	mdp_desc
[
DESC_STR_LEN
];

88 
OFP_ASSERT
((
›íÊow_ext_£t_dp_desc
) == 272);

90 
	#ofq_îr‹_°rög
(
rv
Ë((‘vË< 
OFQ_ERR_COUNT
) && ((rv) >= 0) ? \

91 
›íÊow_queue_îr‹_°rögs
[
rv
] : "Unknow¿îr‹ code")

	)

101 
	eoÂ_queue_¥›_ext
 {

102 
	mOFPQT_EXT_MAX_RATE
 = 
OFPQT_MIN
 + 1,

103 
	mOFPQT_EXT_BUF_ALLOC
,

104 
OFPQT_EXT_SCHED_WEIGHT


105 
	mOFPQT_EXT_COUNT


108 
	#OPENFLOW_QUEUE_PROP_STRINGS_DEF
 { \

114 }

	)

115 *
›íÊow_queue_¥›_°rögs
[];

117 
	#ofq_¥›_°rög
(
vÆ
Ë(((vÆË< 
OFPQT_EXT_COUNT
) && ((val) >= 0) ? \

118 
›íÊow_queue_¥›_°rögs
[
vÆ
] : "Unknow¿¥›îty vÆue")

	)

122 
	soÂ_queue_¥›_max_øã
 {

123 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

124 
uöt16_t
 
	møã
;

125 
uöt8_t
 
	m∑d
[6];

127 
OFP_ASSERT
((
oÂ_queue_¥›_max_øã
) == 16);

130 
	soÂ_queue_¥›_buf_Æloc
 {

131 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

132 
uöt16_t
 
	mÆloc_vÆ
;

133 
uöt8_t
 
	m∑d
[6];

135 
OFP_ASSERT
((
oÂ_queue_¥›_buf_Æloc
) == 16);

138 
	soÂ_queue_¥›_sched_weight
 {

139 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

140 
uöt16_t
 
	mweight
;

141 
uöt8_t
 
	m∑d
[6];

143 
OFP_ASSERT
((
oÂ_queue_¥›_sched_weight
) == 16);

	@common-libs/3rd-party/derived-lib/include/openflow-netlink.h

34 #i‚de‡
OPENFLOW_OPENFLOW_NETLINK_H


35 
	#OPENFLOW_OPENFLOW_NETLINK_H
 1

	)

37 
	#DP_GENL_FAMILY_NAME
 "O≥nFlow"

	)

41 
	mDP_GENL_A_UNSPEC
,

42 
	mDP_GENL_A_DP_IDX
,

43 
	mDP_GENL_A_PORTNAME
,

44 
	mDP_GENL_A_MC_GROUP
,

45 
	mDP_GENL_A_OPENFLOW
,

46 
	mDP_GENL_A_DP_NAME
,

48 
	m__DP_GENL_A_MAX
,

49 
	mDP_GENL_A_MAX
 = 
__DP_GENL_A_MAX
 - 1

53 
	edp_gíl_comm™d
 {

54 
	mDP_GENL_C_UNSPEC
,

55 
	mDP_GENL_C_ADD_DP
,

56 
	mDP_GENL_C_DEL_DP
,

57 
	mDP_GENL_C_QUERY_DP
,

58 
	mDP_GENL_C_ADD_PORT
,

59 
	mDP_GENL_C_DEL_PORT
,

60 
	mDP_GENL_C_OPENFLOW
,

62 
	m__DP_GENL_C_MAX
,

63 
	mDP_GENL_C_MAX
 = 
__DP_GENL_C_MAX
 - 1

67 
	#DP_MAX
 256

	)

	@common-libs/3rd-party/derived-lib/include/openflow.h

36 #i‚de‡
OPENFLOW_OPENFLOW_H


37 
	#OPENFLOW_OPENFLOW_H
 1

	)

39 #ifde‡
__KERNEL__


40 
	~<löux/ty≥s.h
>

42 
	~<°döt.h
>

45 #ifde‡
SWIG


46 
	#OFP_ASSERT
(
EXPR
Ë

	)

47 #ñi‡!
deföed
(
__˝lu•lus
)

49 
	#OFP_ASSERT
(
EXPR
) \

50 (*
	`buûd_as£π
())[ (struct { \

51 
buûd_as£π_Áûed
 : (
EXPR
Ë? 1 : -1; })]

	)

53 
	#OFP_ASSERT
(
_EXPR
Ë
	tbuûd_as£π_Áûed
[(_EXPRË? 1 : -1]

	)

56 #i‚de‡
	tSWIG


57 
	tOFP_PACKED
 
	t__©åibuã__
((
	t∑cked
))

	)

59 
	tOFP_PACKED


	)

69 
	tOFP_VERSION
 0x01

	)

70 
	tOFP_VERSION_1_1
 0x02

	)

72 
	tOFP_MAX_TABLE_NAME_LEN
 32

	)

73 
	tOFP_MAX_PORT_NAME_LEN
 16

	)

75 
	tOFP_TCP_PORT
 6633

	)

76 
	tOFP_SSL_PORT
 6633

	)

78 
	tOFP_ETH_ALEN
 6

	)

81 
	eoÂ_p‹t
 {

83 
OFPP_MAX
 = 0xff00,

86 
OFPP_IN_PORT
 = 0xfff8,

90 
OFPP_TABLE
 = 0xfff9,

93 
OFPP_NORMAL
 = 0xfffa,

94 
OFPP_FLOOD
 = 0xfffb,

96 
OFPP_ALL
 = 0xfffc,

97 
OFPP_CONTROLLER
 = 0xfffd,

98 
OFPP_LOCAL
 = 0xfffe,

99 
OFPP_NONE
 = 0xffff

102 
	eoÂ_ty≥
 {

104 
	mOFPT_HELLO
,

105 
	mOFPT_ERROR
,

106 
	mOFPT_ECHO_REQUEST
,

107 
	mOFPT_ECHO_REPLY
,

108 
	mOFPT_VENDOR
,

111 
	mOFPT_FEATURES_REQUEST
,

112 
	mOFPT_FEATURES_REPLY
,

113 
	mOFPT_GET_CONFIG_REQUEST
,

114 
	mOFPT_GET_CONFIG_REPLY
,

115 
	mOFPT_SET_CONFIG
,

118 
	mOFPT_PACKET_IN
,

119 
	mOFPT_FLOW_REMOVED
,

120 
	mOFPT_PORT_STATUS
,

123 
	mOFPT_PACKET_OUT
,

124 
	mOFPT_FLOW_MOD
,

125 
	mOFPT_PORT_MOD
,

128 
	mOFPT_STATS_REQUEST
,

129 
	mOFPT_STATS_REPLY
,

132 
	mOFPT_BARRIER_REQUEST
,

133 
	mOFPT_BARRIER_REPLY
,

136 
	mOFPT_QUEUE_GET_CONFIG_REQUEST
,

137 
	mOFPT_QUEUE_GET_CONFIG_REPLY


142 
	soÂ_hódî
 {

143 
uöt8_t
 
	mvîsi⁄
;

144 
uöt8_t
 
	mty≥
;

145 
uöt16_t
 
	mÀngth
;

146 
uöt32_t
 
	mxid
;

150 
OFP_ASSERT
((
oÂ_hódî
) == 8);

154 
	soÂ_hñlo
 {

155 
oÂ_hódî
 
	mhódî
;

158 
	#OFP_DEFAULT_MISS_SEND_LEN
 128

	)

160 
	eoÂ_c⁄fig_Êags
 {

162 
	mOFPC_FRAG_NORMAL
 = 0,

163 
	mOFPC_FRAG_DROP
 = 1,

164 
	mOFPC_FRAG_REASM
 = 2,

165 
	mOFPC_FRAG_MASK
 = 3

169 
	soÂ_swôch_c⁄fig
 {

170 
oÂ_hódî
 
	mhódî
;

171 
uöt16_t
 
	mÊags
;

172 
uöt16_t
 
	mmiss_£nd_Àn
;

175 
OFP_ASSERT
((
oÂ_swôch_c⁄fig
) == 12);

178 
	eoÂ_ˇ∑bûôõs
 {

179 
	mOFPC_FLOW_STATS
 = 1 << 0,

180 
	mOFPC_TABLE_STATS
 = 1 << 1,

181 
	mOFPC_PORT_STATS
 = 1 << 2,

182 
	mOFPC_STP
 = 1 << 3,

183 
	mOFPC_RESERVED
 = 1 << 4,

184 
	mOFPC_IP_REASM
 = 1 << 5,

185 
	mOFPC_QUEUE_STATS
 = 1 << 6,

186 
	mOFPC_ARP_MATCH_IP
 = 1 << 7

193 
	eoÂ_p‹t_c⁄fig
 {

194 
	mOFPPC_PORT_DOWN
 = 1 << 0,

196 
	mOFPPC_NO_STP
 = 1 << 1,

197 
	mOFPPC_NO_RECV
 = 1 << 2,

199 
	mOFPPC_NO_RECV_STP
 = 1 << 3,

200 
	mOFPPC_NO_FLOOD
 = 1 << 4,

201 
	mOFPPC_NO_FWD
 = 1 << 5,

202 
	mOFPPC_NO_PACKET_IN
 = 1 << 6

208 
	eoÂ_p‹t_°©e
 {

209 
	mOFPPS_LINK_DOWN
 = 1 << 0,

215 
	mOFPPS_STP_LISTEN
 = 0 << 8,

216 
	mOFPPS_STP_LEARN
 = 1 << 8,

217 
	mOFPPS_STP_FORWARD
 = 2 << 8,

218 
	mOFPPS_STP_BLOCK
 = 3 << 8,

219 
	mOFPPS_STP_MASK
 = 3 << 8

223 
	eoÂ_p‹t_„©uªs
 {

224 
	mOFPPF_10MB_HD
 = 1 << 0,

225 
	mOFPPF_10MB_FD
 = 1 << 1,

226 
	mOFPPF_100MB_HD
 = 1 << 2,

227 
	mOFPPF_100MB_FD
 = 1 << 3,

228 
	mOFPPF_1GB_HD
 = 1 << 4,

229 
	mOFPPF_1GB_FD
 = 1 << 5,

230 
	mOFPPF_10GB_FD
 = 1 << 6,

231 
	mOFPPF_COPPER
 = 1 << 7,

232 
	mOFPPF_FIBER
 = 1 << 8,

233 
	mOFPPF_AUTONEG
 = 1 << 9,

234 
	mOFPPF_PAUSE
 = 1 << 10,

235 
	mOFPPF_PAUSE_ASYM
 = 1 << 11

239 
	soÂ_phy_p‹t
 {

240 
uöt16_t
 
	mp‹t_no
;

241 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

242 
	m«me
[
OFP_MAX_PORT_NAME_LEN
];

244 
uöt32_t
 
	mc⁄fig
;

245 
uöt32_t
 
	m°©e
;

249 
uöt32_t
 
	mcuº
;

250 
uöt32_t
 
	madvîti£d
;

251 
uöt32_t
 
	msuµ‹ãd
;

252 
uöt32_t
 
	m≥î
;

254 
OFP_ASSERT
((
oÂ_phy_p‹t
) == 48);

257 
	soÂ_swôch_„©uªs
 {

258 
oÂ_hódî
 
	mhódî
;

259 
uöt64_t
 
	md©≠©h_id
;

263 
uöt32_t
 
	mn_buf„rs
;

265 
uöt8_t
 
	mn_èbÀs
;

266 
uöt8_t
 
	m∑d
[3];

269 
uöt32_t
 
	mˇ∑bûôõs
;

270 
uöt32_t
 
	ma˘i⁄s
;

273 
oÂ_phy_p‹t
 
	mp‹ts
[0];

277 
OFP_ASSERT
((
oÂ_swôch_„©uªs
) == 32);

280 
	eoÂ_p‹t_ªas⁄
 {

281 
	mOFPPR_ADD
,

282 
	mOFPPR_DELETE
,

283 
	mOFPPR_MODIFY


287 
	soÂ_p‹t_°©us
 {

288 
oÂ_hódî
 
	mhódî
;

289 
uöt8_t
 
	mªas⁄
;

290 
uöt8_t
 
	m∑d
[7];

291 
oÂ_phy_p‹t
 
	mdesc
;

293 
OFP_ASSERT
((
oÂ_p‹t_°©us
) == 64);

296 
	soÂ_p‹t_mod
 {

297 
oÂ_hódî
 
	mhódî
;

298 
uöt16_t
 
	mp‹t_no
;

299 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

305 
uöt32_t
 
	mc⁄fig
;

306 
uöt32_t
 
	mmask
;

308 
uöt32_t
 
	madvîti£
;

310 
uöt8_t
 
	m∑d
[4];

312 
OFP_ASSERT
((
oÂ_p‹t_mod
) == 32);

315 
	eoÂ_∑ckë_ö_ªas⁄
 {

316 
	mOFPR_NO_MATCH
,

317 
	mOFPR_ACTION


321 
	soÂ_∑ckë_ö
 {

322 
oÂ_hódî
 
	mhódî
;

323 
uöt32_t
 
	mbuf„r_id
;

324 
uöt16_t
 
	mtŸÆ_Àn
;

325 
uöt16_t
 
	mö_p‹t
;

326 
uöt8_t
 
	mªas⁄
;

327 
uöt8_t
 
	m∑d
;

328 
uöt8_t
 
	md©a
[0];

335 
OFP_ASSERT
((
oÂ_∑ckë_ö
) == 20);

337 
	eoÂ_a˘i⁄_ty≥
 {

338 
	mOFPAT_OUTPUT
,

339 
	mOFPAT_SET_VLAN_VID
,

340 
	mOFPAT_SET_VLAN_PCP
,

341 
	mOFPAT_STRIP_VLAN
,

342 
	mOFPAT_SET_DL_SRC
,

343 
	mOFPAT_SET_DL_DST
,

344 
	mOFPAT_SET_NW_SRC
,

345 
	mOFPAT_SET_NW_DST
,

346 
	mOFPAT_SET_NW_TOS
,

347 
	mOFPAT_SET_TP_SRC
,

348 
	mOFPAT_SET_TP_DST
,

349 
	mOFPAT_ENQUEUE
,

350 
	mOFPAT_KULCLOUD
,

351 
	mOFPAT_VENDOR
 = 0xffff

354 
	eoÂ_a˘i⁄_ty≥_2
 {

355 
	mOFPAT_OUTPUT_2
,

356 
	mOFPAT_SET_VLAN_VID_2
,

357 
	mOFPAT_SET_VLAN_PCP_2
,

358 
	mOFPAT_SET_DL_SRC_2
,

359 
	mOFPAT_SET_DL_DST_2
,

360 
	mOFPAT_SET_NW_SRC_2
,

361 
	mOFPAT_SET_NW_DST_2
,

362 
	mOFPAT_SET_NW_TOS_2
,

363 
	mOFPAT_SET_NW_ECN_2
,

364 
	mOFPAT_SET_TP_SRC_2
,

365 
	mOFPAT_SET_TP_DST_2
,

366 
	mOFPAT_COPY_TTL_OUT_2
,

368 
	mOFPAT_COPY_TTL_IN_2
,

370 
	mOFPAT_SET_MPLS_LABEL_2
,

371 
	mOFPAT_SET_MPLS_TC_2
,

372 
	mOFPAT_SET_MPLS_TTL_2
,

373 
	mOFPAT_DEC_MPLS_TTL_2
,

374 
	mOFPAT_PUSH_VLAN_2
,

375 
	mOFPAT_POP_VLAN_2
,

376 
	mOFPAT_PUSH_MPLS_2
,

377 
	mOFPAT_POP_MPLS_2
,

378 
	mOFPAT_SET_QUEUE_2
,

379 
	mOFPAT_GROUP_2
,

380 
	mOFPAT_SET_NW_TTL_2
,

381 
	mOFPAT_DEC_NW_TTL_2
,

382 
	mOFPAT_EXPERIMENTER
 = 0xffff

389 
	soÂ_a˘i⁄_ouçut
 {

390 
uöt16_t
 
	mty≥
;

391 
uöt16_t
 
	mÀn
;

392 
uöt16_t
 
	mp‹t
;

393 
uöt16_t
 
	mmax_Àn
;

395 
OFP_ASSERT
((
oÂ_a˘i⁄_ouçut
) == 8);

400 
	#OFP_VLAN_NONE
 0xffff

	)

403 
	soÂ_a˘i⁄_vœn_vid
 {

404 
uöt16_t
 
	mty≥
;

405 
uöt16_t
 
	mÀn
;

406 
uöt16_t
 
	mvœn_vid
;

407 
uöt8_t
 
	m∑d
[2];

409 
OFP_ASSERT
((
oÂ_a˘i⁄_vœn_vid
) == 8);

412 
	soÂ_a˘i⁄_vœn_p˝
 {

413 
uöt16_t
 
	mty≥
;

414 
uöt16_t
 
	mÀn
;

415 
uöt8_t
 
	mvœn_p˝
;

416 
uöt8_t
 
	m∑d
[3];

418 
OFP_ASSERT
((
oÂ_a˘i⁄_vœn_p˝
) == 8);

421 
	soÂ_a˘i⁄_dl_addr
 {

422 
uöt16_t
 
	mty≥
;

423 
uöt16_t
 
	mÀn
;

424 
uöt8_t
 
	mdl_addr
[
OFP_ETH_ALEN
];

425 
uöt8_t
 
	m∑d
[6];

427 
OFP_ASSERT
((
oÂ_a˘i⁄_dl_addr
) == 16);

430 
	soÂ_a˘i⁄_nw_addr
 {

431 
uöt16_t
 
	mty≥
;

432 
uöt16_t
 
	mÀn
;

433 
uöt32_t
 
	mnw_addr
;

435 
OFP_ASSERT
((
oÂ_a˘i⁄_nw_addr
) == 8);

438 
	soÂ_a˘i⁄_ç_p‹t
 {

439 
uöt16_t
 
	mty≥
;

440 
uöt16_t
 
	mÀn
;

441 
uöt16_t
 
	mç_p‹t
;

442 
uöt8_t
 
	m∑d
[2];

444 
OFP_ASSERT
((
oÂ_a˘i⁄_ç_p‹t
) == 8);

447 
	soÂ_a˘i⁄_nw_tos
 {

448 
uöt16_t
 
	mty≥
;

449 
uöt16_t
 
	mÀn
;

450 
uöt8_t
 
	mnw_tos
;

451 
uöt8_t
 
	m∑d
[3];

453 
OFP_ASSERT
((
oÂ_a˘i⁄_nw_tos
) == 8);

456 
	soÂ_a˘i⁄_víd‹_hódî
 {

457 
uöt16_t
 
	mty≥
;

458 
uöt16_t
 
	mÀn
;

459 
uöt32_t
 
	mvíd‹
;

462 
OFP_ASSERT
((
oÂ_a˘i⁄_víd‹_hódî
) == 8);

464 
	soÂ_a˘i⁄_kul˛oud
 {

465 
uöt16_t
 
	mty≥
;

466 
uöt16_t
 
	mÀn
;

467 
uöt32_t
 
	mkul˛oud
;

470 
OFP_ASSERT
((
oÂ_a˘i⁄_kul˛oud
) == 8);

477 
	soÂ_a˘i⁄_hódî
 {

478 
uöt16_t
 
	mty≥
;

479 
uöt16_t
 
	mÀn
;

483 
uöt8_t
 
	m∑d
[4];

485 
OFP_ASSERT
((
oÂ_a˘i⁄_hódî
) == 8);

488 
	soÂ_∑ckë_out
 {

489 
oÂ_hódî
 
	mhódî
;

490 
uöt32_t
 
	mbuf„r_id
;

491 
uöt16_t
 
	mö_p‹t
;

492 
uöt16_t
 
	ma˘i⁄s_Àn
;

493 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

498 
OFP_ASSERT
((
oÂ_∑ckë_out
) == 16);

500 
	eoÂ_Êow_mod_comm™d
 {

501 
	mOFPFC_ADD
,

502 
	mOFPFC_MODIFY
,

503 
	mOFPFC_MODIFY_STRICT
,

504 
	mOFPFC_DELETE
,

505 
	mOFPFC_DELETE_STRICT


509 
	eoÂ_Êow_wûdˇrds
 {

510 
	mOFPFW_IN_PORT
 = 1 << 0,

511 
	mOFPFW_DL_VLAN
 = 1 << 1,

512 
	mOFPFW_DL_SRC
 = 1 << 2,

513 
	mOFPFW_DL_DST
 = 1 << 3,

514 
	mOFPFW_DL_TYPE
 = 1 << 4,

515 
	mOFPFW_NW_PROTO
 = 1 << 5,

516 
	mOFPFW_TP_SRC
 = 1 << 6,

517 
	mOFPFW_TP_DST
 = 1 << 7,

523 
	mOFPFW_NW_SRC_SHIFT
 = 8,

524 
	mOFPFW_NW_SRC_BITS
 = 6,

525 
	mOFPFW_NW_SRC_MASK
 = ((1 << 
OFPFW_NW_SRC_BITS
Ë- 1Ë<< 
OFPFW_NW_SRC_SHIFT
,

526 
	mOFPFW_NW_SRC_ALL
 = 32 << 
OFPFW_NW_SRC_SHIFT
,

529 
	mOFPFW_NW_DST_SHIFT
 = 14,

530 
	mOFPFW_NW_DST_BITS
 = 6,

531 
	mOFPFW_NW_DST_MASK
 = ((1 << 
OFPFW_NW_DST_BITS
Ë- 1Ë<< 
OFPFW_NW_DST_SHIFT
,

532 
	mOFPFW_NW_DST_ALL
 = 32 << 
OFPFW_NW_DST_SHIFT
,

534 
	mOFPFW_DL_VLAN_PCP
 = 1 << 20,

535 
	mOFPFW_NW_TOS
 = 1 << 21,

538 
	mOFPFW_ALL
 = ((1 << 22) - 1)

542 
	eoÂ_Êow_wûdˇrds_2
 {

543 
	mOFPFW_IN_PORT_2
 = 1 << 0,

544 
	mOFPFW_DL_VLAN_2
 = 1 << 1,

545 
	mOFPFW_DL_VLAN_PCP_2
 = 1 << 2,

546 
	mOFPFW_DL_TYPE_2
 = 1 << 3,

547 
	mOFPFW_NW_TOS_2
 = 1 << 4,

548 
	mOFPFW_NW_PROTO_2
 = 1 << 5,

549 
	mOFPFW_TP_SRC_2
 = 1 << 6,

550 
	mOFPFW_TP_DST_2
 = 1 << 7,

551 
	mOFPFW_MPLS_LABEL_2
 = 1 << 8,

552 
	mOFPFW_MPLS_TC_2
 = 1 << 9,

554 
	mOFPFW_ALL_2
 = ((1 << 10) - 1)

559 
	#OFPFW_ICMP_TYPE
 
OFPFW_TP_SRC


	)

560 
	#OFPFW_ICMP_CODE
 
OFPFW_TP_DST


	)

566 
	#OFP_DL_TYPE_ETH2_CUTOFF
 0x0600

	)

571 
	#OFP_DL_TYPE_NOT_ETH_TYPE
 0x05ff

	)

576 
	#OFP_VLAN_NONE
 0xffff

	)

579 
	soÂ_m©ch
 {

580 
uöt32_t
 
	mwûdˇrds
;

581 
uöt16_t
 
	mö_p‹t
;

582 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

583 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

584 
uöt16_t
 
	mdl_vœn
;

585 
uöt8_t
 
	mdl_vœn_p˝
;

586 
uöt8_t
 
	m∑d1
[1];

587 
uöt16_t
 
	mdl_ty≥
;

588 
uöt8_t
 
	mnw_tos
;

589 
uöt8_t
 
	mnw_¥Ÿo
;

591 
uöt8_t
 
	m∑d2
[2];

592 
uöt32_t
 
	mnw_§c
;

593 
uöt32_t
 
	mnw_d°
;

594 
uöt16_t
 
	mç_§c
;

595 
uöt16_t
 
	mç_d°
;

597 
OFP_ASSERT
((
oÂ_m©ch
) == 40);

599 
	eoÂ_ö°ru˘i⁄_ty≥
 {

600 
	mOFPIT_GOTO_TABLE
 = 1,

602 
	mOFPIT_WRITE_METADATA
 = 2,

604 
	mOFPIT_WRITE_ACTIONS
 = 3,

606 
	mOFPIT_APPLY_ACTIONS
 = 4,

607 
	mOFPIT_CLEAR_ACTIONS
 = 5,

609 
	mOFPIT_EXPERIMENTER
 = 0xFFFF

613 
	soÂ_ö°ru˘i⁄_gŸo_èbÀ
 {

614 
uöt16_t
 
	mty≥
;

615 
uöt16_t
 
	mÀn
;

616 
uöt8_t
 
	mèbÀ_id
;

617 
uöt8_t
 
	m∑d
[3];

619 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_gŸo_èbÀ
) == 8);

622 
	soÂ_ö°ru˘i⁄_wrôe_mëad©a
 {

623 
uöt16_t
 
	mty≥
;

624 
uöt16_t
 
	mÀn
;

625 
uöt8_t
 
	m∑d
[4];

626 
uöt64_t
 
	mmëad©a
;

627 
uöt64_t
 
	mmëad©a_mask
;

629 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_wrôe_mëad©a
) == 24);

632 
	soÂ_ö°ru˘i⁄_a˘i⁄s
 {

633 
uöt16_t
 
	mty≥
;

634 
uöt16_t
 
	mÀn
;

635 
uöt8_t
 
	m∑d
[4];

636 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

640 
OFP_ASSERT
((
oÂ_ö°ru˘i⁄_a˘i⁄s
) == 8);

642 
	soÂ_ö°ru˘i⁄
 {

643 
uöt16_t
 
	mty≥
;

644 
uöt16_t
 
	mÀn
;

645 
uöt8_t
 
	m∑d
[4];

655 
	eoÂ_m©ch_ty≥
 {

656 
	mOFPMT_STANDARD
,

660 
	#OFPMT_STANDARD_LENGTH
 88

	)

663 
	soÂ_m©ch_2
 {

664 
uöt16_t
 
	mty≥
;

665 
uöt16_t
 
	mÀngth
;

666 
uöt32_t
 
	mö_p‹t
;

667 
uöt32_t
 
	mwûdˇrds
;

668 
uöt8_t
 
	mdl_§c
[
OFP_ETH_ALEN
];

669 
uöt8_t
 
	mdl_§c_mask
[
OFP_ETH_ALEN
];

670 
uöt8_t
 
	mdl_d°
[
OFP_ETH_ALEN
];

671 
uöt8_t
 
	mdl_d°_mask
[
OFP_ETH_ALEN
];

672 
uöt16_t
 
	mdl_vœn
;

673 
uöt8_t
 
	mdl_vœn_p˝
;

674 
uöt8_t
 
	m∑d1
[1];

675 
uöt16_t
 
	mdl_ty≥
;

676 
uöt8_t
 
	mnw_tos
;

677 
uöt8_t
 
	mnw_¥Ÿo
;

679 
uöt32_t
 
	mnw_§c
;

680 
uöt32_t
 
	mnw_§c_mask
;

681 
uöt32_t
 
	mnw_d°
;

682 
uöt32_t
 
	mnw_d°_mask
;

683 
uöt16_t
 
	mç_§c
;

684 
uöt16_t
 
	mç_d°
;

685 
uöt32_t
 
	mm∂s_œbñ
;

686 
uöt8_t
 
	mm∂s_tc
;

687 
uöt8_t
 
	m∑d2
[3];

688 
uöt64_t
 
	mmëad©a
;

689 
uöt64_t
 
	mmëad©a_mask
;

691 
OFP_ASSERT
((
oÂ_m©ch_2
Ë=
OFPMT_STANDARD_LENGTH
);

700 
	#OFP_FLOW_PERMANENT
 0

	)

703 
	#OFP_DEFAULT_PRIORITY
 0x8000

	)

705 
	eoÂ_Êow_mod_Êags
 {

706 
	mOFPFF_SEND_FLOW_REM
 = 1 << 0,

708 
	mOFPFF_CHECK_OVERLAP
 = 1 << 1,

709 
	mOFPFF_EMERG
 = 1 << 2

713 
	soÂ_Êow_mod
 {

714 
oÂ_hódî
 
	mhódî
;

715 
oÂ_m©ch
 
	mm©ch
;

716 
uöt64_t
 
	mcookõ
;

719 
uöt16_t
 
	mcomm™d
;

720 
uöt16_t
 
	midÀ_timeout
;

721 
uöt16_t
 
	mh¨d_timeout
;

722 
uöt16_t
 
	m¥i‹ôy
;

723 
uöt32_t
 
	mbuf„r_id
;

725 
uöt16_t
 
	mout_p‹t
;

729 
uöt16_t
 
	mÊags
;

730 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

734 
OFP_ASSERT
((
oÂ_Êow_mod
) == 72);

738 
	soÂ_Êow_mod_2
 {

739 
oÂ_hódî
 
	mhódî
;

740 
uöt64_t
 
	mcookõ
;

741 
uöt64_t
 
	mcookõ_mask
;

746 
uöt8_t
 
	mèbÀ_id
;

747 
uöt8_t
 
	mcomm™d
;

748 
uöt16_t
 
	midÀ_timeout
;

749 
uöt16_t
 
	mh¨d_timeout
;

750 
uöt16_t
 
	m¥i‹ôy
;

751 
uöt32_t
 
	mbuf„r_id
;

753 
uöt32_t
 
	mout_p‹t
;

757 
uöt32_t
 
	mout_group
;

761 
uöt16_t
 
	mÊags
;

762 
uöt8_t
 
	m∑d
[2];

763 
oÂ_m©ch_2
 
	mm©ch
;

764 
oÂ_ö°ru˘i⁄
 
	mö°ru˘i⁄s
[0];

767 
OFP_ASSERT
((
oÂ_Êow_mod_2
) == 136);

770 
	eoÂ_Êow_ªmoved_ªas⁄
 {

771 
	mOFPRR_IDLE_TIMEOUT
,

772 
	mOFPRR_HARD_TIMEOUT
,

773 
	mOFPRR_DELETE


777 
	soÂ_Êow_ªmoved
 {

778 
oÂ_hódî
 
	mhódî
;

779 
oÂ_m©ch
 
	mm©ch
;

780 
uöt64_t
 
	mcookõ
;

782 
uöt16_t
 
	m¥i‹ôy
;

783 
uöt8_t
 
	mªas⁄
;

784 
uöt8_t
 
	m∑d
[1];

786 
uöt32_t
 
	mduøti⁄_£c
;

787 
uöt32_t
 
	mduøti⁄_n£c
;

789 
uöt16_t
 
	midÀ_timeout
;

790 
uöt8_t
 
	m∑d2
[2];

791 
uöt64_t
 
	m∑ckë_cou¡
;

792 
uöt64_t
 
	mbyã_cou¡
;

794 
OFP_ASSERT
((
oÂ_Êow_ªmoved
) == 88);

799 
	eoÂ_îr‹_ty≥
 {

800 
	mOFPET_HELLO_FAILED
,

801 
	mOFPET_BAD_REQUEST
,

802 
	mOFPET_BAD_ACTION
,

803 
	mOFPET_FLOW_MOD_FAILED
,

804 
	mOFPET_PORT_MOD_FAILED
,

805 
	mOFPET_QUEUE_OP_FAILED


810 
	eoÂ_hñlo_Áûed_code
 {

811 
	mOFPHFC_INCOMPATIBLE
,

812 
	mOFPHFC_EPERM


817 
	eoÂ_bad_ªque°_code
 {

818 
	mOFPBRC_BAD_VERSION
,

819 
	mOFPBRC_BAD_TYPE
,

820 
	mOFPBRC_BAD_STAT
,

821 
	mOFPBRC_BAD_VENDOR
,

823 
	mOFPBRC_BAD_SUBTYPE
,

824 
	mOFPBRC_EPERM
,

825 
	mOFPBRC_BAD_LEN
,

826 
	mOFPBRC_BUFFER_EMPTY
,

827 
	mOFPBRC_BUFFER_UNKNOWN


832 
	eoÂ_bad_a˘i⁄_code
 {

833 
	mOFPBAC_BAD_TYPE
,

834 
	mOFPBAC_BAD_LEN
,

835 
	mOFPBAC_BAD_VENDOR
,

836 
	mOFPBAC_BAD_VENDOR_TYPE
,

837 
	mOFPBAC_BAD_OUT_PORT
,

838 
	mOFPBAC_BAD_ARGUMENT
,

839 
	mOFPBAC_EPERM
,

840 
	mOFPBAC_TOO_MANY
,

841 
	mOFPBAC_BAD_QUEUE


846 
	eoÂ_Êow_mod_Áûed_code
 {

847 
	mOFPFMFC_ALL_TABLES_FULL
,

848 
	mOFPFMFC_OVERLAP
,

850 
	mOFPFMFC_EPERM
,

851 
	mOFPFMFC_BAD_EMERG_TIMEOUT
,

853 
	mOFPFMFC_BAD_COMMAND
,

854 
	mOFPFMFC_UNSUPPORTED


860 
	eoÂ_p‹t_mod_Áûed_code
 {

861 
	mOFPPMFC_BAD_PORT
,

862 
	mOFPPMFC_BAD_HW_ADDR
,

867 
	eoÂ_queue_›_Áûed_code
 {

868 
	mOFPQOFC_BAD_PORT
,

869 
	mOFPQOFC_BAD_QUEUE
,

870 
	mOFPQOFC_EPERM


874 
	soÂ_îr‹_msg
 {

875 
oÂ_hódî
 
	mhódî
;

877 
uöt16_t
 
	mty≥
;

878 
uöt16_t
 
	mcode
;

879 
uöt8_t
 
	md©a
[0];

882 
OFP_ASSERT
((
oÂ_îr‹_msg
) == 12);

884 
	eoÂ_°©s_ty≥s
 {

888 
	mOFPST_DESC
,

893 
	mOFPST_FLOW
,

898 
	mOFPST_AGGREGATE
,

903 
	mOFPST_TABLE
,

908 
	mOFPST_PORT
,

913 
	mOFPST_QUEUE
,

919 
	mOFPST_VENDOR
 = 0xffff

922 
	soÂ_°©s_ªque°
 {

923 
oÂ_hódî
 
	mhódî
;

924 
uöt16_t
 
	mty≥
;

925 
uöt16_t
 
	mÊags
;

926 
uöt8_t
 
	mbody
[0];

928 
OFP_ASSERT
((
oÂ_°©s_ªque°
) == 12);

930 
	eoÂ_°©s_ª∂y_Êags
 {

931 
	mOFPSF_REPLY_MORE
 = 1 << 0

934 
	soÂ_°©s_ª∂y
 {

935 
oÂ_hódî
 
	mhódî
;

936 
uöt16_t
 
	mty≥
;

937 
uöt16_t
 
	mÊags
;

938 
uöt8_t
 
	mbody
[0];

940 
OFP_ASSERT
((
oÂ_°©s_ª∂y
) == 12);

942 
	#DESC_STR_LEN
 256

	)

943 
	#SERIAL_NUM_LEN
 32

	)

946 
	soÂ_desc_°©s
 {

947 
	mm‰_desc
[
DESC_STR_LEN
];

948 
	mhw_desc
[
DESC_STR_LEN
];

949 
	msw_desc
[
DESC_STR_LEN
];

950 
	m£rül_num
[
SERIAL_NUM_LEN
];

951 
	mdp_desc
[
DESC_STR_LEN
];

953 
OFP_ASSERT
((
oÂ_desc_°©s
) == 1056);

956 
	soÂ_Êow_°©s_ªque°
 {

957 
oÂ_m©ch
 
	mm©ch
;

958 
uöt8_t
 
	mèbÀ_id
;

960 
uöt8_t
 
	m∑d
;

961 
uöt16_t
 
	mout_p‹t
;

965 
OFP_ASSERT
((
oÂ_Êow_°©s_ªque°
) == 44);

968 
	soÂ_Êow_°©s
 {

969 
uöt16_t
 
	mÀngth
;

970 
uöt8_t
 
	mèbÀ_id
;

971 
uöt8_t
 
	m∑d
;

972 
oÂ_m©ch
 
	mm©ch
;

973 
uöt32_t
 
	mduøti⁄_£c
;

974 
uöt32_t
 
	mduøti⁄_n£c
;

976 
uöt16_t
 
	m¥i‹ôy
;

978 
uöt16_t
 
	midÀ_timeout
;

979 
uöt16_t
 
	mh¨d_timeout
;

980 
uöt8_t
 
	m∑d2
[6];

981 
uöt64_t
 
	mcookõ
;

982 
uöt64_t
 
	m∑ckë_cou¡
;

983 
uöt64_t
 
	mbyã_cou¡
;

984 
oÂ_a˘i⁄_hódî
 
	ma˘i⁄s
[0];

986 
OFP_ASSERT
((
oÂ_Êow_°©s
) == 88);

989 
	soÂ_aggªg©e_°©s_ªque°
 {

990 
oÂ_m©ch
 
	mm©ch
;

991 
uöt8_t
 
	mèbÀ_id
;

993 
uöt8_t
 
	m∑d
;

994 
uöt16_t
 
	mout_p‹t
;

998 
OFP_ASSERT
((
oÂ_aggªg©e_°©s_ªque°
) == 44);

1001 
	soÂ_aggªg©e_°©s_ª∂y
 {

1002 
uöt64_t
 
	m∑ckë_cou¡
;

1003 
uöt64_t
 
	mbyã_cou¡
;

1004 
uöt32_t
 
	mÊow_cou¡
;

1005 
uöt8_t
 
	m∑d
[4];

1007 
OFP_ASSERT
((
oÂ_aggªg©e_°©s_ª∂y
) == 24);

1010 
	soÂ_èbÀ_°©s
 {

1011 
uöt8_t
 
	mèbÀ_id
;

1013 
uöt8_t
 
	m∑d
[3];

1014 
	m«me
[
OFP_MAX_TABLE_NAME_LEN
];

1015 
uöt32_t
 
	mwûdˇrds
;

1017 
uöt32_t
 
	mmax_íåõs
;

1018 
uöt32_t
 
	ma˘ive_cou¡
;

1019 
uöt64_t
 
	mlookup_cou¡
;

1020 
uöt64_t
 
	mm©ched_cou¡
;

1022 
OFP_ASSERT
((
oÂ_èbÀ_°©s
) == 64);

1025 
	soÂ_p‹t_°©s_ªque°
 {

1026 
uöt16_t
 
	mp‹t_no
;

1030 
uöt8_t
 
	m∑d
[6];

1032 
OFP_ASSERT
((
oÂ_p‹t_°©s_ªque°
) == 8);

1036 
	soÂ_p‹t_°©s
 {

1037 
uöt16_t
 
	mp‹t_no
;

1038 
uöt8_t
 
	m∑d
[6];

1039 
uöt64_t
 
	mrx_∑ckës
;

1040 
uöt64_t
 
	mtx_∑ckës
;

1041 
uöt64_t
 
	mrx_byãs
;

1042 
uöt64_t
 
	mtx_byãs
;

1043 
uöt64_t
 
	mrx_dr›≥d
;

1044 
uöt64_t
 
	mtx_dr›≥d
;

1045 
uöt64_t
 
	mrx_îr‹s
;

1049 
uöt64_t
 
	mtx_îr‹s
;

1053 
uöt64_t
 
	mrx_‰ame_îr
;

1054 
uöt64_t
 
	mrx_ovî_îr
;

1055 
uöt64_t
 
	mrx_¸c_îr
;

1056 
uöt64_t
 
	mcﬁlisi⁄s
;

1058 
OFP_ASSERT
((
oÂ_p‹t_°©s
) == 104);

1061 
	soÂ_víd‹_hódî
 {

1062 
oÂ_hódî
 
	mhódî
;

1063 
uöt32_t
 
	mvíd‹
;

1069 
OFP_ASSERT
((
oÂ_víd‹_hódî
) == 12);

1072 
	#OFPQ_ALL
 0xffffffff

	)

1075 
	#OFPQ_MIN_RATE_UNCFG
 0xffff

	)

1077 
	eoÂ_queue_¥›îtõs
 {

1078 
	mOFPQT_NONE
 = 0,

1079 
	mOFPQT_MIN_RATE
,

1085 
	soÂ_queue_¥›_hódî
 {

1086 
uöt16_t
 
	m¥›îty
;

1087 
uöt16_t
 
	mÀn
;

1088 
uöt8_t
 
	m∑d
[4];

1090 
OFP_ASSERT
((
oÂ_queue_¥›_hódî
) == 8);

1093 
	soÂ_queue_¥›_mö_øã
 {

1094 
oÂ_queue_¥›_hódî
 
	m¥›_hódî
;

1095 
uöt16_t
 
	møã
;

1096 
uöt8_t
 
	m∑d
[6];

1098 
OFP_ASSERT
((
oÂ_queue_¥›_mö_øã
) == 16);

1101 
	soÂ_∑ckë_queue
 {

1102 
uöt32_t
 
	mqueue_id
;

1103 
uöt16_t
 
	mÀn
;

1104 
uöt8_t
 
	m∑d
[2];

1105 
oÂ_queue_¥›_hódî
 
	m¥›îtõs
[0];

1107 
OFP_ASSERT
((
oÂ_∑ckë_queue
) == 8);

1110 
	soÂ_queue_gë_c⁄fig_ªque°
 {

1111 
oÂ_hódî
 
	mhódî
;

1112 
uöt16_t
 
	mp‹t
;

1114 
uöt8_t
 
	m∑d
[2];

1116 
OFP_ASSERT
((
oÂ_queue_gë_c⁄fig_ªque°
) == 12);

1119 
	soÂ_queue_gë_c⁄fig_ª∂y
 {

1120 
oÂ_hódî
 
	mhódî
;

1121 
uöt16_t
 
	mp‹t
;

1122 
uöt8_t
 
	m∑d
[6];

1123 
oÂ_∑ckë_queue
 
	mqueues
[0];

1125 
OFP_ASSERT
((
oÂ_queue_gë_c⁄fig_ª∂y
) == 16);

1128 
	soÂ_a˘i⁄_íqueue
 {

1129 
uöt16_t
 
	mty≥
;

1130 
uöt16_t
 
	mÀn
;

1131 
uöt16_t
 
	mp‹t
;

1134 
uöt8_t
 
	m∑d
[6];

1135 
uöt32_t
 
	mqueue_id
;

1137 
OFP_ASSERT
((
oÂ_a˘i⁄_íqueue
) == 16);

1139 
	soÂ_queue_°©s_ªque°
 {

1140 
uöt16_t
 
	mp‹t_no
;

1141 
uöt8_t
 
	m∑d
[2];

1142 
uöt32_t
 
	mqueue_id
;

1144 
OFP_ASSERT
((
oÂ_queue_°©s_ªque°
) == 8);

1146 
	soÂ_queue_°©s
 {

1147 
uöt16_t
 
	mp‹t_no
;

1148 
uöt8_t
 
	m∑d
[2];

1149 
uöt32_t
 
	mqueue_id
;

1150 
uöt64_t
 
	mtx_byãs
;

1151 
uöt64_t
 
	mtx_∑ckës
;

1152 
uöt64_t
 
	mtx_îr‹s
;

1154 
OFP_ASSERT
((
oÂ_queue_°©s
) == 32);

	@common-libs/3rd-party/derived-lib/include/packets.h

33 #i‚de‡
PACKETS_H


34 
	#PACKETS_H
 1

	)

36 
	~<°döt.h
>

37 
	~<°rög.h
>

38 
	~"c_utû.h
"

40 
	#ETH_ADDR_LEN
 6

	)

42 c⁄° 
uöt8_t
 
	gëh_addr_brﬂdˇ°
[
ETH_ADDR_LEN
] 
	gUNUSED


45 
ölöe
 
boﬁ
 
	$ëh_addr_is_brﬂdˇ°
(c⁄° 
uöt8_t
 
ó
[6])

47  (
ó
[0] &Éa[1] &Éa[2] &Éa[3] &Éa[4] &Éa[5]) == 0xff;

48 
	}
}

49 
ölöe
 
boﬁ
 
	$ëh_addr_is_mu…iˇ°
(c⁄° 
uöt8_t
 
ó
[6])

51  
ó
[0] & 1;

52 
	}
}

53 
ölöe
 
boﬁ
 
	$ëh_addr_is_loˇl
(c⁄° 
uöt8_t
 
ó
[6])

55  
ó
[0] & 2;

56 
	}
}

57 
ölöe
 
boﬁ
 
	$ëh_addr_is_zîo
(c⁄° 
uöt8_t
 
ó
[6])

59  !(
ó
[0] |Éa[1] |Éa[2] |Éa[3] |Éa[4] |Éa[5]);

60 
	}
}

61 
ölöe
 
boﬁ
 
	$ëh_addr_equÆs
(c⁄° 
uöt8_t
 
a
[
ETH_ADDR_LEN
],

62 c⁄° 
uöt8_t
 
b
[
ETH_ADDR_LEN
])

64  !
	`memcmp
(
a
, 
b
, 
ETH_ADDR_LEN
);

65 
	}
}

66 
ölöe
 
uöt64_t
 
	$ëh_addr_to_uöt64
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

68  (((
uöt64_t
Ë
ó
[0] << 40)

69 | ((
uöt64_t
Ë
ó
[1] << 32)

70 | ((
uöt64_t
Ë
ó
[2] << 24)

71 | ((
uöt64_t
Ë
ó
[3] << 16)

72 | ((
uöt64_t
Ë
ó
[4] << 8)

73 | 
ó
[5]);

74 
	}
}

75 
ölöe
 
	$ëh_addr_‰om_uöt64
(
uöt64_t
 
x
, 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

77 
ó
[0] = 
x
 >> 40;

78 
ó
[1] = 
x
 >> 32;

79 
ó
[2] = 
x
 >> 24;

80 
ó
[3] = 
x
 >> 16;

81 
ó
[4] = 
x
 >> 8;

82 
ó
[5] = 
x
;

83 
	}
}

85 
ölöe
 
	$ëh_addr_øndom
(
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

87 
	`øndom_byãs
(
ó
, 
ETH_ADDR_LEN
);

88 
ó
[0] &= ~1;

89 
ó
[0] |= 2;

90 
	}
}

95 
ölöe
 
boﬁ
 
	$ëh_addr_is_ª£rved
(c⁄° 
uöt8_t
 
ó
[
ETH_ADDR_LEN
])

97  (
ó
[0] == 0x01

98 && 
ó
[1] == 0x80

99 && 
ó
[2] == 0xc2

100 && 
ó
[3] == 0x00

101 && 
ó
[4] == 0x00

102 && (
ó
[5] & 0xf0) == 0x00);

103 
	}
}

105 
	#ETH_ADDR_FMT
 \

106 "%02"
PRIx8
":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"PRIx8":%02"
	)
PRIx8

107 
	#ETH_ADDR_ARGS
(
ó
) \

108 (
ó
)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

110 
	#ETH_TYPE_IP
 0x0800

	)

111 
	#ETH_TYPE_ARP
 0x0806

	)

112 
	#ETH_TYPE_VLAN
 0x8100

	)

114 
	#ETH_HEADER_LEN
 14

	)

115 
	#ETH_PAYLOAD_MIN
 46

	)

116 
	#ETH_PAYLOAD_MAX
 1500

	)

117 
	#ETH_TOTAL_MIN
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MIN
)

	)

118 
	#ETH_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

119 
	#ETH_VLAN_TOTAL_MAX
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
 + 
ETH_PAYLOAD_MAX
)

	)

120 
	sëh_hódî
 {

121 
uöt8_t
 
	mëh_d°
[
ETH_ADDR_LEN
];

122 
uöt8_t
 
	mëh_§c
[
ETH_ADDR_LEN
];

123 
uöt16_t
 
	mëh_ty≥
;

124 } 
__©åibuã__
((
∑cked
));

126 
	#LLC_DSAP_SNAP
 0xØ

	)

127 
	#LLC_SSAP_SNAP
 0xØ

	)

128 
	#LLC_CNTL_SNAP
 3

	)

130 
	#LLC_HEADER_LEN
 3

	)

131 
	sŒc_hódî
 {

132 
uöt8_t
 
	mŒc_dßp
;

133 
uöt8_t
 
	mŒc_sßp
;

134 
uöt8_t
 
	mŒc_˙é
;

135 } 
__©åibuã__
((
∑cked
));

137 
	#SNAP_ORG_ETHERNET
 "\0\0"

	)

139 
	#SNAP_HEADER_LEN
 5

	)

140 
	s¢≠_hódî
 {

141 
uöt8_t
 
	m¢≠_‹g
[3];

142 
uöt16_t
 
	m¢≠_ty≥
;

143 } 
__©åibuã__
((
∑cked
));

145 
	#LLC_SNAP_HEADER_LEN
 (
LLC_HEADER_LEN
 + 
SNAP_HEADER_LEN
)

	)

146 
	sŒc_¢≠_hódî
 {

147 
Œc_hódî
 
	mŒc
;

148 
¢≠_hódî
 
	m¢≠
;

149 } 
__©åibuã__
((
∑cked
));

151 
	#VLAN_VID_MASK
 0x0fff

	)

152 
	#VLAN_PCP_MASK
 0xe000

	)

153 
	#VLAN_PCP_SHIFT
 13

	)

154 
	#VLAN_PCP_BITMASK
 0x0007

	)

156 
	#VLAN_HEADER_LEN
 4

	)

157 
	svœn_hódî
 {

158 
uöt16_t
 
	mvœn_tci
;

159 
uöt16_t
 
	mvœn_√xt_ty≥
;

162 
	#VLAN_ETH_HEADER_LEN
 (
ETH_HEADER_LEN
 + 
VLAN_HEADER_LEN
)

	)

163 
	svœn_ëh_hódî
 {

164 
uöt8_t
 
	mvëh_d°
[
ETH_ADDR_LEN
];

165 
uöt8_t
 
	mvëh_§c
[
ETH_ADDR_LEN
];

166 
uöt16_t
 
	mvëh_ty≥
;

167 
uöt16_t
 
	mvëh_tci
;

168 
uöt16_t
 
	mvëh_√xt_ty≥
;

169 } 
__©åibuã__
((
∑cked
));

175 
	#IP_FMT
 "%"
PRIu8
".%"PRIu8".%"PRIu8".%"
	)
PRIu8

176 
	#IP_ARGS
(
ù
) \

177 ((Ë(
ù
)[0], ((
uöt8_t
 *) ip)[0]), \

178 ((
uöt8_t
 *Ë
ù
)[1], \

179 ((
uöt8_t
 *Ë
ù
)[2], \

180 ((
uöt8_t
 *Ë
ù
)[3]

	)

182 
	#IP_VER
(
ù_ihl_vî
Ë((ù_ihl_vîË>> 4)

	)

183 
	#IP_IHL
(
ù_ihl_vî
Ë((ù_ihl_vîË& 15)

	)

184 
	#IP_IHL_VER
(
ihl
, 
vî
Ë(((vîË<< 4Ë| (ihl))

	)

186 
	#IP_TYPE_ICMP
 1

	)

187 
	#IP_TYPE_TCP
 6

	)

188 
	#IP_TYPE_UDP
 17

	)

190 
	#IP_VERSION
 4

	)

192 
	#IP_DONT_FRAGMENT
 0x4000

	)

193 
	#IP_MORE_FRAGMENTS
 0x2000

	)

194 
	#IP_FRAG_OFF_MASK
 0x1ff‡

	)

195 
	#IP_IS_FRAGMENT
(
ù_‰ag_off
) \

196 ((
ù_‰ag_off
Ë& 
	`ht⁄s
(
IP_MORE_FRAGMENTS
 | 
IP_FRAG_OFF_MASK
))

	)

198 
	#IP_ADDR_LEN
 4

	)

200 
	#IP_HEADER_LEN
 20

	)

201 
	sù_hódî
 {

202 
uöt8_t
 
	mù_ihl_vî
;

203 
uöt8_t
 
	mù_tos
;

204 
uöt16_t
 
	mù_tŸ_Àn
;

205 
uöt16_t
 
	mù_id
;

206 
uöt16_t
 
	mù_‰ag_off
;

207 
uöt8_t
 
	mù_âl
;

208 
uöt8_t
 
	mù_¥Ÿo
;

209 
uöt16_t
 
	mù_csum
;

210 
uöt32_t
 
	mù_§c
;

211 
uöt32_t
 
	mù_d°
;

214 
	#RBRIDGE_INNER_ETH_HEADER
 16

	)

215 
	srbridge_ö√r_ëh_hódî
{

216 
uöt8_t
 
	mëh_d°
[
ETH_ADDR_LEN
];

217 
uöt8_t
 
	mëh_§c
[
ETH_ADDR_LEN
];

218 
uöt16_t
 
	mëh_ty≥
;

219 
uöt16_t
 
	mvœn
;

222 
	#RBRIDGE_TRILL_HEADER
 8

	)

223 
	srbridge_åûl_hódî
{

224 
uöt16_t
 
	mëh_ty≥
;

225 
uöt16_t
 
	mh›_cou¡
;

226 
uöt16_t
 
	megªss_nick«me
;

227 
uöt16_t
 
	mögªss_nick«me
;

230 
	#RBRIDGE_OUTER_ETH_HEADER
 16

	)

231 
	srbridge_ouãr_ëh_hódî
{

232 
uöt8_t
 
	mëh_d°
[
ETH_ADDR_LEN
];

233 
uöt8_t
 
	mëh_§c
[
ETH_ADDR_LEN
];

234 
uöt16_t
 
	mëh_ty≥
;

235 
uöt16_t
 
	mvœn
;

238 
	#ICMP_HEADER_LEN
 4

	)

239 
	sicmp_hódî
 {

240 
uöt8_t
 
	micmp_ty≥
;

241 
uöt8_t
 
	micmp_code
;

242 
uöt16_t
 
	micmp_csum
;

245 
	#UDP_HEADER_LEN
 8

	)

246 
	sudp_hódî
 {

247 
uöt16_t
 
	mudp_§c
;

248 
uöt16_t
 
	mudp_d°
;

249 
uöt16_t
 
	mudp_Àn
;

250 
uöt16_t
 
	mudp_csum
;

253 
	#TCP_FIN
 0x01

	)

254 
	#TCP_SYN
 0x02

	)

255 
	#TCP_RST
 0x04

	)

256 
	#TCP_PSH
 0x08

	)

257 
	#TCP_ACK
 0x10

	)

258 
	#TCP_URG
 0x20

	)

260 
	#TCP_FLAGS
(
t˝_˘l
Ë(
	`ht⁄s
—˝_˘lË& 0x003f)

	)

261 
	#TCP_OFFSET
(
t˝_˘l
Ë(
	`ht⁄s
—˝_˘lË>> 12)

	)

263 
	#TCP_HEADER_LEN
 20

	)

264 
	st˝_hódî
 {

265 
uöt16_t
 
	mt˝_§c
;

266 
uöt16_t
 
	mt˝_d°
;

267 
uöt32_t
 
	mt˝_£q
;

268 
uöt32_t
 
	mt˝_ack
;

269 
uöt16_t
 
	mt˝_˘l
;

270 
uöt16_t
 
	mt˝_wösz
;

271 
uöt16_t
 
	mt˝_csum
;

272 
uöt16_t
 
	mt˝_urg
;

275 
	#ARP_HRD_ETHERNET
 1

	)

276 
	#ARP_PRO_IP
 0x0800

	)

277 
	#ARP_OP_REQUEST
 1

	)

278 
	#ARP_OP_REPLY
 2

	)

280 
	#ARP_ETH_HEADER_LEN
 28

	)

281 
	s¨p_ëh_hódî
 {

283 
uöt16_t
 
	m¨_hrd
;

284 
uöt16_t
 
	m¨_¥o
;

285 
uöt8_t
 
	m¨_h 
;

286 
uöt8_t
 
	m¨_∂n
;

287 
uöt16_t
 
	m¨_›
;

290 
uöt8_t
 
	m¨_sha
[
ETH_ADDR_LEN
];

291 
uöt32_t
 
	m¨_•a
;

292 
uöt8_t
 
	m¨_tha
[
ETH_ADDR_LEN
];

293 
uöt32_t
 
	m¨_ça
;

294 } 
__©åibuã__
((
∑cked
));

	@common-libs/3rd-party/derived-lib/include/private-ext.h

33 #i‚de‡
OPENFLOW_PRIVATE_EXT_H_


34 
	#OPENFLOW_PRIVATE_EXT_H_


	)

36 #ifde‡
__KERNEL__


37 
	~<asm/byã‹dî.h
>

40 
	~"›íÊow/›íÊow.h
"

49 
	#PRIVATE_VENDOR_ID
 0x00acde48

	)

50 
	#PRIVATEOPT_PROTOCOL_STATS_REQUEST
 0x0001

	)

51 
	#PRIVATEOPT_PROTOCOL_STATS_REPLY
 0x0002

	)

52 
	#PRIVATEOPT_EMERG_FLOW_PROTECTION
 0x0003

	)

53 
	#PRIVATEOPT_EMERG_FLOW_RESTORATION
 0x0004

	)

55 
	s¥iv©e_vxhdr
 {

56 
oÂ_hódî
 
	moÂ_hdr
;

57 
uöt32_t
 
	moÂ_vxid
;

58 } 
__©åibuã__
 ((
__∑cked__
));

61 
	s¥iv©e_vx›t
 {

62 
uöt16_t
 
	mpvo_ty≥
;

63 
uöt16_t
 
	mpvo_Àn
;

66 } 
__©åibuã__
 ((
__∑cked__
));

	@common-libs/3rd-party/derived-lib/include/random.h

34 #i‚de‡
RANDOM_H


35 
	#RANDOM_H
 1

	)

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

40 
øndom_öô
();

41 
øndom_byãs
(*, 
size_t
);

42 
uöt8_t
 
øndom_uöt8
();

43 
uöt16_t
 
øndom_uöt16
();

44 
uöt32_t
 
øndom_uöt32
();

45 
øndom_ønge
(
max
);

	@common-libs/3rd-party/derived-lib/include/xtoxll.h

33 #i‚de‡
XTOXLL_H


34 
	#XTOXLL_H
 1

	)

36 
	~<¨∑/öë.h
>

37 
	~<sys/ty≥s.h
>

39 
ölöe
 
uöt64_t


40 
	$ht⁄Œ
(
uöt64_t
 
n
)

42  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
) htonl(n) << 32) | htonl(n >> 32);

43 
	}
}

45 
ölöe
 
uöt64_t


46 
	$¡ohŒ
(
uöt64_t
 
n
)

48  
	`ht⁄l
(1Ë=1 ? 
n
 : ((
uöt64_t
Ë
	`¡ohl
(n) << 32) |Çtohl(n >> 32);

49 
	}
}

	@common-libs/3rd-party/derived-lib/src/clog.c

22 
	~"c⁄fig.h
"

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

27 
	~<°d¨g.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<time.h
>

31 
	~<sys/time.h
>

32 
	~<sys/sockë.h
>

33 
	~<sys/un.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<√töë/ö.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~"˛og.h
"

41 
ölöe
 
ign‹e_ªsu…_hñ≥r
(
__©åibuã__
((
unu£d
)Ë
dummy
, ...)

45 
	#IGNORE_RESULT
(
X
Ë
	`ign‹e_ªsu…_hñ≥r
(0, (X))

	)

48 
	glogfûe_fd
 = -1;

50 
˛og
 *
	g˛og_deÁu…
 = 
NULL
;

52 c⁄° *
	g˛og_¥Ÿo_«mes
[] =

57 
NULL


60 c⁄° *
	g˛og_¥i‹ôy
[] =

70 
NULL
,

74 c⁄° *
c_ß„_°ªº‹
(
î∫um
);

75 *
XˇŒoc
(
size_t
 
sz
);

76 
X‰ì
(*
±r
);

77 
size_t
 
log_time°amp
(
time°amp_¥ecisi⁄
,

78 *
buf
, 
size_t
 
buÊí
);

79 
_˛og_as£π_Áûed
 (c⁄° *
as£πi⁄
,

80 c⁄° *
fûe
,

81 
löe
, c⁄° *
fun˘i⁄
);

82 c⁄° *
c_lookup
(c⁄° 
mesßge
 *
mes
, 
key
);

83 c⁄° *
mes_c_lookup
 (c⁄° 
mesßge
 *
me¶i°
, 
max
, 
ödex
,

84 c⁄° *
n⁄e
, c⁄° *
me¢ame
);

87 
	$XˇŒoc
(
size_t
 
sz
)

89 *
b
;

90 
b
 = 
	`ˇŒoc
(1, 
sz
);

91 
	`as£π
(
b
);

93  
b
;

94 
	}
}

97 
	$X‰ì
(*
±r
)

99 
	`‰ì
(
±r
);

100 
	}
}

102 
	#XCALLOC
(
ty≥
, 
sz
Ë
	`XˇŒoc
(sz)

	)

103 
	#XFREE
(
ty≥
, 
±r
Ë
	`X‰ì
’å)

	)

107 
size_t


108 
	$log_time°amp
(
time°amp_¥ecisi⁄
, *
buf
, 
size_t
 
buÊí
)

111 
time_t
 
œ°
;

112 
size_t
 
Àn
;

113 
buf
[28];

114 } 
ˇche
;

115 
timevÆ
 
˛ock
;

118 
	`gëtimeofday
(&
˛ock
, 
NULL
);

121 i‡(
ˇche
.
œ°
 !
˛ock
.
tv_£c
)

123 
tm
 *tm;

124 
ˇche
.
œ°
 = 
˛ock
.
tv_£c
;

125 
tm
 = 
	`loˇ…ime
(&
ˇche
.
œ°
);

126 
ˇche
.
Àn
 = 
	`°r·ime
(ˇche.
buf
, (cache.buf),

127 "%Y/%m/%d %H:%M:%S", 
tm
);

133 i‡(
buÊí
 > 
ˇche
.
Àn
)

135 
	`mem˝y
(
buf
, 
ˇche
.buf, cache.
Àn
);

136 i‡((
time°amp_¥ecisi⁄
 > 0) &&

137 (
buÊí
 > 
ˇche
.
Àn
+1+
time°amp_¥ecisi⁄
))

140 c⁄° 
divis‹
[] = {0, 100000, 10000, 1000, 100, 10, 1};

141 
¥ec
;

142 *
p
 = 
buf
+
ˇche
.
Àn
+1+(
¥ec
 = 
time°amp_¥ecisi⁄
);

143 *
p
-- = '\0';

144 
¥ec
 > 6)

147 *
p
-- = '0';

148 
¥ec
--;

150 
˛ock
.
tv_u£c
 /
divis‹
[
¥ec
];

153 *
p
-- = '0'+(
˛ock
.
tv_u£c
 % 10);

154 
˛ock
.
tv_u£c
 /= 10;

156 --
¥ec
 > 0);

157 *
p
 = '.';

158  
ˇche
.
Àn
+1+
time°amp_¥ecisi⁄
;

160 
buf
[
ˇche
.
Àn
] = '\0';

161  
ˇche
.
Àn
;

163 i‡(
buÊí
 > 0)

164 
buf
[0] = '\0';

166 
	}
}

170 
	$time_¥öt
(
FILE
 *
Â
, 
time°amp_c⁄åﬁ
 *
˘l
)

172 i‡(!
˘l
->
Æªady_ªndîed
)

174 
˘l
->
Àn
 = 
	`log_time°amp
(˘l->
¥ecisi⁄
, cé->
buf
, (ctl->buf));

175 
˘l
->
Æªady_ªndîed
 = 1;

177 
	`Ârötf
(
Â
, "%†", 
˘l
->
buf
);

178 
	}
}

183 
	$v˛og
 (
˛og
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

185 
time°amp_c⁄åﬁ
 
ts˘l
;

186 
ts˘l
.
Æªady_ªndîed
 = 0;

189 i‡(
zl
 =
NULL
)

190 
zl
 = 
˛og_deÁu…
;

193 i‡(
zl
 =
NULL
)

195 
ts˘l
.
¥ecisi⁄
 = 0;

196 
	`time_¥öt
(
°dîr
, &
ts˘l
);

197 
	`Ârötf
 (
°dîr
, "%s: ", "unknown");

198 
	`vÂrötf
 (
°dîr
, 
f‹m©
, 
¨gs
);

199 
	`Ârötf
 (
°dîr
, "\n");

200 
	`fÊush
 (
°dîr
);

205 
ts˘l
.
¥ecisi⁄
 = 
zl
->
time°amp_¥ecisi⁄
;

208 i‡(
¥i‹ôy
 <
zl
->
maxlvl
[
CLOG_DEST_SYSLOG
])

210 
va_li°
 
ac
;

211 
	`va_c›y
(
ac
, 
¨gs
);

212 
	`vsy¶og
 (
¥i‹ôy
|
˛og_deÁu…
->
Ácûôy
, 
f‹m©
, 
ac
);

213 
	`va_íd
(
ac
);

217 i‡((
¥i‹ôy
 <
zl
->
maxlvl
[
CLOG_DEST_FILE
]Ë&& zl->
Â
)

219 
va_li°
 
ac
;

220 
	`time_¥öt
 (
zl
->
Â
, &
ts˘l
);

221 i‡(
zl
->
ªc‹d_¥i‹ôy
)

222 
	`Ârötf
 (
zl
->
Â
, "%s: ", 
˛og_¥i‹ôy
[
¥i‹ôy
]);

223 
	`Ârötf
 (
zl
->
Â
, "%s: ", 
˛og_¥Ÿo_«mes
[zl->
¥Ÿocﬁ
]);

224 
	`va_c›y
(
ac
, 
¨gs
);

225 
	`vÂrötf
 (
zl
->
Â
, 
f‹m©
, 
ac
);

226 
	`va_íd
(
ac
);

227 
	`Ârötf
 (
zl
->
Â
, "\n");

228 
	`fÊush
 (
zl
->
Â
);

232 i‡(
¥i‹ôy
 <
zl
->
maxlvl
[
CLOG_DEST_STDOUT
])

234 
va_li°
 
ac
;

235 
	`time_¥öt
 (
°dout
, &
ts˘l
);

236 i‡(
zl
->
ªc‹d_¥i‹ôy
)

237 
	`Ârötf
 (
°dout
, "%s: ", 
˛og_¥i‹ôy
[
¥i‹ôy
]);

238 
	`Ârötf
 (
°dout
, "%s: ", 
˛og_¥Ÿo_«mes
[
zl
->
¥Ÿocﬁ
]);

239 
	`va_c›y
(
ac
, 
¨gs
);

240 
	`vÂrötf
 (
°dout
, 
f‹m©
, 
ac
);

241 
	`va_íd
(
ac
);

242 
	`Ârötf
 (
°dout
, "\n");

243 
	`fÊush
 (
°dout
);

250 
	}
}

253 
	$°r_≠≥nd
(*
d°
, 
Àn
, c⁄° *
§c
)

255 (
Àn
-- > 0Ë&& *
§c
)

256 *
d°
++ = *
§c
++;

257  
d°
;

258 
	}
}

261 
	$num_≠≥nd
(*
s
, 
Àn
, 
u_l⁄g
 
x
)

263 
buf
[30];

264 *
t
;

266 i‡(!
x
)

267  
	`°r_≠≥nd
(
s
,
Àn
,"0");

268 *(
t
 = &
buf
[(buf)-1]) = '\0';

269 
x
 && (
t
 > 
buf
))

271 *--
t
 = '0'+(
x
 % 10);

272 
x
 /= 10;

274  
	`°r_≠≥nd
(
s
,
Àn
,
t
);

275 
	}
}

277 #i‡
deföed
(
SA_SIGINFO
Ë|| deföed(
HAVE_STACK_TRACE
)

279 
	$hex_≠≥nd
(*
s
, 
Àn
, 
u_l⁄g
 
x
)

281 
buf
[30];

282 *
t
;

284 i‡(!
x
)

285  
	`°r_≠≥nd
(
s
,
Àn
,"0");

286 *(
t
 = &
buf
[(buf)-1]) = '\0';

287 
x
 && (
t
 > 
buf
))

289 
u_öt
 
cc
 = (
x
 % 16);

290 *--
t
 = ((
cc
 < 10) ? ('0'+cc) : ('a'+cc-10));

291 
x
 /= 16;

293  
	`°r_≠≥nd
(
s
,
Àn
,
t
);

294 
	}
}

299 
	$sy¶og_c⁄√˘
()

301 #ifde‡
SUNOS_5


304 
fd
;

305 *
s
;

306 
sockaddr_un
 
addr
;

308 i‡((
fd
 = 
	`sockë
(
AF_UNIX
,
SOCK_DGRAM
,0)) < 0)

310 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

311 #ifde‡
_PATH_LOG


312 
	#SYSLOG_SOCKET_PATH
 
_PATH_LOG


	)

314 
	#SYSLOG_SOCKET_PATH
 "/dev/log"

	)

316 
s
 = 
	`°r_≠≥nd
(
addr
.
sun_∑th
,◊ddr.sun_∑th),
SYSLOG_SOCKET_PATH
);

317 #unde‡
SYSLOG_SOCKET_PATH


318 *
s
 = '\0';

319 i‡(
	`c⁄√˘
(
fd
,(
sockaddr
 *)&
addr
,(addr)) < 0)

321 
	`˛o£
(
fd
);

324  
fd
;

326 
	}
}

329 
	$sy¶og_sigß„
(
¥i‹ôy
, c⁄° *
msg
, 
size_t
 
msgÀn
)

331 
sy¶og_fd
 = -1;

332 
buf
[("<1234567890>rùngd[1234567890]: ")+
msgÀn
+50];

333 *
s
;

335 i‡((
sy¶og_fd
 < 0Ë&& ((sy¶og_fd = 
	`sy¶og_c⁄√˘
()) < 0))

338 
	#LOC
 
s
,
buf
+(buf)-
	)
s

339 
s
 = 
buf
;

340 
s
 = 
	`°r_≠≥nd
(
LOC
,"<");

341 
s
 = 
	`num_≠≥nd
(
LOC
,
¥i‹ôy
);

342 
s
 = 
	`°r_≠≥nd
(
LOC
,">");

344 
s
 = 
	`°r_≠≥nd
(
LOC
,
˛og_deÁu…
->
idít
);

345 i‡(
˛og_deÁu…
->
sy¶og_›ti⁄s
 & 
LOG_PID
)

347 
s
 = 
	`°r_≠≥nd
(
LOC
,"[");

348 
s
 = 
	`num_≠≥nd
(
LOC
,
	`gëpid
());

349 
s
 = 
	`°r_≠≥nd
(
LOC
,"]");

351 
s
 = 
	`°r_≠≥nd
(
LOC
,": ");

352 
s
 = 
	`°r_≠≥nd
(
LOC
,
msg
);

353 
	`IGNORE_RESULT
(
	`wrôe
(
sy¶og_fd
,
buf
,
s
-buf));

354 #unde‡
LOC


355 
	}
}

358 
	$›í_¸ashlog
()

360 
	#CRASHLOG_PREFIX
 "/v¨/tmp/quagga."

	)

361 
	#CRASHLOG_SUFFIX
 "¸ashlog"

	)

362 i‡(
˛og_deÁu…
 && clog_deÁu…->
idít
)

365 c⁄° *
p
;

366 
size_t
 
ûí
;

368 
p
 = 
˛og_deÁu…
->
idít
, 
ûí
 = 0; *p;Ö++)

369 
ûí
++;

371 
buf
[(
CRASHLOG_PREFIX
)+
ûí
+(
CRASHLOG_SUFFIX
)+3];

372 *
s
 = 
buf
;

373 
	#LOC
 
s
,
buf
+(buf)-
	)
s

374 
s
 = 
	`°r_≠≥nd
(
LOC
, 
CRASHLOG_PREFIX
);

375 
s
 = 
	`°r_≠≥nd
(
LOC
, 
˛og_deÁu…
->
idít
);

376 
s
 = 
	`°r_≠≥nd
(
LOC
, ".");

377 
s
 = 
	`°r_≠≥nd
(
LOC
, 
CRASHLOG_SUFFIX
);

378 #unde‡
LOC


379 *
s
 = '\0';

380  
	`›í
(
buf
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 
LOGFILE_MASK
);

383  
	`›í
(
CRASHLOG_PREFIX
 
CRASHLOG_SUFFIX
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
,

384 
LOGFILE_MASK
);

385 #unde‡
CRASHLOG_SUFFIX


386 #unde‡
CRASHLOG_PREFIX


387 
	}
}

391 
˛og_sig«l
(
signo
, c⁄° *
a˘i⁄


392 #ifde‡
SA_SIGINFO


393 , 
sigöfo_t
 *
sigöfo
, *
¥ogøm_cou¡î


397 
time_t
 
	gnow
;

398 
	gbuf
[("DEFAULT: Received signal Sát T (si_addr 0xP, PC 0xP);áborting...")+100];

399 *
	gs
 = 
buf
;

400 *
	gmsg°¨t
 = 
buf
;

401 
	#LOC
 
s
,
buf
+(buf)-
	)
s

403 
time
(&
now
);

404 i‡(
	g˛og_deÁu…
)

406 
	gs
 = 
°r_≠≥nd
(
LOC
,
˛og_¥Ÿo_«mes
[
˛og_deÁu…
->
¥Ÿocﬁ
]);

407 *
	gs
++ = ':';

408 *
	gs
++ = ' ';

409 
	gmsg°¨t
 = 
s
;

411 
	gs
 = 
°r_≠≥nd
(
LOC
,"Received signal ");

412 
	gs
 = 
num_≠≥nd
(
LOC
,
signo
);

413 
	gs
 = 
°r_≠≥nd
(
LOC
,"át ");

414 
	gs
 = 
num_≠≥nd
(
LOC
,
now
);

415 #ifde‡
SA_SIGINFO


416 
	gs
 = 
°r_≠≥nd
(
LOC
," (si_addr 0x");

417 
	gs
 = 
hex_≠≥nd
(
LOC
,(
u_l⁄g
)(
sigöfo
->
si_addr
));

418 i‡(
	g¥ogøm_cou¡î
)

420 
	gs
 = 
°r_≠≥nd
(
LOC
,", PC 0x");

421 
	gs
 = 
hex_≠≥nd
(
LOC
,(
u_l⁄g
)
¥ogøm_cou¡î
);

423 
	gs
 = 
°r_≠≥nd
(
LOC
,"); ");

425 
	gs
 = 
°r_≠≥nd
(
LOC
,"; ");

427 
	gs
 = 
°r_≠≥nd
(
LOC
,
a˘i⁄
);

428 i‡(
	gs
 < 
	gbuf
+(buf))

429 *
	gs
++ = '\n';

432 
	#PRI
 
LOG_CRIT


	)

434 
	#DUMP
(
FD
Ë
	`wrôe
(FD, 
buf
, 
s
-buf)

	)

436 i‡((
	glogfûe_fd
 >0Ë|| ((
logfûe_fd
 = 
›í_¸ashlog
()) >= 0))

437 
IGNORE_RESULT
(
DUMP
(
logfûe_fd
));

438 i‡(!
	g˛og_deÁu…
)

439 
IGNORE_RESULT
(
DUMP
(
STDERR_FILENO
));

442 i‡(
	gPRI
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_STDOUT
])

443 
IGNORE_RESULT
(
DUMP
(
STDOUT_FILENO
));

445 *--
	gs
 = '\0';

448 i‡(
	gPRI
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_SYSLOG
])

449 
sy¶og_sigß„
(
PRI
|
˛og_deÁu…
->
Ácûôy
,
msg°¨t
,
s
-msgstart);

451 #unde‡
DUMP


453 
˛og_backåa˚_sigß„
(
PRI
,

454 #ifde‡
SA_SIGINFO


455 
¥ogøm_cou¡î


457 
NULL


460 #unde‡
PRI


461 #unde‡
LOC


467 
˛og_backåa˚_sigß„
(
¥i‹ôy
 
__©åibuã__
((
unu£d
)),

468 *
¥ogøm_cou¡î
 
__©åibuã__
((
unu£d
)))

470 #ifde‡
HAVE_STACK_TRACE


471 c⁄° 
	gp˛abñ
[] = "Program counter: ";

472 *
	g¨øy
[64];

473 
	gsize
;

474 
	gbuf
[100];

475 *
	gs
, **
	gbt
 = 
NULL
;

476 
	#LOC
 
s
,
buf
+(buf)-
	)
s

478 #ifde‡
HAVE_GLIBC_BACKTRACE


479 i‡(((
	gsize
 = 
backåa˚
(
¨øy
,(array)/(array[0]))) <= 0) ||

480 ((
size_t
)
size
 > (
¨øy
)/(array[0])))

483 
	#DUMP
(
FD
) { \

484 i‡(
¥ogøm_cou¡î
) \

486 
	`wrôe
(
FD
, 
p˛abñ
, (pclabel)-1); \

487 
	`backåa˚_symbﬁs_fd
(&
¥ogøm_cou¡î
, 1, 
FD
); \

489 
	`wrôe
(
FD
, 
buf
, 
s
-buf); \

490 
	`backåa˚_symbﬁs_fd
(
¨øy
, 
size
, 
FD
); \

491 }

	)

492 #ñi‡
deföed
(
HAVE_PRINTSTACK
)

493 
	#DUMP
(
FD
) { \

494 i‡(
¥ogøm_cou¡î
) \

495 
	`wrôe
((
FD
), 
p˛abñ
, (pclabel)-1); \

496 
	`wrôe
((
FD
), 
buf
, 
s
-buf); \

497 
	`¥öt°ack
((
FD
)); \

498 }

	)

501 
	gs
 = 
buf
;

502 
	gs
 = 
°r_≠≥nd
(
LOC
,"Backtrace for ");

503 
	gs
 = 
num_≠≥nd
(
LOC
,
size
);

504 
	gs
 = 
°r_≠≥nd
(
LOC
," stack frames:\n");

506 i‡((
	glogfûe_fd
 >0Ë|| ((
logfûe_fd
 = 
›í_¸ashlog
()) >= 0))

507 
DUMP
(
logfûe_fd
)

508 i‡(!
˛og_deÁu…
)

509 
DUMP
(
STDERR_FILENO
)

512 i‡(
¥i‹ôy
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_STDOUT
])

513 
DUMP
(
STDOUT_FILENO
)

515 *--
s
 = '\0';

516 i‡(
	g¥i‹ôy
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_MONITOR
])

517 
vty_log_fixed
(
buf
,
s
-buf);

518 i‡(
	g¥i‹ôy
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_SYSLOG
])

519 
sy¶og_sigß„
(
¥i‹ôy
|
˛og_deÁu…
->
Ácûôy
,
buf
,
s
-buf);

521 
	gi
;

522 #ifde‡
HAVE_GLIBC_BACKTRACE


523 
	gbt
 = 
backåa˚_symbﬁs
(
¨øy
, 
size
);

526 
	gi
 = 0; i < 
	gsize
; i++)

528 
	gs
 = 
buf
;

529 i‡(
	gbt
)

530 
	gs
 = 
°r_≠≥nd
(
LOC
, 
bt
[
i
]);

532 
	gs
 = 
°r_≠≥nd
(
LOC
,"[bt ");

533 
	gs
 = 
num_≠≥nd
(
LOC
,
i
);

534 
	gs
 = 
°r_≠≥nd
(
LOC
,"] 0x");

535 
	gs
 = 
hex_≠≥nd
(
LOC
,(
u_l⁄g
)(
¨øy
[
i
]));

537 *
	gs
 = '\0';

540 i‡(
	g¥i‹ôy
 <
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_SYSLOG
])

541 
sy¶og_sigß„
(
¥i‹ôy
|
˛og_deÁu…
->
Ácûôy
,
buf
,
s
-buf);

543 i‡(
	gbt
)

544 
‰ì
(
bt
);

547 #unde‡
DUMP


548 #unde‡
LOC


553 
	$˛og_backåa˚
(
¥i‹ôy
)

555 #i‚de‡
HAVE_GLIBC_BACKTRACE


556 
	`c_log
(
NULL
, 
¥i‹ôy
, "No backtraceávailable onÅhisÖlatform.");

558 *
¨øy
[20];

559 
size
, 
i
;

560 **
°rögs
;

562 i‡(((
size
 = 
	`backåa˚
(
¨øy
,(array)/(array[0]))) <= 0) ||

563 ((
size_t
)
size
 > (
¨øy
)/(array[0])))

565 
	`c_log_îr
("Cannot get backtrace,Ñeturned invalid # of frames %d "

567 
size
, ()((
¨øy
)/(array[0])));

570 
	`c_log
(
NULL
, 
¥i‹ôy
, "Backåa˚ f‹ %d sèck fømes:", 
size
);

571 i‡(!(
°rögs
 = 
	`backåa˚_symbﬁs
(
¨øy
, 
size
)))

573 
	`c_log_îr
("Cannot get backtrace symbols (out of memory?)");

574 
i
 = 0; i < 
size
; i++)

575 
	`c_log
(
NULL
, 
¥i‹ôy
, "[bà%d] %p",
i
,
¨øy
[i]);

579 
i
 = 0; i < 
size
; i++)

580 
	`c_log
(
NULL
, 
¥i‹ôy
, "[bà%d] %s",
i
,
°rögs
[i]);

581 
	`‰ì
(
°rögs
);

584 
	}
}

587 
	$c_log
 (
˛og
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, ...)

589 
va_li°
 
¨gs
;

591 
	`va_°¨t
(
¨gs
, 
f‹m©
);

592 
	`v˛og
 (
zl
, 
¥i‹ôy
, 
f‹m©
, 
¨gs
);

593 
	`va_íd
 (
¨gs
);

594 
	}
}

596 
	#CLOG_FUNC
(
FUNCNAME
,
PRIORITY
) \

598 
	`FUNCNAME
(c⁄° *
f‹m©
, ...) \

600 
va_li°
 
¨gs
; \

601 
	`va_°¨t
(
¨gs
, 
f‹m©
); \

602 
	`v˛og
 (
NULL
, 
PRIORITY
, 
f‹m©
, 
¨gs
); \

603 
	`va_íd
(
¨gs
); \

604 }

	)

606 
	$CLOG_FUNC
(
c_log_îr
, 
LOG_ERR
)

608 
	$CLOG_FUNC
(
c_log_w¨n
, 
LOG_WARNING
)

610 
	$CLOG_FUNC
(
c_log_öfo
, 
LOG_INFO
)

612 
	$CLOG_FUNC
(
c_log_nŸi˚
, 
LOG_NOTICE
)

614 
	$CLOG_FUNC
(
c_log_debug
, 
LOG_DEBUG
)

616 #unde‡
CLOG_FUNC


619 
	$_˛og_as£π_Áûed
 (c⁄° *
as£πi⁄
, c⁄° *
fûe
,

620 
löe
, c⁄° *
fun˘i⁄
)

623 i‡(
˛og_deÁu…
 && !˛og_deÁu…->
Â
 &&

624 ((
logfûe_fd
 = 
	`›í_¸ashlog
()) >= 0) &&

625 ((
˛og_deÁu…
->
Â
 = 
	`fd›í
(
logfûe_fd
, "w")Ë!
NULL
))

626 
˛og_deÁu…
->
maxlvl
[
CLOG_DEST_FILE
] = 
LOG_ERR
;

627 
	`c_log
(
NULL
, 
LOG_CRIT
, "Assertion `%s' failed in file %s,Üine %u, function %s",

628 
as£πi⁄
,
fûe
,
löe
,(
fun˘i⁄
 ? function : "?"));

629 
	`˛og_backåa˚
(
LOG_CRIT
);

630 
	`ab‹t
();

631 
	}
}

635 
˛og
 *

636 
	$›í˛og
 (c⁄° *
¥og«me
, 
˛og_¥Ÿo_t
 
¥Ÿocﬁ
,

637 
sy¶og_Êags
, 
sy¶og_Ácûôy
)

639 
˛og
 *
zl
;

640 
u_öt
 
i
;

642 
zl
 = 
	`XCALLOC
(
MTYPE_CLOG
,  (
˛og
));

644 
zl
->
idít
 = 
¥og«me
;

645 
zl
->
¥Ÿocﬁ
 =Örotocol;

646 
zl
->
Ácûôy
 = 
sy¶og_Ácûôy
;

647 
zl
->
sy¶og_›ti⁄s
 = 
sy¶og_Êags
;

650 
i
 = 0; i < (
zl
->
maxlvl
)/(zl->maxlvl[0]); i++)

651 
zl
->
maxlvl
[
i
] = 
CLOG_DISABLED
;

652 
zl
->
maxlvl
[
CLOG_DEST_MONITOR
] = 
LOG_DEBUG
;

653 
zl
->
deÁu…_lvl
 = 
LOG_DEBUG
;

655 
	`›ílog
 (
¥og«me
, 
sy¶og_Êags
, 
zl
->
Ácûôy
);

657  
zl
;

658 
	}
}

661 
	$˛o£˛og
 (
˛og
 *
zl
)

663 
	`˛o£log
();

665 i‡(
zl
->
Â
 !
NULL
)

666 
	`f˛o£
 (
zl
->
Â
);

668 i‡(
zl
->
fûíame
 !
NULL
)

669 
	`‰ì
 (
zl
->
fûíame
);

671 
	`XFREE
 (
MTYPE_CLOG
, 
zl
);

672 
	}
}

676 
	$˛og_£t_Àvñ
 (
˛og
 *
zl
, 
˛og_de°_t
 
de°
, 
log_Àvñ
)

678 i‡(
zl
 =
NULL
)

679 
zl
 = 
˛og_deÁu…
;

681 
zl
->
maxlvl
[
de°
] = 
log_Àvñ
;

682 
	}
}

685 
	$˛og_£t_fûe
 (
˛og
 *
zl
, c⁄° *
fûíame
, 
log_Àvñ
)

687 
FILE
 *
Â
;

688 
mode_t
 
ﬁdumask
;

691 
	`˛og_ª£t_fûe
 (
zl
);

694 i‡(
zl
 =
NULL
)

695 
zl
 = 
˛og_deÁu…
;

698 
ﬁdumask
 = 
	`umask
 (0777 & ~
LOGFILE_MASK
);

699 
Â
 = 
	`f›í
 (
fûíame
, "a");

700 
	`umask
(
ﬁdumask
);

701 i‡(
Â
 =
NULL
)

705 
zl
->
fûíame
 = 
	`°rdup
 (filename);

706 
zl
->
maxlvl
[
CLOG_DEST_FILE
] = 
log_Àvñ
;

707 
zl
->
Â
 = fp;

708 
logfûe_fd
 = 
	`fûío
(
Â
);

711 
	}
}

715 
	$˛og_ª£t_fûe
 (
˛og
 *
zl
)

717 i‡(
zl
 =
NULL
)

718 
zl
 = 
˛og_deÁu…
;

720 i‡(
zl
->
Â
)

721 
	`f˛o£
 (
zl
->
Â
);

722 
zl
->
Â
 = 
NULL
;

723 
logfûe_fd
 = -1;

724 
zl
->
maxlvl
[
CLOG_DEST_FILE
] = 
CLOG_DISABLED
;

726 i‡(
zl
->
fûíame
)

727 
	`‰ì
 (
zl
->
fûíame
);

728 
zl
->
fûíame
 = 
NULL
;

731 
	}
}

735 
	$˛og_rŸ©e
 (
˛og
 *
zl
)

737 
Àvñ
;

739 i‡(
zl
 =
NULL
)

740 
zl
 = 
˛og_deÁu…
;

742 i‡(
zl
->
Â
)

743 
	`f˛o£
 (
zl
->
Â
);

744 
zl
->
Â
 = 
NULL
;

745 
logfûe_fd
 = -1;

746 
Àvñ
 = 
zl
->
maxlvl
[
CLOG_DEST_FILE
];

747 
zl
->
maxlvl
[
CLOG_DEST_FILE
] = 
CLOG_DISABLED
;

749 i‡(
zl
->
fûíame
)

751 
mode_t
 
ﬁdumask
;

752 
ßve_î∫o
;

754 
ﬁdumask
 = 
	`umask
 (0777 & ~
LOGFILE_MASK
);

755 
zl
->
Â
 = 
	`f›í
 (zl->
fûíame
, "a");

756 
ßve_î∫o
 = 
î∫o
;

757 
	`umask
(
ﬁdumask
);

758 i‡(
zl
->
Â
 =
NULL
)

760 
	`c_log_îr
("LogÑotate failed: cannot open file %s foráppend: %s",

761 
zl
->
fûíame
, 
	`c_ß„_°ªº‹
(
ßve_î∫o
));

764 
logfûe_fd
 = 
	`fûío
(
zl
->
Â
);

765 
zl
->
maxlvl
[
CLOG_DEST_FILE
] = 
Àvñ
;

769 
	}
}

773 
	$c_lookup
 (c⁄° 
mesßge
 *
mes
, 
key
)

775 c⁄° 
mesßge
 *
≤t
;

777 
≤t
 = 
mes
;Ö¡->
key
 != 0;Önt++)

778 i‡(
≤t
->
key
 == key)

779  
≤t
->
°r
;

782 
	}
}

791 
	$mes_c_lookup
 (c⁄° 
mesßge
 *
me¶i°
, 
max
, 
ödex
,

792 c⁄° *
n⁄e
, c⁄° *
me¢ame
)

794 
pos
 = 
ödex
 - 
me¶i°
[0].
key
;

801 i‡((
pos
 >0Ë&& (po†< 
max
)

802 && (
me¶i°
[
pos
].
key
 =
ödex
))

803  
me¶i°
[
pos
].
°r
;

807 
i
;

809 
i
 = 0; i < 
max
; i++, 
me¶i°
++)

811 i‡(
me¶i°
->
key
 =
ödex
)

813 c⁄° *
°r
 = (
me¶i°
->°∏? me¶i°->°∏: 
n⁄e
);

815 
	`c_log_debug
 ("message index %d [%s] found in %sátÖosition %d (max is %d)",

816 
ödex
, 
°r
, 
me¢ame
, 
i
, 
max
);

817  
°r
;

821 
	`c_log_îr
("mesßgêödex %dÇŸ found i¿%†(max i†%d)", 
ödex
, 
me¢ame
, 
max
);

822 
	`as£π
 (
n⁄e
);

823  
n⁄e
;

824 
	}
}

828 
	$c_ß„_°ªº‹
(
î∫um
)

830 c⁄° *
s
 = 
	`°ªº‹
(
î∫um
);

831  (
s
 !
NULL
) ? s : "UnknownÉrror";

832 
	}
}

	@common-libs/3rd-party/derived-lib/src/hash.c

33 
	~"c⁄fig.h
"

34 
	~"hash.h
"

35 
	~<°rög.h
>

39 
	#rŸ
(
x
, 
k
Ë(((xË<< (k)Ë| ((xË>> (32 - (k))))

	)

41 
	#mix
(
a
, 
b
, 
c
) \

43 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

44 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

45 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

46 
a
 -
c
;á ^
	`rŸ
(c, 16); c +
b
; \

47 
b
 -
a
; b ^
	`rŸ
◊, 19);á +
c
; \

48 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

49 } 0)

	)

51 
	#föÆ
(
a
, 
b
, 
c
) \

53 
c
 ^
b
; c -
	`rŸ
(b, 14); \

54 
a
 ^
c
;á -
	`rŸ
(c, 11); \

55 
b
 ^
a
; b -
	`rŸ
(a, 25); \

56 
c
 ^
b
; c -
	`rŸ
(b, 16); \

57 
a
 ^
c
;á -
	`rŸ
(c, 4); \

58 
b
 ^
a
; b -
	`rŸ
(a, 14); \

59 
c
 ^
b
; c -
	`rŸ
(b, 24); \

60 } 0)

	)

64 
uöt32_t


65 
	$hash_w‹ds
(c⁄° 
uöt32_t
 *
p
, 
size_t
 
n
, uöt32_à
basis
)

67 
uöt32_t
 
a
, 
b
, 
c
;

69 
a
 = 
b
 = 
c
 = 0xdódbì‡+ (((
uöt32_t
Ë
n
Ë<< 2Ë+ 
basis
;

71 
n
 > 3) {

72 
a
 +
p
[0];

73 
b
 +
p
[1];

74 
c
 +
p
[2];

75 
	`mix
(
a
, 
b
, 
c
);

76 
n
 -= 3;

77 
p
 += 3;

80 
n
) {

82 
c
 +
p
[2];

85 
b
 +
p
[1];

88 
a
 +
p
[0];

89 
	`föÆ
(
a
, 
b
, 
c
);

94  
c
;

95 
	}
}

98 
uöt32_t


99 
	$hash_byãs
(c⁄° *
p_
, 
size_t
 
n
, 
uöt32_t
 
basis
)

101 c⁄° 
uöt8_t
 *
p
 = 
p_
;

102 
uöt32_t
 
a
, 
b
, 
c
;

103 
uöt32_t
 
tmp
[3];

105 
a
 = 
b
 = 
c
 = 0xdódbì‡+ 
n
 + 
basis
;

107 
n
 > 
tmp
) {

108 
	`mem˝y
(
tmp
, 
p
, Åmp);

109 
a
 +
tmp
[0];

110 
b
 +
tmp
[1];

111 
c
 +
tmp
[2];

112 
	`mix
(
a
, 
b
, 
c
);

113 
n
 - 
tmp
;

114 
p
 + 
tmp
;

117 i‡(
n
) {

118 
tmp
[0] =Åmp[1] =Åmp[2] = 0;

119 
	`mem˝y
(
tmp
, 
p
, 
n
);

120 
a
 +
tmp
[0];

121 
b
 +
tmp
[1];

122 
c
 +
tmp
[2];

123 
	`föÆ
(
a
, 
b
, 
c
);

126  
c
;

127 
	}
}

	@common-libs/3rd-party/derived-lib/src/random.c

33 
	~"c⁄fig.h
"

34 
	~<°dio.h
>

35 
	~<°dboﬁ.h
>

36 
	~<î∫o.h
>

37 
	~<°dlib.h
>

38 
	~<sys/time.h
>

40 
	~"øndom.h
"

43 
	$øndom_öô
()

45 
boﬁ
 
öôed
 = 
Ál£
;

46 i‡(!
öôed
) {

47 
timevÆ
 
tv
;

48 
öôed
 = 
åue
;

49 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0) {

52 
	`§™d
(
tv
.
tv_£c
 ^Åv.
tv_u£c
);

54 
	}
}

57 
	$øndom_byãs
(*
p_
, 
size_t
 
n
)

59 
uöt8_t
 *
p
 = 
p_
;

60 
	`øndom_öô
();

61 
n
--) {

62 *
p
++ = 
	`ønd
();

64 
	}
}

66 
uöt8_t


67 
	$øndom_uöt8
()

69 
	`øndom_öô
();

70  
	`ønd
();

71 
	}
}

73 
uöt16_t


74 
	$øndom_uöt16
()

76 i‡(
RAND_MAX
 >
UINT16_MAX
) {

77 
	`øndom_öô
();

78  
	`ønd
();

80 
uöt16_t
 
x
;

81 
	`øndom_byãs
(&
x
,  x);

82  
x
;

84 
	}
}

86 
uöt32_t


87 
	$øndom_uöt32
()

89 i‡(
RAND_MAX
 >
UINT32_MAX
) {

90 
	`øndom_öô
();

91  
	`ønd
();

92 } i‡(
RAND_MAX
 =
INT32_MAX
) {

93 
	`øndom_öô
();

94  
	`ønd
() | ((rand() & 1u) << 31);

96 
uöt32_t
 
x
;

97 
	`øndom_byãs
(&
x
,  x);

98  
x
;

100 
	}
}

103 
	$øndom_ønge
(
max
)

105  
	`øndom_uöt32
(Ë% 
max
;

106 
	}
}

	@common-libs/3rd-party/quagga-lib/include/buffer.h

23 #i‚de‡
_ZEBRA_BUFFER_H


24 
	#_ZEBRA_BUFFER_H


	)

30 
buf„r
 *
buf„r_√w
 (
size_t
);

33 
buf„r_ª£t
 (
buf„r
 *);

37 
buf„r_‰ì
 (
buf„r
 *);

40 
buf„r_put
 (
buf„r
 *, c⁄° *, 
size_t
);

42 
buf„r_putc
 (
buf„r
 *, 
u_ch¨
);

44 
buf„r_put°r
 (
buf„r
 *, const *);

50 *
buf„r_gë°r
 (
buf„r
 *);

53 
buf„r_em±y
 (
buf„r
 *);

59 
	mBUFFER_ERROR
 = -1,

63 
	mBUFFER_EMPTY
 = 0,

68 
	mBUFFER_PENDING
 = 1

69 } 
	tbuf„r_°©us_t
;

73 
buf„r_°©us_t
 
buf„r_wrôe
(
buf„r
 *, 
fd
,

74 c⁄° *, 
size_t
);

78 
buf„r_°©us_t
 
buf„r_Êush_avaûabÀ
(
buf„r
 *, 
fd
);

86 
buf„r_°©us_t
 
buf„r_Êush_Æl
 (
buf„r
 *, 
fd
);

99 
buf„r_°©us_t
 
buf„r_Êush_wödow
 (
buf„r
 *, 
fd
, 
width
,

100 
height
, 
îa£
, 
no_m‹e
);

	@common-libs/3rd-party/quagga-lib/include/checksum.h

1 
ö_cksum
(*, );

2 
u_öt16_t
 
Êëchî_checksum
(
u_ch¨
 *, c⁄° 
size_t
 
Àn
, c⁄° 
uöt16_t
 
off£t
);

	@common-libs/3rd-party/quagga-lib/include/command.h

23 #i‚de‡
_ZEBRA_COMMAND_H


24 
	#_ZEBRA_COMMAND_H


	)

26 
	~"ve˘‹.h
"

27 
	~"vty.h
"

28 
	~"rouã_ty≥s.h
"

31 
	sho°


34 *
	m«me
;

37 *
	m∑ssw‹d
;

38 *
	m∑ssw‹d_í¸y±
;

41 *
	míabÀ
;

42 *
	míabÀ_í¸y±
;

45 
	mlöes
;

48 *
	mlogfûe
;

51 *
	mc⁄fig
;

54 
	madv™˚d
;

55 
	mí¸y±
;

58 c⁄° *
	mmŸd
;

59 *
	mmŸdfûe
;

63 
	enode_ty≥


65 
	mAUTH_NODE
,

66 
	mRESTRICTED_NODE
,

67 
	mVIEW_NODE
,

68 
	mAUTH_ENABLE_NODE
,

69 
	mENABLE_NODE
,

70 
	mCONFIG_NODE
,

71 
	mSERVICE_NODE
,

72 
	mDEBUG_NODE
,

73 
	mAAA_NODE
,

74 
	mKEYCHAIN_NODE
,

75 
	mKEYCHAIN_KEY_NODE
,

76 
	mINTERFACE_NODE
,

77 
	mZEBRA_NODE
,

78 
	mTABLE_NODE
,

79 
	mRIP_NODE
,

80 
	mRIPNG_NODE
,

81 
	mBGP_NODE
,

82 
	mBGP_VPNV4_NODE
,

83 
	mBGP_IPV4_NODE
,

84 
	mBGP_IPV4M_NODE
,

85 
	mBGP_IPV6_NODE
,

86 
	mBGP_IPV6M_NODE
,

87 
	mOSPF_NODE
,

88 
	mOSPF6_NODE
,

89 
	mISIS_NODE
,

90 
	mMASC_NODE
,

91 
	mIRDP_NODE
,

92 
	mIP_NODE
,

93 
	mACCESS_NODE
,

94 
	mPREFIX_NODE
,

95 
	mACCESS_IPV6_NODE
,

96 
	mPREFIX_IPV6_NODE
,

97 
	mAS_LIST_NODE
,

98 
	mCOMMUNITY_LIST_NODE
,

99 
	mRMAP_NODE
,

100 
	mSMUX_NODE
,

101 
	mDUMP_NODE
,

102 
	mFORWARDING_NODE
,

103 
	mPROTOCOL_NODE
,

104 
	mKULVISOR_NODE
,

105 
	mSLICE_NODE
,

106 
	mFLOW_NODE
,

107 
	mMUL_NODE
,

108 
	mMULTR_NODE
,

109 
	mMULFAB_NODE
,

110 
	mVTY_NODE
,

115 
	scmd_node


118 
node_ty≥
 
	mnode
;

121 c⁄° *
	m¥om±
;

124 
	mvtysh
;

127 (*
	mfunc
Ë(
	mvty
 *);

130 
ve˘‹
 
	mcmd_ve˘‹
;

135 
	mCMD_ATTR_DEPRECATED
 = 1,

136 
	mCMD_ATTR_HIDDEN
,

140 
	scmd_ñemít


142 c⁄° *
	m°rög
;

143 (*
	mfunc
Ë(
	mcmd_ñemít
 *, 
	mvty
 *, , const *[]);

144 c⁄° *
	mdoc
;

145 
	md´m⁄
;

146 
ve˘‹
 
	m°rvec
;

147 
	mcmdsize
;

148 *
	mc⁄fig
;

149 
ve˘‹
 
	msubc⁄fig
;

150 
u_ch¨
 
	m©å
;

151 
node_ty≥
 
	m¡y≥
;

155 
	sdesc


157 *
	mcmd
;

158 *
	m°r
;

162 
	#CMD_SUCCESS
 0

	)

163 
	#CMD_WARNING
 1

	)

164 
	#CMD_ERR_NO_MATCH
 2

	)

165 
	#CMD_ERR_AMBIGUOUS
 3

	)

166 
	#CMD_ERR_INCOMPLETE
 4

	)

167 
	#CMD_ERR_EXEED_ARGC_MAX
 5

	)

168 
	#CMD_ERR_NOTHING_TODO
 6

	)

169 
	#CMD_COMPLETE_FULL_MATCH
 7

	)

170 
	#CMD_COMPLETE_MATCH
 8

	)

171 
	#CMD_COMPLETE_LIST_MATCH
 9

	)

172 
	#CMD_SUCCESS_DAEMON
 10

	)

175 
	#CMD_ARGC_MAX
 25

	)

178 #i‚de‡
VTYSH_EXTRACT_PL


181 
	#DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©ås
, 
dnum
) \

182 
cmd_ñemít
 
cmd«me
 = \

184 .
°rög
 = 
cmd°r
, \

185 .
func
 = 
fun˙ame
, \

186 .
doc
 = 
hñp°r
, \

187 .
©å
 = 
©ås
, \

188 .
d´m⁄
 = 
dnum
, \

189 };

	)

191 
	#DEFUN_CMD_FUNC_DECL
(
fun˙ame
) \

192 
	`fun˙ame
 (
cmd_ñemít
 *, 
vty
 *, , c⁄° *[]);

	)

194 
	#DEFUN_CMD_FUNC_TEXT
(
fun˙ame
) \

195 
fun˙ame
 \

196 (
cmd_ñemít
 *
£lf
 
	`__©åibuã__
 ((
unu£d
)), \

197 
vty
 *vty 
	`__©åibuã__
 ((
unu£d
)), \

198 
¨gc
 
	`__©åibuã__
 ((
unu£d
)), \

199 c⁄° *
¨gv
[] 
	`__©åibuã__
 ((
unu£d
)Ë)

	)

202 
	#DEFUN
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

203 
	`DEFUN_CMD_FUNC_DECL
(
fun˙ame
) \

204 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 0, 0) \

205 
	`DEFUN_CMD_FUNC_TEXT
(
fun˙ame
)

	)

207 
	#DEFUN_ATTR
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
) \

208 
	`DEFUN_CMD_FUNC_DECL
(
fun˙ame
) \

209 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
, 0) \

210 
	`DEFUN_CMD_FUNC_TEXT
(
fun˙ame
)

	)

212 
	#DEFUN_HIDDEN
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

213 
	`DEFUN_ATTR
 (
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_HIDDEN
)

	)

215 
	#DEFUN_DEPRECATED
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

216 
	`DEFUN_ATTR
 (
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_DEPRECATED
) \

217 

	)

219 
	#DEFUN_NOSH
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

220 
	`DEFUN
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
)

	)

223 
	#DEFSH
(
d´m⁄
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

224 
	`DEFUN_CMD_ELEMENT
(
NULL
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 0, 
d´m⁄
) \

225 

	)

227 
	#DEFUNSH
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

228 
	`DEFUN_CMD_FUNC_DECL
(
fun˙ame
) \

229 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 0, 
d´m⁄
) \

230 
	`DEFUN_CMD_FUNC_TEXT
(
fun˙ame
)

	)

233 
	#DEFUNSH_ATTR
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
) \

234 
	`DEFUN_CMD_FUNC_DECL
(
fun˙ame
) \

235 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
, 
d´m⁄
) \

236 
	`DEFUN_CMD_FUNC_TEXT
(
fun˙ame
)

	)

238 
	#DEFUNSH_HIDDEN
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

239 
	`DEFUNSH_ATTR
 (
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_HIDDEN
)

	)

241 
	#DEFUNSH_DEPRECATED
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

242 
	`DEFUNSH_ATTR
 (
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_DEPRECATED
)

	)

245 
	#ALIAS
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

246 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 0, 0)

	)

248 
	#ALIAS_ATTR
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
) \

249 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
©å
, 0)

	)

251 
	#ALIAS_HIDDEN
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

252 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_HIDDEN
, 0)

	)

254 
	#ALIAS_DEPRECATED
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

255 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_DEPRECATED
, 0)

	)

257 
	#ALIAS_SH
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

258 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 0, 
d´m⁄
)

	)

260 
	#ALIAS_SH_HIDDEN
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

261 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_HIDDEN
, 
d´m⁄
)

	)

263 
	#ALIAS_SH_DEPRECATED
(
d´m⁄
, 
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
) \

264 
	`DEFUN_CMD_ELEMENT
(
fun˙ame
, 
cmd«me
, 
cmd°r
, 
hñp°r
, 
CMD_ATTR_DEPRECATED
, 
d´m⁄
)

	)

269 
	#CMD_OPTION
(
S
Ë((S[0]Ë='[')

	)

270 
	#CMD_VARIABLE
(
S
Ë(((S[0]Ë>'A' && (S[0]Ë<'Z'Ë|| ((S[0]Ë='<'))

	)

271 
	#CMD_VARARG
(
S
Ë((S[0]Ë='.')

	)

272 
	#CMD_RANGE
(
S
Ë((S[0] ='<'))

	)

274 
	#CMD_IPV4
(
S
Ë((
	`°rcmp
 ((S), "A.B.C.D"Ë=0))

	)

275 
	#CMD_IPV4_PREFIX
(
S
Ë((
	`°rcmp
 ((S), "A.B.C.D/M"Ë=0))

	)

276 
	#CMD_IPV6
(
S
Ë((
	`°rcmp
 ((S), "X:X::X:X"Ë=0))

	)

277 
	#CMD_IPV6_PREFIX
(
S
Ë((
	`°rcmp
 ((S), "X:X::X:X/M"Ë=0))

	)

280 
	#SHOW_STR
 "ShowÑu¬ög sy°em inf‹m©i⁄\n"

	)

281 
	#IP_STR
 "IP inf‹m©i⁄\n"

	)

282 
	#IPV6_STR
 "IPv6 inf‹m©i⁄\n"

	)

283 
	#NO_STR
 "Neg©ê®comm™d o∏£àô†deÁu…s\n"

	)

284 
	#REDIST_STR
 "Redi°ribuã inf‹m©i⁄ frománŸhîÑoutögÖrŸocﬁ\n"

	)

285 
	#CLEAR_STR
 "Re£àfun˘i⁄s\n"

	)

286 
	#RIP_STR
 "RIP inf‹m©i⁄\n"

	)

287 
	#BGP_STR
 "BGP inf‹m©i⁄\n"

	)

288 
	#OSPF_STR
 "OSPF inf‹m©i⁄\n"

	)

289 
	#NEIGHBOR_STR
 "S≥cifyÇeighb‹Ñouãr\n"

	)

290 
	#DEBUG_STR
 "Debuggög fun˘i⁄†(£êÆsÿ'undebug')\n"

	)

291 
	#UNDEBUG_STR
 "DißbÀ debuggög fun˘i⁄†(£êÆsÿ'debug')\n"

	)

292 
	#ROUTER_STR
 "E«bÀáÑoutögÖro˚ss\n"

	)

293 
	#AS_STR
 "ASÇumbî\n"

	)

294 
	#MBGP_STR
 "MBGP inf‹m©i⁄\n"

	)

295 
	#MATCH_STR
 "M©ch vÆue†‰omÑoutögÅabÀ\n"

	)

296 
	#SET_STR
 "Së vÆue†ö de°ö©i⁄ÑoutögÖrŸocﬁ\n"

	)

297 
	#OUT_STR
 "Fûã∏outgoögÑoutög upd©es\n"

	)

298 
	#IN_STR
 "Fûã∏öcomögÑoutög upd©es\n"

	)

299 
	#V4NOTATION_STR
 "•ecify by IPv4áddªs†nŸ©i⁄”.g. 0.0.0.0)\n"

	)

300 
	#OSPF6_NUMBER_STR
 "S≥cify byÇumbî\n"

	)

301 
	#INTERFACE_STR
 "I¡îÁ˚ infom©i⁄\n"

	)

302 
	#IFNAME_STR
 "I¡îÁ˚Çame”.g.Ép0)\n"

	)

303 
	#IP6_STR
 "IPv6 Inf‹m©i⁄\n"

	)

304 
	#OSPF6_STR
 "O≥¿Sh‹ã° P©h Fú° (OSPFËf‹ IPv6\n"

	)

305 
	#OSPF6_ROUTER_STR
 "E«bÀáÑoutögÖro˚ss\n"

	)

306 
	#OSPF6_INSTANCE_STR
 "<1-65535> In°™˚ ID\n"

	)

307 
	#SECONDS_STR
 "<1-65535> Sec⁄ds\n"

	)

308 
	#ROUTE_STR
 "Routög TabÀ\n"

	)

309 
	#PREFIX_LIST_STR
 "BuûdáÖªfixÜi°\n"

	)

310 
	#OSPF6_DUMP_TYPE_LIST
 \

311 "“eighb‹|öãrÁ˚|¨ó|lß|zebø|c⁄fig|dbex|•f|rouã|lsdb|ªdi°ribuã|hook|asbr|¥efix|abr)"

	)

312 
	#ISIS_STR
 "IS-IS inf‹m©i⁄\n"

	)

313 
	#AREA_TAG_STR
 "[¨óÅag]\n"

	)

315 
	#CONF_BACKUP_EXT
 ".ßv"

	)

319 #ifde‡
HAVE_IPV6


320 
	#NEIGHBOR_CMD
 "√ighb‹ (A.B.C.D|X:X::X:XË"

	)

321 
	#NO_NEIGHBOR_CMD
 "nÿ√ighb‹ (A.B.C.D|X:X::X:XË"

	)

322 
	#NEIGHBOR_ADDR_STR
 "Neighb‹áddªss\nIPv6áddªss\n"

	)

323 
	#NEIGHBOR_CMD2
 "√ighb‹ (A.B.C.D|X:X::X:X|WORDË"

	)

324 
	#NO_NEIGHBOR_CMD2
 "nÿ√ighb‹ (A.B.C.D|X:X::X:X|WORDË"

	)

325 
	#NEIGHBOR_ADDR_STR2
 "Neighb‹áddªss\nNeighb‹ IPv6áddªss\nNeighb‹Åag\n"

	)

327 
	#NEIGHBOR_CMD
 "√ighb‹ A.B.C.D "

	)

328 
	#NO_NEIGHBOR_CMD
 "nÿ√ighb‹ A.B.C.D "

	)

329 
	#NEIGHBOR_ADDR_STR
 "Neighb‹áddªss\n"

	)

330 
	#NEIGHBOR_CMD2
 "√ighb‹ (A.B.C.D|WORDË"

	)

331 
	#NO_NEIGHBOR_CMD2
 "nÿ√ighb‹ (A.B.C.D|WORDË"

	)

332 
	#NEIGHBOR_ADDR_STR2
 "Neighb‹áddªss\nNeighb‹Åag\n"

	)

336 
ö°Æl_node
 (
cmd_node
 *, (*Ë(
vty
 *));

337 
	`ö°Æl_deÁu…
 (
node_ty≥
);

338 
	`ö°Æl_ñemít
 (
node_ty≥
, 
cmd_ñemít
 *);

339 
	`ö°Æl_ñemít_©å_ty≥
 (
node_ty≥
 
¡y≥
,

340 
cmd_ñemít
 *
cmd
,

341 
node_ty≥
 
©å_ty≥
);

342 
	`s‹t_node
 ();

347 *
	`¨gv_c⁄ˇt
 (c⁄° **
¨gv
, 
¨gc
, 
shi·
);

349 
ve˘‹
 
	`cmd_make_°rvec
 (const *);

350 
	`cmd_‰ì_°rvec
 (
ve˘‹
);

351 
ve˘‹
 
	`cmd_des¸ibe_comm™d
 (ve˘‹, 
vty
 *, *
°©us
);

352 **
	`cmd_com∂ëe_comm™d
 (
ve˘‹
, 
vty
 *, *
°©us
);

353 c⁄° *
	`cmd_¥om±
 (
node_ty≥
);

354 
	`c⁄fig_‰om_fûe
 (
vty
 *, 
FILE
 *);

355 
node_ty≥
 
	`node_∑ª¡
 (node_type);

356 
	`cmd_execuã_comm™d
 (
ve˘‹
, 
vty
 *, 
cmd_ñemít
 **, );

357 
	`cmd_execuã_comm™d_°ri˘
 (
ve˘‹
, 
vty
 *, 
cmd_ñemít
 **);

358 
	`c⁄fig_ª∂a˚_°rög
 (
cmd_ñemít
 *, *, ...);

359 
	`cmd_öô
 ();

360 
	`cmd_ãrmö©e
 ();

363 
cmd_ñemít
 
c⁄fig_íd_cmd
;

364 
cmd_ñemít
 
c⁄fig_exô_cmd
;

365 
cmd_ñemít
 
c⁄fig_quô_cmd
;

366 
cmd_ñemít
 
c⁄fig_hñp_cmd
;

367 
cmd_ñemít
 
c⁄fig_li°_cmd
;

368 *
	`ho°_c⁄fig_fûe
 ();

369 
	`ho°_c⁄fig_£t
 (*);

371 
	`¥öt_vîsi⁄
 (const *);

374 
ho°
 host;

377 *
comm™d_¸
;

	@common-libs/3rd-party/quagga-lib/include/distribute.h

22 #i‚de‡
_ZEBRA_DISTRIBUTE_H


23 
	#_ZEBRA_DISTRIBUTE_H


	)

26 
	edi°ribuã_ty≥


28 
	mDISTRIBUTE_IN
,

29 
	mDISTRIBUTE_OUT
,

30 
	mDISTRIBUTE_MAX


33 
	sdi°ribuã


36 *
	mi‚ame
;

39 *
	mli°
[
DISTRIBUTE_MAX
];

42 *
	m¥efix
[
DISTRIBUTE_MAX
];

46 
di°ribuã_li°_öô
 ();

47 
di°ribuã_li°_ª£t
 ();

48 
di°ribuã_li°_add_hook
 ((*Ë(
di°ribuã
 *));

49 
	`di°ribuã_li°_dñëe_hook
 ((*Ë(
di°ribuã
 *));

50 
di°ribuã
 *
	`di°ribuã_lookup
 (const *);

51 
	`c⁄fig_wrôe_di°ribuã
 (
vty
 *);

52 
	`c⁄fig_show_di°ribuã
 (
vty
 *);

54 
fûãr_ty≥
 
	`di°ribuã_≠∂y_ö
 (
öãrÁ˚
 *, 
¥efix
 *);

55 
fûãr_ty≥
 
	`di°ribuã_≠∂y_out
 (
öãrÁ˚
 *, 
¥efix
 *);

	@common-libs/3rd-party/quagga-lib/include/filter.h

23 #i‚de‡
_ZEBRA_FILTER_H


24 
	#_ZEBRA_FILTER_H


	)

26 
	~"if.h
"

29 
	efûãr_ty≥


31 
	mFILTER_DENY
,

32 
	mFILTER_PERMIT
,

33 
	mFILTER_DYNAMIC


36 
	eac˚ss_ty≥


38 
	mACCESS_TYPE_STRING
,

39 
	mACCESS_TYPE_NUMBER


43 
	sac˚ss_li°


45 *
	m«me
;

46 *
	mªm¨k
;

48 
ac˚ss_ma°î
 *
	mma°î
;

50 
ac˚ss_ty≥
 
	mty≥
;

52 
ac˚ss_li°
 *
	m√xt
;

53 
ac˚ss_li°
 *
	m¥ev
;

55 
fûãr
 *
	mhód
;

56 
fûãr
 *
	mèû
;

60 
ac˚ss_li°_öô
 ();

61 
ac˚ss_li°_ª£t
 ();

62 
ac˚ss_li°_add_hook
 ((*
func
)(
ac˚ss_li°
 *));

63 
	`ac˚ss_li°_dñëe_hook
 ((*
func
)(
ac˚ss_li°
 *));

64 
ac˚ss_li°
 *
	`ac˚ss_li°_lookup
 (
afi_t
, const *);

65 
fûãr_ty≥
 
	`ac˚ss_li°_≠∂y
 (
ac˚ss_li°
 *, *);

	@common-libs/3rd-party/quagga-lib/include/getopt.h

22 #i‚de‡
_GETOPT_H


23 
	#_GETOPT_H
 1

	)

37 #ifdef 
__˝lu•lus


47 *
›èrg
;

61 
›töd
;

66 
›ãº
;

70 
›t›t
;

93 
	s›ti⁄


95 #i‡
deföed
 (
__STDC__
) && __STDC__

96 c⁄° *
	g«me
;

98 *
	g«me
;

102 
	ghas_¨g
;

103 *
	gÊag
;

104 
	gvÆ
;

109 
	#no_¨gumít
 0

	)

110 
	#ªquúed_¨gumít
 1

	)

111 
	#›ti⁄Æ_¨gumít
 2

	)

113 #i‡
deföed
 (
__STDC__
) && __STDC__

115 #i‡
REALLY_NEED_PLAIN_GETOPT


122 #i‚de‡
NONPOSIX_GETOPT_DEFINITION


123 
gë›t
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
sh‹t›ts
);

125 
gë›t
 ();

131 
gë›t_l⁄g
 (
¨gc
, *c⁄° *
¨gv
, c⁄° *
sh‹t›ts
,

132 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
);

133 
gë›t_l⁄g_⁄ly
 (
¨gc
, *c⁄° *
¨gv
,

134 c⁄° *
sh‹t›ts
,

135 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
);

138 
_gë›t_öã∫Æ
 (
¨gc
, *c⁄° *
¨gv
,

139 c⁄° *
sh‹t›ts
,

140 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄göd
,

141 
l⁄g_⁄ly
);

144 #ifde‡
REALLY_NEED_PLAIN_GETOPT


145 
gë›t
 ();

148 
gë›t_l⁄g
 ();

149 
gë›t_l⁄g_⁄ly
 ();

151 
_gë›t_öã∫Æ
 ();

155 #ifdef 
__˝lu•lus


	@common-libs/3rd-party/quagga-lib/include/hash.h

21 #i‚de‡
_ZEBRA_HASH_H


22 
	#_ZEBRA_HASH_H


	)

25 
	#HASHTABSIZE
 1024

	)

27 
	shash_backë


30 
hash_backë
 *
	m√xt
;

33 
	mkey
;

36 *
	md©a
;

39 
	shash


42 
hash_backë
 **
	mödex
;

45 
	msize
;

48 (*
	mhash_key
) (*);

51 (*
	mhash_cmp
) (const *, const *);

54 
	mcou¡
;

57 
hash
 *
hash_¸óã
 ((*) (*),

59 
hash
 *
	`hash_¸óã_size
 (, (*) (*),

62 *
	`hash_gë
 (
hash
 *, *, * (*) (*));

63 *
	`hash_Æloc_öã∫
 (*);

64 *
	`hash_lookup
 (
hash
 *, *);

65 *
	`hash_ªÀa£
 (
hash
 *, *);

67 
	`hash_ôî©e
 (
hash
 *,

68 (*Ë(
hash_backë
 *, *), *);

70 
	`hash_˛ón
 (
hash
 *, (*) (*));

71 
	`hash_‰ì
 (
hash
 *);

73 
	`°rög_hash_make
 (const *);

	@common-libs/3rd-party/quagga-lib/include/if.h

21 #i‚de‡
_ZEBRA_IF_H


22 
	#_ZEBRA_IF_H


	)

24 
	~"lökli°.h
"

36 
	#INTERFACE_NAMSIZ
 20

	)

37 
	#INTERFACE_HWADDR_MAX
 20

	)

39 #ifde‡
HAVE_PROC_NET_DEV


40 
	sif_°©s


42 
	mrx_∑ckës
;

43 
	mtx_∑ckës
;

44 
	mrx_byãs
;

45 
	mtx_byãs
;

46 
	mrx_îr‹s
;

47 
	mtx_îr‹s
;

48 
	mrx_dr›≥d
;

49 
	mtx_dr›≥d
;

50 
	mrx_mu…iˇ°
;

51 
	mrx_com¥es£d
;

52 
	mtx_com¥es£d
;

53 
	mcﬁlisi⁄s
;

56 
	mrx_Àngth_îr‹s
;

57 
	mrx_ovî_îr‹s
;

58 
	mrx_¸c_îr‹s
;

59 
	mrx_‰ame_îr‹s
;

60 
	mrx_fifo_îr‹s
;

61 
	mrx_mis£d_îr‹s
;

63 
	mtx_ab‹ãd_îr‹s
;

64 
	mtx_ˇºõr_îr‹s
;

65 
	mtx_fifo_îr‹s
;

66 
	mtx_hóπbót_îr‹s
;

67 
	mtx_wödow_îr‹s
;

72 
	söãrÁ˚


81 
	m«me
[
INTERFACE_NAMSIZ
 + 1];

85 
	mifödex
;

86 
	#IFINDEX_INTERNAL
 0

	)

89 
u_ch¨
 
	m°©us
;

90 
	#ZEBRA_INTERFACE_ACTIVE
 (1 << 0)

	)

91 
	#ZEBRA_INTERFACE_SUB
 (1 << 1)

	)

92 
	#ZEBRA_INTERFACE_LINKDETECTION
 (1 << 2)

	)

95 
uöt64_t
 
	mÊags
;

98 
	mmëric
;

101 
	mmtu
;

102 
	mmtu6
;

105 #ifde‡
HAVE_STRUCT_SOCKADDR_DL


106 
sockaddr_dl
 
	msdl
;

108 
	mhw_ty≥
;

109 
u_ch¨
 
	mhw_addr
[
INTERFACE_HWADDR_MAX
];

110 
	mhw_addr_Àn
;

114 
	mb™dwidth
;

117 *
	mdesc
;

120 *
	mdi°ribuã_ö
;

121 *
	mdi°ribuã_out
;

124 
li°
 *
	mc⁄√˘ed
;

127 *
	möfo
;

130 #ifde‡
HAVE_PROC_NET_DEV


131 
if_°©s
 
	m°©s
;

133 #ifde‡
HAVE_NET_RT_IFLIST


134 
if_d©a
 
	m°©s
;

139 
	sc⁄√˘ed


142 
öãrÁ˚
 *
	miÂ
;

145 
u_ch¨
 
	mc⁄f
;

146 
	#ZEBRA_IFC_REAL
 (1 << 0)

	)

147 
	#ZEBRA_IFC_CONFIGURED
 (1 << 1)

	)

156 
u_ch¨
 
	mÊags
;

157 
	#ZEBRA_IFA_SECONDARY
 (1 << 0)

	)

158 
	#ZEBRA_IFA_PEER
 (1 << 1)

	)

167 
¥efix
 *
	maddªss
;

171 
¥efix
 *
	mde°ö©i⁄
;

174 *
	mœbñ
;

178 
	#CONNECTED_PEER
(
C
Ë
	`CHECK_FLAG
((C)->
Êags
, 
ZEBRA_IFA_PEER
)

	)

181 
	#CONNECTED_PREFIX
(
C
) \

182 (
	`CONNECTED_PEER
(
C
Ë? (C)->
de°ö©i⁄
 : (C)->
addªss
)

	)

186 
	#CONNECTED_ID
(
C
) \

187 ((
	`CONNECTED_PEER
(
C
Ë&& !
	`¥efix_m©ch
((C)->
de°ö©i⁄
, (C)->
addªss
)) ?\

188 (
C
)->
de°ö©i⁄
 : (C)->
addªss
)

	)

191 
	#IF_NEW_HOOK
 0

	)

192 
	#IF_DELETE_HOOK
 1

	)

197 #i‚de‡
IFF_NOTRAILERS


198 
	#IFF_NOTRAILERS
 0x0

	)

200 #i‚de‡
IFF_OACTIVE


201 
	#IFF_OACTIVE
 0x0

	)

203 #i‚de‡
IFF_SIMPLEX


204 
	#IFF_SIMPLEX
 0x0

	)

206 #i‚de‡
IFF_LINK0


207 
	#IFF_LINK0
 0x0

	)

209 #i‚de‡
IFF_LINK1


210 
	#IFF_LINK1
 0x0

	)

212 #i‚de‡
IFF_LINK2


213 
	#IFF_LINK2
 0x0

	)

215 #i‚de‡
IFF_NOXMIT


216 
	#IFF_NOXMIT
 0x0

	)

218 #i‚de‡
IFF_NORTEXCH


219 
	#IFF_NORTEXCH
 0x0

	)

221 #i‚de‡
IFF_IPV4


222 
	#IFF_IPV4
 0x0

	)

224 #i‚de‡
IFF_IPV6


225 
	#IFF_IPV6
 0x0

	)

227 #i‚de‡
IFF_VIRTUAL


228 
	#IFF_VIRTUAL
 0x0

	)

232 
if_cmp_func
 (
öãrÁ˚
 *, interface *);

233 
öãrÁ˚
 *
if_¸óã
 (c⁄° *
«me
, 
«mñí
);

234 
öãrÁ˚
 *
if_lookup_by_ödex
 ();

235 
öãrÁ˚
 *
if_lookup_exa˘_addªss
 (
ö_addr
);

236 
öãrÁ˚
 *
if_lookup_addªss
 (
ö_addr
);

240 
öãrÁ˚
 *
if_lookup_by_«me
 (c⁄° *
i‚ame
);

241 
öãrÁ˚
 *
if_gë_by_«me
 (c⁄° *
i‚ame
);

246 
öãrÁ˚
 *
if_lookup_by_«me_Àn
(c⁄° *
i‚ame
,

247 
size_t
 
«mñí
);

248 
öãrÁ˚
 *
if_gë_by_«me_Àn
(c⁄° *
i‚ame
, 
size_t
 
«mñí
);

254 
if_dñëe_ªèö
 (
öãrÁ˚
 *);

258 
if_dñëe
 (
öãrÁ˚
 *);

260 
if_is_up
 (
öãrÁ˚
 *);

261 
if_is_ru¬ög
 (
öãrÁ˚
 *);

262 
if_is_›î©ive
 (
öãrÁ˚
 *);

263 
if_is_lo›back
 (
öãrÁ˚
 *);

264 
if_is_brﬂdˇ°
 (
öãrÁ˚
 *);

265 
if_is_poöt›oöt
 (
öãrÁ˚
 *);

266 
if_is_mu…iˇ°
 (
öãrÁ˚
 *);

267 
if_add_hook
 (, (*)(
öãrÁ˚
 *));

268 
	`if_öô
 ();

269 
	`if_ãrmö©e
 ();

270 
	`if_dump_Æl
 ();

271 c⁄° *
	`if_Êag_dump
();

276 c⁄° *
	`ifödex2i‚ame
 ();

281 
	`i‚ame2ifödex
(c⁄° *
i‚ame
);

284 
c⁄√˘ed
 *
	`c⁄√˘ed_√w
 ();

285 
	`c⁄√˘ed_‰ì
 (
c⁄√˘ed
 *);

286 
	`c⁄√˘ed_add
 (
öãrÁ˚
 *, 
c⁄√˘ed
 *);

287 
c⁄√˘ed
 *
	`c⁄√˘ed_add_by_¥efix
 (
öãrÁ˚
 *,

288 
¥efix
 *,

289 
¥efix
 *);

290 
c⁄√˘ed
 *
	`c⁄√˘ed_dñëe_by_¥efix
 (
öãrÁ˚
 *,

291 
¥efix
 *);

292 
c⁄√˘ed
 *
	`c⁄√˘ed_lookup_addªss
 (
öãrÁ˚
 *,

293 
ö_addr
);

295 #i‚de‡
HAVE_IF_NAMETOINDEX


296 
	`if_«mëoödex
 (const *);

298 #i‚de‡
HAVE_IF_INDEXTONAME


299 *
	`if_ödext⁄ame
 (, *);

303 
li°
 *
iÊi°
;

304 
cmd_ñemít
 
öãrÁ˚_desc_cmd
;

305 
cmd_ñemít
 
no_öãrÁ˚_desc_cmd
;

306 
cmd_ñemít
 
öãrÁ˚_cmd
;

307 
cmd_ñemít
 
no_öãrÁ˚_cmd
;

308 
cmd_ñemít
 
öãrÁ˚_p£udo_cmd
;

309 
cmd_ñemít
 
no_öãrÁ˚_p£udo_cmd
;

310 
cmd_ñemít
 
show_addªss_cmd
;

	@common-libs/3rd-party/quagga-lib/include/if_rmap.h

22 #i‚de‡
_ZEBRA_IF_RMAP_H


23 
	#_ZEBRA_IF_RMAP_H


	)

25 
	eif_rm≠_ty≥


27 
	mIF_RMAP_IN
,

28 
	mIF_RMAP_OUT
,

29 
	mIF_RMAP_MAX


32 
	sif_rm≠


35 *
	mi‚ame
;

37 *
	mrouãm≠
[
IF_RMAP_MAX
];

40 
if_rm≠_öô
 ();

41 
if_rm≠_ª£t
 ();

42 
if_rm≠_hook_add
 ((*Ë(
if_rm≠
 *));

43 
	`if_rm≠_hook_dñëe
 ((*Ë(
if_rm≠
 *));

44 
if_rm≠
 *
	`if_rm≠_lookup
 (const *);

45 
	`c⁄fig_wrôe_if_rm≠
 (
vty
 *);

	@common-libs/3rd-party/quagga-lib/include/jhash.h

20 #i‚de‡
_QUAGGA_JHASH_H


21 
	#_QUAGGA_JHASH_H


	)

27 
u_öt32_t
 
jhash
(*
key
, u_öt32_à
Àngth
, u_öt32_à
öôvÆ
);

32 
u_öt32_t
 
jhash2
(u_öt32_à*
k
, u_öt32_à
Àngth
, u_öt32_à
öôvÆ
);

40 
u_öt32_t
 
jhash_3w‹ds
(u_öt32_à
a
, u_öt32_à
b
, u_öt32_à
c
, u_öt32_à
öôvÆ
);

41 
u_öt32_t
 
jhash_2w‹ds
(u_öt32_à
a
, u_öt32_à
b
, u_öt32_à
öôvÆ
);

42 
u_öt32_t
 
jhash_1w‹d
(u_öt32_à
a
, u_öt32_à
öôvÆ
);

	@common-libs/3rd-party/quagga-lib/include/keychain.h

22 #i‚de‡
_ZEBRA_KEYCHAIN_H


23 
	#_ZEBRA_KEYCHAIN_H


	)

25 
	skeychaö


27 *
	m«me
;

29 
li°
 *
	mkey
;

32 
	skey_ønge


34 
time_t
 
	m°¨t
;

35 
time_t
 
	míd
;

37 
u_ch¨
 
	mduøti⁄
;

40 
	skey


42 
u_öt32_t
 
	mödex
;

44 *
	m°rög
;

46 
key_ønge
 
	m£nd
;

47 
key_ønge
 
	mac˚±
;

50 
keychaö_öô
 ();

51 
keychaö
 *
keychaö_lookup
 (const *);

52 
key
 *
key_lookup_f‹_ac˚±
 (c⁄° 
keychaö
 *, 
u_öt32_t
);

53 
key
 *
key_m©ch_f‹_ac˚±
 (c⁄° 
keychaö
 *, const *);

54 
key
 *
key_lookup_f‹_£nd
 (c⁄° 
keychaö
 *);

	@common-libs/3rd-party/quagga-lib/include/linklist.h

22 #i‚de‡
_ZEBRA_LINKLIST_H


23 
	#_ZEBRA_LINKLIST_H


	)

28 
	sli°node


30 
li°node
 *
	m√xt
;

31 
li°node
 *
	m¥ev
;

34 *
	md©a
;

37 
	sli°


39 
li°node
 *
	mhód
;

40 
li°node
 *
	mèû
;

43 
	mcou¡
;

49 (*
	mcmp
Ë(*
	mvÆ1
, *
	mvÆ2
);

54 (*
	mdñ
Ë(*
	mvÆ
);

57 
	#li°√xäode
(
X
Ë((X)->
√xt
)

	)

58 
	#li°hód
(
X
Ë((X)->
hód
)

	)

59 
	#li°èû
(
X
Ë((X)->
èû
)

	)

60 
	#li°cou¡
(
X
Ë((X)->
cou¡
)

	)

61 
	#li°_i£m±y
(
X
Ë((X)->
hód
 =
NULL
 && (X)->
èû
 =NULL)

	)

62 
	#li°gëd©a
(
X
Ë(
	`as£π
((X)->
d©a
 !
NULL
), (X)->d©a)

	)

65 
li°
 *
li°_√w
();

66 
li°_‰ì
 (
li°
 *);

68 
li°node_add
 (
li°
 *, *);

69 
li°node_add_s‹t
 (
li°
 *, *);

70 
li°node_add_a·î
 (
li°
 *, 
li°node
 *, *);

71 
li°node_dñëe
 (
li°
 *, *);

72 
li°node
 *
li°node_lookup
 (
li°
 *, *);

73 *
li°node_hód
 (
li°
 *);

75 
li°_dñëe
 (
li°
 *);

76 
li°_dñëe_Æl_node
 (
li°
 *);

79 
li°_dñëe_node
 (
li°
 *, 
li°node
 *);

82 
li°_add_node_¥ev
 (
li°
 *, 
li°node
 *, *);

83 
li°_add_node_√xt
 (
li°
 *, 
li°node
 *, *);

84 
li°_add_li°
 (
li°
 *, list *);

90 
	#ALL_LIST_ELEMENTS
(
li°
,
node
,
√xäode
,
d©a
) \

91 (
node
Ë
	`li°hód
(
li°
); \

92 (
node
Ë!
NULL
 && \

93 ((
d©a
Ë
	`li°gëd©a
(
node
),(
√xäode
Ë
	`li°√xäode
(node), 1); \

94 (
node
Ë(
√xäode
)

	)

102 
	#ALL_LIST_ELEMENTS_RO
(
li°
,
node
,
d©a
) \

103 (
node
Ë
	`li°hód
(
li°
); \

104 (
node
Ë!
NULL
 && ((
d©a
Ë
	`li°gëd©a
(node), 1); \

105 (
node
Ë
	`li°√xäode
“ode)

	)

112 
	#LISTNODE_ATTACH
(
L
,
N
) \

114 (
N
)->
¥ev
 = (
L
)->
èû
; \

115 i‡((
L
)->
hód
 =
NULL
) \

116 (
L
)->
hód
 = (
N
); \

118 (
L
)->
èû
->
√xt
 = (
N
); \

119 (
L
)->
èû
 = (
N
); \

120 (
L
)->
cou¡
++; \

121 } 0)

	)

124 
	#LISTNODE_DETACH
(
L
,
N
) \

126 i‡((
N
)->
¥ev
) \

127 (
N
)->
¥ev
->
√xt
 = (N)->next; \

129 (
L
)->
hód
 = (
N
)->
√xt
; \

130 i‡((
N
)->
√xt
) \

131 (
N
)->
√xt
->
¥ev
 = (N)->prev; \

133 (
L
)->
èû
 = (
N
)->
¥ev
; \

134 (
L
)->
cou¡
--; \

135 } 0)

	)

138 #i‡!
deföed
(
QUAGGA_NO_DEPRECATED_INTERFACES
)

140 
	#LISTNODE_ADD
(
L
,
N
Ë
	`LISTNODE_ATTACH
(L,N)

	)

141 
	#LISTNODE_DELETE
(
L
,
N
Ë
	`LISTNODE_DETACH
(L,N)

	)

142 
	#√xäode
(
X
Ë((XË(X)->
√xt
)

	)

143 
	#gëd©a
(
X
Ë
	`li°gëd©a
(X)

	)

144 
	#LIST_LOOP
(
L
,
V
,
N
) \

145 
	`ALL_LIST_ELEMENTS_RO
 (
L
,
N
,
V
))

	)

	@common-libs/3rd-party/quagga-lib/include/log.h

23 #i‚de‡
_ZEBRA_LOG_H


24 
	#_ZEBRA_LOG_H


	)

26 
	~<sy¶og.h
>

46 
	mZLOG_NONE
,

47 
	mZLOG_DEFAULT
,

48 
	mZLOG_ZEBRA
,

49 
	mZLOG_RIP
,

50 
	mZLOG_BGP
,

51 
	mZLOG_OSPF
,

52 
	mZLOG_RIPNG
,

53 
	mZLOG_OSPF6
,

54 
	mZLOG_ISIS
,

55 
	mZLOG_MASC
,

56 
	mZLOG_KULVISOR
,

57 
	mZLOG_OF_CONTROLLER
,

58 
	mZLOG_EX


59 } 
	tzlog_¥Ÿo_t
;

63 
	#ZLOG_DISABLED
 (
LOG_EMERG
-1)

	)

67 
	mZLOG_DEST_SYSLOG
 = 0,

68 
	mZLOG_DEST_STDOUT
,

69 
	mZLOG_DEST_MONITOR
,

70 
	mZLOG_DEST_FILE


71 } 
	tzlog_de°_t
;

72 
	#ZLOG_NUM_DESTS
 (
ZLOG_DEST_FILE
+1)

	)

74 
	szlog


76 c⁄° *
	midít
;

77 
zlog_¥Ÿo_t
 
	m¥Ÿocﬁ
;

78 
	mmaxlvl
[
ZLOG_NUM_DESTS
];

80 
	mdeÁu…_lvl
;

81 
FILE
 *
	mÂ
;

82 *
	mfûíame
;

83 
	mÁcûôy
;

84 
	mªc‹d_¥i‹ôy
;

86 
	msy¶og_›ti⁄s
;

87 
	mtime°amp_¥ecisi⁄
;

91 
	smesßge


93 
	mkey
;

94 c⁄° *
	m°r
;

98 
zlog
 *
zlog_deÁu…
;

101 
zlog
 *
›ízlog
 (c⁄° *
¥og«me
, 
zlog_¥Ÿo_t
 
¥Ÿocﬁ
,

102 
sy¶og_›ti⁄s
, 
sy¶og_Ácûôy
);

105 
˛o£zlog
 (
zlog
 *
zl
);

108 #ifde‡
__GNUC__


109 
	#PRINTF_ATTRIBUTE
(
a
,
b
Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
,á, b)))

	)

111 
	#PRINTF_ATTRIBUTE
(
a
,
b
)

	)

115 
	$zlog
 (
zlog
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, ...)

116 
	`PRINTF_ATTRIBUTE
(3, 4);

119 
	$zlog_îr
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

120 
	$zlog_w¨n
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

121 
	$zlog_öfo
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

122 
	$zlog_nŸi˚
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

123 
	$zlog_debug
 (c⁄° *
f‹m©
, ...Ë
	`PRINTF_ATTRIBUTE
(1, 2);

126 
	$∂og_îr
 (
zlog
 *, c⁄° *
f‹m©
, ...)

127 
	`PRINTF_ATTRIBUTE
(2, 3);

128 
	$∂og_w¨n
 (
zlog
 *, c⁄° *
f‹m©
, ...)

129 
	`PRINTF_ATTRIBUTE
(2, 3);

130 
	$∂og_öfo
 (
zlog
 *, c⁄° *
f‹m©
, ...)

131 
	`PRINTF_ATTRIBUTE
(2, 3);

132 
	$∂og_nŸi˚
 (
zlog
 *, c⁄° *
f‹m©
, ...)

133 
	`PRINTF_ATTRIBUTE
(2, 3);

134 
	$∂og_debug
 (
zlog
 *, c⁄° *
f‹m©
, ...)

135 
	`PRINTF_ATTRIBUTE
(2, 3);

141 
	`zlog_£t_Àvñ
 (
zlog
 *
zl
, 
zlog_de°_t
, 
log_Àvñ
);

144 
	`zlog_£t_fûe
 (
zlog
 *
zl
, c⁄° *
fûíame
, 
log_Àvñ
);

146 
	`zlog_ª£t_fûe
 (
zlog
 *
zl
);

149 
	`zlog_rŸ©e
 (
zlog
 *);

152 
	#LOOKUP
(
x
, 
y
Ë
	`mes_lookup
(x, x ## 
_max
, y, "“ÿôem found)", #x)

	)

154 c⁄° *
	`lookup
 (c⁄° 
mesßge
 *, );

155 c⁄° *
	`mes_lookup
 (c⁄° 
mesßge
 *
me¶i°
,

156 
max
, 
ödex
,

157 c⁄° *
no_ôem
, c⁄° *
me¢ame
);

159 c⁄° *
zlog_¥i‹ôy
[];

160 c⁄° *
zlog_¥Ÿo_«mes
[];

163 c⁄° *
	`ß„_°ªº‹
(
î∫um
);

166 
	`zlog_sig«l
(
signo
, c⁄° *
a˘i⁄


167 #ifde‡
SA_SIGINFO


168 , 
sigöfo_t
 *
sigöfo
, *
¥ogøm_cou¡î


173 
	`zlog_backåa˚
(
¥i‹ôy
);

179 
	`zlog_backåa˚_sigß„
(
¥i‹ôy
, *
¥ogøm_cou¡î
);

187 
size_t
 
	`quagga_time°amp
(
time°amp_¥ecisi⁄
 ,

188 *
buf
, 
size_t
 
buÊí
);

191 
	stime°amp_c⁄åﬁ
 {

192 
size_t
 
Àn
;

193 
¥ecisi⁄
;

194 
Æªady_ªndîed
;

195 
buf
[40];

200 
	#LOG_LEVELS
 "”mîgícõs|Æîts|¸ôiˇl|îr‹s|w¨nögs|nŸifiˇti⁄s|öf‹m©i⁄Æ|debuggög)"

	)

202 
	#LOG_LEVEL_DESC
 \

210 "Debuggög mesßges\n"

	)

212 
	#LOG_FACILITIES
 "(kîn|u£r|maû|d´m⁄|auth|sy¶og|Õr|√ws|uu˝|¸⁄|loˇl0|loˇl1|loˇl2|loˇl3|loˇl4|loˇl5|loˇl6|loˇl7)"

	)

214 
	#LOG_FACILITY_DESC
 \

232 "Loˇ»u£\n"

	)

	@common-libs/3rd-party/quagga-lib/include/md5.h

42 #i‚de‡
_LIBZEBRA_MD5_H_


43 
	#_LIBZEBRA_MD5_H_


	)

45 
	#MD5_BUFLEN
 64

	)

49 
uöt32_t
 
	mmd5_°©e32
[4];

50 
uöt8_t
 
	mmd5_°©e8
[16];

51 } 
	mmd5_°
;

53 
	#md5_°a
 
md5_°
.
md5_°©e32
[0]

	)

54 
	#md5_°b
 
md5_°
.
md5_°©e32
[1]

	)

55 
	#md5_°c
 
md5_°
.
md5_°©e32
[2]

	)

56 
	#md5_°d
 
md5_°
.
md5_°©e32
[3]

	)

57 
	#md5_°8
 
md5_°
.
md5_°©e8


	)

60 
uöt64_t
 
	mmd5_cou¡64
;

61 
uöt8_t
 
	mmd5_cou¡8
[8];

62 } 
	mmd5_cou¡
;

63 
	#md5_n
 
md5_cou¡
.
md5_cou¡64


	)

64 
	#md5_n8
 
md5_cou¡
.
md5_cou¡8


	)

66 
uöt
 
	mmd5_i
;

67 
uöt8_t
 
	mmd5_buf
[
MD5_BUFLEN
];

68 } 
	tmd5_˘xt
;

70 
md5_öô
 (
md5_˘xt
 *);

71 
md5_lo›
 (
md5_˘xt
 *, c⁄° *, 
u_öt
);

72 
md5_∑d
 (
md5_˘xt
 *);

73 
md5_ªsu…
 (
uöt8_t
 *, 
md5_˘xt
 *);

76 
	#MD5_CTX
 
md5_˘xt


	)

77 
	#MD5Inô
(
x
Ë
	`md5_öô
((x))

	)

78 
	#MD5Upd©e
(
x
, 
y
, 
z
Ë
	`md5_lo›
((x), (y), (z))

	)

79 
	#MD5FöÆ
(
x
, 
y
) \

81 
	`md5_∑d
((
y
)); \

82 
	`md5_ªsu…
((
x
), (
y
)); \

83 } 0)

	)

	@common-libs/3rd-party/quagga-lib/include/memory.h

21 #i‚de‡
_ZEBRA_MEMORY_H


22 
	#_ZEBRA_MEMORY_H


	)

25 
	smem‹y_li°


27 
	mödex
;

28 c⁄° *
	mf‹m©
;

31 
	smli°
 {

32 
mem‹y_li°
 *
	mli°
;

33 c⁄° *
	m«me
;

36 
	~"memty≥s.h
"

38 
mli°
 
mli°s
[];

41 #ifde‡
MEMORY_LOG


42 
	#XMALLOC
(
mty≥
, 
size
) \

43 
	`mty≥_zmÆloc
 (
__FILE__
, 
__LINE__
, (
mty≥
), (
size
))

	)

44 
	#XCALLOC
(
mty≥
, 
size
) \

45 
	`mty≥_zˇŒoc
 (
__FILE__
, 
__LINE__
, (
mty≥
), (
size
))

	)

46 
	#XREALLOC
(
mty≥
, 
±r
, 
size
) \

47 
	`mty≥_zªÆloc
 (
__FILE__
, 
__LINE__
, (
mty≥
), (
±r
), (
size
))

	)

48 
	#XFREE
(
mty≥
, 
±r
) \

50 
	`mty≥_z‰ì
 (
__FILE__
, 
__LINE__
, (
mty≥
), (
±r
)); \

51 
±r
 = 
NULL
; } \

52 0)

	)

53 
	#XSTRDUP
(
mty≥
, 
°r
) \

54 
	`mty≥_z°rdup
 (
__FILE__
, 
__LINE__
, (
mty≥
), (
°r
))

	)

56 
	#XMALLOC
(
mty≥
, 
size
Ë
	`zmÆloc
 ((mty≥), (size))

	)

57 
	#XCALLOC
(
mty≥
, 
size
Ë
	`zˇŒoc
 ((mty≥), (size))

	)

58 
	#XREALLOC
(
mty≥
, 
±r
, 
size
Ë
	`zªÆloc
 ((mty≥), (±r), (size))

	)

59 
	#XFREE
(
mty≥
, 
±r
) do { \

60 
	`z‰ì
 ((
mty≥
), (
±r
)); \

61 
±r
 = 
NULL
; } \

62 0)

	)

63 
	#XSTRDUP
(
mty≥
, 
°r
Ë
	`z°rdup
 ((mty≥), (°r))

	)

67 *
zmÆloc
 (
ty≥
, 
size_t
 
size
);

68 *
zˇŒoc
 (
ty≥
, 
size_t
 
size
);

69 *
zªÆloc
 (
ty≥
, *
±r
, 
size_t
 
size
);

70 
z‰ì
 (
ty≥
, *
±r
);

71 *
z°rdup
 (
ty≥
, c⁄° *
°r
);

73 *
mty≥_zmÆloc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, 
size_t
 
size
);

75 *
mty≥_zˇŒoc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, 
size_t
 
size
);

77 *
mty≥_zªÆloc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, *
±r
,

78 
size_t
 
size
);

80 
mty≥_z‰ì
 (c⁄° *
fûe
, 
löe
, 
ty≥
,

81 *
±r
);

83 *
mty≥_z°rdup
 (c⁄° *
fûe
, 
löe
, 
ty≥
,

84 c⁄° *
°r
);

85 
mem‹y_öô
 ();

86 
log_mem°©s_°dîr
 (const *);

89 
mty≥_°©s_Æloc
 ();

92 
	#MTYPE_MEMSTR_LEN
 20

	)

93 c⁄° *
mty≥_mem°r
 (*, 
size_t
, );

	@common-libs/3rd-party/quagga-lib/include/memtypes.h

4 #i‚de‡
_QUAGGA_MEMTYPES_H


5 
	#_QUAGGA_MEMTYPES_H


	)

9 
	mMTYPE_TMP
 = 1,

10 
	mMTYPE_STRVEC
,

11 
	mMTYPE_VECTOR
,

12 
	mMTYPE_VECTOR_INDEX
,

13 
	mMTYPE_LINK_LIST
,

14 
	mMTYPE_LINK_NODE
,

15 
	mMTYPE_THREAD
,

16 
	mMTYPE_THREAD_MASTER
,

17 
	mMTYPE_THREAD_STATS
,

18 
	mMTYPE_THREAD_FUNCNAME
,

19 
	mMTYPE_VTY
,

20 
	mMTYPE_VTY_OUT_BUF
,

21 
	mMTYPE_VTY_HIST
,

22 
	mMTYPE_IF
,

23 
	mMTYPE_CONNECTED
,

24 
	mMTYPE_CONNECTED_LABEL
,

25 
	mMTYPE_BUFFER
,

26 
	mMTYPE_BUFFER_DATA
,

27 
	mMTYPE_STREAM
,

28 
	mMTYPE_STREAM_DATA
,

29 
	mMTYPE_STREAM_FIFO
,

30 
	mMTYPE_PREFIX
,

31 
	mMTYPE_PREFIX_IPV4
,

32 
	mMTYPE_PREFIX_IPV6
,

33 
	mMTYPE_HASH
,

34 
	mMTYPE_HASH_BACKET
,

35 
	mMTYPE_HASH_INDEX
,

36 
	mMTYPE_ROUTE_TABLE
,

37 
	mMTYPE_ROUTE_NODE
,

38 
	mMTYPE_DISTRIBUTE
,

39 
	mMTYPE_DISTRIBUTE_IFNAME
,

40 
	mMTYPE_ACCESS_LIST
,

41 
	mMTYPE_ACCESS_LIST_STR
,

42 
	mMTYPE_ACCESS_FILTER
,

43 
	mMTYPE_PREFIX_LIST
,

44 
	mMTYPE_PREFIX_LIST_ENTRY
,

45 
	mMTYPE_PREFIX_LIST_STR
,

46 
	mMTYPE_ROUTE_MAP
,

47 
	mMTYPE_ROUTE_MAP_NAME
,

48 
	mMTYPE_ROUTE_MAP_INDEX
,

49 
	mMTYPE_ROUTE_MAP_RULE
,

50 
	mMTYPE_ROUTE_MAP_RULE_STR
,

51 
	mMTYPE_ROUTE_MAP_COMPILED
,

52 
	mMTYPE_DESC
,

53 
	mMTYPE_KEY
,

54 
	mMTYPE_KEYCHAIN
,

55 
	mMTYPE_IF_RMAP
,

56 
	mMTYPE_IF_RMAP_NAME
,

57 
	mMTYPE_SOCKUNION
,

58 
	mMTYPE_PRIVS
,

59 
	mMTYPE_ZLOG
,

60 
	mMTYPE_ZCLIENT
,

61 
	mMTYPE_WORK_QUEUE
,

62 
	mMTYPE_WORK_QUEUE_ITEM
,

63 
	mMTYPE_WORK_QUEUE_NAME
,

64 
	mMTYPE_PQUEUE
,

65 
	mMTYPE_PQUEUE_DATA
,

66 
	mMTYPE_HOST
,

67 
	mMTYPE_RTADV_PREFIX
,

68 
	mMTYPE_VRF
,

69 
	mMTYPE_VRF_NAME
,

70 
	mMTYPE_NEXTHOP
,

71 
	mMTYPE_RIB
,

72 
	mMTYPE_RIB_QUEUE
,

73 
	mMTYPE_STATIC_IPV4
,

74 
	mMTYPE_STATIC_IPV6
,

75 
	mMTYPE_BGP
,

76 
	mMTYPE_BGP_LISTENER
,

77 
	mMTYPE_BGP_PEER
,

78 
	mMTYPE_BGP_PEER_HOST
,

79 
	mMTYPE_PEER_GROUP
,

80 
	mMTYPE_PEER_DESC
,

81 
	mMTYPE_PEER_PASSWORD
,

82 
	mMTYPE_ATTR
,

83 
	mMTYPE_ATTR_EXTRA
,

84 
	mMTYPE_AS_PATH
,

85 
	mMTYPE_AS_SEG
,

86 
	mMTYPE_AS_SEG_DATA
,

87 
	mMTYPE_AS_STR
,

88 
	mMTYPE_BGP_TABLE
,

89 
	mMTYPE_BGP_NODE
,

90 
	mMTYPE_BGP_ROUTE
,

91 
	mMTYPE_BGP_ROUTE_EXTRA
,

92 
	mMTYPE_BGP_CONN
,

93 
	mMTYPE_BGP_STATIC
,

94 
	mMTYPE_BGP_ADVERTISE_ATTR
,

95 
	mMTYPE_BGP_ADVERTISE
,

96 
	mMTYPE_BGP_SYNCHRONISE
,

97 
	mMTYPE_BGP_ADJ_IN
,

98 
	mMTYPE_BGP_ADJ_OUT
,

99 
	mMTYPE_AS_LIST
,

100 
	mMTYPE_AS_FILTER
,

101 
	mMTYPE_AS_FILTER_STR
,

102 
	mMTYPE_COMMUNITY
,

103 
	mMTYPE_COMMUNITY_VAL
,

104 
	mMTYPE_COMMUNITY_STR
,

105 
	mMTYPE_ECOMMUNITY
,

106 
	mMTYPE_ECOMMUNITY_VAL
,

107 
	mMTYPE_ECOMMUNITY_STR
,

108 
	mMTYPE_COMMUNITY_LIST
,

109 
	mMTYPE_COMMUNITY_LIST_NAME
,

110 
	mMTYPE_COMMUNITY_LIST_ENTRY
,

111 
	mMTYPE_COMMUNITY_LIST_CONFIG
,

112 
	mMTYPE_COMMUNITY_LIST_HANDLER
,

113 
	mMTYPE_CLUSTER
,

114 
	mMTYPE_CLUSTER_VAL
,

115 
	mMTYPE_BGP_PROCESS_QUEUE
,

116 
	mMTYPE_BGP_CLEAR_NODE_QUEUE
,

117 
	mMTYPE_TRANSIT
,

118 
	mMTYPE_TRANSIT_VAL
,

119 
	mMTYPE_BGP_DISTANCE
,

120 
	mMTYPE_BGP_NEXTHOP_CACHE
,

121 
	mMTYPE_BGP_CONFED_LIST
,

122 
	mMTYPE_PEER_UPDATE_SOURCE
,

123 
	mMTYPE_BGP_DAMP_INFO
,

124 
	mMTYPE_BGP_DAMP_ARRAY
,

125 
	mMTYPE_BGP_REGEXP
,

126 
	mMTYPE_BGP_AGGREGATE
,

127 
	mMTYPE_RIP
,

128 
	mMTYPE_RIP_INFO
,

129 
	mMTYPE_RIP_INTERFACE
,

130 
	mMTYPE_RIP_PEER
,

131 
	mMTYPE_RIP_OFFSET_LIST
,

132 
	mMTYPE_RIP_DISTANCE
,

133 
	mMTYPE_RIPNG
,

134 
	mMTYPE_RIPNG_ROUTE
,

135 
	mMTYPE_RIPNG_AGGREGATE
,

136 
	mMTYPE_RIPNG_PEER
,

137 
	mMTYPE_RIPNG_OFFSET_LIST
,

138 
	mMTYPE_RIPNG_RTE_DATA
,

139 
	mMTYPE_OSPF_TOP
,

140 
	mMTYPE_OSPF_AREA
,

141 
	mMTYPE_OSPF_AREA_RANGE
,

142 
	mMTYPE_OSPF_NETWORK
,

143 
	mMTYPE_OSPF_NEIGHBOR_STATIC
,

144 
	mMTYPE_OSPF_IF
,

145 
	mMTYPE_OSPF_NEIGHBOR
,

146 
	mMTYPE_OSPF_ROUTE
,

147 
	mMTYPE_OSPF_TMP
,

148 
	mMTYPE_OSPF_LSA
,

149 
	mMTYPE_OSPF_LSA_DATA
,

150 
	mMTYPE_OSPF_LSDB
,

151 
	mMTYPE_OSPF_PACKET
,

152 
	mMTYPE_OSPF_FIFO
,

153 
	mMTYPE_OSPF_VERTEX
,

154 
	mMTYPE_OSPF_VERTEX_PARENT
,

155 
	mMTYPE_OSPF_NEXTHOP
,

156 
	mMTYPE_OSPF_PATH
,

157 
	mMTYPE_OSPF_VL_DATA
,

158 
	mMTYPE_OSPF_CRYPT_KEY
,

159 
	mMTYPE_OSPF_EXTERNAL_INFO
,

160 
	mMTYPE_OSPF_DISTANCE
,

161 
	mMTYPE_OSPF_IF_INFO
,

162 
	mMTYPE_OSPF_IF_PARAMS
,

163 
	mMTYPE_OSPF_MESSAGE
,

164 
	mMTYPE_OSPF6_TOP
,

165 
	mMTYPE_OSPF6_AREA
,

166 
	mMTYPE_OSPF6_IF
,

167 
	mMTYPE_OSPF6_NEIGHBOR
,

168 
	mMTYPE_OSPF6_ROUTE
,

169 
	mMTYPE_OSPF6_PREFIX
,

170 
	mMTYPE_OSPF6_MESSAGE
,

171 
	mMTYPE_OSPF6_LSA
,

172 
	mMTYPE_OSPF6_LSA_SUMMARY
,

173 
	mMTYPE_OSPF6_LSDB
,

174 
	mMTYPE_OSPF6_VERTEX
,

175 
	mMTYPE_OSPF6_SPFTREE
,

176 
	mMTYPE_OSPF6_NEXTHOP
,

177 
	mMTYPE_OSPF6_EXTERNAL_INFO
,

178 
	mMTYPE_OSPF6_OTHER
,

179 
	mMTYPE_ISIS
,

180 
	mMTYPE_ISIS_TMP
,

181 
	mMTYPE_ISIS_CIRCUIT
,

182 
	mMTYPE_ISIS_LSP
,

183 
	mMTYPE_ISIS_ADJACENCY
,

184 
	mMTYPE_ISIS_AREA
,

185 
	mMTYPE_ISIS_AREA_ADDR
,

186 
	mMTYPE_ISIS_TLV
,

187 
	mMTYPE_ISIS_DYNHN
,

188 
	mMTYPE_ISIS_SPFTREE
,

189 
	mMTYPE_ISIS_VERTEX
,

190 
	mMTYPE_ISIS_ROUTE_INFO
,

191 
	mMTYPE_ISIS_NEXTHOP
,

192 
	mMTYPE_ISIS_NEXTHOP6
,

193 
	mMTYPE_VTYSH_CONFIG
,

194 
	mMTYPE_VTYSH_CONFIG_LINE
,

195 
	mMTYPE_KULVISOR_CONTEXT
,

196 
	mMTYPE_KULVISOR_GUEST
,

197 
	mMTYPE_KULVISOR_GUEST_NAME
,

198 
	mMTYPE_KULVISOR_GUEST_VCONN_NAME
,

199 
	mMTYPE_KULVISOR_GUEST_SWITCH
,

200 
	mMTYPE_KULVISOR_GUEST_FLOWSPACE
,

201 
	mMTYPE_KULVISOR_SWITCH
,

202 
	mMTYPE_KULVISOR_SWITCH_NAME
,

203 
	mMTYPE_KULVISOR_SWITCH_HOSTNAME
,

204 
	mMTYPE_KULVISOR_XID_TRANS
,

205 
	mMTYPE_KULVISOR_FLOW_MATCH
,

206 
	mMTYPE_KULVISOR_FLOW_MOD
,

207 
	mMTYPE_KULVISOR_FLOW_INSTRUCTION
,

208 
	mMTYPE_KULVISOR_ACTION
,

209 
	mMTYPE_KULVISOR_TOKEN_BUCKET
,

210 
	mMTYPE_KULVISOR_TMP
,

211 
	mMTYPE_MAX
,

214 
mem‹y_li°
 
mem‹y_li°_lib
[];

215 
mem‹y_li°
 
mem‹y_li°_zebø
[];

216 
mem‹y_li°
 
mem‹y_li°_bgp
[];

217 
mem‹y_li°
 
mem‹y_li°_rù
[];

218 
mem‹y_li°
 
mem‹y_li°_rùng
[];

219 
mem‹y_li°
 
mem‹y_li°_o•f
[];

220 
mem‹y_li°
 
mem‹y_li°_o•f6
[];

221 
mem‹y_li°
 
mem‹y_li°_isis
[];

222 
mem‹y_li°
 
mem‹y_li°_vtysh
[];

223 
mem‹y_li°
 
mem‹y_li°_kulvis‹
[];

	@common-libs/3rd-party/quagga-lib/include/network.h

23 #i‚de‡
_ZEBRA_NETWORK_H


24 
	#_ZEBRA_NETWORK_H


	)

29 
ªadn
 (, 
u_ch¨
 *, );

30 
wrôí
 (, c⁄° 
u_ch¨
 *, );

34 
q_£t_n⁄blockög
(
fd
);

37 
	#ERRNO_IO_RETRY
(
EN
) \

38 (((
EN
Ë=
EAGAIN
Ë|| ((ENË=
EWOULDBLOCK
Ë|| ((ENË=
EINTR
))

	)

	@common-libs/3rd-party/quagga-lib/include/plist.h

23 #i‚de‡
_QUAGGA_PLIST_H


24 
	#_QUAGGA_PLIST_H


	)

26 
	#AFI_ORF_PREFIX
 65535

	)

28 
	e¥efix_li°_ty≥


30 
	mPREFIX_DENY
,

31 
	mPREFIX_PERMIT
,

34 
	e¥efix_«me_ty≥


36 
	mPREFIX_TYPE_STRING
,

37 
	mPREFIX_TYPE_NUMBER


40 
	s¥efix_li°


42 *
	m«me
;

43 *
	mdesc
;

45 
¥efix_ma°î
 *
	mma°î
;

47 
¥efix_«me_ty≥
 
	mty≥
;

49 
	mcou¡
;

50 
	møngecou¡
;

52 
¥efix_li°_íåy
 *
	mhód
;

53 
¥efix_li°_íåy
 *
	mèû
;

55 
¥efix_li°
 *
	m√xt
;

56 
¥efix_li°
 *
	m¥ev
;

59 
	s‹f_¥efix


61 
u_öt32_t
 
	m£q
;

62 
u_ch¨
 
	mge
;

63 
u_ch¨
 
	mÀ
;

64 
¥efix
 
	mp
;

68 
¥efix_li°_öô
 ();

69 
¥efix_li°_ª£t
 ();

70 
¥efix_li°_add_hook
 ((*
func
Ë(
¥efix_li°
 *));

71 
	`¥efix_li°_dñëe_hook
 ((*
func
Ë(
¥efix_li°
 *));

73 
¥efix_li°
 *
	`¥efix_li°_lookup
 (
afi_t
, const *);

74 
¥efix_li°_ty≥
 
	`¥efix_li°_≠∂y
 (
¥efix_li°
 *, *);

76 
°ªam
 * 
	`¥efix_bgp_‹f_íåy
 (stream *,

77 
¥efix_li°
 *,

78 
u_ch¨
, u_char, u_char);

79 
	`¥efix_bgp_‹f_£t
 (*, 
afi_t
, 
‹f_¥efix
 *, , );

80 
	`¥efix_bgp_‹f_ªmove_Æl
 (*);

81 
	`¥efix_bgp_show_¥efix_li°
 (
vty
 *, 
afi_t
, *);

	@common-libs/3rd-party/quagga-lib/include/pqueue.h

21 #i‚de‡
_ZEBRA_PQUEUE_H


22 
	#_ZEBRA_PQUEUE_H


	)

24 
	spqueue


26 **
	m¨øy
;

27 
	m¨øy_size
;

28 
	msize
;

30 (*
	mcmp
) (*, *);

31 (*
	mupd©e
Ë(* 
	mnode
, 
	ma˘uÆ_posôi⁄
);

34 
	#PQUEUE_INIT_ARRAYSIZE
 32

	)

36 
pqueue
 *
pqueue_¸óã
 ();

37 
pqueue_dñëe
 (
pqueue
 *
queue
);

39 
pqueue_íqueue
 (*
d©a
, 
pqueue
 *
queue
);

40 *
pqueue_dequeue
 (
pqueue
 *
queue
);

42 
åickÀ_down
 (
ödex
, 
pqueue
 *
queue
);

43 
åickÀ_up
 (
ödex
, 
pqueue
 *
queue
);

	@common-libs/3rd-party/quagga-lib/include/prefix.h

23 #i‚de‡
_ZEBRA_PREFIX_H


24 
	#_ZEBRA_PREFIX_H


	)

26 
	~"sockuni⁄.h
"

38 
	s¥efix


40 
u_ch¨
 
	mÁmûy
;

41 
u_ch¨
 
	m¥efixÀn
;

44 
u_ch¨
 
	m¥efix
;

45 
ö_addr
 
	m¥efix4
;

46 #ifde‡
HAVE_IPV6


47 
ö6_addr
 
	m¥efix6
;

51 
ö_addr
 
	mid
;

52 
ö_addr
 
	madv_rouãr
;

53 } 
	mÕ
;

54 
u_ch¨
 
	mvÆ
[8];

55 } 
u
 
__©åibuã__
 ((
Æig√d
 (8)));

59 
	s¥efix_ùv4


61 
u_ch¨
 
	mÁmûy
;

62 
u_ch¨
 
	m¥efixÀn
;

63 
ö_addr
 
¥efix
 
__©åibuã__
 ((
Æig√d
 (8)));

67 #ifde‡
HAVE_IPV6


68 
	s¥efix_ùv6


70 
u_ch¨
 
	mÁmûy
;

71 
u_ch¨
 
	m¥efixÀn
;

72 
ö6_addr
 
¥efix
 
__©åibuã__
 ((
Æig√d
 (8)));

76 
	s¥efix_ls


78 
u_ch¨
 
	mÁmûy
;

79 
u_ch¨
 
	m¥efixÀn
;

80 
ö_addr
 
id
 
__©åibuã__
 ((
Æig√d
 (8)));

81 
ö_addr
 
	madv_rouãr
;

85 
	s¥efix_rd


87 
u_ch¨
 
	mÁmûy
;

88 
u_ch¨
 
	m¥efixÀn
;

89 
u_ch¨
 
	mvÆ
[8] 
__©åibuã__
 ((
Æig√d
 (8)));

92 #i‚de‡
INET_ADDRSTRLEN


93 
	#INET_ADDRSTRLEN
 16

	)

96 #i‚de‡
INET6_ADDRSTRLEN


97 
	#INET6_ADDRSTRLEN
 46

	)

100 #i‚de‡
INET6_BUFSIZ


101 
	#INET6_BUFSIZ
 51

	)

105 
	#IPV4_MAX_BYTELEN
 4

	)

106 
	#IPV4_MAX_BITLEN
 32

	)

107 
	#IPV4_MAX_PREFIXLEN
 32

	)

108 
	#IPV4_ADDR_CMP
(
D
,
S
Ë
	`memcmp
 ((D), (S), 
IPV4_MAX_BYTELEN
)

	)

109 
	#IPV4_ADDR_SAME
(
D
,
S
Ë(
	`memcmp
 ((D), (S), 
IPV4_MAX_BYTELEN
Ë=0)

	)

110 
	#IPV4_ADDR_COPY
(
D
,
S
Ë
	`mem˝y
 ((D), (S), 
IPV4_MAX_BYTELEN
)

	)

112 
	#IPV4_NET0
(
a
Ë((((
u_öt32_t
Ë◊)Ë& 0xff000000Ë=0x00000000)

	)

113 
	#IPV4_NET127
(
a
Ë((((
u_öt32_t
Ë◊)Ë& 0xff000000Ë=0x7f000000)

	)

114 
	#IPV4_LINKLOCAL
(
a
Ë((((
u_öt32_t
Ë◊)Ë& 0xffff0000Ë=0xa9„0000)

	)

117 
	#IPV6_MAX_BYTELEN
 16

	)

118 
	#IPV6_MAX_BITLEN
 128

	)

119 
	#IPV6_MAX_PREFIXLEN
 128

	)

120 
	#IPV6_ADDR_CMP
(
D
,
S
Ë
	`memcmp
 ((D), (S), 
IPV6_MAX_BYTELEN
)

	)

121 
	#IPV6_ADDR_SAME
(
D
,
S
Ë(
	`memcmp
 ((D), (S), 
IPV6_MAX_BYTELEN
Ë=0)

	)

122 
	#IPV6_ADDR_COPY
(
D
,
S
Ë
	`mem˝y
 ((D), (S), 
IPV6_MAX_BYTELEN
)

	)

125 
	#PSIZE
(
a
Ë((◊Ë+ 7Ë/ (8))

	)

128 
	#PREFIX_FAMILY
(
p
Ë(’)->
Ámûy
)

	)

131 
ölöe
 

132 
	$¥efix_bô
 (c⁄° 
u_ch¨
 *
¥efix
, c⁄° u_ch¨ 
¥efixÀn
)

134 
off£t
 = 
¥efixÀn
 / 8;

135 
shi·
 = 7 - (
¥efixÀn
 % 8);

137  (
¥efix
[
off£t
] >> 
shi·
) & 1;

138 
	}
}

140 
ölöe
 

141 
	$¥efix6_bô
 (c⁄° 
ö6_addr
 *
¥efix
, c⁄° 
u_ch¨
 
¥efixÀn
)

143  
	`¥efix_bô
((c⁄° 
u_ch¨
 *Ë&
¥efix
->
s6_addr
, 
¥efixÀn
);

144 
	}
}

147 
afi2Ámûy
 (
afi_t
);

148 
afi_t
 
Ámûy2afi
 ();

150 
¥efix
 *
¥efix_√w
 ();

151 
¥efix_‰ì
 (
¥efix
 *);

152 c⁄° *
¥efix_Ámûy_°r
 (c⁄° 
¥efix
 *);

153 
¥efix_bÀn
 (c⁄° 
¥efix
 *);

154 
°r2¥efix
 (c⁄° *, 
¥efix
 *);

155 
¥efix2°r
 (c⁄° 
¥efix
 *, *, );

156 
¥efix_m©ch
 (c⁄° 
¥efix
 *, const prefix *);

157 
¥efix_ßme
 (c⁄° 
¥efix
 *, const prefix *);

158 
¥efix_cmp
 (c⁄° 
¥efix
 *, const prefix *);

159 
¥efix_c›y
 (
¥efix
 *
de°
, c⁄° ¥efix *
§c
);

160 
≠∂y_mask
 (
¥efix
 *);

162 
¥efix
 *
sockuni⁄2¥efix
 (c⁄° 
sockuni⁄
 *
de°
,

163 c⁄° 
sockuni⁄
 *
mask
);

164 
¥efix
 *
sockuni⁄2ho°¥efix
 (c⁄° 
sockuni⁄
 *);

166 
¥efix_ùv4
 *
¥efix_ùv4_√w
 ();

167 
¥efix_ùv4_‰ì
 (
¥efix_ùv4
 *);

168 
°r2¥efix_ùv4
 (c⁄° *, 
¥efix_ùv4
 *);

169 
≠∂y_mask_ùv4
 (
¥efix_ùv4
 *);

171 
	#PREFIX_COPY_IPV4
(
DST
, 
SRC
) \

172 *((
¥efix_ùv4
 *)(
DST
)Ë*((c⁄° ¥efix_ùv4 *)(
SRC
));

	)

174 
¥efix_ùv4_™y
 (c⁄° 
¥efix_ùv4
 *);

175 
≠∂y_˛assful_mask_ùv4
 (
¥efix_ùv4
 *);

177 
u_ch¨
 
ù_maskÀn
 (
ö_addr
);

178 
maskÀn2ù
 (, 
ö_addr
 *);

180 
ö_addr_t
 
ùv4_√tw‹k_addr
 (ö_addr_à
ho°addr
, 
maskÀn
);

185 
ö_addr_t
 
ùv4_brﬂdˇ°_addr
 (ö_addr_à
ho°addr
, 
maskÀn
);

187 
√tmask_°r2¥efix_°r
 (const *, const *, *);

189 #ifde‡
HAVE_IPV6


190 
¥efix_ùv6
 *
¥efix_ùv6_√w
 ();

191 
¥efix_ùv6_‰ì
 (
¥efix_ùv6
 *);

192 
°r2¥efix_ùv6
 (c⁄° *, 
¥efix_ùv6
 *);

193 
≠∂y_mask_ùv6
 (
¥efix_ùv6
 *);

195 
	#PREFIX_COPY_IPV6
(
DST
, 
SRC
) \

196 *((
¥efix_ùv6
 *)(
DST
)Ë*((c⁄° ¥efix_ùv6 *)(
SRC
));

	)

198 
ù6_maskÀn
 (
ö6_addr
);

199 
maskÀn2ù6
 (, 
ö6_addr
 *);

201 
°r2ö6_addr
 (c⁄° *, 
ö6_addr
 *);

202 c⁄° *
öë6_¡ﬂ
 (
ö6_addr
);

206 
Æl_digô
 (const *);

	@common-libs/3rd-party/quagga-lib/include/privs.h

24 #i‚de‡
_ZEBRA_PRIVS_H


25 
	#_ZEBRA_PRIVS_H


	)

30 
	mZCAP_SETID
,

31 
	mZCAP_BIND
,

32 
	mZCAP_NET_ADMIN
,

33 
	mZCAP_SYS_ADMIN
,

34 
	mZCAP_NET_RAW
,

35 
	mZCAP_CHROOT
,

36 
	mZCAP_NICE
,

37 
	mZCAP_PTRACE
,

38 
	mZCAP_DAC_OVERRIDE
,

39 
	mZCAP_READ_SEARCH
,

40 
	mZCAP_FOWNER
,

41 
	mZCAP_MAX


42 } 
	tzebø_ˇ∑bûôõs_t
;

46 
	mZPRIVS_LOWERED
,

47 
	mZPRIVS_RAISED
,

48 
	mZPRIVS_UNKNOWN
,

49 } 
	tzebø_¥ivs_cuºít_t
;

53 
	mZPRIVS_RAISE
,

54 
	mZPRIVS_LOWER
,

55 } 
	tzebø_¥ivs_›s_t
;

57 
	szebø_¥ivs_t


59 
zebø_ˇ∑bûôõs_t
 *
	mˇps_p
;

60 
zebø_ˇ∑bûôõs_t
 *
	mˇps_i
;

61 
	mˇp_num_p
;

62 
	mˇp_num_i
;

63 c⁄° *
	mu£r
;

64 c⁄° *
	mgroup
;

65 c⁄° *
	mvty_group
;

68 (*
	mch™ge
Ë(
	mzebø_¥ivs_›s_t
);

69 
	mzebø_¥ivs_cuºít_t


70 (*
	mcuºít_°©e
) ();

73 
	sz¥ivs_ids_t


76 
uid_t
 
	muid_¥iv
;

77 
uid_t
 
	muid_n‹mÆ
;

78 
gid_t
 
	mgid_¥iv
;

79 
gid_t
 
	mgid_n‹mÆ
;

80 
gid_t
 
	mgid_vty
;

84 
z¥ivs_öô
 (
zebø_¥ivs_t
 *
z¥ivs
);

86 
z¥ivs_ãrmö©e
 (
zebø_¥ivs_t
 *);

88 
z¥ivs_gë_ids
(
z¥ivs_ids_t
 *);

	@common-libs/3rd-party/quagga-lib/include/regex-gnu.h

23 #i‚de‡
_REGEX_H


24 
	#_REGEX_H
 1

	)

27 #ifde‡
__˝lu•lus


34 #i‡!
deföed
 
_POSIX_C_SOURCE
 && !deföed 
_POSIX_SOURCE
 && deföed 
VMS


37 
	~<°ddef.h
>

44 
	ts_ªg_t
;

45 
	ta˘ive_ªg_t
;

52 
	tªg_sy¡ax_t
;

56 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

61 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

67 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

81 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

89 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

93 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

97 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

101 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

105 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

110 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

114 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

118 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

123 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

127 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

131 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

135 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

141 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

145 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

149 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

153 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

161 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

167 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

173 
	#RE_SYNTAX_EMACS
 0

	)

175 
	#RE_SYNTAX_AWK
 \

176 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

177 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

178 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

179 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

180 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

182 
	#RE_SYNTAX_GNU_AWK
 \

183 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DEBUG
) \

184 & ~(
RE_DOT_NOT_NULL
 | 
RE_INTERVALS
 | 
RE_CONTEXT_INDEP_OPS
))

	)

186 
	#RE_SYNTAX_POSIX_AWK
 \

187 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

188 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
)

	)

190 
	#RE_SYNTAX_GREP
 \

191 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

192 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

193 | 
RE_NEWLINE_ALT
)

	)

195 
	#RE_SYNTAX_EGREP
 \

196 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

197 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

198 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

199 | 
RE_NO_BK_VBAR
)

	)

201 
	#RE_SYNTAX_POSIX_EGREP
 \

202 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
)

	)

205 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

207 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

210 
	#_RE_SYNTAX_POSIX_COMMON
 \

211 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

212 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

214 
	#RE_SYNTAX_POSIX_BASIC
 \

215 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

220 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

221 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

223 
	#RE_SYNTAX_POSIX_EXTENDED
 \

224 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

225 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

226 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

227 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

231 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

232 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

233 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

234 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

235 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

241 #ifde‡
RE_DUP_MAX


242 #unde‡
RE_DUP_MAX


245 
	#RE_DUP_MAX
 (0x7fff)

	)

252 
	#REG_EXTENDED
 1

	)

256 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

261 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

265 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

275 
	#REG_NOTBOL
 1

	)

278 
	#REG_NOTEOL
 (1 << 1)

	)

285 #ifde‡
_XOPEN_SOURCE


286 
	gREG_ENOSYS
 = -1,

289 
	gREG_NOERROR
 = 0,

290 
	gREG_NOMATCH
,

294 
	gREG_BADPAT
,

295 
	gREG_ECOLLATE
,

296 
	gREG_ECTYPE
,

297 
	gREG_EESCAPE
,

298 
	gREG_ESUBREG
,

299 
	gREG_EBRACK
,

300 
	gREG_EPAREN
,

301 
	gREG_EBRACE
,

302 
	gREG_BADBR
,

303 
	gREG_ERANGE
,

304 
	gREG_ESPACE
,

305 
	gREG_BADRPT
,

308 
	gREG_EEND
,

309 
	gREG_ESIZE
,

310 
	gREG_ERPAREN


311 } 
	tªg_îrcode_t
;

319 #i‚de‡
RE_TRANSLATE_TYPE


320 
	#RE_TRANSLATE_TYPE
 *

	)

323 
	sª_∑âîn_buf„r


329 *
	gbuf„r
;

332 
	gÆloˇãd
;

335 
	gu£d
;

338 
ªg_sy¡ax_t
 
	gsy¡ax
;

343 *
	gÁ°m≠
;

349 
RE_TRANSLATE_TYPE
 
	gå™¶©e
;

352 
size_t
 
	gª_nsub
;

359 
	gˇn_be_nuŒ
 : 1;

365 
	#REGS_UNALLOCATED
 0

	)

366 
	#REGS_REALLOCATE
 1

	)

367 
	#REGS_FIXED
 2

	)

368 
	gªgs_Æloˇãd
 : 2;

372 
	gÁ°m≠_accuøã
 : 1;

376 
	gno_sub
 : 1;

380 
	gnŸ_bﬁ
 : 1;

383 
	gnŸ_eﬁ
 : 1;

386 
	g√wlöe_™ch‹
 : 1;

391 
ª_∑âîn_buf„r
 
	tªgex_t
;

394 
	tªgoff_t
;

399 
	sª_ªgi°îs


401 
	gnum_ªgs
;

402 
ªgoff_t
 *
	g°¨t
;

403 
ªgoff_t
 *
	gíd
;

410 #i‚de‡
RE_NREGS


411 
	#RE_NREGS
 30

	)

420 
ªgoff_t
 
	grm_so
;

421 
ªgoff_t
 
	grm_eo
;

422 } 
	tªgm©ch_t
;

432 #i‡
__STDC__


434 
	#_RE_ARGS
(
¨gs
Ë
	)
args

438 
	#_RE_ARGS
(
¨gs
Ë()

	)

444 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 
_RE_ARGS
 (‘eg_sy¡ax_à
sy¡ax
));

449 c⁄° *
ª_compûe_∑âîn


450 
_RE_ARGS
 ((c⁄° *
∑âîn
, 
size_t
 
Àngth
,

451 
ª_∑âîn_buf„r
 *
buf„r
));

457 
ª_compûe_Á°m≠
 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
));

465 
ª_£¨ch


466 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
, c⁄° *
°rög
,

467 
Àngth
, 
°¨t
, 
ønge
, 
ª_ªgi°îs
 *
ªgs
));

472 
ª_£¨ch_2


473 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
, c⁄° *
°rög1
,

474 
Àngth1
, c⁄° *
°rög2
, 
Àngth2
,

475 
°¨t
, 
ønge
, 
ª_ªgi°îs
 *
ªgs
, 
°›
));

480 
ª_m©ch


481 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
, c⁄° *
°rög
,

482 
Àngth
, 
°¨t
, 
ª_ªgi°îs
 *
ªgs
));

486 
ª_m©ch_2


487 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
, c⁄° *
°rög1
,

488 
Àngth1
, c⁄° *
°rög2
, 
Àngth2
,

489 
°¨t
, 
ª_ªgi°îs
 *
ªgs
, 
°›
));

504 
ª_£t_ªgi°îs


505 
_RE_ARGS
 ((
ª_∑âîn_buf„r
 *
buf„r
, 
ª_ªgi°îs
 *
ªgs
,

506 
num_ªgs
, 
ªgoff_t
 *
°¨ts
,Ñegoff_à*
íds
));

508 #i‡
deföed
 
_REGEX_RE_COMP
 || deföed 
_LIBC


509 #i‚de‡
_CRAY


511 *
ª_comp
 
_RE_ARGS
 ((const *));

512 
ª_exec
 
_RE_ARGS
 ((const *));

517 
ªgcomp
 
_RE_ARGS
 ((
ªgex_t
 *
__¥eg
, c⁄° *
__∑âîn
,

518 
__cÊags
));

520 
ªgexec
 
_RE_ARGS
 ((c⁄° 
ªgex_t
 *
__¥eg
,

521 c⁄° *
__°rög
, 
size_t
 
__nm©ch
,

522 
ªgm©ch_t
 
__pm©ch
[], 
__eÊags
));

524 
size_t
 
ªgîr‹
 
_RE_ARGS
 ((
__îrcode
, c⁄° 
ªgex_t
 *
__¥eg
,

525 *
__îrbuf
, 
size_t
 
__îrbuf_size
));

527 
ªg‰ì
 
_RE_ARGS
 ((
ªgex_t
 *
__¥eg
));

530 #ifde‡
__˝lu•lus


	@common-libs/3rd-party/quagga-lib/include/route_types.h

4 #i‚de‡
_QUAGGA_ROUTE_TYPES_H


5 
	#_QUAGGA_ROUTE_TYPES_H


	)

8 
	#QUAGGA_REDIST_STR_ZEBRA
 \

9 "‘ù|rùng|o•f|o•f6|isis|bgp)"

	)

10 
	#QUAGGA_REDIST_HELP_STR_ZEBRA
 \

16 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

19 
	#QUAGGA_REDIST_STR_RIPD
 \

20 "(kî√l|c⁄√˘ed|°©ic|o•f|isis|bgp)"

	)

21 
	#QUAGGA_REDIST_HELP_STR_RIPD
 \

27 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

30 
	#QUAGGA_REDIST_STR_RIPNGD
 \

31 "(kî√l|c⁄√˘ed|°©ic|o•f6|isis|bgp)"

	)

32 
	#QUAGGA_REDIST_HELP_STR_RIPNGD
 \

38 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

41 
	#QUAGGA_REDIST_STR_OSPFD
 \

42 "(kî√l|c⁄√˘ed|°©ic|rù|isis|bgp)"

	)

43 
	#QUAGGA_REDIST_HELP_STR_OSPFD
 \

49 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

52 
	#QUAGGA_REDIST_STR_OSPF6D
 \

53 "(kî√l|c⁄√˘ed|°©ic|rùng|isis|bgp)"

	)

54 
	#QUAGGA_REDIST_HELP_STR_OSPF6D
 \

60 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

63 
	#QUAGGA_REDIST_STR_ISISD
 \

64 "(kî√l|c⁄√˘ed|°©ic|rù|rùng|o•f|o•f6|bgp)"

	)

65 
	#QUAGGA_REDIST_HELP_STR_ISISD
 \

73 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

76 
	#QUAGGA_REDIST_STR_BGPD
 \

77 "(kî√l|c⁄√˘ed|°©ic|rù|rùng|o•f|o•f6|isis)"

	)

78 
	#QUAGGA_REDIST_HELP_STR_BGPD
 \

86 "I¡îmedüã Sy°emÅÿI¡îmedüã Sy°em (IS-IS)\n"

	)

	@common-libs/3rd-party/quagga-lib/include/routemap.h

22 #i‚de‡
_ZEBRA_ROUTEMAP_H


23 
	#_ZEBRA_ROUTEMAP_H


	)

26 
	erouã_m≠_ty≥


28 
	mRMAP_PERMIT
,

29 
	mRMAP_DENY
,

30 
	mRMAP_ANY


35 
	mRMAP_MATCH
,

36 
	mRMAP_DENYMATCH
,

37 
	mRMAP_NOMATCH
,

38 
	mRMAP_ERROR
,

39 
	mRMAP_OKAY


40 } 
	trouã_m≠_ªsu…_t
;

44 
	mRMAP_RIP
,

45 
	mRMAP_RIPNG
,

46 
	mRMAP_OSPF
,

47 
	mRMAP_OSPF6
,

48 
	mRMAP_BGP
,

49 
	mRMAP_ZEBRA


50 } 
	trouã_m≠_obje˘_t
;

54 
	mRMAP_EXIT
,

55 
	mRMAP_GOTO
,

56 
	mRMAP_NEXT


57 } 
	trouã_m≠_íd_t
;

61 
	mRMAP_EVENT_SET_ADDED
,

62 
	mRMAP_EVENT_SET_DELETED
,

63 
	mRMAP_EVENT_SET_REPLACED
,

64 
	mRMAP_EVENT_MATCH_ADDED
,

65 
	mRMAP_EVENT_MATCH_DELETED
,

66 
	mRMAP_EVENT_MATCH_REPLACED
,

67 
	mRMAP_EVENT_INDEX_ADDED
,

68 
	mRMAP_EVENT_INDEX_DELETED


69 } 
	trouã_m≠_evít_t
;

72 
	#RMAP_RECURSION_LIMIT
 10

	)

75 
	srouã_m≠_ruÀ_cmd


78 c⁄° *
	m°r
;

81 
rouã_m≠_ªsu…_t
 (*
func_≠∂y
)(*, 
	m¥efix
 *,

82 
	mrouã_m≠_obje˘_t
, *);

85 *(*
	mfunc_compûe
)(const *);

88 (*
	mfunc_‰ì
)(*);

95 
	mRMAP_RULE_MISSING
 = 1,

98 
	mRMAP_COMPILE_ERROR


102 
	srouã_m≠_ruÀ_li°


104 
rouã_m≠_ruÀ
 *
	mhód
;

105 
rouã_m≠_ruÀ
 *
	mèû
;

109 
	srouã_m≠_ödex


111 
rouã_m≠
 *
	mm≠
;

112 *
	mdes¸ùti⁄
;

115 
	m¥ef
;

118 
rouã_m≠_ty≥
 
	mty≥
;

121 
rouã_m≠_íd_t
 
	mexôpﬁicy
;

124 
	m√xçªf
;

127 *
	m√xåm
;

130 
rouã_m≠_ruÀ_li°
 
	mm©ch_li°
;

131 
rouã_m≠_ruÀ_li°
 
	m£t_li°
;

134 
rouã_m≠_ödex
 *
	m√xt
;

135 
rouã_m≠_ödex
 *
	m¥ev
;

139 
	srouã_m≠


142 *
	m«me
;

145 
rouã_m≠_ödex
 *
	mhód
;

146 
rouã_m≠_ödex
 *
	mèû
;

149 
rouã_m≠
 *
	m√xt
;

150 
rouã_m≠
 *
	m¥ev
;

154 
rouã_m≠_öô
 ();

155 
rouã_m≠_öô_vty
 ();

156 
rouã_m≠_föish
 ();

159 
rouã_m≠_add_m©ch
 (
rouã_m≠_ödex
 *
ödex
,

160 c⁄° *
m©ch_«me
,

161 c⁄° *
m©ch_¨g
);

164 
rouã_m≠_dñëe_m©ch
 (
rouã_m≠_ödex
 *
ödex
,

165 c⁄° *
m©ch_«me
,

166 c⁄° *
m©ch_¨g
);

169 
rouã_m≠_add_£t
 (
rouã_m≠_ödex
 *
ödex
,

170 c⁄° *
£t_«me
,

171 c⁄° *
£t_¨g
);

174 
rouã_m≠_dñëe_£t
 (
rouã_m≠_ödex
 *
ödex
,

175 c⁄° *
£t_«me
,

176 c⁄° *
£t_¨g
);

179 
rouã_m≠_ö°Æl_m©ch
 (
rouã_m≠_ruÀ_cmd
 *
cmd
);

182 
rouã_m≠_ö°Æl_£t
 (
rouã_m≠_ruÀ_cmd
 *
cmd
);

185 
rouã_m≠
 * 
rouã_m≠_lookup_by_«me
 (c⁄° *
«me
);

188 
rouã_m≠_ªsu…_t
 
rouã_m≠_≠∂y
 (
rouã_m≠
 *
m≠
,

189 
¥efix
 *,

190 
rouã_m≠_obje˘_t
 
obje˘_ty≥
,

191 *
obje˘
);

193 
rouã_m≠_add_hook
 ((*
func
) (const *));

194 
	`rouã_m≠_dñëe_hook
 ((*
func
) (const *));

195 
	`rouã_m≠_evít_hook
 ((*
func
Ë(
rouã_m≠_evít_t
, const *));

	@common-libs/3rd-party/quagga-lib/include/sigevent.h

24 #i‚de‡
_QUAGGA_SIGNAL_H


25 
	#_QUAGGA_SIGNAL_H


	)

27 
	~<thªad.h
>

29 
	#QUAGGA_SIGNAL_TIMER_INTERVAL
 2L

	)

30 
	#Q_SIGC
(
sig
Ë((sig)/(sig[0]))

	)

32 
	squagga_sig«l_t


34 
	msig«l
;

35 (*
	mh™dÀr
) ();

37 vﬁ©ûê
sig_©omic_t
 
	mˇught
;

47 
q_sig«l_öô
 (
thªad_ma°î
 *
m
, 
sigc
,

48 
quagga_sig«l_t
 *
sig«ls
);

51 
quagga_sigevít_¥o˚ss
 ();

	@common-libs/3rd-party/quagga-lib/include/smux.h

22 #i‚de‡
_ZEBRA_SNMP_H


23 
	#_ZEBRA_SNMP_H


	)

25 
	#SMUX_PORT_DEFAULT
 199

	)

27 
	#SMUXMAXPKTSIZE
 1500

	)

28 
	#SMUXMAXSTRLEN
 256

	)

30 
	#SMUX_OPEN
 (
ASN_APPLICATION
 | 
ASN_CONSTRUCTOR
 | 0)

	)

31 
	#SMUX_CLOSE
 (
ASN_APPLICATION
 | 
ASN_PRIMITIVE
 | 1)

	)

32 
	#SMUX_RREQ
 (
ASN_APPLICATION
 | 
ASN_CONSTRUCTOR
 | 2)

	)

33 
	#SMUX_RRSP
 (
ASN_APPLICATION
 | 
ASN_PRIMITIVE
 | 3)

	)

34 
	#SMUX_SOUT
 (
ASN_APPLICATION
 | 
ASN_PRIMITIVE
 | 4)

	)

36 
	#SMUX_GET
 (
ASN_CONTEXT
 | 
ASN_CONSTRUCTOR
 | 0)

	)

37 
	#SMUX_GETNEXT
 (
ASN_CONTEXT
 | 
ASN_CONSTRUCTOR
 | 1)

	)

38 
	#SMUX_GETRSP
 (
ASN_CONTEXT
 | 
ASN_CONSTRUCTOR
 | 2)

	)

39 
	#SMUX_SET
 (
ASN_CONTEXT
 | 
ASN_CONSTRUCTOR
 | 3)

	)

40 
	#SMUX_TRAP
 (
ASN_CONTEXT
 | 
ASN_CONSTRUCTOR
 | 4)

	)

42 
	#SMUX_MAX_FAILURE
 3

	)

45 
	#MATCH_FAILED
 (-1)

	)

46 
	#MATCH_SUCCEEDED
 0

	)

49 
	#SNMP_TRUE
 1

	)

50 
	#SNMP_FALSE
 2

	)

53 
	#SNMP_VALID
 1

	)

54 
	#SNMP_INVALID
 2

	)

56 
	#IN_ADDR_SIZE
 (
ö_addr
)

	)

58 
	gv¨übÀ
;

60 
	#REGISTER_MIB
(
des¸
, 
v¨
, 
v¨ty≥
, 
theoid
) \

61 
	`smux_ªgi°î_mib
(
des¸
, (
v¨übÀ
 *)
v¨
, (
v¨ty≥
), \

62 (
v¨
)/(
v¨ty≥
), \

63 
theoid
, —heoid)/(
oid
))

	)

65 (
	tWrôeMëhod
)(
	ta˘i⁄
,

66 
	tu_ch¨
 *
	tv¨_vÆ
,

67 
	tu_ch¨
 
	tv¨_vÆ_ty≥
,

68 
	tsize_t
 
	tv¨_vÆ_Àn
,

69 
	tu_ch¨
 *
	t°©P
,

70 
	toid
 *
	t«me
,

71 
	tsize_t
 
	tÀngth
,

72 
	tv¨übÀ
 *
	tv
);

74 
u_ch¨
 *(
	tFödV¨Mëhod
)(
	tv¨übÀ
 *
	tv
,

75 
	toid
 *
	t«me
,

76 
	tsize_t
 *
	tÀngth
,

77 
	texa˘
,

78 
	tsize_t
 *
	tv¨_Àn
,

79 
	tWrôeMëhod
 **
	twrôe_mëhod
);

82 
	sv¨übÀ


85 
u_ch¨
 
magic
;

88 
ty≥
;

91 
u_sh‹t
 
a˛
;

94 
FödV¨Mëhod
 *
födV¨
;

97 
«mñí
;

98 
oid
 
«me
[
MAX_OID_LEN
];

102 
	ssubåì


105 
oid
 
«me
[
MAX_OID_LEN
];

106 
u_ch¨
 
«me_Àn
;

109 
v¨übÀ
 *
v¨übÀs
;

112 
v¨übÀs_num
;

115 
v¨übÀs_width
;

118 
ªgi°îed
;

121 
	så≠_obje˘


123 
FödV¨Mëhod
 *
födV¨
;

124 
«mñí
;

125 
oid
 
«me
[
MAX_OID_LEN
];

129 
	#SNMP_LOCAL_VARIABLES
 \

130 
¢mp_öt_vÆ
; \

131 
ö_addr
 
¢mp_ö_addr_vÆ
;

	)

133 
	#SNMP_INTEGER
(
V
) \

135 *
v¨_Àn
 =  (
¢mp_öt_vÆ
), \

136 
¢mp_öt_vÆ
 = 
V
, \

137 (
u_ch¨
 *Ë&
¢mp_öt_vÆ
 \

138 )

	)

140 
	#SNMP_IPADDRESS
(
V
) \

142 *
v¨_Àn
 =  (
ö_addr
), \

143 
¢mp_ö_addr_vÆ
 = 
V
, \

144 (
u_ch¨
 *Ë&
¢mp_ö_addr_vÆ
 \

145 )

	)

147 
	`smux_öô
 (
thªad_ma°î
 *
tm
);

148 
	`smux_°¨t
 ();

149 
	`smux_ªgi°î_mib
(c⁄° *, 
v¨übÀ
 *,

150 
size_t
, , 
oid
 [], size_t);

151 
	`smux_hódî_gíîic
 (
v¨übÀ
 *, 
oid
 [], 
size_t
 *,

152 , 
size_t
 *, 
WrôeMëhod
 **);

153 
	`smux_å≠
 (c⁄° 
oid
 *, 
size_t
, const oid *, size_t,

154 c⁄° 
å≠_obje˘
 *,

155 
size_t
, , 
u_ch¨
);

156 
	`oid_com∑ª
 (
oid
 *, , oid *, );

157 
	`oid2ö_addr
 (
oid
 [], , 
ö_addr
 *);

158 *
	`oid_c›y
 (*, c⁄° *, 
size_t
);

159 
	`oid_c›y_addr
 (
oid
 [], 
ö_addr
 *, );

	@common-libs/3rd-party/quagga-lib/include/sockopt.h

22 #i‚de‡
_ZEBRA_SOCKOPT_H


23 
	#_ZEBRA_SOCKOPT_H


	)

25 
	~"sockuni⁄.h
"

27 
£tsock›t_so_ªcvbuf
 (
sock
, 
size
);

28 
£tsock›t_so_£ndbuf
 (c⁄° 
sock
, 
size
);

29 
gësock›t_so_£ndbuf
 (c⁄° 
sock
);

31 #ifde‡
HAVE_IPV6


32 
£tsock›t_ùv6_pktöfo
 (, );

33 
£tsock›t_ùv6_checksum
 (, );

34 
£tsock›t_ùv6_mu…iˇ°_h›s
 (, );

35 
£tsock›t_ùv6_uniˇ°_h›s
 (, );

36 
£tsock›t_ùv6_h›limô
 (, );

37 
£tsock›t_ùv6_mu…iˇ°_lo›
 (, );

45 
	#SOPT_SIZE_CMSG_PKTINFO_IPV6
(Ë( (
ö6_pktöfo
));

	)

53 #i‡
deföed
 (
IP_PKTINFO
)

55 
	#SOPT_SIZE_CMSG_PKTINFO_IPV4
(Ë(
	`CMSG_SPACE
( (
ö_pktöfo
)))

	)

57 
	#SOPT_SIZE_CMSG_PKTINFO
(
af
) \

58 ((
af
 =
AF_INET
Ë? 
	`SOPT_SIZE_CMSG_PKTINFO_IPV4
() \

59 : 
	`SOPT_SIZE_CMSG_PKTINFO_IPV6
()

	)

62 #i‡
deföed
 (
IP_RECVIF
)

65 #i‡
deföed
 (
SUNOS_5
)

66 
	#SOPT_SIZE_CMSG_RECVIF_IPV4
(Ë( (
uöt_t
))

	)

68 
	#SOPT_SIZE_CMSG_RECVIF_IPV4
(Ë( (
sockaddr_dl
))

	)

73 #i‡
deföed
 (
SOPT_SIZE_CMSG_PKTINFO
)

74 
	#SOPT_SIZE_CMSG_IFINDEX_IPV4
(Ë
	`SOPT_SIZE_CMSG_PKTINFO_IPV4
()

	)

75 #ñi‡
deföed
 (
SOPT_SIZE_CMSG_RECVIF_IPV4
)

76 
	#SOPT_SIZE_CMSG_IFINDEX_IPV4
(Ë
	`SOPT_SIZE_CMSG_RECVIF_IPV4
()

	)

78 
	#SOPT_SIZE_CMSG_IFINDEX_IPV4
(Ë( (*))

	)

81 
	#SOPT_SIZE_CMSG_IFINDEX
(
af
) \

82 (((
af
Ë=
AF_INET
Ë: 
	`SOPT_SIZE_CMSG_IFINDEX_IPV4
() \

83 ? 
	`SOPT_SIZE_CMSG_PKTINFO_IPV6
())

	)

85 
£tsock›t_ùv4_mu…iˇ°_if
(
sock
,

86 
ifödex
);

87 
£tsock›t_ùv4_mu…iˇ°
(
sock
, 
›äame
,

88 
mˇ°_addr
,

89 
ifödex
);

90 
£tsock›t_ùv4_tos
(
sock
, 
tos
);

93 
£tsock›t_ifödex
 (, , );

94 
gësock›t_ifödex
 (, 
msghdr
 *);

99 
sock›t_ùhdrö˛_swab_htosys
 (
ù
 *
ùh
);

100 
sock›t_ùhdrö˛_swab_sy°oh
 (
ù
 *
ùh
);

102 
sock›t_t˝_sig«tuª
(
sock
, 
sockuni⁄
 *
su
,

103 c⁄° *
∑ssw‹d
);

	@common-libs/3rd-party/quagga-lib/include/sockunion.h

23 #i‚de‡
_ZEBRA_SOCKUNION_H


24 
	#_ZEBRA_SOCKUNION_H


	)

27 
	usockuni⁄
 {

28 
	ssocköë
 {

29 
u_ch¨
 
	msi_Àn
;

30 
u_ch¨
 
	msi_Ámûy
;

31 
u_sh‹t
 
	msi_p‹t
;

32 } 
	msu_si
;

33 
sockaddr_ö
 
	msu_sö
;

34 
sockaddr_ö6
 
	msu_sö6
;

36 
	#su_Àn
 
su_si
.
si_Àn


	)

37 
	#su_Ámûy
 
su_si
.
si_Ámûy


	)

38 
	#su_p‹t
 
su_si
.
si_p‹t


	)

41 
	usockuni⁄


43 
sockaddr
 
	mß
;

44 
sockaddr_ö
 
	msö
;

45 #ifde‡
HAVE_IPV6


46 
sockaddr_ö6
 
	msö6
;

50 
	ec⁄√˘_ªsu…


52 
	mc⁄√˘_îr‹
,

53 
	mc⁄√˘_suc˚ss
,

54 
	mc⁄√˘_ö_¥ogªss


58 #ifde‡
HAVE_IPV6


59 
	#AF_INET_UNION
 
AF_INET6


	)

61 
	#AF_INET_UNION
 
AF_INET


	)

65 
	#SU_ADDRSTRLEN
 46

	)

69 #ifde‡
KAME


70 
	#IN6_LINKLOCAL_IFINDEX
(
a
Ë(◊).
s6_addr
[2] << 8 | (a).s6_addr[3])

	)

71 
	#SET_IN6_LINKLOCAL_IFINDEX
(
a
, 
i
) \

73 (
a
).
s6_addr
[2] = ((
i
) >> 8) & 0xff; \

74 (
a
).
s6_addr
[3] = (
i
) & 0xff; \

75 } 0)

	)

77 
	#IN6_LINKLOCAL_IFINDEX
(
a
)

	)

78 
	#SET_IN6_LINKLOCAL_IFINDEX
(
a
, 
i
)

	)

82 
	#sock2ù
(
X
Ë(((
sockaddr_ö
 *)(X))->
sö_addr
.
s_addr
)

	)

83 #ifde‡
HAVE_IPV6


84 
	#sock2ù6
(
X
Ë(((
sockaddr_ö6
 *)(X))->
sö6_addr
.
s6_addr
)

	)

87 
	#sockuni⁄_Ámûy
(
X
Ë(X)->
ß
.
ß_Ámûy


	)

90 
°r2sockuni⁄
 (c⁄° *, 
sockuni⁄
 *);

91 c⁄° *
sockuni⁄2°r
 (
sockuni⁄
 *, *, 
size_t
);

92 
sockuni⁄_cmp
 (
sockuni⁄
 *, sockunion *);

93 
sockuni⁄_ßme
 (
sockuni⁄
 *, sockunion *);

95 *
sockuni⁄_su2°r
 (
sockuni⁄
 *
su
);

96 
sockuni⁄
 *
sockuni⁄_°r2su
 (c⁄° *
°r
);

97 
ö_addr
 
sockuni⁄_gë_ö_addr
 (
sockuni⁄
 *
su
);

98 
sockuni⁄_ac˚±
 (
sock
, 
sockuni⁄
 *);

99 
sockuni⁄_°ªam_sockë
 (
sockuni⁄
 *);

100 
sock›t_ªu£addr
 ();

101 
sock›t_ªu£p‹t
 ();

102 
sockuni⁄_böd
 (
sock
, 
sockuni⁄
 *,

103 , 
sockuni⁄
 *);

104 
sock›t_âl
 (
Ámûy
, 
sock
, 
âl
);

105 
sock›t_möâl
 (
Ámûy
, 
sock
, 
möâl
);

106 
sock›t_c‹k
 (
sock
, 
⁄off
);

107 
sockuni⁄_sockë
 (
sockuni⁄
 *
su
);

108 c⁄° *
öë_sut›
 (
sockuni⁄
 *
su
, *
°r
);

109 
c⁄√˘_ªsu…
 
sockuni⁄_c⁄√˘
 (
fd
, 
sockuni⁄
 *
su
,

110 
p‹t
,

112 
sockuni⁄
 *
sockuni⁄_gësock«me
 ();

113 
sockuni⁄
 *
sockuni⁄_gë≥î«me
 ();

114 
sockuni⁄
 *
sockuni⁄_dup
 (sockunion *);

115 
sockuni⁄_‰ì
 (
sockuni⁄
 *);

117 #i‚de‡
HAVE_INET_NTOP


118 c⁄° * 
öë_¡›
 (
Ámûy
, c⁄° *
addΩå
,

119 *
°Ωå
, 
size_t
 
Àn
);

122 #i‚de‡
HAVE_INET_PTON


123 
öë_±⁄
 (
Ámûy
, c⁄° *
°Ωå
, *
addΩå
);

126 #i‚de‡
HAVE_INET_ATON


127 
öë_©⁄
 (c⁄° *
˝
, 
ö_addr
 *
öaddr
);

	@common-libs/3rd-party/quagga-lib/include/str.h

5 #i‚de‡
_ZEBRA_STR_H


6 
	#_ZEBRA_STR_H


	)

8 #i‚de‡
HAVE_SNPRINTF


9 
¢¥ötf
(*, 
size_t
, const *, ...);

12 #i‚de‡
HAVE_VSNPRINTF


13 
	#v¢¥ötf
(
buf
, 
size
, 
f‹m©
, 
¨gs
Ë
	`v•rötf
(buf, f‹m©,árgs)

	)

16 #i‚de‡
HAVE_STRLCPY


17 
size_t
 
°æ˝y
(*, const *, size_t);

20 #i‚de‡
HAVE_STRLCAT


21 
size_t
 
°æˇt
(*, const *, size_t);

24 #i‚de‡
HAVE_STRNLEN


25 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
maxÀn
);

28 #i‚de‡
HAVE_STRNDUP


29 * 
°∫dup
 (c⁄° *, 
size_t
);

	@common-libs/3rd-party/quagga-lib/include/stream.h

23 #i‚de‡
_ZEBRA_STREAM_H


24 
	#_ZEBRA_STREAM_H


	)

26 
	~"¥efix.h
"

95 
	s°ªam


97 
°ªam
 *
	m√xt
;

103 
size_t
 
	mgëp
;

104 
size_t
 
	mídp
;

105 
size_t
 
	msize
;

106 *
	md©a
;

110 
	s°ªam_fifo


112 
size_t
 
	mcou¡
;

114 
°ªam
 *
	mhód
;

115 
°ªam
 *
	mèû
;

119 
	#STREAM_SIZE
(
S
Ë((S)->
size
)

	)

121 
	#STREAM_WRITEABLE
(
S
Ë((S)->
size
 - (S)->
ídp
)

	)

123 
	#STREAM_READABLE
(
S
Ë((S)->
ídp
 - (S)->
gëp
)

	)

126 
	#STREAM_PNT
(
S
Ë
	`°ªam_≤t
((S))

	)

127 
	#STREAM_DATA
(
S
Ë((S)->
d©a
)

	)

128 
	#STREAM_REMAIN
(
S
Ë
	`STREAM_WRITEABLE
((S))

	)

138 
°ªam
 *
°ªam_√w
 (
size_t
);

139 
°ªam_‰ì
 (
°ªam
 *);

140 
°ªam
 * 
°ªam_c›y
 (°ªam *, °ªam *
§c
);

141 
°ªam
 *
°ªam_dup
 (stream *);

142 
size_t
 
°ªam_ªsize
 (
°ªam
 *, size_t);

143 
size_t
 
°ªam_gë_gëp
 (
°ªam
 *);

144 
size_t
 
°ªam_gë_ídp
 (
°ªam
 *);

145 
size_t
 
°ªam_gë_size
 (
°ªam
 *);

146 
u_ch¨
 *
°ªam_gë_d©a
 (
°ªam
 *);

148 
°ªam_£t_gëp
 (
°ªam
 *, 
size_t
);

149 
°ªam_f‹w¨d_gëp
 (
°ªam
 *, 
size_t
);

150 
°ªam_f‹w¨d_ídp
 (
°ªam
 *, 
size_t
);

153 
°ªam_put
 (
°ªam
 *, c⁄° *, 
size_t
);

154 
°ªam_putc
 (
°ªam
 *, 
u_ch¨
);

155 
°ªam_putc_©
 (
°ªam
 *, 
size_t
, 
u_ch¨
);

156 
°ªam_putw
 (
°ªam
 *, 
u_öt16_t
);

157 
°ªam_putw_©
 (
°ªam
 *, 
size_t
, 
u_öt16_t
);

158 
°ªam_pué
 (
°ªam
 *, 
u_öt32_t
);

159 
°ªam_pué_©
 (
°ªam
 *, 
size_t
, 
u_öt32_t
);

160 
°ªam_putq
 (
°ªam
 *, 
uöt64_t
);

161 
°ªam_putq_©
 (
°ªam
 *, 
size_t
, 
uöt64_t
);

162 
°ªam_put_ùv4
 (
°ªam
 *, 
u_öt32_t
);

163 
°ªam_put_ö_addr
 (
°ªam
 *, 
ö_addr
 *);

164 
°ªam_put_¥efix
 (
°ªam
 *, 
¥efix
 *);

166 
°ªam_gë
 (*, 
°ªam
 *, 
size_t
);

167 
u_ch¨
 
°ªam_gëc
 (
°ªam
 *);

168 
u_ch¨
 
°ªam_gëc_‰om
 (
°ªam
 *, 
size_t
);

169 
u_öt16_t
 
°ªam_gëw
 (
°ªam
 *);

170 
u_öt16_t
 
°ªam_gëw_‰om
 (
°ªam
 *, 
size_t
);

171 
u_öt32_t
 
°ªam_gël
 (
°ªam
 *);

172 
u_öt32_t
 
°ªam_gël_‰om
 (
°ªam
 *, 
size_t
);

173 
uöt64_t
 
°ªam_gëq
 (
°ªam
 *);

174 
uöt64_t
 
°ªam_gëq_‰om
 (
°ªam
 *, 
size_t
);

175 
u_öt32_t
 
°ªam_gë_ùv4
 (
°ªam
 *);

177 #unde‡
°ªam_ªad


178 #unde‡
°ªam_wrôe


182 
°ªam_ªad
 (
°ªam
 *, , 
size_t
);

186 
°ªam_ªad_unblock
 (
°ªam
 *, , 
size_t
);

196 
ssize_t
 
°ªam_ªad_åy
(
°ªam
 *
s
, 
fd
, 
size_t
 
size
);

198 
ssize_t
 
°ªam_ªcvmsg
 (
°ªam
 *
s
, 
fd
, 
msghdr
 *,

199 
Êags
, 
size_t
 
size
);

200 
ssize_t
 
°ªam_ªcv‰om
 (
°ªam
 *
s
, 
fd
, 
size_t
 
Àn
,

201 
Êags
, 
sockaddr
 *
‰om
,

202 
sockÀn_t
 *
‰omÀn
);

203 
size_t
 
°ªam_wrôe
 (
°ªam
 *, const *, size_t);

206 
°ªam_ª£t
 (
°ªam
 *);

207 
°ªam_Êush
 (
°ªam
 *, );

208 
°ªam_em±y
 (
°ªam
 *);

211 
u_ch¨
 *
°ªam_≤t
 (
°ªam
 *);

214 
°ªam_fifo
 *
°ªam_fifo_√w
 ();

215 
°ªam_fifo_push
 (
°ªam_fifo
 *
fifo
, 
°ªam
 *
s
);

216 
°ªam
 *
°ªam_fifo_p›
 (
°ªam_fifo
 *
fifo
);

217 
°ªam
 *
°ªam_fifo_hód
 (
°ªam_fifo
 *
fifo
);

218 
°ªam_fifo_˛ón
 (
°ªam_fifo
 *
fifo
);

219 
°ªam_fifo_‰ì
 (
°ªam_fifo
 *
fifo
);

	@common-libs/3rd-party/quagga-lib/include/table.h

23 #i‚de‡
_ZEBRA_TABLE_H


24 
	#_ZEBRA_TABLE_H


	)

27 
	srouã_èbÀ


29 
rouã_node
 *
	mt›
;

33 
	srouã_node


36 
¥efix
 
	mp
;

39 
rouã_èbÀ
 *
	mèbÀ
;

40 
rouã_node
 *
	m∑ª¡
;

41 
rouã_node
 *
	mlök
[2];

42 
	#l_À·
 
lök
[0]

	)

43 
	#l_right
 
lök
[1]

	)

46 
	mlock
;

49 *
	möfo
;

52 *
	maggªg©e
;

56 
rouã_èbÀ
 *
rouã_èbÀ_öô
 ();

57 
rouã_èbÀ_föish
 (
rouã_èbÀ
 *);

58 
rouã_u∆ock_node
 (
rouã_node
 *
node
);

59 
rouã_node_dñëe
 (
rouã_node
 *
node
);

60 
rouã_node
 *
rouã_t›
 (
rouã_èbÀ
 *);

61 
rouã_node
 *
rouã_√xt
 (route_node *);

62 
rouã_node
 *
rouã_√xt_u¡û
 (route_node *,

63 
rouã_node
 *);

64 
rouã_node
 *
rouã_node_gë
 (
rouã_èbÀ
 *,

65 
¥efix
 *);

66 
rouã_node
 *
rouã_node_lookup
 (
rouã_èbÀ
 *,

67 
¥efix
 *);

68 
rouã_node
 *
rouã_lock_node
 (rouã_nodê*
node
);

69 
rouã_node
 *
rouã_node_m©ch
 (c⁄° 
rouã_èbÀ
 *,

70 c⁄° 
¥efix
 *);

71 
rouã_node
 *
rouã_node_m©ch_ùv4
 (c⁄° 
rouã_èbÀ
 *,

72 c⁄° 
ö_addr
 *);

73 #ifde‡
HAVE_IPV6


74 
rouã_node
 *
rouã_node_m©ch_ùv6
 (c⁄° 
rouã_èbÀ
 *,

75 c⁄° 
ö6_addr
 *);

	@common-libs/3rd-party/quagga-lib/include/thread.h

22 #i‚de‡
_ZEBRA_THREAD_H


23 
	#_ZEBRA_THREAD_H


	)

25 
	srußge_t


27 #ifde‡
HAVE_RUSAGE


28 
rußge
 
	m˝u
;

30 
timevÆ
 
	mªÆ
;

32 
	#RUSAGE_T
 
rußge_t


	)

34 
	#GETRUSAGE
(
X
Ë
	`thªad_gërußge
(X)

	)

37 
	sthªad_li°


39 
thªad
 *
	mhód
;

40 
thªad
 *
	mèû
;

41 
	mcou¡
;

45 
	sthªad_ma°î


47 
thªad_li°
 
	mªad
;

48 
thªad_li°
 
	mwrôe
;

49 
thªad_li°
 
	mtimî
;

50 
thªad_li°
 
	mevít
;

51 
thªad_li°
 
	mªady
;

52 
thªad_li°
 
	munu£
;

53 
thªad_li°
 
	mbackground
;

54 
fd_£t
 
	mªadfd
;

55 
fd_£t
 
	mwrôefd
;

56 
fd_£t
 
	mex˚±fd
;

57 
	mÆloc
;

60 
	tthªad_ty≥
;

63 
	sthªad


65 
thªad_ty≥
 
	mty≥
;

66 
thªad_ty≥
 
	madd_ty≥
;

67 
thªad
 *
	m√xt
;

68 
thªad
 *
	m¥ev
;

69 
thªad_ma°î
 *
	mma°î
;

70 (*
	mfunc
Ë(
	mthªad
 *);

71 *
	m¨g
;

73 
	mvÆ
;

74 
	mfd
;

75 
timevÆ
 
	mßnds
;

76 } 
	mu
;

77 
RUSAGE_T
 
	mru
;

78 
˝u_thªad_hi°‹y
 *
	mhi°
;

79 * 
	mfun˙ame
;

82 
	s˝u_thªad_hi°‹y


84 (*
	mfunc
)(
	mthªad
 *);

85 *
	mfun˙ame
;

86 
	mtŸÆ_ˇŒs
;

87 
	stime_°©s


89 
	mtŸÆ
, 
	mmax
;

90 } 
	mªÆ
;

91 #ifde‡
HAVE_RUSAGE


92 
time_°©s
 
	m˝u
;

94 
thªad_ty≥
 
	mty≥s
;

98 
	equagga_˛kid
 {

99 
	mQUAGGA_CLK_REALTIME
 = 0,

100 
	mQUAGGA_CLK_MONOTONIC
,

101 
	mQUAGGA_CLK_REALTIME_STABILISED
,

105 
	#THREAD_READ
 0

	)

106 
	#THREAD_WRITE
 1

	)

107 
	#THREAD_TIMER
 2

	)

108 
	#THREAD_EVENT
 3

	)

109 
	#THREAD_READY
 4

	)

110 
	#THREAD_BACKGROUND
 5

	)

111 
	#THREAD_UNUSED
 6

	)

112 
	#THREAD_EXECUTE
 7

	)

115 
	#THREAD_YIELD_TIME_SLOT
 10 * 1000L

	)

118 
	#THREAD_ARG
(
X
Ë((X)->
¨g
)

	)

119 
	#THREAD_FD
(
X
Ë((X)->
u
.
fd
)

	)

120 
	#THREAD_VAL
(
X
Ë((X)->
u
.
vÆ
)

	)

122 
	#THREAD_READ_ON
(
ma°î
,
thªad
,
func
,
¨g
,
sock
) \

124 i‡(! 
thªad
) \

125 
thªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
func
, 
¨g
, 
sock
); \

126 } 0)

	)

128 
	#THREAD_WRITE_ON
(
ma°î
,
thªad
,
func
,
¨g
,
sock
) \

130 i‡(! 
thªad
) \

131 
thªad
 = 
	`thªad_add_wrôe
 (
ma°î
, 
func
, 
¨g
, 
sock
); \

132 } 0)

	)

134 
	#THREAD_TIMER_ON
(
ma°î
,
thªad
,
func
,
¨g
,
time
) \

136 i‡(! 
thªad
) \

137 
thªad
 = 
	`thªad_add_timî
 (
ma°î
, 
func
, 
¨g
, 
time
); \

138 } 0)

	)

140 
	#THREAD_OFF
(
thªad
) \

142 i‡(
thªad
) \

144 
	`thªad_ˇn˚l
 (
thªad
); \

145 
thªad
 = 
NULL
; \

147 } 0)

	)

149 
	#THREAD_READ_OFF
(
thªad
Ë
	`THREAD_OFF
—hªad)

	)

150 
	#THREAD_WRITE_OFF
(
thªad
Ë
	`THREAD_OFF
—hªad)

	)

151 
	#THREAD_TIMER_OFF
(
thªad
Ë
	`THREAD_OFF
—hªad)

	)

153 
	#thªad_add_ªad
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_ªad
(m,f,a,v,#f)

	)

154 
	#thªad_add_wrôe
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_wrôe
(m,f,a,v,#f)

	)

155 
	#thªad_add_timî
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_timî
(m,f,a,v,#f)

	)

156 
	#thªad_add_timî_m£c
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_timî_m£c
(m,f,a,v,#f)

	)

157 
	#thªad_add_evít
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_evít
(m,f,a,v,#f)

	)

158 
	#thªad_execuã
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_execuã
(m,f,a,v,#f)

	)

161 
	#thªad_add_background
(
m
,
f
,
a
,
v
Ë
	`fun˙ame_thªad_add_background
(m,f,a,v,#f)

	)

164 
thªad_ma°î
 *
thªad_ma°î_¸óã
 ();

165 
thªad_ma°î_‰ì
 (
thªad_ma°î
 *);

167 
thªad
 *
fun˙ame_thªad_add_ªad
 (
thªad_ma°î
 *,

168 (*)(
thªad
 *),

170 
thªad
 *
	`fun˙ame_thªad_add_wrôe
 (
thªad_ma°î
 *,

171 (*)(
thªad
 *),

173 
thªad
 *
	`fun˙ame_thªad_add_timî
 (
thªad_ma°î
 *,

174 (*)(
thªad
 *),

176 
thªad
 *
	`fun˙ame_thªad_add_timî_m£c
 (
thªad_ma°î
 *,

177 (*)(
thªad
 *),

179 
thªad
 *
	`fun˙ame_thªad_add_evít
 (
thªad_ma°î
 *,

180 (*)(
thªad
 *),

182 
thªad
 *
	`fun˙ame_thªad_add_background
 (
thªad_ma°î
 *,

183 (*
func
)(
thªad
 *),

184 *
¨g
,

185 
mûli£c⁄ds_to_dñay
,

186 c⁄° *
fun˙ame
);

187 
thªad
 *
	`fun˙ame_thªad_execuã
 (
thªad_ma°î
 *,

188 (*)(
thªad
 *),

190 
	`thªad_ˇn˚l
 (
thªad
 *);

191 
	`thªad_ˇn˚l_evít
 (
thªad_ma°î
 *, *);

192 
thªad
 *
	`thªad_„tch
 (
thªad_ma°î
 *, thread *);

193 
thªad
 *
	`thªad_„tch_n⁄block
 (
thªad_ma°î
 *, thread *);

194 
	`thªad_ˇŒ
 (
thªad
 *);

195 
	`thªad_timî_ªmaö_£c⁄d
 (
thªad
 *);

196 
	`thªad_should_yõld
 (
thªad
 *);

199 
	`thªad_gërußge
 (
RUSAGE_T
 *);

200 
cmd_ñemít
 
show_thªad_˝u_cmd
;

201 
cmd_ñemít
 
˛ór_thªad_˝u_cmd
;

207 
	`quagga_gëtime
 (
quagga_˛kid
, 
timevÆ
 *);

208 
time_t
 
	`quagga_time
 (time_t *);

211 
	`thªad_c⁄sumed_time
(
RUSAGE_T
 *
a·î
, RUSAGE_T *
bef‹e
,

212 *
˝u_time_ñ≠£d
);

217 
timevÆ
 
ª˚¡_time
;

219 
timevÆ
 
	`ª˚¡_ªœtive_time
 ();

	@common-libs/3rd-party/quagga-lib/include/vector.h

23 #i‚de‡
_ZEBRA_VECTOR_H


24 
	#_ZEBRA_VECTOR_H


	)

27 
	s_ve˘‹


29 
	ma˘ive
;

30 
	mÆlo˚d
;

31 **
	mödex
;

33 
_ve˘‹
 *
	tve˘‹
;

35 
	#VECTOR_MIN_SIZE
 1

	)

40 
	#ve˘‹_¶Ÿ
(
V
,
I
Ë((V)->
ödex
[(I)])

	)

45 
	#ve˘‹_a˘ive
(
V
Ë((V)->
a˘ive
)

	)

48 
ve˘‹
 
ve˘‹_öô
 (
size
);

49 
ve˘‹_ísuª
 (
ve˘‹
 
v
, 
num
);

50 
ve˘‹_em±y_¶Ÿ
 (
ve˘‹
 
v
);

51 
ve˘‹_£t
 (
ve˘‹
 
v
, *
vÆ
);

52 
ve˘‹_£t_ödex
 (
ve˘‹
 
v
, 
i
, *
vÆ
);

53 
ve˘‹_un£t
 (
ve˘‹
 
v
, 
i
);

54 
ve˘‹_cou¡
 (
ve˘‹
 
v
);

55 
ve˘‹_⁄ly_wøµî_‰ì
 (
ve˘‹
 
v
);

56 
ve˘‹_⁄ly_ödex_‰ì
 (*
ödex
);

57 
ve˘‹_‰ì
 (
ve˘‹
 
v
);

58 
ve˘‹
 
ve˘‹_c›y
 (ve˘‹ 
v
);

60 *
ve˘‹_lookup
 (
ve˘‹
, );

61 *
ve˘‹_lookup_ísuª
 (
ve˘‹
, );

	@common-libs/3rd-party/quagga-lib/include/version.h

24 #i‚de‡
_ZEBRA_VERSION_H


25 
	#_ZEBRA_VERSION_H


	)

27 
	#QUAGGA_PROGNAME
 "MUL-C⁄åﬁÀr"

	)

29 
	#QUAGGA_VERSION
 "0.99"

	)

31 
	#ZEBRA_BUG_ADDRESS
 "hâp://www.kul˛oud.√t"

	)

33 
	#QUAGGA_URL
 "hâp://www.kul˛oud.√t"

	)

35 
	#QUAGGA_COPYRIGHT
 "C›yrighà(CË2012 KULCLOUD LTD"

	)

37 
pid_t
 
pid_ouçut
 (const *);

39 #i‚de‡
HAVE_DAEMON


40 
d´m⁄
(, );

	@common-libs/3rd-party/quagga-lib/include/vty.h

21 #i‚de‡
_ZEBRA_VTY_H


22 
	#_ZEBRA_VTY_H


	)

24 
	~"thªad.h
"

25 
	~"log.h
"

27 
	#VTY_BUFSIZ
 512

	)

28 
	#VTY_MAXHIST
 20

	)

31 
	svty


34 
	mfd
;

37 íum {
	mVTY_TERM
, 
	mVTY_FILE
, 
	mVTY_SHELL
, 
	mVTY_SHELL_SERV
, 
	mVTY_NBAPI
} 
	mty≥
;

40 
	mnode
;

43 
	m≠∂y_node_m©ch
;

44 
	m≠∂y_node
;

47 *
	maddªss
;

50 
	mÁû
;

53 
buf„r
 *
	mobuf
;

56 *
	mbuf
;

59 
	m˝
;

62 
	mÀngth
;

65 
	mmax
;

68 *
	mhi°
[
VTY_MAXHIST
];

71 
	mhp
;

74 
	mhödex
;

78 *
	mödex
;

81 *
	mödex_sub
;

84 
	mesˇ≥
;

87 íum {
	mVTY_NORMAL
, 
	mVTY_CLOSE
, 
	mVTY_MORE
, 
	mVTY_MORELINE
} 
	m°©us
;

92 
	müc
;

95 
	müc_sb_ö_¥ogªss
;

99 
	#TELNET_NAWS_SB_LEN
 5

	)

100 
	msb_buf
[
TELNET_NAWS_SB_LEN
];

103 
size_t
 
	msb_Àn
;

106 
	mwidth
;

107 
	mheight
;

110 
	mlöes
;

113 
	mm⁄ô‹
;

116 
	mc⁄fig
;

119 
thªad
 *
	mt_ªad
;

120 
thªad
 *
	mt_wrôe
;

123 
	mv_timeout
;

124 
thªad
 *
	mt_timeout
;

128 
	#INTEGRATE_DEFAULT_CONFIG
 "Quagga.c⁄f"

	)

131 
	#VTY_NEWLINE
 ((
vty
->
ty≥
 =
VTY_TERM
Ë? "\r\n" : "\n")

	)

134 
	#VTY_TIMEOUT_DEFAULT
 600

	)

137 
	#VTY_READ_BUFSIZ
 512

	)

140 #i‚de‡
DIRECTORY_SEP


141 
	#DIRECTORY_SEP
 '/'

	)

144 #i‚de‡
IS_DIRECTORY_SEP


145 
	#IS_DIRECTORY_SEP
(
c
Ë((cË=
DIRECTORY_SEP
)

	)

149 #ifde‡
__GNUC__


150 
	#PRINTF_ATTRIBUTE
(
a
,
b
Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
,á, b)))

	)

152 
	#PRINTF_ATTRIBUTE
(
a
,
b
)

	)

156 
	#VTY_GET_LONG
(
NAME
,
V
,
STR
) \

158 *
íd±r
 = 
NULL
; \

159 (
V
Ë
	`°πoul
 ((
STR
), &
íd±r
, 10); \

160 i‡(*
íd±r
 !'\0' || (
V
Ë=
ULONG_MAX
) \

162 
	`vty_out
 (
vty
, "%% InvÆid %†vÆue%s", 
NAME
, 
VTY_NEWLINE
); \

163  
CMD_WARNING
; \

165 } 0)

	)

167 
	#VTY_GET_INTEGER_RANGE
(
NAME
,
V
,
STR
,
MIN
,
MAX
) \

169 
tm∂
; \

170 
	`VTY_GET_LONG
(
NAME
, 
tm∂
, 
STR
); \

171 i‡–(
tm∂
 < (
MIN
)Ë|| (tm∂ > (
MAX
))) \

173 
	`vty_out
 (
vty
, "%% InvÆid %†vÆue%s", 
NAME
, 
VTY_NEWLINE
); \

174  
CMD_WARNING
; \

176 (
V
Ë
tm∂
; \

177 } 0)

	)

179 
	#VTY_GET_INTEGER
(
NAME
,
V
,
STR
) \

180 
	`VTY_GET_INTEGER_RANGE
(
NAME
,
V
,
STR
,0U,
UINT32_MAX
)

	)

182 
	#VTY_GET_IPV4_ADDRESS
(
NAME
,
V
,
STR
) \

184 
ªtv
; \

185 
ªtv
 = 
	`öë_©⁄
 ((
STR
), &(
V
)); \

186 i‡(!
ªtv
) \

188 
	`vty_out
 (
vty
, "%% InvÆid %†vÆue%s", 
NAME
, 
VTY_NEWLINE
); \

189  
CMD_WARNING
; \

191 } 0)

	)

193 
	#VTY_GET_IPV4_PREFIX
(
NAME
,
V
,
STR
) \

195 
ªtv
; \

196 
ªtv
 = 
	`°r2¥efix_ùv4
 ((
STR
), &(
V
)); \

197 i‡(
ªtv
 <= 0) \

199 
	`vty_out
 (
vty
, "%% InvÆid %†vÆue%s", 
NAME
, 
VTY_NEWLINE
); \

200  
CMD_WARNING
; \

202 } 0)

	)

205 
öãgøã_deÁu…
[];

208 
vty_öô
 (
thªad_ma°î
 *);

209 
vty_öô_vtysh
 ();

210 
vty_ãrmö©e
 ();

211 
vty_ª£t
 ();

212 
vty
 *
vty_√w
 ();

213 
	$vty_out
 (
vty
 *, c⁄° *, ...Ë
	`PRINTF_ATTRIBUTE
(2, 3);

214 
	`vty_ªad_c⁄fig
 (*, *, , );

215 
	`vty_time_¥öt
 (
vty
 *, );

216 
	`vty_£rv_sock
 (const *, , const *, );

217 
	`vty_˛o£
 (
vty
 *);

218 *
	`vty_gë_cwd
 ();

219 
	`vty_log
 (c⁄° *
Àvñ
, c⁄° *
¥Ÿo
,

220 c⁄° *
fmt
, 
time°amp_c⁄åﬁ
 *, 
va_li°
);

221 
	`vty_c⁄fig_lock
 (
vty
 *);

222 
	`vty_c⁄fig_u∆ock
 (
vty
 *);

223 
	`vty_shñl
 (
vty
 *);

224 
	`vty_shñl_£rv
 (
vty
 *);

225 
	`vty_hñlo
 (
vty
 *);

229 
	`vty_log_fixed
 (c⁄° *
buf
, 
size_t
 
Àn
);

	@common-libs/3rd-party/quagga-lib/include/workqueue.h

24 #i‚de‡
_QUAGGA_WORK_QUEUE_H


25 
	#_QUAGGA_WORK_QUEUE_H


	)

28 
	#WORK_QUEUE_DEFAULT_HOLD
 50

	)

33 
	mWQ_SUCCESS
 = 0,

34 
	mWQ_ERROR
,

35 
	mWQ_RETRY_NOW
,

36 
	mWQ_RETRY_LATER
,

37 
	mWQ_REQUEUE
,

38 
	mWQ_QUEUE_BLOCKED
,

41 } 
	twq_ôem_°©us
;

44 
	sw‹k_queue_ôem


46 *
	md©a
;

47 
	møn
;

50 
	#WQ_UNPLUGGED
 (1 << 0Ë

	)

52 
	sw‹k_queue


57 
thªad_ma°î
 *
	mma°î
;

58 
thªad
 *
	mthªad
;

59 *
	m«me
;

66 *
	md©a
;

72 
wq_ôem_°©us
 (*
w‹kfunc
Ë(
	mw‹k_queue
 *, *);

75 (*
	mîr‹func
Ë(
	mw‹k_queue
 *, 
	mw‹k_queue_ôem
 *);

78 (*
	mdñ_ôem_d©a
Ë(
	mw‹k_queue
 *, *);

81 (*
	mcom∂ëi⁄_func
Ë(
	mw‹k_queue
 *);

84 
	mmax_ªåõs
;

86 
	mhﬁd
;

87 } 
	m•ec
;

90 
li°
 *
	môems
;

91 
	mruns
;

94 
	mbe°
;

95 
	mgønuœrôy
;

96 
	mtŸÆ
;

97 } 
	mcy˛es
;

100 
u_öt16_t
 
	mÊags
;

109 
w‹k_queue
 *
w‹k_queue_√w
 (
thªad_ma°î
 *,

112 
w‹k_queue_‰ì
 (
w‹k_queue
 *);

115 
w‹k_queue_add
 (
w‹k_queue
 *, *);

118 
w‹k_queue_∂ug
 (
w‹k_queue
 *
wq
);

120 
w‹k_queue_u≈lug
 (
w‹k_queue
 *
wq
);

123 
w‹k_queue_run
 (
thªad
 *);

124 
cmd_ñemít
 
show_w‹k_queues_cmd
;

	@common-libs/3rd-party/quagga-lib/include/zassert.h

5 #i‚de‡
_QUAGGA_ASSERT_H


6 
	#_QUAGGA_ASSERT_H


	)

8 
	$_zlog_as£π_Áûed
 (c⁄° *
as£πi⁄
, c⁄° *
fûe
,

9 
löe
, c⁄° *
fun˘i⁄
)

10 
	`__©åibuã__
 ((
n‹ëu∫
));

12 #i‡
	`deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

13 
	#__ASSERT_FUNCTION
 
__func__


	)

14 #ñi‡
	`deföed
(
__GNUC__
)

15 
	#__ASSERT_FUNCTION
 
__FUNCTION__


	)

17 
	#__ASSERT_FUNCTION
 
NULL


	)

20 
	#zas£π
(
EX
) (()((EX) ? 0 : \

21 (
	`_zlog_as£π_Áûed
(#EX, 
__FILE__
, 
__LINE__
, \

22 
__ASSERT_FUNCTION
), 0)))

	)

24 #unde‡
as£π


25 
	#as£π
(
EX
Ë
	`zas£π
(EX)

	)

	@common-libs/3rd-party/quagga-lib/include/zclient.h

22 #i‚de‡
_ZEBRA_ZCLIENT_H


23 
	#_ZEBRA_ZCLIENT_H


	)

26 
	~"if.h
"

29 
	#ZEBRA_MAX_PACKET_SIZ
 4096

	)

32 
	#ZEBRA_HEADER_SIZE
 6

	)

35 
	sz˛õ¡


38 
	msock
;

42 
	míabÀ
;

45 
	mÁû
;

48 
°ªam
 *
	mibuf
;

51 
°ªam
 *
	mobuf
;

54 
buf„r
 *
	mwb
;

57 
thªad
 *
	mt_ªad
;

58 
thªad
 *
	mt_c⁄√˘
;

61 
thªad
 *
	mt_wrôe
;

64 
u_ch¨
 
	mªdi°_deÁu…
;

65 
u_ch¨
 
	mªdi°
[
ZEBRA_ROUTE_MAX
];

68 
u_ch¨
 
	mdeÁu…_öf‹m©i⁄
;

71 (*
	mrouãr_id_upd©e
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

72 (*
	möãrÁ˚_add
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

73 (*
	möãrÁ˚_dñëe
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

74 (*
	möãrÁ˚_up
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

75 (*
	möãrÁ˚_down
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

76 (*
	möãrÁ˚_addªss_add
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

77 (*
	möãrÁ˚_addªss_dñëe
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

78 (*
	mùv4_rouã_add
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

79 (*
	mùv4_rouã_dñëe
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

80 (*
	mùv6_rouã_add
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

81 (*
	mùv6_rouã_dñëe
Ë(, 
	mz˛õ¡
 *, 
	muöt16_t
);

85 
	#ZAPI_MESSAGE_NEXTHOP
 0x01

	)

86 
	#ZAPI_MESSAGE_IFINDEX
 0x02

	)

87 
	#ZAPI_MESSAGE_DISTANCE
 0x04

	)

88 
	#ZAPI_MESSAGE_METRIC
 0x08

	)

91 
	sz£rv_hódî


93 
uöt16_t
 
	mÀngth
;

94 
uöt8_t
 
	mm¨kî
;

97 
uöt8_t
 
	mvîsi⁄
;

98 
	#ZSERV_VERSION
 1

	)

99 
uöt16_t
 
	mcomm™d
;

103 
	sz≠i_ùv4


105 
u_ch¨
 
	mty≥
;

107 
u_ch¨
 
	mÊags
;

109 
u_ch¨
 
	mmesßge
;

111 
u_ch¨
 
	m√xth›_num
;

112 
ö_addr
 **
	m√xth›
;

114 
u_ch¨
 
	mifödex_num
;

115 *
	mifödex
;

117 
u_ch¨
 
	mdi°™˚
;

119 
u_öt32_t
 
	mmëric
;

123 
z˛õ¡
 *
z˛õ¡_√w
 ();

124 
z˛õ¡_öô
 (
z˛õ¡
 *, );

125 
z˛õ¡_°¨t
 (
z˛õ¡
 *);

126 
z˛õ¡_°›
 (
z˛õ¡
 *);

127 
z˛õ¡_ª£t
 (
z˛õ¡
 *);

128 
z˛õ¡_‰ì
 (
z˛õ¡
 *);

131 
z˛õ¡_sockë
 ();

134 
z˛õ¡_sockë_un
 (const *);

137 
zebø_ªdi°ribuã_£nd
 (
comm™d
, 
z˛õ¡
 *, 
ty≥
);

140 
z˛õ¡_ªdi°ribuã
 (
comm™d
, 
z˛õ¡
 *, 
ty≥
);

143 
z˛õ¡_ªdi°ribuã_deÁu…
 (
comm™d
, 
z˛õ¡
 *);

147 
z˛õ¡_£nd_mesßge
(
z˛õ¡
 *);

150 
z˛õ¡_¸óã_hódî
 (
°ªam
 *, 
uöt16_t
);

152 
öãrÁ˚
 *
zebø_öãrÁ˚_add_ªad
 (
°ªam
 *);

153 
öãrÁ˚
 *
zebø_öãrÁ˚_°©e_ªad
 (
°ªam
 *
s
);

154 
c⁄√˘ed
 *
zebø_öãrÁ˚_addªss_ªad
 (, 
°ªam
 *);

155 
zebø_öãrÁ˚_if_£t_vÆue
 (
°ªam
 *, 
öãrÁ˚
 *);

156 
zebø_rouãr_id_upd©e_ªad
 (
°ªam
 *
s
, 
¥efix
 *
rid
);

157 
z≠i_ùv4_rouã
 (
u_ch¨
, 
z˛õ¡
 *, 
¥efix_ùv4
 *,

158 
z≠i_ùv4
 *);

160 #ifde‡
HAVE_IPV6


163 
	sz≠i_ùv6


165 
u_ch¨
 
	mty≥
;

167 
u_ch¨
 
	mÊags
;

169 
u_ch¨
 
	mmesßge
;

171 
u_ch¨
 
	m√xth›_num
;

172 
ö6_addr
 **
	m√xth›
;

174 
u_ch¨
 
	mifödex_num
;

175 *
	mifödex
;

177 
u_ch¨
 
	mdi°™˚
;

179 
u_öt32_t
 
	mmëric
;

182 
z≠i_ùv6_rouã
 (
u_ch¨
 
cmd
, 
z˛õ¡
 *zclient,

183 
¥efix_ùv6
 *
p
, 
z≠i_ùv6
 *
≠i
);

	@common-libs/3rd-party/quagga-lib/include/zebra.h

21 #i‚de‡
_ZEBRA_H


22 
	#_ZEBRA_H


	)

24 #ifde‡
HAVE_CONFIG_H


25 
	~"c⁄fig.h
"

28 #ifde‡
SUNOS_5


29 
	#_XPG4_2


	)

30 
	#__EXTENSIONS__


	)

31 
	tu_öt32_t
;

32 
	tu_öt16_t
;

33 
	tu_öt8_t
;

36 
	~<uni°d.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<˘y≥.h
>

40 
	~<î∫o.h
>

41 
	~<f˙é.h
>

42 
	~<sig«l.h
>

43 
	~<°rög.h
>

44 
	~<pwd.h
>

45 
	~<gΩ.h
>

46 #ifde‡
HAVE_STROPTS_H


47 
	~<°r›ts.h
>

49 
	~<sys/f˙é.h
>

50 #ifde‡
HAVE_SYS_SELECT_H


51 
	~<sys/£À˘.h
>

53 
	~<sys/°©.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/∑øm.h
>

56 #ifde‡
HAVE_SYS_SYSCTL_H


57 #ifde‡
GNU_LINUX


58 
	~<löux/ty≥s.h
>

60 
	~<sys/sys˘l.h
>

62 
	~<sys/io˘l.h
>

63 #ifde‡
HAVE_SYS_CONF_H


64 
	~<sys/c⁄f.h
>

66 #ifde‡
HAVE_SYS_KSYM_H


67 
	~<sys/ksym.h
>

69 
	~<sy¶og.h
>

70 #ifde‡
HAVE_SYS_TIME_H


71 
	~<sys/time.h
>

72 
	~<time.h
>

74 
	~<time.h
>

76 
	~<sys/uio.h
>

77 
	~<sys/ut¢ame.h
>

78 #ifde‡
HAVE_RUSAGE


79 
	~<sys/ªsour˚.h
>

81 #ifde‡
HAVE_LIMITS_H


82 
	~<limôs.h
>

84 #ifde‡
HAVE_INTTYPES_H


85 
	~<öây≥s.h
>

89 #ifde‡
SUNOS_5


90 
	~<°rögs.h
>

94 #ifde‡
HAVE_LINUX_VERSION_H


95 
	~<löux/vîsi⁄.h
>

98 #ifde‡
HAVE_ASM_TYPES_H


99 
	~<asm/ty≥s.h
>

103 
	~<°d¨g.h
>

104 #i‡!(
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L)

106 #i‚de‡
va_c›y


107 #ifde‡
__va_c›y


108 
	#va_c›y
(
DST
,
SRC
Ë
	`__va_c›y
(DST,SRC)

	)

113 
	#va_c›y
(
DST
,
SRC
Ë
	`mem˝y
(&(DST), &(SRC), (
va_li°
))

	)

120 #ifde‡
HAVE_LCAPS


121 
	~<sys/ˇ∑bûôy.h
>

122 
	~<sys/¥˘l.h
>

125 #ifde‡
HAVE_SOLARIS_CAPABILITIES


126 
	~<¥iv.h
>

131 
	~<sys/sockë.h
>

133 #ifde‡
HAVE_SYS_SOCKIO_H


134 
	~<sys/sockio.h
>

137 #ifde‡
HAVE_NETINET_IN_H


138 
	~<√töë/ö.h
>

140 
	~<√töë/ö_sy°m.h
>

141 
	~<√töë/ù.h
>

142 
	~<√töë/t˝.h
>

144 #ifde‡
HAVE_NET_NETOPT_H


145 
	~<√t/√t›t.h
>

148 
	~<√t/if.h
>

150 #ifde‡
HAVE_NET_IF_DL_H


151 
	~<√t/if_dl.h
>

154 #ifde‡
HAVE_NET_IF_VAR_H


155 
	~<√t/if_v¨.h
>

158 #ifde‡
HAVE_NET_ROUTE_H


159 
	~<√t/rouã.h
>

162 #ifde‡
HAVE_NETLINK


163 
	~<löux/√éök.h
>

164 
	~<löux/π√éök.h
>

165 
	~<löux/fûãr.h
>

166 
	~<°ddef.h
>

168 
	#RT_TABLE_MAIN
 0

	)

171 #ifde‡
HAVE_NETDB_H


172 
	~<√tdb.h
>

175 
	~<¨∑/öë.h
>

177 #ifde‡
HAVE_INET_ND_H


178 
	~<öë/nd.h
>

181 #ifde‡
HAVE_NETINET_IN_VAR_H


182 
	~<√töë/ö_v¨.h
>

185 #ifde‡
HAVE_NETINET6_IN6_VAR_H


186 
	~<√töë6/ö6_v¨.h
>

189 #ifde‡
HAVE_NETINET_IN6_VAR_H


190 
	~<√töë/ö6_v¨.h
>

193 #ifde‡
HAVE_NETINET6_IN_H


194 
	~<√töë6/ö.h
>

198 #ifde‡
HAVE_NETINET6_IP6_H


199 
	~<√töë6/ù6.h
>

202 #ifde‡
HAVE_NETINET_ICMP6_H


203 
	~<√töë/icmp6.h
>

206 #ifde‡
HAVE_NETINET6_ND6_H


207 
	~<√töë6/nd6.h
>

213 #i‚de‡
INT8_MAX


214 
	#INT8_MAX
 (127)

	)

216 #i‚de‡
INT16_MAX


217 
	#INT16_MAX
 (32767)

	)

219 #i‚de‡
INT32_MAX


220 
	#INT32_MAX
 (2147483647)

	)

222 #i‚de‡
UINT8_MAX


223 
	#UINT8_MAX
 (255U)

	)

225 #i‚de‡
UINT16_MAX


226 
	#UINT16_MAX
 (65535U)

	)

228 #i‚de‡
UINT32_MAX


229 
	#UINT32_MAX
 (4294967295U)

	)

232 #ifde‡
HAVE_GLIBC_BACKTRACE


233 
	~<execöfo.h
>

236 #ifde‡
BSDI_NRL


238 #ifde‡
HAVE_NETINET6_IN6_H


239 
	~<√töë6/ö6.h
>

242 #ifde‡
NRL


243 
	~<√töë6/ö6.h
>

246 
	#IN6_ARE_ADDR_EQUAL
 
IN6_IS_ADDR_EQUAL


	)

251 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
VTYSH_EXTRACT_PL
))

252 
	#__©åibuã__
(
x
)

	)

255 
	~"zas£π.h
"

256 
	~"°r.h
"

259 #ifde‡
HAVE_BROKEN_CMSG_FIRSTHDR


264 
	#ZCMSG_FIRSTHDR
(
mhdr
) \

265 (((
size_t
)((
mhdr
)->
msg_c⁄åﬁÀn
Ë>(
cmsghdr
)) ? \

266 
	`CMSG_FIRSTHDR
(
mhdr
Ë: (
cmsghdr
 *)
NULL
)

	)

271 
	#ZCMSG_FIRSTHDR
(
M
Ë
	`CMSG_FIRSTHDR
(M)

	)

285 #i‚de‡
_CMSG_DATA_ALIGN


286 
	#_CMSG_DATA_ALIGN
(
n
Ë((“Ë+ 3Ë& ~3)

	)

289 #i‚de‡
_CMSG_HDR_ALIGN


290 
	#_CMSG_HDR_ALIGN
(
n
Ë((“Ë+ 3Ë& ~3)

	)

297 #i‚de‡
CMSG_SPACE


298 
	#CMSG_SPACE
(
l
Ë(
	`_CMSG_DATA_ALIGN
((
cmsghdr
)) + \

299 
	`_CMSG_HDR_ALIGN
(
l
))

	)

304 #i‚de‡
CMSG_LEN


305 
	#CMSG_LEN
(
l
Ë(
	`_CMSG_DATA_ALIGN
((
cmsghdr
)Ë+ (l))

	)

312 #i‡
deföed
 (
GNU_LINUX
Ë&& ! deföed (
HAVE_STRUCT_IN_PKTINFO
)

313 
	sö_pktöfo


315 
	mùi_ifödex
;

316 
ö_addr
 
	mùi_•ec_d°
;

317 
ö_addr
 
	mùi_addr
;

337 #ifde‡
GNU_LINUX


338 
	#WANT_OSPF_WRITE_FRAGMENT


	)

350 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

351 || (
deföed
(
__O≥nBSD__
Ë&& (
	gO≥nBSD
 < 200311)) \

352 || (
deföed
(
SUNOS_5
Ë&& 
	$deföed
(
WORDS_BIGENDIAN
))

353 
	#HAVE_IP_HDRINCL_BSD_ORDER


	)

360 #i‚de‡
BYTE_ORDER


361 
	#BIG_ENDIAN
 4321

	)

362 
	#LITTLE_ENDIAN
 1234

	)

363 
	#PDP_ENDIAN
 3412

	)

365 #i‡
	`deföed
(
WORDS_BIGENDIAN
)

366 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

368 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

374 #i‚de‡
MAX


375 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

377 #i‚de‡
MIN


378 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

382 
	#CONFIGFILE_MASK
 0600

	)

385 
	#CONSUMED_TIME_CHECK
 5000000

	)

388 
	#DAEMON_VTY_DIR
 "/v¨/run"

	)

391 
	#PATH_BGPD_PID
 "/v¨/run/bgpd.pid"

	)

394 
	#PATH_ISISD_PID
 "/v¨/run/isisd.pid"

	)

397 
	#PATH_OSPF6D_PID
 "/v¨/run/o•f6d.pid"

	)

400 
	#PATH_OSPFD_PID
 "/v¨/run/o•fd.pid"

	)

403 
	#PATH_RIPD_PID
 "/v¨/run/rùd.pid"

	)

406 
	#PATH_RIPNGD_PID
 "/v¨/run/rùngd.pid"

	)

409 
	#PATH_WATCHQUAGGA_PID
 "/v¨/run/w©chquagga.pid"

	)

412 
	#PATH_ZEBRA_PID
 "/v¨/run/zebø.pid"

	)

415 
	#QUAGGA_GROUP
 "quagga"

	)

418 
	#QUAGGA_NO_DEPRECATED_INTERFACES
 1

	)

421 
	#QUAGGA_USER
 "quagga"

	)

423 
	#LOGFILE_MASK
 0600

	)

425 
	#HAVE_STRUCT_IP_MREQN_IMR_IFINDEX
 1

	)

428 #i‚de‡
IN6_ARE_ADDR_EQUAL


429 
	#IN6_ARE_ADDR_EQUAL
 
IN6_IS_ADDR_EQUAL


	)

433 
	#ZEBRA_PORT
 2600

	)

436 
	#ZEBRA_INTERFACE_ADD
 1

	)

437 
	#ZEBRA_INTERFACE_DELETE
 2

	)

438 
	#ZEBRA_INTERFACE_ADDRESS_ADD
 3

	)

439 
	#ZEBRA_INTERFACE_ADDRESS_DELETE
 4

	)

440 
	#ZEBRA_INTERFACE_UP
 5

	)

441 
	#ZEBRA_INTERFACE_DOWN
 6

	)

442 
	#ZEBRA_IPV4_ROUTE_ADD
 7

	)

443 
	#ZEBRA_IPV4_ROUTE_DELETE
 8

	)

444 
	#ZEBRA_IPV6_ROUTE_ADD
 9

	)

445 
	#ZEBRA_IPV6_ROUTE_DELETE
 10

	)

446 
	#ZEBRA_REDISTRIBUTE_ADD
 11

	)

447 
	#ZEBRA_REDISTRIBUTE_DELETE
 12

	)

448 
	#ZEBRA_REDISTRIBUTE_DEFAULT_ADD
 13

	)

449 
	#ZEBRA_REDISTRIBUTE_DEFAULT_DELETE
 14

	)

450 
	#ZEBRA_IPV4_NEXTHOP_LOOKUP
 15

	)

451 
	#ZEBRA_IPV6_NEXTHOP_LOOKUP
 16

	)

452 
	#ZEBRA_IPV4_IMPORT_LOOKUP
 17

	)

453 
	#ZEBRA_IPV6_IMPORT_LOOKUP
 18

	)

454 
	#ZEBRA_INTERFACE_RENAME
 19

	)

455 
	#ZEBRA_ROUTER_ID_ADD
 20

	)

456 
	#ZEBRA_ROUTER_ID_DELETE
 21

	)

457 
	#ZEBRA_ROUTER_ID_UPDATE
 22

	)

458 
	#ZEBRA_MESSAGE_MAX
 23

	)

464 
	#ZEBRA_HEADER_MARKER
 255

	)

467 
	#ZEBRA_ROUTE_SYSTEM
 0

	)

468 
	#ZEBRA_ROUTE_KERNEL
 1

	)

469 
	#ZEBRA_ROUTE_CONNECT
 2

	)

470 
	#ZEBRA_ROUTE_STATIC
 3

	)

471 
	#ZEBRA_ROUTE_RIP
 4

	)

472 
	#ZEBRA_ROUTE_RIPNG
 5

	)

473 
	#ZEBRA_ROUTE_OSPF
 6

	)

474 
	#ZEBRA_ROUTE_OSPF6
 7

	)

475 
	#ZEBRA_ROUTE_ISIS
 8

	)

476 
	#ZEBRA_ROUTE_BGP
 9

	)

477 
	#ZEBRA_ROUTE_HSLS
 10

	)

478 
	#ZEBRA_ROUTE_MAX
 11

	)

485 c⁄° *
	`zebø_rouã_°rög
(
rouã_ty≥
);

487 
	`zebø_rouã_ch¨
(
rouã_ty≥
);

491 
	`¥Ÿo_«me2num
(c⁄° *
s
);

493 c⁄° *
	`z£rv_comm™d_°rög
 (
comm™d
);

496 
	#ZEBRA_FAMILY_IPV4
 1

	)

497 
	#ZEBRA_FAMILY_IPV6
 2

	)

498 
	#ZEBRA_FAMILY_MAX
 3

	)

501 
	#ZEBRA_ERR_NOERROR
 0

	)

502 
	#ZEBRA_ERR_RTEXIST
 -1

	)

503 
	#ZEBRA_ERR_RTUNREACH
 -2

	)

504 
	#ZEBRA_ERR_EPERM
 -3

	)

505 
	#ZEBRA_ERR_RTNOEXIST
 -4

	)

506 
	#ZEBRA_ERR_KERNEL
 -5

	)

509 
	#ZEBRA_FLAG_INTERNAL
 0x01

	)

510 
	#ZEBRA_FLAG_SELFROUTE
 0x02

	)

511 
	#ZEBRA_FLAG_BLACKHOLE
 0x04

	)

512 
	#ZEBRA_FLAG_IBGP
 0x08

	)

513 
	#ZEBRA_FLAG_SELECTED
 0x10

	)

514 
	#ZEBRA_FLAG_CHANGED
 0x20

	)

515 
	#ZEBRA_FLAG_STATIC
 0x40

	)

516 
	#ZEBRA_FLAG_REJECT
 0x80

	)

519 
	#ZEBRA_NEXTHOP_IFINDEX
 1

	)

520 
	#ZEBRA_NEXTHOP_IFNAME
 2

	)

521 
	#ZEBRA_NEXTHOP_IPV4
 3

	)

522 
	#ZEBRA_NEXTHOP_IPV4_IFINDEX
 4

	)

523 
	#ZEBRA_NEXTHOP_IPV4_IFNAME
 5

	)

524 
	#ZEBRA_NEXTHOP_IPV6
 6

	)

525 
	#ZEBRA_NEXTHOP_IPV6_IFINDEX
 7

	)

526 
	#ZEBRA_NEXTHOP_IPV6_IFNAME
 8

	)

527 
	#ZEBRA_NEXTHOP_BLACKHOLE
 9

	)

529 #i‚de‡
INADDR_LOOPBACK


530 
	#INADDR_LOOPBACK
 0x7f000001

	)

534 
	#AFI_IP
 1

	)

535 
	#AFI_IP6
 2

	)

536 
	#AFI_MAX
 3

	)

539 
	#SAFI_UNICAST
 1

	)

540 
	#SAFI_MULTICAST
 2

	)

541 
	#SAFI_UNICAST_MULTICAST
 3

	)

542 
	#SAFI_MPLS_VPN
 4

	)

543 
	#SAFI_MAX
 5

	)

546 
	#FILTER_IN
 0

	)

547 
	#FILTER_OUT
 1

	)

548 
	#FILTER_MAX
 2

	)

551 
	#ZEBRA_KERNEL_DISTANCE_DEFAULT
 0

	)

552 
	#ZEBRA_CONNECT_DISTANCE_DEFAULT
 0

	)

553 
	#ZEBRA_STATIC_DISTANCE_DEFAULT
 1

	)

554 
	#ZEBRA_RIP_DISTANCE_DEFAULT
 120

	)

555 
	#ZEBRA_RIPNG_DISTANCE_DEFAULT
 120

	)

556 
	#ZEBRA_OSPF_DISTANCE_DEFAULT
 110

	)

557 
	#ZEBRA_OSPF6_DISTANCE_DEFAULT
 110

	)

558 
	#ZEBRA_ISIS_DISTANCE_DEFAULT
 115

	)

559 
	#ZEBRA_IBGP_DISTANCE_DEFAULT
 200

	)

560 
	#ZEBRA_EBGP_DISTANCE_DEFAULT
 20

	)

563 
	#CHECK_FLAG
(
V
,
F
Ë((VË& (F))

	)

564 
	#SET_FLAG
(
V
,
F
Ë(VË|(F)

	)

565 
	#UNSET_FLAG
(
V
,
F
Ë(VË&~(F)

	)

568 
u_öt16_t
 
	tafi_t
;

569 
u_öt8_t
 
	tßfi_t
;

572 
u_öt16_t
 
	tzebø_size_t
;

573 
u_öt16_t
 
	tzebø_comm™d_t
;

576 
	sfifo


578 
fifo
 *
√xt
;

579 
fifo
 *
¥ev
;

582 
	#FIFO_INIT
(
F
) \

584 
fifo
 *
Xfifo
 = (fifÿ*)(
F
); \

585 
Xfifo
->
√xt
 = Xfifo->
¥ev
 = Xfifo; \

586 
	}
} 0)

	)

588 
	#FIFO_ADD
(
F
,
N
) \

590 
fifo
 *
Xfifo
 = (fifÿ*)(
F
); \

591 
fifo
 *
Xnode
 = (fifÿ*)(
N
); \

592 
Xnode
->
√xt
 = 
Xfifo
; \

593 
Xnode
->
¥ev
 = 
Xfifo
->prev; \

594 
Xfifo
->
¥ev
 = Xfifo->¥ev->
√xt
 = 
Xnode
; \

595 } 0)

	)

597 
	#FIFO_DEL
(
N
) \

599 
fifo
 *
Xnode
 = (fifÿ*)(
N
); \

600 
Xnode
->
¥ev
->
√xt
 = Xnode->next; \

601 
Xnode
->
√xt
->
¥ev
 = Xnode->prev; \

602 } 0)

	)

604 
	#FIFO_HEAD
(
F
) \

605 ((((
fifo
 *)(
F
))->
√xt
 == (fifo *)(F)) \

606 ? 
NULL
 : (
F
)->
√xt
)

	)

608 
	#FIFO_EMPTY
(
F
) \

609 (((
fifo
 *)(
F
))->
√xt
 =(fifÿ*)(F))

	)

611 
	#FIFO_TOP
(
F
) \

612 (
	`FIFO_EMPTY
(
F
Ë? 
NULL
 : ((
fifo
 *)(F))->
√xt
)

	)

	@common-libs/3rd-party/quagga-lib/memtypes.h

4 #i‚de‡
_QUAGGA_MEMTYPES_H


5 
	#_QUAGGA_MEMTYPES_H


	)

9 
	mMTYPE_TMP
 = 1,

10 
	mMTYPE_STRVEC
,

11 
	mMTYPE_VECTOR
,

12 
	mMTYPE_VECTOR_INDEX
,

13 
	mMTYPE_LINK_LIST
,

14 
	mMTYPE_LINK_NODE
,

15 
	mMTYPE_THREAD
,

16 
	mMTYPE_THREAD_MASTER
,

17 
	mMTYPE_THREAD_STATS
,

18 
	mMTYPE_THREAD_FUNCNAME
,

19 
	mMTYPE_VTY
,

20 
	mMTYPE_VTY_OUT_BUF
,

21 
	mMTYPE_VTY_HIST
,

22 
	mMTYPE_IF
,

23 
	mMTYPE_CONNECTED
,

24 
	mMTYPE_CONNECTED_LABEL
,

25 
	mMTYPE_BUFFER
,

26 
	mMTYPE_BUFFER_DATA
,

27 
	mMTYPE_STREAM
,

28 
	mMTYPE_STREAM_DATA
,

29 
	mMTYPE_STREAM_FIFO
,

30 
	mMTYPE_PREFIX
,

31 
	mMTYPE_PREFIX_IPV4
,

32 
	mMTYPE_PREFIX_IPV6
,

33 
	mMTYPE_HASH
,

34 
	mMTYPE_HASH_BACKET
,

35 
	mMTYPE_HASH_INDEX
,

36 
	mMTYPE_ROUTE_TABLE
,

37 
	mMTYPE_ROUTE_NODE
,

38 
	mMTYPE_DISTRIBUTE
,

39 
	mMTYPE_DISTRIBUTE_IFNAME
,

40 
	mMTYPE_ACCESS_LIST
,

41 
	mMTYPE_ACCESS_LIST_STR
,

42 
	mMTYPE_ACCESS_FILTER
,

43 
	mMTYPE_PREFIX_LIST
,

44 
	mMTYPE_PREFIX_LIST_ENTRY
,

45 
	mMTYPE_PREFIX_LIST_STR
,

46 
	mMTYPE_ROUTE_MAP
,

47 
	mMTYPE_ROUTE_MAP_NAME
,

48 
	mMTYPE_ROUTE_MAP_INDEX
,

49 
	mMTYPE_ROUTE_MAP_RULE
,

50 
	mMTYPE_ROUTE_MAP_RULE_STR
,

51 
	mMTYPE_ROUTE_MAP_COMPILED
,

52 
	mMTYPE_DESC
,

53 
	mMTYPE_KEY
,

54 
	mMTYPE_KEYCHAIN
,

55 
	mMTYPE_IF_RMAP
,

56 
	mMTYPE_IF_RMAP_NAME
,

57 
	mMTYPE_SOCKUNION
,

58 
	mMTYPE_PRIVS
,

59 
	mMTYPE_ZLOG
,

60 
	mMTYPE_ZCLIENT
,

61 
	mMTYPE_WORK_QUEUE
,

62 
	mMTYPE_WORK_QUEUE_ITEM
,

63 
	mMTYPE_WORK_QUEUE_NAME
,

64 
	mMTYPE_PQUEUE
,

65 
	mMTYPE_PQUEUE_DATA
,

66 
	mMTYPE_HOST
,

67 
	mMTYPE_RTADV_PREFIX
,

68 
	mMTYPE_VRF
,

69 
	mMTYPE_VRF_NAME
,

70 
	mMTYPE_NEXTHOP
,

71 
	mMTYPE_RIB
,

72 
	mMTYPE_RIB_QUEUE
,

73 
	mMTYPE_STATIC_IPV4
,

74 
	mMTYPE_STATIC_IPV6
,

75 
	mMTYPE_BGP
,

76 
	mMTYPE_BGP_LISTENER
,

77 
	mMTYPE_BGP_PEER
,

78 
	mMTYPE_BGP_PEER_HOST
,

79 
	mMTYPE_PEER_GROUP
,

80 
	mMTYPE_PEER_DESC
,

81 
	mMTYPE_PEER_PASSWORD
,

82 
	mMTYPE_ATTR
,

83 
	mMTYPE_ATTR_EXTRA
,

84 
	mMTYPE_AS_PATH
,

85 
	mMTYPE_AS_SEG
,

86 
	mMTYPE_AS_SEG_DATA
,

87 
	mMTYPE_AS_STR
,

88 
	mMTYPE_BGP_TABLE
,

89 
	mMTYPE_BGP_NODE
,

90 
	mMTYPE_BGP_ROUTE
,

91 
	mMTYPE_BGP_ROUTE_EXTRA
,

92 
	mMTYPE_BGP_CONN
,

93 
	mMTYPE_BGP_STATIC
,

94 
	mMTYPE_BGP_ADVERTISE_ATTR
,

95 
	mMTYPE_BGP_ADVERTISE
,

96 
	mMTYPE_BGP_SYNCHRONISE
,

97 
	mMTYPE_BGP_ADJ_IN
,

98 
	mMTYPE_BGP_ADJ_OUT
,

99 
	mMTYPE_AS_LIST
,

100 
	mMTYPE_AS_FILTER
,

101 
	mMTYPE_AS_FILTER_STR
,

102 
	mMTYPE_COMMUNITY
,

103 
	mMTYPE_COMMUNITY_VAL
,

104 
	mMTYPE_COMMUNITY_STR
,

105 
	mMTYPE_ECOMMUNITY
,

106 
	mMTYPE_ECOMMUNITY_VAL
,

107 
	mMTYPE_ECOMMUNITY_STR
,

108 
	mMTYPE_COMMUNITY_LIST
,

109 
	mMTYPE_COMMUNITY_LIST_NAME
,

110 
	mMTYPE_COMMUNITY_LIST_ENTRY
,

111 
	mMTYPE_COMMUNITY_LIST_CONFIG
,

112 
	mMTYPE_COMMUNITY_LIST_HANDLER
,

113 
	mMTYPE_CLUSTER
,

114 
	mMTYPE_CLUSTER_VAL
,

115 
	mMTYPE_BGP_PROCESS_QUEUE
,

116 
	mMTYPE_BGP_CLEAR_NODE_QUEUE
,

117 
	mMTYPE_TRANSIT
,

118 
	mMTYPE_TRANSIT_VAL
,

119 
	mMTYPE_BGP_DISTANCE
,

120 
	mMTYPE_BGP_NEXTHOP_CACHE
,

121 
	mMTYPE_BGP_CONFED_LIST
,

122 
	mMTYPE_PEER_UPDATE_SOURCE
,

123 
	mMTYPE_BGP_DAMP_INFO
,

124 
	mMTYPE_BGP_DAMP_ARRAY
,

125 
	mMTYPE_BGP_REGEXP
,

126 
	mMTYPE_BGP_AGGREGATE
,

127 
	mMTYPE_RIP
,

128 
	mMTYPE_RIP_INFO
,

129 
	mMTYPE_RIP_INTERFACE
,

130 
	mMTYPE_RIP_PEER
,

131 
	mMTYPE_RIP_OFFSET_LIST
,

132 
	mMTYPE_RIP_DISTANCE
,

133 
	mMTYPE_RIPNG
,

134 
	mMTYPE_RIPNG_ROUTE
,

135 
	mMTYPE_RIPNG_AGGREGATE
,

136 
	mMTYPE_RIPNG_PEER
,

137 
	mMTYPE_RIPNG_OFFSET_LIST
,

138 
	mMTYPE_RIPNG_RTE_DATA
,

139 
	mMTYPE_OSPF_TOP
,

140 
	mMTYPE_OSPF_AREA
,

141 
	mMTYPE_OSPF_AREA_RANGE
,

142 
	mMTYPE_OSPF_NETWORK
,

143 
	mMTYPE_OSPF_NEIGHBOR_STATIC
,

144 
	mMTYPE_OSPF_IF
,

145 
	mMTYPE_OSPF_NEIGHBOR
,

146 
	mMTYPE_OSPF_ROUTE
,

147 
	mMTYPE_OSPF_TMP
,

148 
	mMTYPE_OSPF_LSA
,

149 
	mMTYPE_OSPF_LSA_DATA
,

150 
	mMTYPE_OSPF_LSDB
,

151 
	mMTYPE_OSPF_PACKET
,

152 
	mMTYPE_OSPF_FIFO
,

153 
	mMTYPE_OSPF_VERTEX
,

154 
	mMTYPE_OSPF_VERTEX_PARENT
,

155 
	mMTYPE_OSPF_NEXTHOP
,

156 
	mMTYPE_OSPF_PATH
,

157 
	mMTYPE_OSPF_VL_DATA
,

158 
	mMTYPE_OSPF_CRYPT_KEY
,

159 
	mMTYPE_OSPF_EXTERNAL_INFO
,

160 
	mMTYPE_OSPF_DISTANCE
,

161 
	mMTYPE_OSPF_IF_INFO
,

162 
	mMTYPE_OSPF_IF_PARAMS
,

163 
	mMTYPE_OSPF_MESSAGE
,

164 
	mMTYPE_OSPF6_TOP
,

165 
	mMTYPE_OSPF6_AREA
,

166 
	mMTYPE_OSPF6_IF
,

167 
	mMTYPE_OSPF6_NEIGHBOR
,

168 
	mMTYPE_OSPF6_ROUTE
,

169 
	mMTYPE_OSPF6_PREFIX
,

170 
	mMTYPE_OSPF6_MESSAGE
,

171 
	mMTYPE_OSPF6_LSA
,

172 
	mMTYPE_OSPF6_LSA_SUMMARY
,

173 
	mMTYPE_OSPF6_LSDB
,

174 
	mMTYPE_OSPF6_VERTEX
,

175 
	mMTYPE_OSPF6_SPFTREE
,

176 
	mMTYPE_OSPF6_NEXTHOP
,

177 
	mMTYPE_OSPF6_EXTERNAL_INFO
,

178 
	mMTYPE_OSPF6_OTHER
,

179 
	mMTYPE_ISIS
,

180 
	mMTYPE_ISIS_TMP
,

181 
	mMTYPE_ISIS_CIRCUIT
,

182 
	mMTYPE_ISIS_LSP
,

183 
	mMTYPE_ISIS_ADJACENCY
,

184 
	mMTYPE_ISIS_AREA
,

185 
	mMTYPE_ISIS_AREA_ADDR
,

186 
	mMTYPE_ISIS_TLV
,

187 
	mMTYPE_ISIS_DYNHN
,

188 
	mMTYPE_ISIS_SPFTREE
,

189 
	mMTYPE_ISIS_VERTEX
,

190 
	mMTYPE_ISIS_ROUTE_INFO
,

191 
	mMTYPE_ISIS_NEXTHOP
,

192 
	mMTYPE_ISIS_NEXTHOP6
,

193 
	mMTYPE_VTYSH_CONFIG
,

194 
	mMTYPE_VTYSH_CONFIG_LINE
,

195 
	mMTYPE_KULVISOR_CONTEXT
,

196 
	mMTYPE_KULVISOR_GUEST
,

197 
	mMTYPE_KULVISOR_GUEST_NAME
,

198 
	mMTYPE_KULVISOR_GUEST_VCONN_NAME
,

199 
	mMTYPE_KULVISOR_GUEST_SWITCH
,

200 
	mMTYPE_KULVISOR_GUEST_FLOWSPACE
,

201 
	mMTYPE_KULVISOR_SWITCH
,

202 
	mMTYPE_KULVISOR_SWITCH_NAME
,

203 
	mMTYPE_KULVISOR_SWITCH_HOSTNAME
,

204 
	mMTYPE_KULVISOR_XID_TRANS
,

205 
	mMTYPE_KULVISOR_FLOW_MATCH
,

206 
	mMTYPE_KULVISOR_FLOW_MOD
,

207 
	mMTYPE_KULVISOR_FLOW_INSTRUCTION
,

208 
	mMTYPE_KULVISOR_ACTION
,

209 
	mMTYPE_KULVISOR_TOKEN_BUCKET
,

210 
	mMTYPE_KULVISOR_TMP
,

211 
	mMTYPE_MAX
,

214 
mem‹y_li°
 
mem‹y_li°_lib
[];

215 
mem‹y_li°
 
mem‹y_li°_zebø
[];

216 
mem‹y_li°
 
mem‹y_li°_bgp
[];

217 
mem‹y_li°
 
mem‹y_li°_rù
[];

218 
mem‹y_li°
 
mem‹y_li°_rùng
[];

219 
mem‹y_li°
 
mem‹y_li°_o•f
[];

220 
mem‹y_li°
 
mem‹y_li°_o•f6
[];

221 
mem‹y_li°
 
mem‹y_li°_isis
[];

222 
mem‹y_li°
 
mem‹y_li°_vtysh
[];

223 
mem‹y_li°
 
mem‹y_li°_kulvis‹
[];

	@common-libs/3rd-party/quagga-lib/route_types.h

4 #i‚de‡
_QUAGGA_ROUTE_TYPES_H


5 
	#_QUAGGA_ROUTE_TYPES_H


	)

8 
	#QUAGGA_REDIST_STR_ZEBRA
 \

9 "‘ù|rùng|o•f|o•f6|isis|bgp)"

	)

10 
	#QUAGGA_REDIST_HELP_STR_ZEBRA
 \

16 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

19 
	#QUAGGA_REDIST_STR_RIPD
 \

20 "(kî√l|c⁄√˘ed|°©ic|o•f|isis|bgp)"

	)

21 
	#QUAGGA_REDIST_HELP_STR_RIPD
 \

27 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

30 
	#QUAGGA_REDIST_STR_RIPNGD
 \

31 "(kî√l|c⁄√˘ed|°©ic|o•f6|isis|bgp)"

	)

32 
	#QUAGGA_REDIST_HELP_STR_RIPNGD
 \

38 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

41 
	#QUAGGA_REDIST_STR_OSPFD
 \

42 "(kî√l|c⁄√˘ed|°©ic|rù|isis|bgp)"

	)

43 
	#QUAGGA_REDIST_HELP_STR_OSPFD
 \

49 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

52 
	#QUAGGA_REDIST_STR_OSPF6D
 \

53 "(kî√l|c⁄√˘ed|°©ic|rùng|isis|bgp)"

	)

54 
	#QUAGGA_REDIST_HELP_STR_OSPF6D
 \

60 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

63 
	#QUAGGA_REDIST_STR_ISISD
 \

64 "(kî√l|c⁄√˘ed|°©ic|rù|rùng|o•f|o•f6|bgp)"

	)

65 
	#QUAGGA_REDIST_HELP_STR_ISISD
 \

73 "B‹dî G©eway PrŸocﬁ (BGP)\n"

	)

76 
	#QUAGGA_REDIST_STR_BGPD
 \

77 "(kî√l|c⁄√˘ed|°©ic|rù|rùng|o•f|o•f6|isis)"

	)

78 
	#QUAGGA_REDIST_HELP_STR_BGPD
 \

86 "I¡îmedüã Sy°emÅÿI¡îmedüã Sy°em (IS-IS)\n"

	)

	@common-libs/3rd-party/quagga-lib/src/buffer.c

23 
	~<zebø.h
>

25 
	~"mem‹y.h
"

26 
	~"buf„r.h
"

27 
	~"log.h
"

28 
	~"√tw‹k.h
"

29 
	~<°ddef.h
>

34 
	sbuf„r


37 
buf„r_d©a
 *
	mhód
;

38 
buf„r_d©a
 *
	mèû
;

41 
size_t
 
	msize
;

45 
	sbuf„r_d©a


47 
buf„r_d©a
 *
	m√xt
;

50 
size_t
 
	m˝
;

53 
size_t
 
	m•
;

56 
	md©a
[];

63 
	#BUFFER_SIZE_DEFAULT
 4096

	)

66 
	#BUFFER_DATA_FREE
(
D
Ë
	`XFREE
(
MTYPE_BUFFER_DATA
, (D))

	)

69 
buf„r
 *

70 
	$buf„r_√w
 (
size_t
 
size
)

72 
buf„r
 *
b
;

74 
b
 = 
	`XCALLOC
 (
MTYPE_BUFFER
,  (
buf„r
));

76 i‡(
size
)

77 
b
->
size
 = size;

80 
size_t
 
deÁu…_size
;

81 i‡(!
deÁu…_size
)

83 
pgsz
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

84 
deÁu…_size
 = ((((
BUFFER_SIZE_DEFAULT
-1)/
pgsz
)+1)*pgsz);

86 
b
->
size
 = 
deÁu…_size
;

89  
b
;

90 
	}
}

94 
	$buf„r_‰ì
 (
buf„r
 *
b
)

96 
	`buf„r_ª£t
(
b
);

97 
	`XFREE
 (
MTYPE_BUFFER
, 
b
);

98 
	}
}

102 
	$buf„r_gë°r
 (
buf„r
 *
b
)

104 
size_t
 
tŸÀn
 = 0;

105 
buf„r_d©a
 *
d©a
;

106 *
s
;

107 *
p
;

109 
d©a
 = 
b
->
hód
; d©a; d©®d©a->
√xt
)

110 
tŸÀn
 +
d©a
->
˝
 - d©a->
•
;

111 i‡(!(
s
 = 
	`XMALLOC
(
MTYPE_TMP
, 
tŸÀn
+1)))

112  
NULL
;

113 
p
 = 
s
;

114 
d©a
 = 
b
->
hód
; d©a; d©®d©a->
√xt
)

116 
	`mem˝y
(
p
, 
d©a
->d©®+ d©a->
•
, d©a->
˝
 - data->sp);

117 
p
 +
d©a
->
˝
 - d©a->
•
;

119 *
p
 = '\0';

120  
s
;

121 
	}
}

125 
	$buf„r_em±y
 (
buf„r
 *
b
)

127  (
b
->
hód
 =
NULL
);

128 
	}
}

132 
	$buf„r_ª£t
 (
buf„r
 *
b
)

134 
buf„r_d©a
 *
d©a
;

135 
buf„r_d©a
 *
√xt
;

137 
d©a
 = 
b
->
hód
; d©a; d©®
√xt
)

139 
√xt
 = 
d©a
->next;

140 
	`BUFFER_DATA_FREE
(
d©a
);

142 
b
->
hód
 = b->
èû
 = 
NULL
;

143 
	}
}

146 
buf„r_d©a
 *

147 
	$buf„r_add
 (
buf„r
 *
b
)

149 
buf„r_d©a
 *
d
;

151 
d
 = 
	`XMALLOC
(
MTYPE_BUFFER_DATA
, 
	`off£tof
(
buf„r_d©a
, 
d©a
[
b
->
size
]));

152 
d
->
˝
 = d->
•
 = 0;

153 
d
->
√xt
 = 
NULL
;

155 i‡(
b
->
èû
)

156 
b
->
èû
->
√xt
 = 
d
;

158 
b
->
hód
 = 
d
;

159 
b
->
èû
 = 
d
;

161  
d
;

162 
	}
}

166 
	$buf„r_put
(
buf„r
 *
b
, c⁄° *
p
, 
size_t
 
size
)

168 
buf„r_d©a
 *
d©a
 = 
b
->
èû
;

169 c⁄° *
±r
 = 
p
;

172 
size
)

174 
size_t
 
chunk
;

177 i‡(
d©a
 =
NULL
 || d©a->
˝
 =
b
->
size
)

178 
d©a
 = 
	`buf„r_add
 (
b
);

180 
chunk
 = ((
size
 <(
b
->sizê- 
d©a
->
˝
)) ? size : (b->size - data->cp));

181 
	`mem˝y
 ((
d©a
->d©®+ d©a->
˝
), 
±r
, 
chunk
);

182 
size
 -
chunk
;

183 
±r
 +
chunk
;

184 
d©a
->
˝
 +
chunk
;

186 
	}
}

190 
	$buf„r_putc
 (
buf„r
 *
b
, 
u_ch¨
 
c
)

192 
	`buf„r_put
(
b
, &
c
, 1);

193 
	}
}

197 
	$buf„r_put°r
 (
buf„r
 *
b
, c⁄° *
c
)

199 
	`buf„r_put
(
b
, 
c
, 
	`°æí
(c));

200 
	}
}

204 
buf„r_°©us_t


205 
	$buf„r_Êush_Æl
 (
buf„r
 *
b
, 
fd
)

207 
buf„r_°©us_t
 
ªt
;

208 
buf„r_d©a
 *
hód
;

209 
size_t
 
hód_•
;

211 i‡(!
b
->
hód
)

212  
BUFFER_EMPTY
;

213 
hód_•
 = (
hód
 = 
b
->hód)->
•
;

215 (
ªt
 = 
	`buf„r_Êush_avaûabÀ
(
b
, 
fd
)Ë=
BUFFER_PENDING
)

217 i‡((
b
->
hód
 =hódË&& (
hód_•
 =hód->
•
Ë&& (
î∫o
 !
EINTR
))

219  
ªt
;

220 
hód_•
 = (
hód
 = 
b
->hód)->
•
;

223  
ªt
;

224 
	}
}

228 
buf„r_°©us_t


229 
	$buf„r_Êush_wödow
 (
buf„r
 *
b
, 
fd
, 
width
, 
height
,

230 
îa£_Êag
, 
no_m‹e_Êag
)

232 
nbyãs
;

233 
iov_Æloc
;

234 
iov_ödex
;

235 
iovec
 *
iov
;

236 
iovec
 
smÆl_iov
[3];

237 
m‹e
[] = " --More-- ";

238 
îa£
[] = { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,

241 
buf„r_d©a
 *
d©a
;

242 
cﬁumn
;

244 i‡(!
b
->
hód
)

245  
BUFFER_EMPTY
;

247 i‡(
height
 < 1)

249 
	`zlog_w¨n
("%s called withÇon-positive window height %d, forcingÅo 1",

250 
__func__
, 
height
);

251 
height
 = 1;

253 i‡(
height
 >= 2)

254 
height
--;

255 i‡(
width
 < 1)

257 
	`zlog_w¨n
("%s called withÇon-positive window width %d, forcingÅo 1",

258 
__func__
, 
width
);

259 
width
 = 1;

263 i‡(
b
->
hód
->
√xt
 =
NULL
)

265 
iov_Æloc
 = (
smÆl_iov
)/(small_iov[0]);

266 
iov
 = 
smÆl_iov
;

270 
iov_Æloc
 = ((
height
*(
width
+2))/
b
->
size
)+10;

271 
iov
 = 
	`XMALLOC
(
MTYPE_TMP
, 
iov_Æloc
*(*iov));

273 
iov_ödex
 = 0;

276 i‡(
îa£_Êag
)

278 
iov
[
iov_ödex
].
iov_ba£
 = 
îa£
;

279 
iov
[
iov_ödex
].
iov_Àn
 =  
îa£
;

280 
iov_ödex
++;

284 
cﬁumn
 = 1;

285 
d©a
 = 
b
->
hód
; d©®&& (
height
 > 0); d©®d©a->
√xt
)

287 
size_t
 
˝
;

289 
˝
 = 
d©a
->
•
;

290 (
˝
 < 
d©a
->˝Ë&& (
height
 > 0))

294 i‡(
d©a
->d©a[
˝
] == '\r')

295 
cﬁumn
 = 1;

296 i‡((
d©a
->d©a[
˝
] ='\n'Ë|| (
cﬁumn
 =
width
))

298 
cﬁumn
 = 1;

299 
height
--;

302 
cﬁumn
++;

303 
˝
++;

305 
iov
[
iov_ödex
].
iov_ba£
 = (*)(
d©a
->d©®+ d©a->
•
);

306 
iov
[
iov_ödex
++].
iov_Àn
 = 
˝
-
d©a
->
•
;

307 
d©a
->
•
 = 
˝
;

309 i‡(
iov_ödex
 =
iov_Æloc
)

312 
iov_Æloc
 *= 2;

313 i‡(
iov
 !
smÆl_iov
)

315 
	`zlog_w¨n
("%s: growing iovárrayÅo %d; "

317 
__func__
, 
iov_Æloc
, 
width
, 
height
, (
u_l⁄g
)
b
->
size
);

318 
iov
 = 
	`XREALLOC
(
MTYPE_TMP
, iov, 
iov_Æloc
*(*iov));

323 
	`zlog_îr
("%s: corruption detected: iov_small overflowed; "

325 
__func__
, 
b
->
hód
, b->
èû
, b->hód->
√xt
);

326 
iov
 = 
	`XMALLOC
(
MTYPE_TMP
, 
iov_Æloc
*(*iov));

327 
	`mem˝y
(
iov
, 
smÆl_iov
, (small_iov));

333 i‡(
b
->
èû
 && (b->èû->
•
 < b->èû->
˝
Ë&& !
no_m‹e_Êag
)

335 
iov
[
iov_ödex
].
iov_ba£
 = 
m‹e
;

336 
iov
[
iov_ödex
].
iov_Àn
 =  
m‹e
;

337 
iov_ödex
++;

341 #ifde‡
IOV_MAX


345 
iovec
 *
c_iov
 = 
iov
;

346 
nbyãs
 = 0;

348 
iov_ödex
 > 0)

350 
iov_size
;

352 
iov_size
 = ((
iov_ödex
 > 
IOV_MAX
) ? IOV_MAX : iov_index);

353 i‡((
nbyãs
 = 
	`wrôev
(
fd
, 
c_iov
, 
iov_size
)) < 0)

355 
	`zlog_w¨n
("%s: writevÅo fd %d failed: %s",

356 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

361 
c_iov
 +
iov_size
;

362 
iov_ödex
 -
iov_size
;

366 i‡((
nbyãs
 = 
	`wrôev
 (
fd
, 
iov
, 
iov_ödex
)) < 0)

367 
	`zlog_w¨n
("%s: writevÅo fd %d failed: %s",

368 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

372 
b
->
hód
 && (b->hód->
•
 =b->hód->
˝
))

374 
buf„r_d©a
 *
dñ
;

375 i‡(!(
b
->
hód
 = (
dñ
 = b->hód)->
√xt
))

376 
b
->
èû
 = 
NULL
;

377 
	`BUFFER_DATA_FREE
(
dñ
);

380 i‡(
iov
 !
smÆl_iov
)

381 
	`XFREE
 (
MTYPE_TMP
, 
iov
);

383  (
nbyãs
 < 0Ë? 
BUFFER_ERROR
 :

384 (
b
->
hód
 ? 
BUFFER_PENDING
 : 
BUFFER_EMPTY
);

385 
	}
}

392 
buf„r_°©us_t


393 
	$buf„r_Êush_avaûabÀ
(
buf„r
 *
b
, 
fd
)

399 #ifde‡
IOV_MAX


400 
	#MAX_CHUNKS
 ((
IOV_MAX
 >16Ë? 16 : IOV_MAX)

	)

402 
	#MAX_CHUNKS
 16

	)

404 
	#MAX_FLUSH
 131072

	)

406 
buf„r_d©a
 *
d
;

407 
size_t
 
wrôãn
;

408 
iovec
 
iov
[
MAX_CHUNKS
];

409 
size_t
 
iov˙t
 = 0;

410 
size_t
 
nbyã
 = 0;

412 
d
 = 
b
->
hód
; d && (
iov˙t
 < 
MAX_CHUNKS
Ë&& (
nbyã
 < 
MAX_FLUSH
);

413 
d
 = d->
√xt
, 
iov˙t
++)

415 
iov
[
iov˙t
].
iov_ba£
 = 
d
->
d©a
+d->
•
;

416 
nbyã
 +(
iov
[
iov˙t
].
iov_Àn
 = 
d
->
˝
-d->
•
);

419 i‡(!
nbyã
)

421  
BUFFER_EMPTY
;

424 i‡((
ssize_t
)(
wrôãn
 = 
	`wrôev
(
fd
,
iov
,
iov˙t
)) < 0)

426 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

428  
BUFFER_PENDING
;

429 
	`zlog_w¨n
("%s: writeÉrror on fd %d: %s",

430 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

431  
BUFFER_ERROR
;

435 
wrôãn
 > 0)

437 
buf„r_d©a
 *
d
;

438 i‡(!(
d
 = 
b
->
hód
))

440 
	`zlog_îr
("%s: corruption detected: buffer queueÉmpty, "

441 "buàwrôã¿i†%lu", 
__func__
, (
u_l⁄g
)
wrôãn
);

444 i‡(
wrôãn
 < 
d
->
˝
-d->
•
)

446 
d
->
•
 +
wrôãn
;

447  
BUFFER_PENDING
;

450 
wrôãn
 -(
d
->
˝
-d->
•
);

451 i‡(!(
b
->
hód
 = 
d
->
√xt
))

452 
b
->
èû
 = 
NULL
;

453 
	`BUFFER_DATA_FREE
(
d
);

456  
b
->
hód
 ? 
BUFFER_PENDING
 : 
BUFFER_EMPTY
;

458 #unde‡
MAX_CHUNKS


459 #unde‡
MAX_FLUSH


460 
	}
}

462 
buf„r_°©us_t


463 
	$buf„r_wrôe
(
buf„r
 *
b
, 
fd
, c⁄° *
p
, 
size_t
 
size
)

465 
ssize_t
 
nbyãs
;

472 i‡(
b
->
hód
 && (
	`buf„r_Êush_avaûabÀ
(b, 
fd
Ë=
BUFFER_ERROR
))

473  
BUFFER_ERROR
;

475 i‡(
b
->
hód
)

477 
nbyãs
 = 0;

478 i‡((
nbyãs
 = 
	`wrôe
(
fd
, 
p
, 
size
)) < 0)

480 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

481 
nbyãs
 = 0;

484 
	`zlog_w¨n
("%s: writeÉrror on fd %d: %s",

485 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

486  
BUFFER_ERROR
;

491 
size_t
 
wrôãn
 = 
nbyãs
;

492 i‡(
wrôãn
 < 
size
)

493 
	`buf„r_put
(
b
, ((c⁄° *)
p
)+
wrôãn
, 
size
-written);

495  
b
->
hód
 ? 
BUFFER_PENDING
 : 
BUFFER_EMPTY
;

496 
	}
}

	@common-libs/3rd-party/quagga-lib/src/checksum.c

9 
	~<zebø.h
>

10 
	~"checksum.h
"

13 
	$ö_cksum
(*
∑rg
, 
nbyãs
)

15 
u_sh‹t
 *
±r
 = 
∑rg
;

16 
sum
;

17 
u_sh‹t
 
oddbyã
;

18 
u_sh‹t
 
™swî
;

26 
sum
 = 0;

27 
nbyãs
 > 1) {

28 
sum
 +*
±r
++;

29 
nbyãs
 -= 2;

33 i‡(
nbyãs
 == 1) {

34 
oddbyã
 = 0;

35 *((
u_ch¨
 *Ë&
oddbyã
Ë*(u_ch¨ *)
±r
;

36 
sum
 +
oddbyã
;

43 
sum
 = (sum >> 16) + (sum & 0xffff);

44 
sum
 += (sum >> 16);

45 
™swî
 = ~
sum
;

46 (
™swî
);

47 
	}
}

50 
	#MODX
 4102

	)

54 
u_öt16_t


55 
	$Êëchî_checksum
(
u_ch¨
 * 
buf„r
, c⁄° 
size_t
 
Àn
, c⁄° 
uöt16_t
 
off£t
)

57 
u_öt8_t
 *
p
;

58 
x
, 
y
, 
c0
, 
c1
;

59 
u_öt16_t
 
checksum
;

60 
u_öt16_t
 *
csum
;

61 
size_t
 
∑πül_Àn
, 
i
, 
À·
 = 
Àn
;

63 
checksum
 = 0;

65 
	`as£π
 (
off£t
 < 
Àn
);

70 
csum
 = (
u_öt16_t
 *Ë(
buf„r
 + 
off£t
);

71 *(
csum
) = 0;

73 
p
 = 
buf„r
;

74 
c0
 = 0;

75 
c1
 = 0;

77 
À·
 != 0)

79 
∑πül_Àn
 = 
	`MIN
(
À·
, 
MODX
);

81 
i
 = 0; i < 
∑πül_Àn
; i++)

83 
c0
 = c0 + *(
p
++);

84 
c1
 +
c0
;

87 
c0
 = c0 % 255;

88 
c1
 = c1 % 255;

90 
À·
 -
∑πül_Àn
;

94 
x
 = ()((
Àn
 - 
off£t
 - 1Ë* 
c0
 - 
c1
) % 255;

96 i‡(
x
 <= 0)

97 
x
 += 255;

98 
y
 = 510 - 
c0
 - 
x
;

99 i‡(
y
 > 255)

100 
y
 -= 255;

107 
buf„r
[
off£t
] = 
x
;

108 
buf„r
[
off£t
 + 1] = 
y
;

111 
checksum
 = 
	`ht⁄s
((
x
 << 8Ë| (
y
 & 0xFF));

113  
checksum
;

114 
	}
}

	@common-libs/3rd-party/quagga-lib/src/command.c

22 
	~<zebø.h
>

25 
	~"mem‹y.h
"

26 
	~"log.h
"

27 
	~<vîsi⁄.h
>

28 
	~"thªad.h
"

29 
	~"ve˘‹.h
"

30 
	~"vty.h
"

31 
	~"comm™d.h
"

32 
	~"w‹kqueue.h
"

36 
ve˘‹
 
	gcmdvec
 = 
NULL
;

38 
desc
 
	gdesc_¸
;

39 *
	gcomm™d_¸
 = 
NULL
;

42 
ho°
 
	gho°
;

45 
cmd_node
 
	gauth_node
 =

47 
AUTH_NODE
,

51 
cmd_node
 
	gvõw_node
 =

53 
VIEW_NODE
,

57 
cmd_node
 
	gª°ri˘ed_node
 =

59 
RESTRICTED_NODE
,

63 
cmd_node
 
	gauth_íabÀ_node
 =

65 
AUTH_ENABLE_NODE
,

69 
cmd_node
 
	gíabÀ_node
 =

71 
ENABLE_NODE
,

75 
cmd_node
 
	gc⁄fig_node
 =

77 
CONFIG_NODE
,

83 c⁄° *
	gdeÁu…_mŸd
 =

84 "\r\n\
" 
QUAGGA_PROGNAME
 " (vîsi⁄ " 
QUAGGA_VERSION
 ").\r\n\
" 
QUAGGA_COPYRIGHT
 "\r\n\
\r\n";

90 c⁄° 
	sÁcûôy_m≠
 {

91 
	mÁcûôy
;

92 c⁄° *
	m«me
;

93 
size_t
 
	mm©ch
;

94 } 
	gsy¶og_Ácûôõs
[] =

96 { 
LOG_KERN
, "kern", 1 },

97 { 
LOG_USER
, "user", 2 },

98 { 
LOG_MAIL
, "mail", 1 },

99 { 
LOG_DAEMON
, "daemon", 1 },

100 { 
LOG_AUTH
, "auth", 1 },

101 { 
LOG_SYSLOG
, "syslog", 1 },

102 { 
LOG_LPR
, "lpr", 2 },

103 { 
LOG_NEWS
, "news", 1 },

104 { 
LOG_UUCP
, "uucp", 2 },

105 { 
LOG_CRON
, "cron", 1 },

106 #ifde‡
LOG_FTP


107 { 
LOG_FTP
, "ftp", 1 },

109 { 
LOG_LOCAL0
, "local0", 6 },

110 { 
LOG_LOCAL1
, "local1", 6 },

111 { 
LOG_LOCAL2
, "local2", 6 },

112 { 
LOG_LOCAL3
, "local3", 6 },

113 { 
LOG_LOCAL4
, "local4", 6 },

114 { 
LOG_LOCAL5
, "local5", 6 },

115 { 
LOG_LOCAL6
, "local6", 6 },

116 { 
LOG_LOCAL7
, "local7", 6 },

117 { 0, 
NULL
, 0 },

121 
	$Ácûôy_«me
(
Ácûôy
)

123 c⁄° 
Ácûôy_m≠
 *
fm
;

125 
fm
 = 
sy¶og_Ácûôõs
; fm->
«me
; fm++)

126 i‡(
fm
->
Ácûôy
 == facility)

127  
fm
->
«me
;

129 
	}
}

132 
	$Ácûôy_m©ch
(c⁄° *
°r
)

134 c⁄° 
Ácûôy_m≠
 *
fm
;

136 
fm
 = 
sy¶og_Ácûôõs
; fm->
«me
; fm++)

137 i‡(!
	`°∫cmp
(
°r
,
fm
->
«me
,fm->
m©ch
))

138  
fm
->
Ácûôy
;

140 
	}
}

143 
	$Àvñ_m©ch
(c⁄° *
s
)

145 
Àvñ
 ;

147  
Àvñ
 = 0 ; 
zlog_¥i‹ôy
 [Àvñ] !
NULL
 ;Üevel ++ )

148 i‡(!
	`°∫cmp
 (
s
, 
zlog_¥i‹ôy
[
Àvñ
], 2))

149  
Àvñ
;

150  
ZLOG_DISABLED
;

151 
	}
}

155 
	$¥öt_vîsi⁄
 (c⁄° *
¥og«me
)

157 
	`¥ötf
 ("%†vîsi⁄ %s\n", 
¥og«me
, 
QUAGGA_VERSION
);

158 
	`¥ötf
 ("%s\n", 
QUAGGA_COPYRIGHT
);

159 
	}
}

165 
	$¨gv_c⁄ˇt
 (c⁄° **
¨gv
, 
¨gc
, 
shi·
)

167 
i
;

168 
size_t
 
Àn
;

169 *
°r
;

170 *
p
;

172 
Àn
 = 0;

173 
i
 = 
shi·
; i < 
¨gc
; i++)

174 
Àn
 +
	`°æí
(
¨gv
[
i
])+1;

175 i‡(!
Àn
)

176  
NULL
;

177 
p
 = 
°r
 = 
	`XMALLOC
(
MTYPE_TMP
, 
Àn
);

178 
i
 = 
shi·
; i < 
¨gc
; i++)

180 
size_t
 
¨gÀn
;

181 
	`mem˝y
(
p
, 
¨gv
[
i
], (
¨gÀn
 = 
	`°æí
(argv[i])));

182 
p
 +
¨gÀn
;

183 *
p
++ = ' ';

185 *(
p
-1) = '\0';

186  
°r
;

187 
	}
}

191 
ö°Æl_node
 (
cmd_node
 *
node
,

192 (*
func
Ë(
vty
 *))

194 
	`ve˘‹_£t_ödex
 (
cmdvec
, 
node
->node,Çode);

195 
node
->
func
 = func;

196 
node
->
cmd_ve˘‹
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

197 
	}
}

201 
	$cmp_node
 (c⁄° *
p
, c⁄° *
q
)

203 c⁄° 
cmd_ñemít
 *
a
 = *(cmd_ñemíà* c⁄° *)
p
;

204 c⁄° 
cmd_ñemít
 *
b
 = *(cmd_ñemíà* c⁄° *)
q
;

206  
	`°rcmp
 (
a
->
°rög
, 
b
->string);

207 
	}
}

210 
	$cmp_desc
 (c⁄° *
p
, c⁄° *
q
)

212 c⁄° 
desc
 *
a
 = *(des¯* c⁄° *)
p
;

213 c⁄° 
desc
 *
b
 = *(des¯* c⁄° *)
q
;

215  
	`°rcmp
 (
a
->
cmd
, 
b
->cmd);

216 
	}
}

220 
	$s‹t_node
 ()

222 
i
, 
j
;

223 
cmd_node
 *
˙ode
;

224 
ve˘‹
 
descvec
;

225 
cmd_ñemít
 *cmd_element;

227 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmdvec
); i++)

228 i‡((
˙ode
 = 
	`ve˘‹_¶Ÿ
 (
cmdvec
, 
i
)Ë!
NULL
)

230 
ve˘‹
 
cmd_ve˘‹
 = 
˙ode
->cmd_vector;

231 
	`qs‹t
 (
cmd_ve˘‹
->
ödex
, 
	`ve˘‹_a˘ive
 (cmd_vector),

232  (*), 
cmp_node
);

234 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); j++)

235 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
j
)Ë!
NULL


236 && 
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
))

238 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít
->
°rvec
,

239 
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
) - 1);

240 
	`qs‹t
 (
descvec
->
ödex
, 
	`ve˘‹_a˘ive
 (descvec),

241  (*), 
cmp_desc
);

244 
	}
}

249 
ve˘‹


250 
	$cmd_make_°rvec
 (c⁄° *
°rög
)

252 c⁄° *
˝
, *
°¨t
;

253 *
tokí
;

254 
°æí
;

255 
ve˘‹
 
°rvec
;

257 i‡(
°rög
 =
NULL
)

258  
NULL
;

260 
˝
 = 
°rög
;

263 
	`is•a˚
 ((Ë*
˝
) && *cp != '\0')

264 
˝
++;

267 i‡(*
˝
 == '\0')

268  
NULL
;

270 i‡(*
˝
 == '!' || *cp == '#')

271  
NULL
;

274 
°rvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

279 
°¨t
 = 
˝
;

280 !(
	`is•a˚
 ((Ë*
˝
) || *cp == '\r' || *cp == '\n') &&

281 *
˝
 != '\0')

282 
˝
++;

283 
°æí
 = 
˝
 - 
°¨t
;

284 
tokí
 = 
	`XMALLOC
 (
MTYPE_STRVEC
, 
°æí
 + 1);

285 
	`mem˝y
 (
tokí
, 
°¨t
, 
°æí
);

286 *(
tokí
 + 
°æí
) = '\0';

287 
	`ve˘‹_£t
 (
°rvec
, 
tokí
);

289 (
	`is•a˚
 ((Ë*
˝
) || *cp == '\n' || *cp == '\r') &&

290 *
˝
 != '\0')

291 
˝
++;

293 i‡(*
˝
 == '\0')

294  
°rvec
;

296 
	}
}

300 
	$cmd_‰ì_°rvec
 (
ve˘‹
 
v
)

302 
i
;

303 *
˝
;

305 i‡(!
v
)

308 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

309 i‡((
˝
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

310 
	`XFREE
 (
MTYPE_STRVEC
, 
˝
);

312 
	`ve˘‹_‰ì
 (
v
);

313 
	}
}

317 
	$cmd_desc_°r
 (c⁄° **
°rög
)

319 c⁄° *
˝
, *
°¨t
;

320 *
tokí
;

321 
°æí
;

323 
˝
 = *
°rög
;

325 i‡(
˝
 =
NULL
)

326  
NULL
;

329 
	`is•a˚
 ((Ë*
˝
) && *cp != '\0')

330 
˝
++;

333 i‡(*
˝
 == '\0')

334  
NULL
;

336 
°¨t
 = 
˝
;

338 !(*
˝
 == '\r' || *cp == '\n') && *cp != '\0')

339 
˝
++;

341 
°æí
 = 
˝
 - 
°¨t
;

342 
tokí
 = 
	`XMALLOC
 (
MTYPE_STRVEC
, 
°æí
 + 1);

343 
	`mem˝y
 (
tokí
, 
°¨t
, 
°æí
);

344 *(
tokí
 + 
°æí
) = '\0';

346 *
°rög
 = 
˝
;

348  
tokí
;

349 
	}
}

352 
ve˘‹


353 
	$cmd_make_descvec
 (c⁄° *
°rög
, c⁄° *
desc°r
)

355 
mu…ùÀ
 = 0;

356 c⁄° *
•
;

357 *
tokí
;

358 
Àn
;

359 c⁄° *
˝
;

360 c⁄° *
dp
;

361 
ve˘‹
 
Ælvec
;

362 
ve˘‹
 
°rvec
 = 
NULL
;

363 
desc
 *desc;

365 
˝
 = 
°rög
;

366 
dp
 = 
desc°r
;

368 i‡(
˝
 =
NULL
)

369  
NULL
;

371 
Ælvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

375 
	`is•a˚
 ((Ë*
˝
) && *cp != '\0')

376 
˝
++;

378 i‡(*
˝
 == '(')

380 
mu…ùÀ
 = 1;

381 
˝
++;

383 i‡(*
˝
 == ')')

385 
mu…ùÀ
 = 0;

386 
˝
++;

388 i‡(*
˝
 == '|')

390 i‡(! 
mu…ùÀ
)

392 
	`Ârötf
 (
°dîr
, "Comm™dÖ¨£Éº‹!: %s\n", 
°rög
);

393 
	`exô
 (1);

395 
˝
++;

398 
	`is•a˚
 ((Ë*
˝
) && *cp != '\0')

399 
˝
++;

401 i‡(*
˝
 == '(')

403 
mu…ùÀ
 = 1;

404 
˝
++;

407 i‡(*
˝
 == '\0')

408  
Ælvec
;

410 
•
 = 
˝
;

412 ! (
	`is•a˚
 ((Ë*
˝
) || *cp == '\r' || *cp == '\n' || *cp == ')' || *cp == '|') && *cp != '\0')

413 
˝
++;

415 
Àn
 = 
˝
 - 
•
;

417 
tokí
 = 
	`XMALLOC
 (
MTYPE_STRVEC
, 
Àn
 + 1);

418 
	`mem˝y
 (
tokí
, 
•
, 
Àn
);

419 *(
tokí
 + 
Àn
) = '\0';

421 
desc
 = 
	`XCALLOC
 (
MTYPE_DESC
,  (desc));

422 
desc
->
cmd
 = 
tokí
;

423 
desc
->
°r
 = 
	`cmd_desc_°r
 (&
dp
);

425 i‡(
mu…ùÀ
)

427 i‡(
mu…ùÀ
 == 1)

429 
°rvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

430 
	`ve˘‹_£t
 (
Ælvec
, 
°rvec
);

432 
mu…ùÀ
++;

436 
°rvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

437 
	`ve˘‹_£t
 (
Ælvec
, 
°rvec
);

439 
	`ve˘‹_£t
 (
°rvec
, 
desc
);

441 
	}
}

446 
	$cmd_cmdsize
 (
ve˘‹
 
°rvec
)

448 
i
;

449 
size
 = 0;

450 
ve˘‹
 
descvec
;

451 
desc
 *desc;

453 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
°rvec
); i++)

454 i‡((
descvec
 = 
	`ve˘‹_¶Ÿ
 (
°rvec
, 
i
)Ë!
NULL
)

456 i‡((
	`ve˘‹_a˘ive
 (
descvec
)) == 1

457 && (
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 0)Ë!
NULL
)

459 i‡(
desc
->
cmd
 =
NULL
 || 
	`CMD_OPTION
 (desc->cmd))

460  
size
;

462 
size
++;

465 
size
++;

467  
size
;

468 
	}
}

472 
	$cmd_¥om±
 (
node_ty≥
 
node
)

474 
cmd_node
 *
˙ode
;

476 
˙ode
 = 
	`ve˘‹_¶Ÿ
 (
cmdvec
, 
node
);

477  
˙ode
->
¥om±
;

478 
	}
}

482 
	$ö°Æl_ñemít
 (
node_ty≥
 
¡y≥
, 
cmd_ñemít
 *
cmd
)

484 
cmd_node
 *
˙ode
;

487 i‡(!
cmdvec
)

490 
˙ode
 = 
	`ve˘‹_¶Ÿ
 (
cmdvec
, 
¡y≥
);

492 i‡(
˙ode
 =
NULL
)

494 
	`Ârötf
 (
°dîr
, "CommandÇode %d doesn'tÉxist,Ölease check it\n",

495 
¡y≥
);

496 
	`exô
 (1);

499 
	`ve˘‹_£t
 (
˙ode
->
cmd_ve˘‹
, 
cmd
);

500 
cmd
->
¡y≥
 =Çtype;

502 i‡(
cmd
->
°rvec
 =
NULL
)

503 
cmd
->
°rvec
 = 
	`cmd_make_descvec
 (cmd->
°rög
, cmd->
doc
);

505 
cmd
->
cmdsize
 = 
	`cmd_cmdsize
 (cmd->
°rvec
);

506 
	}
}

510 
	$ö°Æl_ñemít_©å_ty≥
 (
node_ty≥
 
¡y≥
, 
cmd_ñemít
 *
cmd
,

511 
node_ty≥
 
©å_ty≥
)

513 
cmd_node
 *
˙ode
;

516 i‡(!
cmdvec
)

519 
˙ode
 = 
	`ve˘‹_¶Ÿ
 (
cmdvec
, 
¡y≥
);

521 i‡(
˙ode
 =
NULL
)

523 
	`Ârötf
 (
°dîr
, "CommandÇode %d doesn'tÉxist,Ölease check it\n",

524 
¡y≥
);

525 
	`exô
 (1);

528 
	`ve˘‹_£t
 (
˙ode
->
cmd_ve˘‹
, 
cmd
);

529 
cmd
->
¡y≥
 = 
©å_ty≥
;

531 i‡(
cmd
->
°rvec
 =
NULL
)

532 
cmd
->
°rvec
 = 
	`cmd_make_descvec
 (cmd->
°rög
, cmd->
doc
);

534 
cmd
->
cmdsize
 = 
	`cmd_cmdsize
 (cmd->
°rvec
);

535 
	}
}

537 c⁄° 
	gôﬂ64
[] =

541 
	$to64
(*
s
, 
v
, 
n
)

543 --
n
 >= 0)

545 *
s
++ = 
ôﬂ64
[
v
&0x3f];

546 
v
 >>= 6;

548 
	}
}

551 
	$zí¸y±
 (c⁄° *
∑sswd
)

553 
ß…
[6];

554 
timevÆ
 
tv
;

555 *
	`¸y±
 (const *, const *);

557 
	`gëtimeofday
(&
tv
,0);

559 
	`to64
(&
ß…
[0], 
	`øndom
(), 3);

560 
	`to64
(&
ß…
[3], 
tv
.
tv_u£c
, 3);

561 
ß…
[5] = '\0';

563  
	`¸y±
 (
∑sswd
, 
ß…
);

564 
	}
}

568 
	$c⁄fig_wrôe_ho°
 (
vty
 *vty)

570 i‡(
ho°
.
«me
)

571 
	`vty_out
 (
vty
, "ho°«mê%s%s", 
ho°
.
«me
, 
VTY_NEWLINE
);

573 i‡(
ho°
.
í¸y±
)

575 i‡(
ho°
.
∑ssw‹d_í¸y±
)

576 
	`vty_out
 (
vty
, "∑ssw‹d 8 %s%s", 
ho°
.
∑ssw‹d_í¸y±
, 
VTY_NEWLINE
);

577 i‡(
ho°
.
íabÀ_í¸y±
)

578 
	`vty_out
 (
vty
, "íabÀÖassw‹d 8 %s%s", 
ho°
.
íabÀ_í¸y±
, 
VTY_NEWLINE
);

582 i‡(
ho°
.
∑ssw‹d
)

583 
	`vty_out
 (
vty
, "∑ssw‹d %s%s", 
ho°
.
∑ssw‹d
, 
VTY_NEWLINE
);

584 i‡(
ho°
.
íabÀ
)

585 
	`vty_out
 (
vty
, "íabÀÖassw‹d %s%s", 
ho°
.
íabÀ
, 
VTY_NEWLINE
);

588 #ifde‡ 
MUL_CONFIG_NEED_ZLOG


589 i‡(
zlog_deÁu…
->
deÁu…_lvl
 !
LOG_DEBUG
)

591 
	`vty_out
 (
vty
, "! N.B. The 'logÅrap' command is deprecated.%s",

592 
VTY_NEWLINE
);

593 
	`vty_out
 (
vty
, "logÅrap %s%s",

594 
zlog_¥i‹ôy
[
zlog_deÁu…
->
deÁu…_lvl
], 
VTY_NEWLINE
);

597 i‡(
ho°
.
logfûe
 && (
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_FILE
] !
ZLOG_DISABLED
))

599 
	`vty_out
 (
vty
, "log fûê%s", 
ho°
.
logfûe
);

600 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_FILE
] !zlog_deÁu…->
deÁu…_lvl
)

601 
	`vty_out
 (
vty
, " %s",

602 
zlog_¥i‹ôy
[
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_FILE
]]);

603 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

606 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_STDOUT
] !
ZLOG_DISABLED
)

608 
	`vty_out
 (
vty
, "log stdout");

609 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_STDOUT
] !zlog_deÁu…->
deÁu…_lvl
)

610 
	`vty_out
 (
vty
, " %s",

611 
zlog_¥i‹ôy
[
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_STDOUT
]]);

612 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

615 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
] =
ZLOG_DISABLED
)

616 
	`vty_out
(
vty
,"nÿlog m⁄ô‹%s",
VTY_NEWLINE
);

617 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
] !zlog_deÁu…->
deÁu…_lvl
)

618 
	`vty_out
(
vty
,"log monitor %s%s",

619 
zlog_¥i‹ôy
[
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
]],
VTY_NEWLINE
);

621 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
] !
ZLOG_DISABLED
)

623 
	`vty_out
 (
vty
, "log syslog");

624 i‡(
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
] !zlog_deÁu…->
deÁu…_lvl
)

625 
	`vty_out
 (
vty
, " %s",

626 
zlog_¥i‹ôy
[
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
]]);

627 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

630 i‡(
zlog_deÁu…
->
Ácûôy
 !
LOG_DAEMON
)

631 
	`vty_out
 (
vty
, "log facility %s%s",

632 
	`Ácûôy_«me
(
zlog_deÁu…
->
Ácûôy
), 
VTY_NEWLINE
);

634 i‡(
zlog_deÁu…
->
ªc‹d_¥i‹ôy
 == 1)

635 
	`vty_out
 (
vty
, "logÑec‹d-¥i‹ôy%s", 
VTY_NEWLINE
);

637 i‡(
zlog_deÁu…
->
time°amp_¥ecisi⁄
 > 0)

638 
	`vty_out
 (
vty
, "logÅimestampÖrecision %d%s",

639 
zlog_deÁu…
->
time°amp_¥ecisi⁄
, 
VTY_NEWLINE
);

643 i‡(
ho°
.
adv™˚d
)

644 
	`vty_out
 (
vty
, "£rvi˚ádv™˚d-vty%s", 
VTY_NEWLINE
);

646 i‡(
ho°
.
í¸y±
)

647 
	`vty_out
 (
vty
, "£rvi˚Öassw‹d-í¸y±i⁄%s", 
VTY_NEWLINE
);

649 i‡(
ho°
.
löes
 >= 0)

650 
	`vty_out
 (
vty
, "£rvi˚ÅîmöÆ-Àngth %d%s", 
ho°
.
löes
,

651 
VTY_NEWLINE
);

653 i‡(
ho°
.
mŸdfûe
)

654 
	`vty_out
 (
vty
, "b™√∏mŸd fûê%s%s", 
ho°
.
mŸdfûe
, 
VTY_NEWLINE
);

655 i‡(! 
ho°
.
mŸd
)

656 
	`vty_out
 (
vty
, "nÿb™√∏mŸd%s", 
VTY_NEWLINE
);

659 
	}
}

662 
ve˘‹


663 
	$cmd_node_ve˘‹
 (
ve˘‹
 
v
, 
node_ty≥
 
¡y≥
)

665 
cmd_node
 *
˙ode
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
¡y≥
);

666  
˙ode
->
cmd_ve˘‹
;

667 
	}
}

673 
	$cmd_fûãr_by_symbﬁ
 (*
comm™d
, *
symbﬁ
)

675 
i
, 
lim
;

677 i‡(
	`°rcmp
 (
symbﬁ
, "IPV4_ADDRESS") == 0)

679 
i
 = 0;

680 
lim
 = 
	`°æí
 (
comm™d
);

681 
i
 < 
lim
)

683 i‡(! (
	`isdigô
 ((Ë
comm™d
[
i
]) || command[i] == '.' || command[i] == '/'))

685 
i
++;

689 i‡(
	`°rcmp
 (
symbﬁ
, "STRING") == 0)

691 
i
 = 0;

692 
lim
 = 
	`°æí
 (
comm™d
);

693 
i
 < 
lim
)

695 i‡(! (
	`ißÕha
 ((Ë
comm™d
[
i
]) || command[i] == '_' || command[i] == '-'))

697 
i
++;

701 i‡(
	`°rcmp
 (
symbﬁ
, "IFNAME") == 0)

703 
i
 = 0;

704 
lim
 = 
	`°æí
 (
comm™d
);

705 
i
 < 
lim
)

707 i‡(! 
	`iß um
 ((Ë
comm™d
[
i
]))

709 
i
++;

714 
	}
}

718 
	em©ch_ty≥


720 
	mno_m©ch
,

721 
	mexãnd_m©ch
,

722 
	mùv4_¥efix_m©ch
,

723 
	mùv4_m©ch
,

724 
	mùv6_¥efix_m©ch
,

725 
	mùv6_m©ch
,

726 
	mønge_m©ch
,

727 
	mv¨¨g_m©ch
,

728 
	m∑πly_m©ch
,

729 
	mexa˘_m©ch


732 
m©ch_ty≥


733 
	$cmd_ùv4_m©ch
 (c⁄° *
°r
)

735 c⁄° *
•
;

736 
dŸs
 = 0, 
nums
 = 0;

737 
buf
[4];

739 i‡(
°r
 =
NULL
)

740  
∑πly_m©ch
;

744 
	`mem£t
 (
buf
, 0,  (buf));

745 
•
 = 
°r
;

746 *
°r
 != '\0')

748 i‡(*
°r
 == '.')

750 i‡(
dŸs
 >= 3)

751  
no_m©ch
;

753 i‡(*(
°r
 + 1) == '.')

754  
no_m©ch
;

756 i‡(*(
°r
 + 1) == '\0')

757  
∑πly_m©ch
;

759 
dŸs
++;

762 i‡(!
	`isdigô
 ((Ë*
°r
))

763  
no_m©ch
;

765 
°r
++;

768 i‡(
°r
 - 
•
 > 3)

769  
no_m©ch
;

771 
	`°∫˝y
 (
buf
, 
•
, 
°r
 - sp);

772 i‡(
	`©oi
 (
buf
) > 255)

773  
no_m©ch
;

775 
nums
++;

777 i‡(*
°r
 == '\0')

780 
°r
++;

783 i‡(
nums
 < 4)

784  
∑πly_m©ch
;

786  
exa˘_m©ch
;

787 
	}
}

789 
m©ch_ty≥


790 
	$cmd_ùv4_¥efix_m©ch
 (c⁄° *
°r
)

792 c⁄° *
•
;

793 
dŸs
 = 0;

794 
buf
[4];

796 i‡(
°r
 =
NULL
)

797  
∑πly_m©ch
;

801 
	`mem£t
 (
buf
, 0,  (buf));

802 
•
 = 
°r
;

803 *
°r
 != '\0' && *str != '/')

805 i‡(*
°r
 == '.')

807 i‡(
dŸs
 == 3)

808  
no_m©ch
;

810 i‡(*(
°r
 + 1) == '.' || *(str + 1) == '/')

811  
no_m©ch
;

813 i‡(*(
°r
 + 1) == '\0')

814  
∑πly_m©ch
;

816 
dŸs
++;

820 i‡(!
	`isdigô
 ((Ë*
°r
))

821  
no_m©ch
;

823 
°r
++;

826 i‡(
°r
 - 
•
 > 3)

827  
no_m©ch
;

829 
	`°∫˝y
 (
buf
, 
•
, 
°r
 - sp);

830 i‡(
	`©oi
 (
buf
) > 255)

831  
no_m©ch
;

833 i‡(
dŸs
 == 3)

835 i‡(*
°r
 == '/')

837 i‡(*(
°r
 + 1) == '\0')

838  
∑πly_m©ch
;

840 
°r
++;

843 i‡(*
°r
 == '\0')

844  
∑πly_m©ch
;

847 i‡(*
°r
 == '\0')

848  
∑πly_m©ch
;

850 
°r
++;

853 
•
 = 
°r
;

854 *
°r
 != '\0')

856 i‡(!
	`isdigô
 ((Ë*
°r
))

857  
no_m©ch
;

859 
°r
++;

862 i‡(
	`©oi
 (
•
) > 32)

863  
no_m©ch
;

865  
exa˘_m©ch
;

866 
	}
}

868 
	#IPV6_ADDR_STR
 "0123456789abcdefABCDEF:.%"

	)

869 
	#IPV6_PREFIX_STR
 "0123456789abcdefABCDEF:.%/"

	)

870 
	#STATE_START
 1

	)

871 
	#STATE_COLON
 2

	)

872 
	#STATE_DOUBLE
 3

	)

873 
	#STATE_ADDR
 4

	)

874 
	#STATE_DOT
 5

	)

875 
	#STATE_SLASH
 6

	)

876 
	#STATE_MASK
 7

	)

878 #ifde‡
HAVE_IPV6


880 
m©ch_ty≥


881 
	$cmd_ùv6_m©ch
 (c⁄° *
°r
)

883 
°©e
 = 
STATE_START
;

884 
cﬁ⁄s
 = 0, 
nums
 = 0, 
doubÀ_cﬁ⁄
 = 0;

885 c⁄° *
•
 = 
NULL
;

886 
sockaddr_ö6
 
sö6_dummy
;

887 
ªt
;

889 i‡(
°r
 =
NULL
)

890  
∑πly_m©ch
;

892 i‡(
	`°r•n
 (
°r
, 
IPV6_ADDR_STR
Ë!
	`°æí
 (str))

893  
no_m©ch
;

899 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
°r
, &
sö6_dummy
.
sö6_addr
);

901 i‡(
ªt
 == 1)

902  
exa˘_m©ch
;

904 *
°r
 != '\0')

906 
°©e
)

908 
STATE_START
:

909 i‡(*
°r
 == ':')

911 i‡(*(
°r
 + 1) != ':' && *(str + 1) != '\0')

912  
no_m©ch
;

913 
cﬁ⁄s
--;

914 
°©e
 = 
STATE_COLON
;

918 
•
 = 
°r
;

919 
°©e
 = 
STATE_ADDR
;

923 
STATE_COLON
:

924 
cﬁ⁄s
++;

925 i‡(*(
°r
 + 1) == ':')

926 
°©e
 = 
STATE_DOUBLE
;

929 
•
 = 
°r
 + 1;

930 
°©e
 = 
STATE_ADDR
;

933 
STATE_DOUBLE
:

934 i‡(
doubÀ_cﬁ⁄
)

935  
no_m©ch
;

937 i‡(*(
°r
 + 1) == ':')

938  
no_m©ch
;

941 i‡(*(
°r
 + 1) != '\0')

942 
cﬁ⁄s
++;

943 
•
 = 
°r
 + 1;

944 
°©e
 = 
STATE_ADDR
;

947 
doubÀ_cﬁ⁄
++;

948 
nums
++;

950 
STATE_ADDR
:

951 i‡(*(
°r
 + 1) == ':' || *(str + 1) == '\0')

953 i‡(
°r
 - 
•
 > 3)

954  
no_m©ch
;

956 
nums
++;

957 
°©e
 = 
STATE_COLON
;

959 i‡(*(
°r
 + 1) == '.')

960 
°©e
 = 
STATE_DOT
;

962 
STATE_DOT
:

963 
°©e
 = 
STATE_ADDR
;

969 i‡(
nums
 > 8)

970  
no_m©ch
;

972 i‡(
cﬁ⁄s
 > 7)

973  
no_m©ch
;

975 
°r
++;

979 i‡(
nums
 < 11)

980  
∑πly_m©ch
;

983  
exa˘_m©ch
;

984 
	}
}

986 
m©ch_ty≥


987 
	$cmd_ùv6_¥efix_m©ch
 (c⁄° *
°r
)

989 
°©e
 = 
STATE_START
;

990 
cﬁ⁄s
 = 0, 
nums
 = 0, 
doubÀ_cﬁ⁄
 = 0;

991 
mask
;

992 c⁄° *
•
 = 
NULL
;

993 *
íd±r
 = 
NULL
;

995 i‡(
°r
 =
NULL
)

996  
∑πly_m©ch
;

998 i‡(
	`°r•n
 (
°r
, 
IPV6_PREFIX_STR
Ë!
	`°æí
 (str))

999  
no_m©ch
;

1001 *
°r
 !'\0' && 
°©e
 !
STATE_MASK
)

1003 
°©e
)

1005 
STATE_START
:

1006 i‡(*
°r
 == ':')

1008 i‡(*(
°r
 + 1) != ':' && *(str + 1) != '\0')

1009  
no_m©ch
;

1010 
cﬁ⁄s
--;

1011 
°©e
 = 
STATE_COLON
;

1015 
•
 = 
°r
;

1016 
°©e
 = 
STATE_ADDR
;

1020 
STATE_COLON
:

1021 
cﬁ⁄s
++;

1022 i‡(*(
°r
 + 1) == '/')

1023  
no_m©ch
;

1024 i‡(*(
°r
 + 1) == ':')

1025 
°©e
 = 
STATE_DOUBLE
;

1028 
•
 = 
°r
 + 1;

1029 
°©e
 = 
STATE_ADDR
;

1032 
STATE_DOUBLE
:

1033 i‡(
doubÀ_cﬁ⁄
)

1034  
no_m©ch
;

1036 i‡(*(
°r
 + 1) == ':')

1037  
no_m©ch
;

1040 i‡(*(
°r
 + 1) != '\0' && *(str + 1) != '/')

1041 
cﬁ⁄s
++;

1042 
•
 = 
°r
 + 1;

1044 i‡(*(
°r
 + 1) == '/')

1045 
°©e
 = 
STATE_SLASH
;

1047 
°©e
 = 
STATE_ADDR
;

1050 
doubÀ_cﬁ⁄
++;

1051 
nums
 += 1;

1053 
STATE_ADDR
:

1054 i‡(*(
°r
 + 1) == ':' || *(str + 1) == '.'

1055 || *(
°r
 + 1) == '\0' || *(str + 1) == '/')

1057 i‡(
°r
 - 
•
 > 3)

1058  
no_m©ch
;

1060 ; 
•
 <
°r
; sp++)

1061 i‡(*
•
 == '/')

1062  
no_m©ch
;

1064 
nums
++;

1066 i‡(*(
°r
 + 1) == ':')

1067 
°©e
 = 
STATE_COLON
;

1068 i‡(*(
°r
 + 1) == '.')

1069 
°©e
 = 
STATE_DOT
;

1070 i‡(*(
°r
 + 1) == '/')

1071 
°©e
 = 
STATE_SLASH
;

1074 
STATE_DOT
:

1075 
°©e
 = 
STATE_ADDR
;

1077 
STATE_SLASH
:

1078 i‡(*(
°r
 + 1) == '\0')

1079  
∑πly_m©ch
;

1081 
°©e
 = 
STATE_MASK
;

1087 i‡(
nums
 > 11)

1088  
no_m©ch
;

1090 i‡(
cﬁ⁄s
 > 7)

1091  
no_m©ch
;

1093 
°r
++;

1096 i‡(
°©e
 < 
STATE_MASK
)

1097  
∑πly_m©ch
;

1099 
mask
 = 
	`°πﬁ
 (
°r
, &
íd±r
, 10);

1100 i‡(*
íd±r
 != '\0')

1101  
no_m©ch
;

1103 i‡(
mask
 < 0 || mask > 128)

1104  
no_m©ch
;

1114  
exa˘_m©ch
;

1115 
	}
}

1119 
	#DECIMAL_STRLEN_MAX
 10

	)

1122 
	$cmd_ønge_m©ch
 (c⁄° *
ønge
, c⁄° *
°r
)

1124 *
p
;

1125 
buf
[
DECIMAL_STRLEN_MAX
 + 1];

1126 *
íd±r
 = 
NULL
;

1127 
mö
, 
max
, 
vÆ
;

1129 i‡(
°r
 =
NULL
)

1132 
vÆ
 = 
	`°πoul
 (
°r
, &
íd±r
, 10);

1133 i‡(*
íd±r
 != '\0')

1136 
ønge
++;

1137 
p
 = 
	`°rchr
 (
ønge
, '-');

1138 i‡(
p
 =
NULL
)

1140 i‡(
p
 - 
ønge
 > 
DECIMAL_STRLEN_MAX
)

1142 
	`°∫˝y
 (
buf
, 
ønge
, 
p
 -Ñange);

1143 
buf
[
p
 - 
ønge
] = '\0';

1144 
mö
 = 
	`°πoul
 (
buf
, &
íd±r
, 10);

1145 i‡(*
íd±r
 != '\0')

1148 
ønge
 = 
p
 + 1;

1149 
p
 = 
	`°rchr
 (
ønge
, '>');

1150 i‡(
p
 =
NULL
)

1152 i‡(
p
 - 
ønge
 > 
DECIMAL_STRLEN_MAX
)

1154 
	`°∫˝y
 (
buf
, 
ønge
, 
p
 -Ñange);

1155 
buf
[
p
 - 
ønge
] = '\0';

1156 
max
 = 
	`°πoul
 (
buf
, &
íd±r
, 10);

1157 i‡(*
íd±r
 != '\0')

1160 i‡(
vÆ
 < 
mö
 || vÆ > 
max
)

1164 
	}
}

1167 
m©ch_ty≥


1168 
	$cmd_fûãr_by_com∂ëi⁄
 (*
comm™d
, 
ve˘‹
 
v
, 
ödex
)

1170 
i
;

1171 c⁄° *
°r
;

1172 
cmd_ñemít
 *cmd_element;

1173 
m©ch_ty≥
 match_type;

1174 
ve˘‹
 
descvec
;

1175 
desc
 *desc;

1177 
m©ch_ty≥
 = 
no_m©ch
;

1180 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

1181 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

1183 i‡(
ödex
 >
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
))

1184 
	`ve˘‹_¶Ÿ
 (
v
, 
i
Ë
NULL
;

1187 
j
;

1188 
m©ched
 = 0;

1190 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít
->
°rvec
, 
ödex
);

1192 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
descvec
); j++)

1193 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 
j
)))

1195 
°r
 = 
desc
->
cmd
;

1197 i‡(
	`CMD_VARARG
 (
°r
))

1199 i‡(
m©ch_ty≥
 < 
v¨¨g_m©ch
)

1200 
m©ch_ty≥
 = 
v¨¨g_m©ch
;

1201 
m©ched
++;

1203 i‡(
	`CMD_RANGE
 (
°r
))

1205 i‡(
	`cmd_ønge_m©ch
 (
°r
, 
comm™d
))

1207 i‡(
m©ch_ty≥
 < 
ønge_m©ch
)

1208 
m©ch_ty≥
 = 
ønge_m©ch
;

1210 
m©ched
++;

1213 #ifde‡
HAVE_IPV6


1214 i‡(
	`CMD_IPV6
 (
°r
))

1216 i‡(
	`cmd_ùv6_m©ch
 (
comm™d
))

1218 i‡(
m©ch_ty≥
 < 
ùv6_m©ch
)

1219 
m©ch_ty≥
 = 
ùv6_m©ch
;

1221 
m©ched
++;

1224 i‡(
	`CMD_IPV6_PREFIX
 (
°r
))

1226 i‡(
	`cmd_ùv6_¥efix_m©ch
 (
comm™d
))

1228 i‡(
m©ch_ty≥
 < 
ùv6_¥efix_m©ch
)

1229 
m©ch_ty≥
 = 
ùv6_¥efix_m©ch
;

1231 
m©ched
++;

1235 i‡(
	`CMD_IPV4
 (
°r
))

1237 i‡(
	`cmd_ùv4_m©ch
 (
comm™d
))

1239 i‡(
m©ch_ty≥
 < 
ùv4_m©ch
)

1240 
m©ch_ty≥
 = 
ùv4_m©ch
;

1242 
m©ched
++;

1245 i‡(
	`CMD_IPV4_PREFIX
 (
°r
))

1247 i‡(
	`cmd_ùv4_¥efix_m©ch
 (
comm™d
))

1249 i‡(
m©ch_ty≥
 < 
ùv4_¥efix_m©ch
)

1250 
m©ch_ty≥
 = 
ùv4_¥efix_m©ch
;

1251 
m©ched
++;

1256 i‡(
	`CMD_OPTION
 (
°r
Ë|| 
	`CMD_VARIABLE
 (str))

1258 i‡(
m©ch_ty≥
 < 
exãnd_m©ch
)

1259 
m©ch_ty≥
 = 
exãnd_m©ch
;

1260 
m©ched
++;

1262 i‡(
	`°∫cmp
 (
comm™d
, 
°r
, 
	`°æí
 (command)) == 0)

1264 i‡(
	`°rcmp
 (
comm™d
, 
°r
) == 0)

1265 
m©ch_ty≥
 = 
exa˘_m©ch
;

1268 i‡(
m©ch_ty≥
 < 
∑πly_m©ch
)

1269 
m©ch_ty≥
 = 
∑πly_m©ch
;

1271 
m©ched
++;

1274 i‡(!
m©ched
)

1275 
	`ve˘‹_¶Ÿ
 (
v
, 
i
Ë
NULL
;

1278  
m©ch_ty≥
;

1279 
	}
}

1282 
m©ch_ty≥


1283 
	$cmd_fûãr_by_°rög
 (*
comm™d
, 
ve˘‹
 
v
, 
ödex
)

1285 
i
;

1286 c⁄° *
°r
;

1287 
cmd_ñemít
 *cmd_element;

1288 
m©ch_ty≥
 match_type;

1289 
ve˘‹
 
descvec
;

1290 
desc
 *desc;

1292 
m©ch_ty≥
 = 
no_m©ch
;

1295 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

1296 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

1300 i‡(
ödex
 >
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
))

1301 
	`ve˘‹_¶Ÿ
 (
v
, 
i
Ë
NULL
;

1304 
j
;

1305 
m©ched
 = 0;

1307 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít
->
°rvec
, 
ödex
);

1309 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
descvec
); j++)

1310 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 
j
)))

1312 
°r
 = 
desc
->
cmd
;

1314 i‡(
	`CMD_VARARG
 (
°r
))

1316 i‡(
m©ch_ty≥
 < 
v¨¨g_m©ch
)

1317 
m©ch_ty≥
 = 
v¨¨g_m©ch
;

1318 
m©ched
++;

1320 i‡(
	`CMD_RANGE
 (
°r
))

1322 i‡(
	`cmd_ønge_m©ch
 (
°r
, 
comm™d
))

1324 i‡(
m©ch_ty≥
 < 
ønge_m©ch
)

1325 
m©ch_ty≥
 = 
ønge_m©ch
;

1326 
m©ched
++;

1329 #ifde‡
HAVE_IPV6


1330 i‡(
	`CMD_IPV6
 (
°r
))

1332 i‡(
	`cmd_ùv6_m©ch
 (
comm™d
Ë=
exa˘_m©ch
)

1334 i‡(
m©ch_ty≥
 < 
ùv6_m©ch
)

1335 
m©ch_ty≥
 = 
ùv6_m©ch
;

1336 
m©ched
++;

1339 i‡(
	`CMD_IPV6_PREFIX
 (
°r
))

1341 i‡(
	`cmd_ùv6_¥efix_m©ch
 (
comm™d
Ë=
exa˘_m©ch
)

1343 i‡(
m©ch_ty≥
 < 
ùv6_¥efix_m©ch
)

1344 
m©ch_ty≥
 = 
ùv6_¥efix_m©ch
;

1345 
m©ched
++;

1349 i‡(
	`CMD_IPV4
 (
°r
))

1351 i‡(
	`cmd_ùv4_m©ch
 (
comm™d
Ë=
exa˘_m©ch
)

1353 i‡(
m©ch_ty≥
 < 
ùv4_m©ch
)

1354 
m©ch_ty≥
 = 
ùv4_m©ch
;

1355 
m©ched
++;

1358 i‡(
	`CMD_IPV4_PREFIX
 (
°r
))

1360 i‡(
	`cmd_ùv4_¥efix_m©ch
 (
comm™d
Ë=
exa˘_m©ch
)

1362 i‡(
m©ch_ty≥
 < 
ùv4_¥efix_m©ch
)

1363 
m©ch_ty≥
 = 
ùv4_¥efix_m©ch
;

1364 
m©ched
++;

1367 i‡(
	`CMD_OPTION
 (
°r
Ë|| 
	`CMD_VARIABLE
 (str))

1369 i‡(
m©ch_ty≥
 < 
exãnd_m©ch
)

1370 
m©ch_ty≥
 = 
exãnd_m©ch
;

1371 
m©ched
++;

1375 i‡(
	`°rcmp
 (
comm™d
, 
°r
) == 0)

1377 
m©ch_ty≥
 = 
exa˘_m©ch
;

1378 
m©ched
++;

1382 i‡(!
m©ched
)

1383 
	`ve˘‹_¶Ÿ
 (
v
, 
i
Ë
NULL
;

1386  
m©ch_ty≥
;

1387 
	}
}

1391 
	$is_cmd_ambiguous
 (*
comm™d
, 
ve˘‹
 
v
, 
ödex
, 
m©ch_ty≥
 
ty≥
)

1393 
i
;

1394 
j
;

1395 c⁄° *
°r
 = 
NULL
;

1396 
cmd_ñemít
 *cmd_element;

1397 c⁄° *
m©ched
 = 
NULL
;

1398 
ve˘‹
 
descvec
;

1399 
desc
 *desc;

1401 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

1402 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

1404 
m©ch
 = 0;

1406 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít
->
°rvec
, 
ödex
);

1408 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
descvec
); j++)

1409 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 
j
)))

1411 
m©ch_ty≥
 
ªt
;

1413 
°r
 = 
desc
->
cmd
;

1415 
ty≥
)

1417 
exa˘_m©ch
:

1418 i‡(!(
	`CMD_OPTION
 (
°r
Ë|| 
	`CMD_VARIABLE
 (str))

1419 && 
	`°rcmp
 (
comm™d
, 
°r
) == 0)

1420 
m©ch
++;

1422 
∑πly_m©ch
:

1423 i‡(!(
	`CMD_OPTION
 (
°r
Ë|| 
	`CMD_VARIABLE
 (str))

1424 && 
	`°∫cmp
 (
comm™d
, 
°r
, 
	`°æí
 (command)) == 0)

1426 i‡(
m©ched
 && 
	`°rcmp
 (m©ched, 
°r
) != 0)

1429 
m©ched
 = 
°r
;

1430 
m©ch
++;

1433 
ønge_m©ch
:

1434 i‡(
	`cmd_ønge_m©ch
 (
°r
, 
comm™d
))

1436 i‡(
m©ched
 && 
	`°rcmp
 (m©ched, 
°r
) != 0)

1439 
m©ched
 = 
°r
;

1440 
m©ch
++;

1443 #ifde‡
HAVE_IPV6


1444 
ùv6_m©ch
:

1445 i‡(
	`CMD_IPV6
 (
°r
))

1446 
m©ch
++;

1448 
ùv6_¥efix_m©ch
:

1449 i‡((
ªt
 = 
	`cmd_ùv6_¥efix_m©ch
 (
comm™d
)Ë!
no_m©ch
)

1451 i‡(
ªt
 =
∑πly_m©ch
)

1454 
m©ch
++;

1458 
ùv4_m©ch
:

1459 i‡(
	`CMD_IPV4
 (
°r
))

1460 
m©ch
++;

1462 
ùv4_¥efix_m©ch
:

1463 i‡((
ªt
 = 
	`cmd_ùv4_¥efix_m©ch
 (
comm™d
)Ë!
no_m©ch
)

1465 i‡(
ªt
 =
∑πly_m©ch
)

1468 
m©ch
++;

1471 
exãnd_m©ch
:

1472 i‡(
	`CMD_OPTION
 (
°r
Ë|| 
	`CMD_VARIABLE
 (str))

1473 
m©ch
++;

1475 
no_m©ch
:

1480 i‡(!
m©ch
)

1481 
	`ve˘‹_¶Ÿ
 (
v
, 
i
Ë
NULL
;

1484 
	}
}

1488 
	$cmd_íåy_fun˘i⁄
 (c⁄° *
§c
, c⁄° *
d°
)

1491 i‡(
	`CMD_OPTION
 (
d°
Ë|| 
	`CMD_VARIABLE
 (d°Ë|| 
	`CMD_VARARG
 (dst) ||

1492 
	`CMD_IPV4
 (
d°
Ë|| 
	`CMD_IPV4_PREFIX
 (d°Ë|| 
	`CMD_RANGE
 (dst))

1493  
NULL
;

1496 i‡(
§c
 =
NULL
)

1497  
d°
;

1500 i‡(
	`°∫cmp
 (
§c
, 
d°
, 
	`°æí
 (src)) == 0)

1501  
d°
;

1503  
NULL
;

1504 
	}
}

1510 
	$cmd_íåy_fun˘i⁄_desc
 (c⁄° *
§c
, c⁄° *
d°
)

1512 i‡(
	`CMD_VARARG
 (
d°
))

1513  
d°
;

1515 i‡(
	`CMD_RANGE
 (
d°
))

1517 i‡(
	`cmd_ønge_m©ch
 (
d°
, 
§c
))

1518  
d°
;

1520  
NULL
;

1523 #ifde‡
HAVE_IPV6


1524 i‡(
	`CMD_IPV6
 (
d°
))

1526 i‡(
	`cmd_ùv6_m©ch
 (
§c
))

1527  
d°
;

1529  
NULL
;

1532 i‡(
	`CMD_IPV6_PREFIX
 (
d°
))

1534 i‡(
	`cmd_ùv6_¥efix_m©ch
 (
§c
))

1535  
d°
;

1537  
NULL
;

1541 i‡(
	`CMD_IPV4
 (
d°
))

1543 i‡(
	`cmd_ùv4_m©ch
 (
§c
))

1544  
d°
;

1546  
NULL
;

1549 i‡(
	`CMD_IPV4_PREFIX
 (
d°
))

1551 i‡(
	`cmd_ùv4_¥efix_m©ch
 (
§c
))

1552  
d°
;

1554  
NULL
;

1558 i‡(
	`CMD_OPTION
 (
d°
Ë|| 
	`CMD_VARIABLE
 (dst))

1559  
d°
;

1562 i‡(
§c
 =
NULL
)

1563  
d°
;

1565 i‡(
	`°∫cmp
 (
§c
, 
d°
, 
	`°æí
 (src)) == 0)

1566  
d°
;

1568  
NULL
;

1569 
	}
}

1574 
	$cmd_unique_°rög
 (
ve˘‹
 
v
, c⁄° *
°r
)

1576 
i
;

1577 *
m©ch
;

1579 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

1580 i‡((
m©ch
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

1581 i‡(
	`°rcmp
 (
m©ch
, 
°r
) == 0)

1584 
	}
}

1589 
	$desc_unique_°rög
 (
ve˘‹
 
v
, c⁄° *
°r
)

1591 
i
;

1592 
desc
 *desc;

1594 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
v
); i++)

1595 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
v
, 
i
)Ë!
NULL
)

1596 i‡(
	`°rcmp
 (
desc
->
cmd
, 
°r
) == 0)

1599 
	}
}

1602 
	$cmd_åy_do_sh‹tcut
 (
node_ty≥
 
node
, * 
fú°_w‹d
) {

1603 i‡–
fú°_w‹d
 !
NULL
 &&

1604 
node
 !
AUTH_NODE
 &&

1605 
node
 !
VIEW_NODE
 &&

1606 
node
 !
AUTH_ENABLE_NODE
 &&

1607 
node
 !
ENABLE_NODE
 &&

1608 
node
 !
RESTRICTED_NODE
 &&

1609 0 =
	`°rcmp
–"do", 
fú°_w‹d
 ) )

1612 
	}
}

1615 
ve˘‹


1616 
	$cmd_des¸ibe_comm™d_ªÆ
 (
ve˘‹
 
vlöe
, 
vty
 *vty, *
°©us
)

1618 
i
;

1619 
ve˘‹
 
cmd_ve˘‹
;

1620 
	#INIT_MATCHVEC_SIZE
 10

	)

1621 
ve˘‹
 
m©chvec
;

1622 
cmd_ñemít
 *cmd_element;

1623 
ödex
;

1624 
ªt
;

1625 
m©ch_ty≥
 
m©ch
;

1626 *
comm™d
;

1629 i‡(
	`ve˘‹_a˘ive
 (
vlöe
) == 0)

1631 *
°©us
 = 
CMD_ERR_NO_MATCH
;

1632  
NULL
;

1635 
ödex
 = 
	`ve˘‹_a˘ive
 (
vlöe
) - 1;

1638 
cmd_ve˘‹
 = 
	`ve˘‹_c›y
 (
	`cmd_node_ve˘‹
 (
cmdvec
, 
vty
->
node
));

1641 
m©chvec
 = 
	`ve˘‹_öô
 (
INIT_MATCHVEC_SIZE
);

1645 
i
 = 0; i < 
ödex
; i++)

1646 i‡((
comm™d
 = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
)))

1648 
m©ch
 = 
	`cmd_fûãr_by_com∂ëi⁄
 (
comm™d
, 
cmd_ve˘‹
, 
i
);

1650 i‡(
m©ch
 =
v¨¨g_m©ch
)

1652 
cmd_ñemít
 *cmd_element;

1653 
ve˘‹
 
descvec
;

1654 
j
, 
k
;

1656 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); j++)

1657 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
j
)Ë!
NULL


1658 && (
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
)))

1660 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít
->
°rvec
,

1661 
	`ve˘‹_a˘ive
 (
cmd_ñemít
->
°rvec
) - 1);

1662 
k
 = 0; k < 
	`ve˘‹_a˘ive
 (
descvec
); k++)

1664 
desc
 *des¯
	`ve˘‹_¶Ÿ
 (
descvec
, 
k
);

1665 
	`ve˘‹_£t
 (
m©chvec
, 
desc
);

1669 
	`ve˘‹_£t
 (
m©chvec
, &
desc_¸
);

1670 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1672  
m©chvec
;

1675 i‡((
ªt
 = 
	`is_cmd_ambiguous
 (
comm™d
, 
cmd_ve˘‹
, 
i
, 
m©ch
)) == 1)

1677 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1678 
	`ve˘‹_‰ì
 (
m©chvec
);

1679 *
°©us
 = 
CMD_ERR_AMBIGUOUS
;

1680  
NULL
;

1682 i‡(
ªt
 == 2)

1684 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1685 
	`ve˘‹_‰ì
 (
m©chvec
);

1686 *
°©us
 = 
CMD_ERR_NO_MATCH
;

1687  
NULL
;

1695 
comm™d
 = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
);

1696 i‡(
comm™d
)

1697 
m©ch
 = 
	`cmd_fûãr_by_com∂ëi⁄
 (
comm™d
, 
cmd_ve˘‹
, 
ödex
);

1700 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); i++)

1701 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
)Ë!
NULL
)

1703 
ve˘‹
 
°rvec
 = 
cmd_ñemít
->strvec;

1706 i‡(
comm™d
 && 
ödex
 >
	`ve˘‹_a˘ive
 (
°rvec
))

1707 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
Ë
NULL
;

1711 i‡(
comm™d
 =
NULL
 && 
ödex
 =
	`ve˘‹_a˘ive
 (
°rvec
))

1713 i‡(!
	`desc_unique_°rög
 (
m©chvec
, 
comm™d_¸
))

1714 
	`ve˘‹_£t
 (
m©chvec
, &
desc_¸
);

1718 
j
;

1719 
ve˘‹
 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
°rvec
, 
ödex
);

1720 
desc
 *desc;

1722 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
descvec
); j++)

1723 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 
j
)))

1725 c⁄° *
°rög
;

1727 
°rög
 = 
	`cmd_íåy_fun˘i⁄_desc
 (
comm™d
, 
desc
->
cmd
);

1728 i‡(
°rög
)

1731 i‡(!
	`desc_unique_°rög
 (
m©chvec
, 
°rög
))

1732 
	`ve˘‹_£t
 (
m©chvec
, 
desc
);

1738 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1740 i‡(
	`ve˘‹_¶Ÿ
 (
m©chvec
, 0Ë=
NULL
)

1742 
	`ve˘‹_‰ì
 (
m©chvec
);

1743 *
°©us
 = 
CMD_ERR_NO_MATCH
;

1744  
NULL
;

1747 *
°©us
 = 
CMD_SUCCESS
;

1748  
m©chvec
;

1749 
	}
}

1751 
ve˘‹


1752 
	$cmd_des¸ibe_comm™d
 (
ve˘‹
 
vlöe
, 
vty
 *vty, *
°©us
)

1754 
ve˘‹
 
ªt
;

1756 i‡–
	`cmd_åy_do_sh‹tcut
(
vty
->
node
, 
	`ve˘‹_¶Ÿ
(
vlöe
, 0) ) )

1758 
node_ty≥
 
⁄ode
;

1759 
ve˘‹
 
shi·ed_vlöe
;

1760 
ödex
;

1762 
⁄ode
 = 
vty
->
node
;

1763 
vty
->
node
 = 
ENABLE_NODE
;

1766 
shi·ed_vlöe
 = 
	`ve˘‹_öô
 (
	`ve˘‹_cou¡
(
vlöe
));

1768 
ödex
 = 1; index < 
	`ve˘‹_a˘ive
 (
vlöe
); index++)

1770 
	`ve˘‹_£t_ödex
 (
shi·ed_vlöe
, 
ödex
-1, 
	`ve˘‹_lookup
(
vlöe
, index));

1773 
ªt
 = 
	`cmd_des¸ibe_comm™d_ªÆ
 (
shi·ed_vlöe
, 
vty
, 
°©us
);

1775 
	`ve˘‹_‰ì
(
shi·ed_vlöe
);

1776 
vty
->
node
 = 
⁄ode
;

1777  
ªt
;

1781  
	`cmd_des¸ibe_comm™d_ªÆ
 (
vlöe
, 
vty
, 
°©us
);

1782 
	}
}

1787 
	$cmd_lcd
 (**
m©ched
)

1789 
i
;

1790 
j
;

1791 
lcd
 = -1;

1792 *
s1
, *
s2
;

1793 
c1
, 
c2
;

1795 i‡(
m©ched
[0] =
NULL
 || matched[1] == NULL)

1798 
i
 = 1; 
m©ched
[i] !
NULL
; i++)

1800 
s1
 = 
m©ched
[
i
 - 1];

1801 
s2
 = 
m©ched
[
i
];

1803 
j
 = 0; (
c1
 = 
s1
[j]Ë&& (
c2
 = 
s2
[j]); j++)

1804 i‡(
c1
 !
c2
)

1807 i‡(
lcd
 < 0)

1808 
lcd
 = 
j
;

1811 i‡(
lcd
 > 
j
)

1812 
lcd
 = 
j
;

1815  
lcd
;

1816 
	}
}

1820 
	$cmd_com∂ëe_comm™d_ªÆ
 (
ve˘‹
 
vlöe
, 
vty
 *vty, *
°©us
)

1822 
i
;

1823 
ve˘‹
 
cmd_ve˘‹
 = 
	`ve˘‹_c›y
 (
	`cmd_node_ve˘‹
 (
cmdvec
, 
vty
->
node
));

1824 
	#INIT_MATCHVEC_SIZE
 10

	)

1825 
ve˘‹
 
m©chvec
;

1826 
cmd_ñemít
 *cmd_element;

1827 
ödex
;

1828 **
m©ch_°r
;

1829 
desc
 *desc;

1830 
ve˘‹
 
descvec
;

1831 *
comm™d
;

1832 
lcd
;

1834 i‡(
	`ve˘‹_a˘ive
 (
vlöe
) == 0)

1836 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1837 *
°©us
 = 
CMD_ERR_NO_MATCH
;

1838  
NULL
;

1841 
ödex
 = 
	`ve˘‹_a˘ive
 (
vlöe
) - 1;

1844 
i
 = 0; i < 
ödex
; i++)

1845 i‡((
comm™d
 = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
)))

1847 
m©ch_ty≥
 
m©ch
;

1848 
ªt
;

1851 
m©ch
 = 
	`cmd_fûãr_by_com∂ëi⁄
 (
comm™d
, 
cmd_ve˘‹
, 
i
);

1855 i‡((
ªt
 = 
	`is_cmd_ambiguous
 (
comm™d
, 
cmd_ve˘‹
, 
i
, 
m©ch
)) == 1)

1857 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1858 *
°©us
 = 
CMD_ERR_AMBIGUOUS
;

1859  
NULL
;

1872 
m©chvec
 = 
	`ve˘‹_öô
 (
INIT_MATCHVEC_SIZE
);

1875 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); i++)

1876 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
)))

1878 c⁄° *
°rög
;

1879 
ve˘‹
 
°rvec
 = 
cmd_ñemít
->strvec;

1882 i‡(
ödex
 >
	`ve˘‹_a˘ive
 (
°rvec
))

1883 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
Ë
NULL
;

1886 
j
;

1888 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
°rvec
, 
ödex
);

1889 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
descvec
); j++)

1890 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
descvec
, 
j
)))

1892 i‡((
°rög
 =

1893 
	`cmd_íåy_fun˘i⁄
 (
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
),

1894 
desc
->
cmd
)))

1895 i‡(
	`cmd_unique_°rög
 (
m©chvec
, 
°rög
))

1896 
	`ve˘‹_£t
 (
m©chvec
, 
	`XSTRDUP
 (
MTYPE_TMP
, 
°rög
));

1902 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

1905 i‡(
	`ve˘‹_¶Ÿ
 (
m©chvec
, 0Ë=
NULL
)

1907 
	`ve˘‹_‰ì
 (
m©chvec
);

1911 i‡(
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
) == '\0')

1912 *
°©us
 = 
CMD_ERR_NOTHING_TODO
;

1914 *
°©us
 = 
CMD_ERR_NO_MATCH
;

1915  
NULL
;

1919 i‡(
	`ve˘‹_¶Ÿ
 (
m©chvec
, 1Ë=
NULL
)

1921 
m©ch_°r
 = (**Ë
m©chvec
->
ödex
;

1922 
	`ve˘‹_⁄ly_wøµî_‰ì
 (
m©chvec
);

1923 *
°©us
 = 
CMD_COMPLETE_FULL_MATCH
;

1924  
m©ch_°r
;

1927 
	`ve˘‹_£t
 (
m©chvec
, 
NULL
);

1930 i‡(
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
Ë!
NULL
)

1932 
lcd
 = 
	`cmd_lcd
 ((**Ë
m©chvec
->
ödex
);

1934 i‡(
lcd
)

1936 
Àn
 = 
	`°æí
 (
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
));

1938 i‡(
Àn
 < 
lcd
)

1940 *
lcd°r
;

1942 
lcd°r
 = 
	`XMALLOC
 (
MTYPE_STRVEC
, 
lcd
 + 1);

1943 
	`mem˝y
 (
lcd°r
, 
m©chvec
->
ödex
[0], 
lcd
);

1944 
lcd°r
[
lcd
] = '\0';

1949 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
m©chvec
); i++)

1951 i‡(
	`ve˘‹_¶Ÿ
 (
m©chvec
, 
i
))

1952 
	`XFREE
 (
MTYPE_STRVEC
, 
	`ve˘‹_¶Ÿ
 (
m©chvec
, 
i
));

1954 
	`ve˘‹_‰ì
 (
m©chvec
);

1957 
m©chvec
 = 
	`ve˘‹_öô
 (
INIT_MATCHVEC_SIZE
);

1958 
	`ve˘‹_£t
 (
m©chvec
, 
lcd°r
);

1959 
m©ch_°r
 = (**Ë
m©chvec
->
ödex
;

1960 
	`ve˘‹_⁄ly_wøµî_‰ì
 (
m©chvec
);

1962 *
°©us
 = 
CMD_COMPLETE_MATCH
;

1963  
m©ch_°r
;

1968 
m©ch_°r
 = (**Ë
m©chvec
->
ödex
;

1969 
	`ve˘‹_⁄ly_wøµî_‰ì
 (
m©chvec
);

1970 *
°©us
 = 
CMD_COMPLETE_LIST_MATCH
;

1971  
m©ch_°r
;

1972 
	}
}

1975 
	$cmd_com∂ëe_comm™d
 (
ve˘‹
 
vlöe
, 
vty
 *vty, *
°©us
)

1977 **
ªt
;

1979 i‡–
	`cmd_åy_do_sh‹tcut
(
vty
->
node
, 
	`ve˘‹_¶Ÿ
(
vlöe
, 0) ) )

1981 
node_ty≥
 
⁄ode
;

1982 
ve˘‹
 
shi·ed_vlöe
;

1983 
ödex
;

1985 
⁄ode
 = 
vty
->
node
;

1986 
vty
->
node
 = 
ENABLE_NODE
;

1989 
shi·ed_vlöe
 = 
	`ve˘‹_öô
 (
	`ve˘‹_cou¡
(
vlöe
));

1991 
ödex
 = 1; index < 
	`ve˘‹_a˘ive
 (
vlöe
); index++)

1993 
	`ve˘‹_£t_ödex
 (
shi·ed_vlöe
, 
ödex
-1, 
	`ve˘‹_lookup
(
vlöe
, index));

1996 
ªt
 = 
	`cmd_com∂ëe_comm™d_ªÆ
 (
shi·ed_vlöe
, 
vty
, 
°©us
);

1998 
	`ve˘‹_‰ì
(
shi·ed_vlöe
);

1999 
vty
->
node
 = 
⁄ode
;

2000  
ªt
;

2004  
	`cmd_com∂ëe_comm™d_ªÆ
 (
vlöe
, 
vty
, 
°©us
);

2005 
	}
}

2009 
node_ty≥


2010 
	$node_∑ª¡
 ( 
node_ty≥
 
node
 )

2012 
node_ty≥
 
ªt
;

2014 
	`as£π
 (
node
 > 
CONFIG_NODE
);

2016 
node
)

2018 
BGP_VPNV4_NODE
:

2019 
BGP_IPV4_NODE
:

2020 
BGP_IPV4M_NODE
:

2021 
BGP_IPV6_NODE
:

2022 
BGP_IPV6M_NODE
:

2023 
ªt
 = 
BGP_NODE
;

2025 
KEYCHAIN_KEY_NODE
:

2026 
ªt
 = 
KEYCHAIN_NODE
;

2029 
ªt
 = 
CONFIG_NODE
;

2032  
ªt
;

2033 
	}
}

2037 
	$cmd_execuã_comm™d_ªÆ
 (
ve˘‹
 
vlöe
, 
vty
 *vty,

2038 
cmd_ñemít
 **
cmd
)

2040 
i
;

2041 
ödex
;

2042 
ve˘‹
 
cmd_ve˘‹
;

2043 
cmd_ñemít
 *cmd_element;

2044 
cmd_ñemít
 *
m©ched_ñemít
;

2045 
m©ched_cou¡
, 
öcom∂ëe_cou¡
;

2046 
¨gc
;

2047 c⁄° *
¨gv
[
CMD_ARGC_MAX
];

2048 
m©ch_ty≥
 
m©ch
 = 0;

2049 
v¨Êag
;

2050 *
comm™d
;

2053 
cmd_ve˘‹
 = 
	`ve˘‹_c›y
 (
	`cmd_node_ve˘‹
 (
cmdvec
, 
vty
->
node
));

2055 
ödex
 = 0; index < 
	`ve˘‹_a˘ive
 (
vlöe
); index++)

2056 i‡((
comm™d
 = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
)))

2058 
ªt
;

2060 
m©ch
 = 
	`cmd_fûãr_by_com∂ëi⁄
 (
comm™d
, 
cmd_ve˘‹
, 
ödex
);

2062 i‡(
m©ch
 =
v¨¨g_m©ch
)

2065 
ªt
 = 
	`is_cmd_ambiguous
 (
comm™d
, 
cmd_ve˘‹
, 
ödex
, 
m©ch
);

2067 i‡(
ªt
 == 1)

2069 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2070  
CMD_ERR_AMBIGUOUS
;

2072 i‡(
ªt
 == 2)

2074 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2075  
CMD_ERR_NO_MATCH
;

2080 
m©ched_ñemít
 = 
NULL
;

2081 
m©ched_cou¡
 = 0;

2082 
öcom∂ëe_cou¡
 = 0;

2084 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); i++)

2085 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
)))

2087 i‡(
m©ch
 =
v¨¨g_m©ch
 || 
ödex
 >
cmd_ñemít
->
cmdsize
)

2089 
m©ched_ñemít
 = 
cmd_ñemít
;

2091 
	`¥ötf
 ("DEBUG: %†%p\n", 
cmd_ñemít
->
°rög
, cmd_ñemít->
func
);

2093 
m©ched_cou¡
++;

2097 
öcom∂ëe_cou¡
++;

2103 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2106 i‡(
m©ched_cou¡
 == 0)

2108 i‡(
öcom∂ëe_cou¡
)

2109  
CMD_ERR_INCOMPLETE
;

2111  
CMD_ERR_NO_MATCH
;

2114 i‡(
m©ched_cou¡
 > 1)

2115  
CMD_ERR_AMBIGUOUS
;

2118 
v¨Êag
 = 0;

2119 
¨gc
 = 0;

2121 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
vlöe
); i++)

2123 i‡(
v¨Êag
)

2124 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2127 
ve˘‹
 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
m©ched_ñemít
->
°rvec
, 
i
);

2129 i‡(
	`ve˘‹_a˘ive
 (
descvec
) == 1)

2131 
desc
 *des¯
	`ve˘‹_¶Ÿ
 (
descvec
, 0);

2133 i‡(
	`CMD_VARARG
 (
desc
->
cmd
))

2134 
v¨Êag
 = 1;

2136 i‡(
v¨Êag
 || 
	`CMD_VARIABLE
 (
desc
->
cmd
Ë|| 
	`CMD_OPTION
 (desc->cmd))

2137 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2140 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2143 i‡(
¨gc
 >
CMD_ARGC_MAX
)

2144  
CMD_ERR_EXEED_ARGC_MAX
;

2148 i‡(
cmd
)

2149 *
cmd
 = 
m©ched_ñemít
;

2151 i‡(
m©ched_ñemít
->
d´m⁄
)

2152  
CMD_SUCCESS_DAEMON
;

2156  (*
m©ched_ñemít
->
func
Ë(m©ched_ñemít, 
vty
, 
¨gc
, 
¨gv
);

2157 
	}
}

2160 
	$cmd_execuã_comm™d
 (
ve˘‹
 
vlöe
, 
vty
 *vty, 
cmd_ñemít
 **
cmd
,

2161 
vtysh
) {

2162 
ªt
, 
ßved_ªt
, 
åõd
 = 0;

2163 
node_ty≥
 
⁄ode
, 
åy_node
;

2165 
⁄ode
 = 
åy_node
 = 
vty
->
node
;

2167 i‡–
	`cmd_åy_do_sh‹tcut
(
vty
->
node
, 
	`ve˘‹_¶Ÿ
(
vlöe
, 0) ) )

2169 
ve˘‹
 
shi·ed_vlöe
;

2170 
ödex
;

2172 
vty
->
node
 = 
ENABLE_NODE
;

2175 
shi·ed_vlöe
 = 
	`ve˘‹_öô
 (
	`ve˘‹_cou¡
(
vlöe
));

2177 
ödex
 = 1; index < 
	`ve˘‹_a˘ive
 (
vlöe
); index++)

2179 
	`ve˘‹_£t_ödex
 (
shi·ed_vlöe
, 
ödex
-1, 
	`ve˘‹_lookup
(
vlöe
, index));

2182 
ªt
 = 
	`cmd_execuã_comm™d_ªÆ
 (
shi·ed_vlöe
, 
vty
, 
cmd
);

2184 
	`ve˘‹_‰ì
(
shi·ed_vlöe
);

2185 
vty
->
node
 = 
⁄ode
;

2186  
ªt
;

2190 
ßved_ªt
 = 
ªt
 = 
	`cmd_execuã_comm™d_ªÆ
 (
vlöe
, 
vty
, 
cmd
);

2192 i‡(
vtysh
)

2193  
ßved_ªt
;

2196  
ªt
 !
CMD_SUCCESS
 &&Ñë !
CMD_WARNING


2197 && 
vty
->
node
 > 
CONFIG_NODE
 )

2199 
åy_node
 = 
	`node_∑ª¡
(try_node);

2200 
vty
->
node
 = 
åy_node
;

2201 
ªt
 = 
	`cmd_execuã_comm™d_ªÆ
 (
vlöe
, 
vty
, 
cmd
);

2202 
åõd
 = 1;

2203 i‡(
ªt
 =
CMD_SUCCESS
 ||Ñë =
CMD_WARNING
)

2206  
ªt
;

2211 i‡–
åõd
 )

2212 
vty
->
node
 = 
⁄ode
;

2213  
ßved_ªt
;

2214 
	}
}

2218 
	$cmd_execuã_comm™d_°ri˘
 (
ve˘‹
 
vlöe
, 
vty
 *vty,

2219 
cmd_ñemít
 **
cmd
)

2221 
i
;

2222 
ödex
;

2223 
ve˘‹
 
cmd_ve˘‹
;

2224 
cmd_ñemít
 *cmd_element;

2225 
cmd_ñemít
 *
m©ched_ñemít
;

2226 
m©ched_cou¡
, 
öcom∂ëe_cou¡
;

2227 
¨gc
;

2228 c⁄° *
¨gv
[
CMD_ARGC_MAX
];

2229 
v¨Êag
;

2230 
m©ch_ty≥
 
m©ch
 = 0;

2231 *
comm™d
;

2234 
cmd_ve˘‹
 = 
	`ve˘‹_c›y
 (
	`cmd_node_ve˘‹
 (
cmdvec
, 
vty
->
node
));

2236 
ödex
 = 0; index < 
	`ve˘‹_a˘ive
 (
vlöe
); index++)

2237 i‡((
comm™d
 = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
)))

2239 
ªt
;

2241 
m©ch
 = 
	`cmd_fûãr_by_°rög
 (
	`ve˘‹_¶Ÿ
 (
vlöe
, 
ödex
),

2242 
cmd_ve˘‹
, 
ödex
);

2245 i‡(
m©ch
 =
v¨¨g_m©ch
)

2248 
ªt
 = 
	`is_cmd_ambiguous
 (
comm™d
, 
cmd_ve˘‹
, 
ödex
, 
m©ch
);

2249 i‡(
ªt
 == 1)

2251 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2252  
CMD_ERR_AMBIGUOUS
;

2254 i‡(
ªt
 == 2)

2256 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2257  
CMD_ERR_NO_MATCH
;

2262 
m©ched_ñemít
 = 
NULL
;

2263 
m©ched_cou¡
 = 0;

2264 
öcom∂ëe_cou¡
 = 0;

2265 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmd_ve˘‹
); i++)

2266 i‡(
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
Ë!
NULL
)

2268 
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ve˘‹
, 
i
);

2270 i‡(
m©ch
 =
v¨¨g_m©ch
 || 
ödex
 >
cmd_ñemít
->
cmdsize
)

2272 
m©ched_ñemít
 = 
cmd_ñemít
;

2273 
m©ched_cou¡
++;

2276 
öcom∂ëe_cou¡
++;

2280 
	`ve˘‹_‰ì
 (
cmd_ve˘‹
);

2283 i‡(
m©ched_cou¡
 == 0)

2285 i‡(
vty
->
≠∂y_node_m©ch
Ë 
CMD_SUCCESS
;

2286 i‡(
öcom∂ëe_cou¡
)

2287  
CMD_ERR_INCOMPLETE
;

2289  
CMD_ERR_NO_MATCH
;

2292 i‡(
m©ched_cou¡
 > 1)

2293  
CMD_ERR_AMBIGUOUS
;

2296 
v¨Êag
 = 0;

2297 
¨gc
 = 0;

2299 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
vlöe
); i++)

2301 i‡(
v¨Êag
)

2302 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2305 
ve˘‹
 
descvec
 = 
	`ve˘‹_¶Ÿ
 (
m©ched_ñemít
->
°rvec
, 
i
);

2307 i‡(
	`ve˘‹_a˘ive
 (
descvec
) == 1)

2309 
desc
 *des¯
	`ve˘‹_¶Ÿ
 (
descvec
, 0);

2311 i‡(
	`CMD_VARARG
 (
desc
->
cmd
))

2312 
v¨Êag
 = 1;

2314 i‡(
v¨Êag
 || 
	`CMD_VARIABLE
 (
desc
->
cmd
Ë|| 
	`CMD_OPTION
 (desc->cmd))

2315 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2318 
¨gv
[
¨gc
++] = 
	`ve˘‹_¶Ÿ
 (
vlöe
, 
i
);

2321 i‡(
¨gc
 >
CMD_ARGC_MAX
)

2322  
CMD_ERR_EXEED_ARGC_MAX
;

2325 i‡(
vty
->
≠∂y_node_m©ch
 && vty->
≠∂y_node
 !
m©ched_ñemít
->
¡y≥
)

2326  
CMD_SUCCESS
;

2329 i‡(
cmd
)

2330 *
cmd
 = 
m©ched_ñemít
;

2332 i‡(
m©ched_ñemít
->
d´m⁄
)

2333  
CMD_SUCCESS_DAEMON
;

2336  (*
m©ched_ñemít
->
func
Ë(m©ched_ñemít, 
vty
, 
¨gc
, 
¨gv
);

2337 
	}
}

2341 
	$c⁄fig_‰om_fûe
 (
vty
 *vty, 
FILE
 *
Â
)

2343 
ªt
;

2344 
ve˘‹
 
vlöe
;

2346 
	`fgës
 (
vty
->
buf
, 
VTY_BUFSIZ
, 
Â
))

2348 
vlöe
 = 
	`cmd_make_°rvec
 (
vty
->
buf
);

2351 i‡(
vlöe
 =
NULL
)

2354 
ªt
 = 
	`cmd_execuã_comm™d_°ri˘
 (
vlöe
, 
vty
, 
NULL
);

2357 
ªt
 !
CMD_SUCCESS
 &&Ñë !
CMD_WARNING


2358 && 
ªt
 !
CMD_ERR_NOTHING_TODO
 && 
vty
->
node
 !
CONFIG_NODE
)

2360 
vty
->
node
 = 
	`node_∑ª¡
(vty->node);

2361 
ªt
 = 
	`cmd_execuã_comm™d_°ri˘
 (
vlöe
, 
vty
, 
NULL
);

2364 
	`cmd_‰ì_°rvec
 (
vlöe
);

2366 i‡(
ªt
 !
CMD_SUCCESS
 &&Ñë !
CMD_WARNING


2367 && 
ªt
 !
CMD_ERR_NOTHING_TODO
)

2368  
ªt
;

2370  
CMD_SUCCESS
;

2371 
	}
}

2374 
DEFUN
 (
c⁄fig_ãrmöÆ
,

2375 
c⁄fig_ãrmöÆ_cmd
,

2380 i‡(
vty_c⁄fig_lock
 (
vty
))

2381 
	gvty
->
	gnode
 = 
CONFIG_NODE
;

2384 
vty_out
 (
vty
, "VTY c⁄figuøti⁄ i†locked by othî VTY%s", 
VTY_NEWLINE
);

2385  
	gCMD_WARNING
;

2387  
	gCMD_SUCCESS
;

2391 
DEFUN
 (
íabÀ
,

2392 
c⁄fig_íabÀ_cmd
,

2397 i‡((
	gho°
.
	gíabÀ
 =
NULL
 && 
ho°
.
íabÀ_í¸y±
 == NULL) ||

2398 
vty
->
ty≥
 =
VTY_SHELL_SERV
)

2399 
vty
->
node
 = 
ENABLE_NODE
;

2401 
	gvty
->
	gnode
 = 
AUTH_ENABLE_NODE
;

2403  
	gCMD_SUCCESS
;

2407 
DEFUN
 (
dißbÀ
,

2408 
c⁄fig_dißbÀ_cmd
,

2412 i‡(
	gvty
->
	gnode
 =
ENABLE_NODE
)

2413 
vty
->
node
 = 
VIEW_NODE
;

2414  
	gCMD_SUCCESS
;

2418 
DEFUN
 (
c⁄fig_exô
,

2419 
c⁄fig_exô_cmd
,

2423 
	gvty
->
	gnode
)

2425 
	gVIEW_NODE
:

2426 
ENABLE_NODE
:

2427 
RESTRICTED_NODE
:

2428 i‡(
vty_shñl
 (
vty
))

2429 
exô
 (0);

2431 
	gvty
->
	g°©us
 = 
VTY_CLOSE
;

2433 
	gCONFIG_NODE
:

2434 
vty
->
node
 = 
ENABLE_NODE
;

2435 
vty_c⁄fig_u∆ock
 (
vty
);

2437 
	gINTERFACE_NODE
:

2438 
ZEBRA_NODE
:

2439 
BGP_NODE
:

2440 
RIP_NODE
:

2441 
RIPNG_NODE
:

2442 
OSPF_NODE
:

2443 
OSPF6_NODE
:

2444 
ISIS_NODE
:

2445 
KEYCHAIN_NODE
:

2446 
MASC_NODE
:

2447 
RMAP_NODE
:

2448 
VTY_NODE
:

2449 
KULVISOR_NODE
:

2450 
vty
->
node
 = 
CONFIG_NODE
;

2452 
	gBGP_VPNV4_NODE
:

2453 
BGP_IPV4_NODE
:

2454 
BGP_IPV4M_NODE
:

2455 
BGP_IPV6_NODE
:

2456 
BGP_IPV6M_NODE
:

2457 
vty
->
node
 = 
BGP_NODE
;

2459 
	gKEYCHAIN_KEY_NODE
:

2460 
vty
->
node
 = 
KEYCHAIN_NODE
;

2462 
	gSLICE_NODE
:

2463 
vty
->
node
 = 
KULVISOR_NODE
;

2468  
	gCMD_SUCCESS
;

2472 
ALIAS
 (
c⁄fig_exô
,

2473 
c⁄fig_quô_cmd
,

2478 
DEFUN
 (
c⁄fig_íd
,

2479 
c⁄fig_íd_cmd
,

2483 
	gvty
->
	gnode
)

2485 
	gVIEW_NODE
:

2486 
ENABLE_NODE
:

2487 
RESTRICTED_NODE
:

2490 
	gCONFIG_NODE
:

2491 
INTERFACE_NODE
:

2492 
ZEBRA_NODE
:

2493 
RIP_NODE
:

2494 
RIPNG_NODE
:

2495 
BGP_NODE
:

2496 
BGP_VPNV4_NODE
:

2497 
BGP_IPV4_NODE
:

2498 
BGP_IPV4M_NODE
:

2499 
BGP_IPV6_NODE
:

2500 
BGP_IPV6M_NODE
:

2501 
RMAP_NODE
:

2502 
OSPF_NODE
:

2503 
OSPF6_NODE
:

2504 
ISIS_NODE
:

2505 
KEYCHAIN_NODE
:

2506 
KEYCHAIN_KEY_NODE
:

2507 
MASC_NODE
:

2508 
VTY_NODE
:

2509 
KULVISOR_NODE
:

2510 
vty_c⁄fig_u∆ock
 (
vty
);

2511 
	gvty
->
	gnode
 = 
ENABLE_NODE
;

2516  
	gCMD_SUCCESS
;

2520 
DEFUN
 (
show_vîsi⁄
,

2521 
show_vîsi⁄_cmd
,

2523 
SHOW_STR


2526 
vty_out
 (
vty
, "Quagg®%†(%s).%s", 
QUAGGA_VERSION
, 
ho°
.
«me
?host.name:"",

2527 
VTY_NEWLINE
);

2528 
vty_out
 (
vty
, "%s%s", 
QUAGGA_COPYRIGHT
, 
VTY_NEWLINE
);

2530  
	gCMD_SUCCESS
;

2534 
DEFUN
 (
c⁄fig_hñp
,

2535 
c⁄fig_hñp_cmd
,

2539 
vty_out
 (
vty
,

2540 "MUL shñ»˛ò¥ovide†adv™˚d hñ∞„©uª. Whí youÇìd hñp,%s\
áàthêcomm™dÜöê∂ó£Öªs†'?'.%s\
%s\
ÇŸhög m©ches,Åhêhñ∞li° wû»bêem±yánd you mu° backup%s\
É¡îögá '?' show†thêavaûabÀ o±i⁄s.%s\
 styÀ†o‡hñ∞¨ê¥ovided:%s\
1. FuŒ hñ∞i†avaûabÀ whí youáªÑódyÅÿíã∏a%s\
árgumíà”.g. 'show ?'Ë™d des¸ibe†óchÖossibÀ%s\
.%s\
2. P¨tü»hñ∞i†¥ovided whíá¿abbªvüãdárgumíài†íãªd%s\
 you w™àtÿknow wh©árgumít†m©chÅhêöput%s\
”.g. 'show me?'.)%s%s", 
VTY_NEWLINE
, VTY_NEWLINE, VTY_NEWLINE,

2552 
VTY_NEWLINE
, VTY_NEWLINE, VTY_NEWLINE, VTY_NEWLINE, VTY_NEWLINE,

2553 
VTY_NEWLINE
, VTY_NEWLINE, VTY_NEWLINE, VTY_NEWLINE, VTY_NEWLINE);

2554  
	gCMD_SUCCESS
;

2558 
DEFUN
 (
c⁄fig_li°
,

2559 
c⁄fig_li°_cmd
,

2563 
	gi
;

2564 
cmd_node
 *
	g˙ode
 = 
ve˘‹_¶Ÿ
 (
cmdvec
, 
vty
->
node
);

2565 
cmd_ñemít
 *
	gcmd
;

2567 
	gi
 = 0; i < 
ve˘‹_a˘ive
 (
˙ode
->
cmd_ve˘‹
); i++)

2568 i‡((
	gcmd
 = 
ve˘‹_¶Ÿ
 (
˙ode
->
cmd_ve˘‹
, 
i
)Ë!
NULL


2569 && !(
cmd
->
©å
 =
CMD_ATTR_DEPRECATED


2570 || 
cmd
->
©å
 =
CMD_ATTR_HIDDEN
))

2571 
vty_out
 (
vty
, " %s%s", 
cmd
->
°rög
,

2572 
VTY_NEWLINE
);

2573  
	gCMD_SUCCESS
;

2577 
DEFUN
 (
c⁄fig_wrôe_fûe
,

2578 
c⁄fig_wrôe_fûe_cmd
,

2583 
	gi
;

2584 
	gfd
;

2585 
cmd_node
 *
	gnode
;

2586 *
	gc⁄fig_fûe
;

2587 *
	gc⁄fig_fûe_tmp
 = 
NULL
;

2588 *
	gc⁄fig_fûe_ßv
 = 
NULL
;

2589 
	gªt
 = 
CMD_WARNING
;

2590 
vty
 *
	gfûe_vty
;

2593 i‡(
	gho°
.
	gc⁄fig
 =
NULL
)

2595 
vty_out
 (
vty
, "Can't saveÅo configuration file, using vtysh.%s",

2596 
VTY_NEWLINE
);

2597  
	gCMD_WARNING
;

2601 
	gc⁄fig_fûe
 = 
ho°
.
c⁄fig
;

2603 
	gc⁄fig_fûe_ßv
 =

2604 
XMALLOC
 (
MTYPE_TMP
, 
°æí
 (
c⁄fig_fûe
Ë+ såÀ¿(
CONF_BACKUP_EXT
) + 1);

2605 
°r˝y
 (
c⁄fig_fûe_ßv
, 
c⁄fig_fûe
);

2606 
°rˇt
 (
c⁄fig_fûe_ßv
, 
CONF_BACKUP_EXT
);

2609 
	gc⁄fig_fûe_tmp
 = 
XMALLOC
 (
MTYPE_TMP
, 
°æí
 (
c⁄fig_fûe
) + 8);

2610 
•rötf
 (
c⁄fig_fûe_tmp
, "%s.XXXXXX", 
c⁄fig_fûe
);

2613 
	gfd
 = 
mk°emp
 (
c⁄fig_fûe_tmp
);

2614 i‡(
	gfd
 < 0)

2616 
vty_out
 (
vty
, "C™'à›í c⁄figuøti⁄ fûê%s.%s", 
c⁄fig_fûe_tmp
,

2617 
VTY_NEWLINE
);

2618 
	gföished
;

2622 
	gfûe_vty
 = 
vty_√w
 ();

2623 
	gfûe_vty
->
	gfd
 = 
fd
;

2624 
	gfûe_vty
->
	gty≥
 = 
VTY_FILE
;

2627 
vty_out
 (
fûe_vty
, "!\n! mul-cli configuration saved from vty\n! ");

2628 
vty_time_¥öt
 (
fûe_vty
, 1);

2629 
vty_out
 (
fûe_vty
, "!\n");

2631 
	gi
 = 0; i < 
ve˘‹_a˘ive
 (
cmdvec
); i++)

2632 i‡((
	gnode
 = 
ve˘‹_¶Ÿ
 (
cmdvec
, 
i
)Ë&&Çode->
	gfunc
)

2634 i‡((*
	gnode
->
	gfunc
Ë(
	gfûe_vty
))

2635 
vty_out
 (
fûe_vty
, "!\n");

2637 
vty_˛o£
 (
fûe_vty
);

2639 i‡(
u∆ök
 (
c⁄fig_fûe_ßv
) != 0)

2640 i‡(
î∫o
 !
ENOENT
)

2642 
vty_out
 (
vty
, "C™'àu∆ök backu∞c⁄figuøti⁄ fûê%s.%s", 
c⁄fig_fûe_ßv
,

2643 
VTY_NEWLINE
);

2644 
	gföished
;

2646 i‡(
lök
 (
c⁄fig_fûe
, 
c⁄fig_fûe_ßv
) != 0)

2648 
vty_out
 (
vty
, "C™'àbacku∞ﬁd c⁄figuøti⁄ fûê%s.%s", 
c⁄fig_fûe_ßv
,

2649 
VTY_NEWLINE
);

2650 
	gföished
;

2652 
sync
 ();

2653 i‡(
u∆ök
 (
c⁄fig_fûe
) != 0)

2655 
vty_out
 (
vty
, "C™'àu∆ök c⁄figuøti⁄ fûê%s.%s", 
c⁄fig_fûe
,

2656 
VTY_NEWLINE
);

2657 
	gföished
;

2659 i‡(
lök
 (
c⁄fig_fûe_tmp
, 
c⁄fig_fûe
) != 0)

2661 
vty_out
 (
vty
, "C™'àßvêc⁄figuøti⁄ fûê%s.%s", 
c⁄fig_fûe
,

2662 
VTY_NEWLINE
);

2663 
	gföished
;

2665 
sync
 ();

2667 i‡(
chmod
 (
c⁄fig_fûe
, 
CONFIGFILE_MASK
) != 0)

2669 
vty_out
 (
vty
, "Can't chmod configuration file %s: %s (%d).%s",

2670 
c⁄fig_fûe
, 
ß„_°ªº‹
(
î∫o
),Éºno, 
VTY_NEWLINE
);

2671 
	gföished
;

2674 
vty_out
 (
vty
, "C⁄figuøti⁄ savedÅÿ%s%s", 
c⁄fig_fûe
,

2675 
VTY_NEWLINE
);

2676 
	gªt
 = 
CMD_SUCCESS
;

2678 
	gföished
:

2679 
u∆ök
 (
c⁄fig_fûe_tmp
);

2680 
XFREE
 (
MTYPE_TMP
, 
c⁄fig_fûe_tmp
);

2681 
XFREE
 (
MTYPE_TMP
, 
c⁄fig_fûe_ßv
);

2682  
	gªt
;

2685 
ALIAS
 (
c⁄fig_wrôe_fûe
,

2686 
c⁄fig_wrôe_cmd
,

2690 
ALIAS
 (
c⁄fig_wrôe_fûe
,

2691 
c⁄fig_wrôe_mem‹y_cmd
,

2696 
ALIAS
 (
c⁄fig_wrôe_fûe
,

2697 
c›y_ru¬ögc⁄fig_°¨tupc⁄fig_cmd
,

2704 
DEFUN
 (
c⁄fig_wrôe_ãrmöÆ
,

2705 
c⁄fig_wrôe_ãrmöÆ_cmd
,

2710 
	gi
;

2711 
cmd_node
 *
	gnode
;

2713 i‡(
	gvty
->
	gty≥
 =
VTY_SHELL_SERV
)

2715 
i
 = 0; 
	gi
 < 
ve˘‹_a˘ive
 (
cmdvec
); i++)

2716 i‡((
	gnode
 = 
ve˘‹_¶Ÿ
 (
cmdvec
, 
i
)Ë&&Çode->
	gfunc
 &&Çode->
	gvtysh
)

2718 i‡((*
	gnode
->
	gfunc
Ë(
	gvty
))

2719 
vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

2724 
vty_out
 (
vty
, "%sCuºíàc⁄figuøti⁄:%s", 
VTY_NEWLINE
,

2725 
VTY_NEWLINE
);

2726 
vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

2728 
	gi
 = 0; i < 
ve˘‹_a˘ive
 (
cmdvec
); i++)

2729 i‡((
	gnode
 = 
ve˘‹_¶Ÿ
 (
cmdvec
, 
i
)Ë&&Çode->
	gfunc
)

2731 i‡((*
	gnode
->
	gfunc
Ë(
	gvty
))

2732 
vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

2734 
vty_out
 (
vty
, "íd%s",
VTY_NEWLINE
);

2736  
	gCMD_SUCCESS
;

2740 
ALIAS
 (
c⁄fig_wrôe_ãrmöÆ
,

2741 
show_ru¬ög_c⁄fig_cmd
,

2743 
SHOW_STR


2747 
DEFUN
 (
show_°¨tup_c⁄fig
,

2748 
show_°¨tup_c⁄fig_cmd
,

2750 
SHOW_STR


2753 
	gbuf
[
BUFSIZ
];

2754 
FILE
 *
	gc⁄Â
;

2756 
	gc⁄Â
 = 
f›í
 (
ho°
.
c⁄fig
, "r");

2757 i‡(
	gc⁄Â
 =
NULL
)

2759 
vty_out
 (
vty
, "Can't open configuration file [%s]%s",

2760 
ho°
.
c⁄fig
, 
VTY_NEWLINE
);

2761  
	gCMD_WARNING
;

2764 
fgës
 (
buf
, 
BUFSIZ
, 
c⁄Â
))

2766 *
	g˝
 = 
buf
;

2768 *
	g˝
 !'\r' && *
˝
 != '\n' && *cp != '\0')

2769 
˝
++;

2770 *
	g˝
 = '\0';

2772 
vty_out
 (
vty
, "%s%s", 
buf
, 
VTY_NEWLINE
);

2775 
f˛o£
 (
c⁄Â
);

2777  
	gCMD_SUCCESS
;

2781 
DEFUN
 (
c⁄fig_ho°«me
,

2782 
ho°«me_cmd
,

2787 i‡(!
ißÕha
((Ë*
¨gv
[0]))

2789 
vty_out
 (
vty
, "PÀa£ s≥cify såög sèπög wôháÕhabë%s", 
VTY_NEWLINE
);

2790  
	gCMD_WARNING
;

2793 i‡(
	gho°
.
	g«me
)

2794 
XFREE
 (
MTYPE_HOST
, 
ho°
.
«me
);

2796 
	gho°
.
	g«me
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[0]);

2797  
	gCMD_SUCCESS
;

2800 
DEFUN
 (
c⁄fig_no_ho°«me
,

2801 
no_ho°«me_cmd
,

2803 
NO_STR


2807 i‡(
	gho°
.
	g«me
)

2808 
XFREE
 (
MTYPE_HOST
, 
ho°
.
«me
);

2809 
	gho°
.
	g«me
 = 
NULL
;

2810  
	gCMD_SUCCESS
;

2814 
DEFUN
 (
c⁄fig_∑ssw‹d
, 
∑ssw‹d_cmd
,

2822 i‡(
	g¨gc
 == 0)

2824 
vty_out
 (
vty
, "PÀa£ s≥cifyÖassw‹d.%s", 
VTY_NEWLINE
);

2825  
	gCMD_WARNING
;

2828 i‡(
	g¨gc
 == 2)

2830 i‡(*
¨gv
[0] == '8')

2832 i‡(
ho°
.
∑ssw‹d
)

2833 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d
);

2834 
	gho°
.
	g∑ssw‹d
 = 
NULL
;

2835 i‡(
	gho°
.
	g∑ssw‹d_í¸y±
)

2836 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d_í¸y±
);

2837 
	gho°
.
	g∑ssw‹d_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[1]);

2838  
	gCMD_SUCCESS
;

2842 
vty_out
 (
vty
, "Unknow¿í¸y±i⁄Åy≥.%s", 
VTY_NEWLINE
);

2843  
	gCMD_WARNING
;

2847 i‡(!
iß um
 ((Ë*
¨gv
[0]))

2849 
vty_out
 (
vty
,

2850 "PÀa£ s≥cify såög sèπög wôháÕh™umîic%s", 
VTY_NEWLINE
);

2851  
	gCMD_WARNING
;

2854 i‡(
	gho°
.
	g∑ssw‹d
)

2855 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d
);

2856 
	gho°
.
	g∑ssw‹d
 = 
NULL
;

2858 i‡(
	gho°
.
	gí¸y±
)

2860 i‡(
	gho°
.
	g∑ssw‹d_í¸y±
)

2861 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d_í¸y±
);

2862 
	gho°
.
	g∑ssw‹d_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
zí¸y±
 (
¨gv
[0]));

2865 
	gho°
.
	g∑ssw‹d
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[0]);

2867  
	gCMD_SUCCESS
;

2870 
ALIAS
 (
c⁄fig_∑ssw‹d
, 
∑ssw‹d_ãxt_cmd
,

2876 
DEFUN
 (
c⁄fig_íabÀ_∑ssw‹d
, 
íabÀ_∑ssw‹d_cmd
,

2885 i‡(
	g¨gc
 == 0)

2887 
vty_out
 (
vty
, "PÀa£ s≥cifyÖassw‹d.%s", 
VTY_NEWLINE
);

2888  
	gCMD_WARNING
;

2892 i‡(
	g¨gc
 == 2)

2894 i‡(*
¨gv
[0] == '8')

2896 i‡(
ho°
.
íabÀ
)

2897 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ
);

2898 
	gho°
.
	gíabÀ
 = 
NULL
;

2900 i‡(
	gho°
.
	gíabÀ_í¸y±
)

2901 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

2902 
	gho°
.
	gíabÀ_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[1]);

2904  
	gCMD_SUCCESS
;

2908 
vty_out
 (
vty
, "Unknow¿í¸y±i⁄Åy≥.%s", 
VTY_NEWLINE
);

2909  
	gCMD_WARNING
;

2913 i‡(!
iß um
 ((Ë*
¨gv
[0]))

2915 
vty_out
 (
vty
,

2916 "PÀa£ s≥cify såög sèπög wôháÕh™umîic%s", 
VTY_NEWLINE
);

2917  
	gCMD_WARNING
;

2920 i‡(
	gho°
.
	gíabÀ
)

2921 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ
);

2922 
	gho°
.
	gíabÀ
 = 
NULL
;

2925 i‡(
	gho°
.
	gí¸y±
)

2927 i‡(
	gho°
.
	gíabÀ_í¸y±
)

2928 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

2929 
	gho°
.
	gíabÀ_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
zí¸y±
 (
¨gv
[0]));

2932 
	gho°
.
	gíabÀ
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[0]);

2934  
	gCMD_SUCCESS
;

2937 
ALIAS
 (
c⁄fig_íabÀ_∑ssw‹d
,

2938 
íabÀ_∑ssw‹d_ãxt_cmd
,

2945 
DEFUN
 (
no_c⁄fig_íabÀ_∑ssw‹d
, 
no_íabÀ_∑ssw‹d_cmd
,

2947 
NO_STR


2951 i‡(
	gho°
.
	gíabÀ
)

2952 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ
);

2953 
	gho°
.
	gíabÀ
 = 
NULL
;

2955 i‡(
	gho°
.
	gíabÀ_í¸y±
)

2956 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

2957 
	gho°
.
	gíabÀ_í¸y±
 = 
NULL
;

2959  
	gCMD_SUCCESS
;

2962 
DEFUN
 (
£rvi˚_∑ssw‹d_í¸y±
,

2963 
£rvi˚_∑ssw‹d_í¸y±_cmd
,

2968 i‡(
	gho°
.
	gí¸y±
)

2969  
	gCMD_SUCCESS
;

2971 
	gho°
.
	gí¸y±
 = 1;

2973 i‡(
	gho°
.
	g∑ssw‹d
)

2975 i‡(
	gho°
.
	g∑ssw‹d_í¸y±
)

2976 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d_í¸y±
);

2977 
	gho°
.
	g∑ssw‹d_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
zí¸y±
 (
ho°
.
∑ssw‹d
));

2979 i‡(
	gho°
.
	gíabÀ
)

2981 i‡(
	gho°
.
	gíabÀ_í¸y±
)

2982 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

2983 
	gho°
.
	gíabÀ_í¸y±
 = 
XSTRDUP
 (
MTYPE_HOST
, 
zí¸y±
 (
ho°
.
íabÀ
));

2986  
	gCMD_SUCCESS
;

2989 
DEFUN
 (
no_£rvi˚_∑ssw‹d_í¸y±
,

2990 
no_£rvi˚_∑ssw‹d_í¸y±_cmd
,

2992 
NO_STR


2996 i‡(! 
	gho°
.
	gí¸y±
)

2997  
	gCMD_SUCCESS
;

2999 
	gho°
.
	gí¸y±
 = 0;

3001 i‡(
	gho°
.
	g∑ssw‹d_í¸y±
)

3002 
XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d_í¸y±
);

3003 
	gho°
.
	g∑ssw‹d_í¸y±
 = 
NULL
;

3005 i‡(
	gho°
.
	gíabÀ_í¸y±
)

3006 
XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

3007 
	gho°
.
	gíabÀ_í¸y±
 = 
NULL
;

3009  
	gCMD_SUCCESS
;

3012 
DEFUN
 (
c⁄fig_ãrmöÆ_Àngth
, 
c⁄fig_ãrmöÆ_Àngth_cmd
,

3018 
	glöes
;

3019 *
	gíd±r
 = 
NULL
;

3021 
	glöes
 = 
°πﬁ
 (
¨gv
[0], &
íd±r
, 10);

3022 i‡(
	glöes
 < 0 ||Üöe†> 512 || *
	gíd±r
 != '\0')

3024 
vty_out
 (
vty
, "Àngth i†mÆf‹med%s", 
VTY_NEWLINE
);

3025  
	gCMD_WARNING
;

3027 
	gvty
->
	glöes
 = 
löes
;

3029  
	gCMD_SUCCESS
;

3032 
DEFUN
 (
c⁄fig_ãrmöÆ_no_Àngth
, 
c⁄fig_ãrmöÆ_no_Àngth_cmd
,

3035 
NO_STR


3038 
	gvty
->
	glöes
 = -1;

3039  
	gCMD_SUCCESS
;

3042 
DEFUN
 (
£rvi˚_ãrmöÆ_Àngth
, 
£rvi˚_ãrmöÆ_Àngth_cmd
,

3048 
	glöes
;

3049 *
	gíd±r
 = 
NULL
;

3051 
	glöes
 = 
°πﬁ
 (
¨gv
[0], &
íd±r
, 10);

3052 i‡(
	glöes
 < 0 ||Üöe†> 512 || *
	gíd±r
 != '\0')

3054 
vty_out
 (
vty
, "Àngth i†mÆf‹med%s", 
VTY_NEWLINE
);

3055  
	gCMD_WARNING
;

3057 
	gho°
.
	glöes
 = 
löes
;

3059  
	gCMD_SUCCESS
;

3062 
DEFUN
 (
no_£rvi˚_ãrmöÆ_Àngth
, 
no_£rvi˚_ãrmöÆ_Àngth_cmd
,

3064 
NO_STR


3069 
	gho°
.
	glöes
 = -1;

3070  
	gCMD_SUCCESS
;

3073 
DEFUN_HIDDEN
 (
do_echo
,

3074 
echo_cmd
,

3079 *
	gmesßge
;

3081 
vty_out
 (
vty
, "%s%s", ((
mesßge
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 0)) ? message : ""),

3082 
VTY_NEWLINE
);

3083 i‡(
	gmesßge
)

3084 
XFREE
(
MTYPE_TMP
, 
mesßge
);

3085  
	gCMD_SUCCESS
;

3088 
DEFUN
 (
c⁄fig_logmsg
,

3089 
c⁄fig_logmsg_cmd
,

3090 "logmsg "
LOG_LEVELS
" .MESSAGE",

3092 
LOG_LEVEL_DESC


3095 
	gÀvñ
;

3096 *
	gmesßge
;

3098 i‡((
	gÀvñ
 = 
Àvñ_m©ch
(
¨gv
[0])Ë=
ZLOG_DISABLED
)

3099  
CMD_ERR_NO_MATCH
;

3101 
zlog
(
NULL
, 
Àvñ
, "%s", ((
mesßge
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 1)) ? message : ""));

3102 i‡(
	gmesßge
)

3103 
XFREE
(
MTYPE_TMP
, 
mesßge
);

3104  
	gCMD_SUCCESS
;

3107 
DEFUN
 (
show_loggög
,

3108 
show_loggög_cmd
,

3110 
SHOW_STR


3113 
zlog
 *
	gzl
 = 
zlog_deÁu…
;

3115 
vty_out
 (
vty
, "SyslogÜogging: ");

3116 i‡(
	gzl
->
	gmaxlvl
[
ZLOG_DEST_SYSLOG
] =
ZLOG_DISABLED
)

3117 
vty_out
 (
vty
, "disabled");

3119 
vty_out
 (
vty
, "level %s, facility %s, ident %s",

3120 
zlog_¥i‹ôy
[
zl
->
maxlvl
[
ZLOG_DEST_SYSLOG
]],

3121 
Ácûôy_«me
(
zl
->
Ácûôy
), zl->
idít
);

3122 
vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

3124 
vty_out
 (
vty
, "StdoutÜogging: ");

3125 i‡(
	gzl
->
	gmaxlvl
[
ZLOG_DEST_STDOUT
] =
ZLOG_DISABLED
)

3126 
vty_out
 (
vty
, "disabled");

3128 
vty_out
 (
vty
, "level %s",

3129 
zlog_¥i‹ôy
[
zl
->
maxlvl
[
ZLOG_DEST_STDOUT
]]);

3130 
vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

3132 
vty_out
 (
vty
, "MonitorÜogging: ");

3133 i‡(
	gzl
->
	gmaxlvl
[
ZLOG_DEST_MONITOR
] =
ZLOG_DISABLED
)

3134 
vty_out
 (
vty
, "disabled");

3136 
vty_out
 (
vty
, "level %s",

3137 
zlog_¥i‹ôy
[
zl
->
maxlvl
[
ZLOG_DEST_MONITOR
]]);

3138 
vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

3140 
vty_out
 (
vty
, "FileÜogging: ");

3141 i‡((
	gzl
->
	gmaxlvl
[
ZLOG_DEST_FILE
] =
ZLOG_DISABLED
) ||

3142 !
zl
->
Â
)

3143 
vty_out
 (
vty
, "disabled");

3145 
vty_out
 (
vty
, "level %s, filename %s",

3146 
zlog_¥i‹ôy
[
zl
->
maxlvl
[
ZLOG_DEST_FILE
]],

3147 
zl
->
fûíame
);

3148 
vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

3150 
vty_out
 (
vty
, "ProtocolÇame: %s%s",

3151 
zlog_¥Ÿo_«mes
[
zl
->
¥Ÿocﬁ
], 
VTY_NEWLINE
);

3152 
vty_out
 (
vty
, "RecordÖriority: %s%s",

3153 (
zl
->
ªc‹d_¥i‹ôy
 ? "íabÀd" : "dißbÀd"), 
VTY_NEWLINE
);

3154 
vty_out
 (
vty
, "TimestampÖrecision: %d%s",

3155 
zl
->
time°amp_¥ecisi⁄
, 
VTY_NEWLINE
);

3157  
	gCMD_SUCCESS
;

3160 
DEFUN
 (
c⁄fig_log_°dout
,

3161 
c⁄fig_log_°dout_cmd
,

3166 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_STDOUT
, 
zlog_deÁu…
->
deÁu…_lvl
);

3167  
	gCMD_SUCCESS
;

3170 
DEFUN
 (
c⁄fig_log_°dout_Àvñ
,

3171 
c⁄fig_log_°dout_Àvñ_cmd
,

3172 "log stdouà"
LOG_LEVELS
,

3175 
LOG_LEVEL_DESC
)

3177 
	gÀvñ
;

3179 i‡((
	gÀvñ
 = 
Àvñ_m©ch
(
¨gv
[0])Ë=
ZLOG_DISABLED
)

3180  
CMD_ERR_NO_MATCH
;

3181 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_STDOUT
, 
Àvñ
);

3182  
	gCMD_SUCCESS
;

3185 
DEFUN
 (
no_c⁄fig_log_°dout
,

3186 
no_c⁄fig_log_°dout_cmd
,

3188 
NO_STR


3193 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_STDOUT
, 
ZLOG_DISABLED
);

3194  
	gCMD_SUCCESS
;

3197 
DEFUN
 (
c⁄fig_log_m⁄ô‹
,

3198 
c⁄fig_log_m⁄ô‹_cmd
,

3203 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_MONITOR
, 
zlog_deÁu…
->
deÁu…_lvl
);

3204  
	gCMD_SUCCESS
;

3207 
DEFUN
 (
c⁄fig_log_m⁄ô‹_Àvñ
,

3208 
c⁄fig_log_m⁄ô‹_Àvñ_cmd
,

3209 "log m⁄ô‹ "
LOG_LEVELS
,

3212 
LOG_LEVEL_DESC
)

3214 
	gÀvñ
;

3216 i‡((
	gÀvñ
 = 
Àvñ_m©ch
(
¨gv
[0])Ë=
ZLOG_DISABLED
)

3217  
CMD_ERR_NO_MATCH
;

3218 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_MONITOR
, 
Àvñ
);

3219  
	gCMD_SUCCESS
;

3222 
DEFUN
 (
no_c⁄fig_log_m⁄ô‹
,

3223 
no_c⁄fig_log_m⁄ô‹_cmd
,

3225 
NO_STR


3230 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_MONITOR
, 
ZLOG_DISABLED
);

3231  
	gCMD_SUCCESS
;

3235 
	$£t_log_fûe
(
vty
 *vty, c⁄° *
‚ame
, 
logÀvñ
)

3237 
ªt
;

3238 *
p
 = 
NULL
;

3239 c⁄° *
fuŒ∑th
;

3242 i‡(! 
	`IS_DIRECTORY_SEP
 (*
‚ame
))

3244 
cwd
[
MAXPATHLEN
+1];

3245 
cwd
[
MAXPATHLEN
] = '\0';

3247 i‡(
	`gëcwd
 (
cwd
, 
MAXPATHLEN
Ë=
NULL
)

3249 
	`zlog_îr
 ("config_log_file: UnableÅoálloc mem!");

3250  
CMD_WARNING
;

3253 i‡–(
p
 = 
	`XMALLOC
 (
MTYPE_TMP
, 
	`°æí
 (
cwd
Ë+ såÀ¿(
‚ame
) + 2))

3254 =
NULL
)

3256 
	`zlog_îr
 ("config_log_file: UnableÅoálloc mem!");

3257  
CMD_WARNING
;

3259 
	`•rötf
 (
p
, "%s/%s", 
cwd
, 
‚ame
);

3260 
fuŒ∑th
 = 
p
;

3263 
fuŒ∑th
 = 
‚ame
;

3265 
ªt
 = 
	`zlog_£t_fûe
 (
NULL
, 
fuŒ∑th
, 
logÀvñ
);

3267 i‡(
p
)

3268 
	`XFREE
 (
MTYPE_TMP
, 
p
);

3270 i‡(!
ªt
)

3272 
	`vty_out
 (
vty
, "ˇn'à›íÜogfûê%s\n", 
‚ame
);

3273  
CMD_WARNING
;

3276 i‡(
ho°
.
logfûe
)

3277 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
logfûe
);

3279 
ho°
.
logfûe
 = 
	`XSTRDUP
 (
MTYPE_HOST
, 
‚ame
);

3281  
CMD_SUCCESS
;

3282 
	}
}

3284 
DEFUN
 (
c⁄fig_log_fûe
,

3285 
c⁄fig_log_fûe_cmd
,

3291  
£t_log_fûe
(
vty
, 
¨gv
[0], 
zlog_deÁu…
->
deÁu…_lvl
);

3294 
DEFUN
 (
c⁄fig_log_fûe_Àvñ
,

3295 
c⁄fig_log_fûe_Àvñ_cmd
,

3296 "log fûêFILENAME "
LOG_LEVELS
,

3300 
LOG_LEVEL_DESC
)

3302 
	gÀvñ
;

3304 i‡((
	gÀvñ
 = 
Àvñ_m©ch
(
¨gv
[1])Ë=
ZLOG_DISABLED
)

3305  
CMD_ERR_NO_MATCH
;

3306  
£t_log_fûe
(
vty
, 
¨gv
[0], 
Àvñ
);

3309 
DEFUN
 (
no_c⁄fig_log_fûe
,

3310 
no_c⁄fig_log_fûe_cmd
,

3312 
NO_STR


3317 
zlog_ª£t_fûe
 (
NULL
);

3319 i‡(
	gho°
.
	glogfûe
)

3320 
XFREE
 (
MTYPE_HOST
, 
ho°
.
logfûe
);

3322 
	gho°
.
	glogfûe
 = 
NULL
;

3324  
	gCMD_SUCCESS
;

3327 
ALIAS
 (
no_c⁄fig_log_fûe
,

3328 
no_c⁄fig_log_fûe_Àvñ_cmd
,

3330 
NO_STR


3336 
DEFUN
 (
c⁄fig_log_sy¶og
,

3337 
c⁄fig_log_sy¶og_cmd
,

3342 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_SYSLOG
, 
zlog_deÁu…
->
deÁu…_lvl
);

3343  
	gCMD_SUCCESS
;

3346 
DEFUN
 (
c⁄fig_log_sy¶og_Àvñ
,

3347 
c⁄fig_log_sy¶og_Àvñ_cmd
,

3348 "log sy¶og "
LOG_LEVELS
,

3351 
LOG_LEVEL_DESC
)

3353 
	gÀvñ
;

3355 i‡((
	gÀvñ
 = 
Àvñ_m©ch
(
¨gv
[0])Ë=
ZLOG_DISABLED
)

3356  
CMD_ERR_NO_MATCH
;

3357 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_SYSLOG
, 
Àvñ
);

3358  
	gCMD_SUCCESS
;

3361 
DEFUN_DEPRECATED
 (
c⁄fig_log_sy¶og_Ácûôy
,

3362 
c⁄fig_log_sy¶og_Ácûôy_cmd
,

3363 "log sy¶og facûôy "
LOG_FACILITIES
,

3367 
LOG_FACILITY_DESC
)

3369 
	gÁcûôy
;

3371 i‡((
	gÁcûôy
 = 
Ácûôy_m©ch
(
¨gv
[0])) < 0)

3372  
CMD_ERR_NO_MATCH
;

3374 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_SYSLOG
, 
zlog_deÁu…
->
deÁu…_lvl
);

3375 
	gzlog_deÁu…
->
	gÁcûôy
 = 
Ácûôy
;

3376  
	gCMD_SUCCESS
;

3379 
DEFUN
 (
no_c⁄fig_log_sy¶og
,

3380 
no_c⁄fig_log_sy¶og_cmd
,

3382 
NO_STR


3387 
zlog_£t_Àvñ
 (
NULL
, 
ZLOG_DEST_SYSLOG
, 
ZLOG_DISABLED
);

3388  
	gCMD_SUCCESS
;

3391 
ALIAS
 (
no_c⁄fig_log_sy¶og
,

3392 
no_c⁄fig_log_sy¶og_Ácûôy_cmd
,

3393 "nÿlog sy¶og facûôy "
LOG_FACILITIES
,

3394 
NO_STR


3398 
LOG_FACILITY_DESC
)

3400 
DEFUN
 (
c⁄fig_log_Ácûôy
,

3401 
c⁄fig_log_Ácûôy_cmd
,

3402 "log facûôy "
LOG_FACILITIES
,

3405 
LOG_FACILITY_DESC
)

3407 
	gÁcûôy
;

3409 i‡((
	gÁcûôy
 = 
Ácûôy_m©ch
(
¨gv
[0])) < 0)

3410  
CMD_ERR_NO_MATCH
;

3411 
	gzlog_deÁu…
->
	gÁcûôy
 = 
Ácûôy
;

3412  
	gCMD_SUCCESS
;

3415 
DEFUN
 (
no_c⁄fig_log_Ácûôy
,

3416 
no_c⁄fig_log_Ácûôy_cmd
,

3418 
NO_STR


3423 
	gzlog_deÁu…
->
	gÁcûôy
 = 
LOG_DAEMON
;

3424  
	gCMD_SUCCESS
;

3427 
DEFUN_DEPRECATED
 (
c⁄fig_log_å≠
,

3428 
c⁄fig_log_å≠_cmd
,

3429 "logÅø∞"
LOG_LEVELS
,

3432 
LOG_LEVEL_DESC
)

3434 
	g√w_Àvñ
 ;

3435 
	gi
;

3437 i‡((
	g√w_Àvñ
 = 
Àvñ_m©ch
(
¨gv
[0])Ë=
ZLOG_DISABLED
)

3438  
CMD_ERR_NO_MATCH
;

3440 
	gzlog_deÁu…
->
	gdeÁu…_lvl
 = 
√w_Àvñ
;

3441 
	gi
 = 0; i < 
	gZLOG_NUM_DESTS
; i++)

3442 i‡(
	gzlog_deÁu…
->
	gmaxlvl
[
i
] !
ZLOG_DISABLED
)

3443 
zlog_deÁu…
->
maxlvl
[
i
] = 
√w_Àvñ
;

3444  
	gCMD_SUCCESS
;

3447 
DEFUN_DEPRECATED
 (
no_c⁄fig_log_å≠
,

3448 
no_c⁄fig_log_å≠_cmd
,

3450 
NO_STR


3455 
	gzlog_deÁu…
->
	gdeÁu…_lvl
 = 
LOG_DEBUG
;

3456  
	gCMD_SUCCESS
;

3459 
DEFUN
 (
c⁄fig_log_ªc‹d_¥i‹ôy
,

3460 
c⁄fig_log_ªc‹d_¥i‹ôy_cmd
,

3465 
	gzlog_deÁu…
->
	gªc‹d_¥i‹ôy
 = 1 ;

3466  
	gCMD_SUCCESS
;

3469 
DEFUN
 (
no_c⁄fig_log_ªc‹d_¥i‹ôy
,

3470 
no_c⁄fig_log_ªc‹d_¥i‹ôy_cmd
,

3472 
NO_STR


3476 
	gzlog_deÁu…
->
	gªc‹d_¥i‹ôy
 = 0 ;

3477  
	gCMD_SUCCESS
;

3480 
DEFUN
 (
c⁄fig_log_time°amp_¥ecisi⁄
,

3481 
c⁄fig_log_time°amp_¥ecisi⁄_cmd
,

3488 i‡(
	g¨gc
 != 1)

3490 
vty_out
 (
vty
, "Insufficõ¡árgumíts%s", 
VTY_NEWLINE
);

3491  
	gCMD_WARNING
;

3494 
VTY_GET_INTEGER_RANGE
("Timestamp Precision",

3495 
zlog_deÁu…
->
time°amp_¥ecisi⁄
, 
¨gv
[0], 0, 6);

3496  
	gCMD_SUCCESS
;

3499 
DEFUN
 (
no_c⁄fig_log_time°amp_¥ecisi⁄
,

3500 
no_c⁄fig_log_time°amp_¥ecisi⁄_cmd
,

3502 
NO_STR


3507 
	gzlog_deÁu…
->
	gtime°amp_¥ecisi⁄
 = 0 ;

3508  
	gCMD_SUCCESS
;

3511 
DEFUN
 (
b™√r_mŸd_fûe
,

3512 
b™√r_mŸd_fûe_cmd
,

3519 i‡(
	gho°
.
	gmŸdfûe
)

3520 
XFREE
 (
MTYPE_HOST
, 
ho°
.
mŸdfûe
);

3521 
	gho°
.
	gmŸdfûe
 = 
XSTRDUP
 (
MTYPE_HOST
, 
¨gv
[0]);

3523  
	gCMD_SUCCESS
;

3526 
DEFUN
 (
b™√r_mŸd_deÁu…
,

3527 
b™√r_mŸd_deÁu…_cmd
,

3533 
	gho°
.
	gmŸd
 = 
deÁu…_mŸd
;

3534  
	gCMD_SUCCESS
;

3537 
DEFUN
 (
no_b™√r_mŸd
,

3538 
no_b™√r_mŸd_cmd
,

3540 
NO_STR


3544 
	gho°
.
	gmŸd
 = 
NULL
;

3545 i‡(
	gho°
.
	gmŸdfûe
)

3546 
XFREE
 (
MTYPE_HOST
, 
ho°
.
mŸdfûe
);

3547 
	gho°
.
	gmŸdfûe
 = 
NULL
;

3548  
	gCMD_SUCCESS
;

3553 
	$ho°_c⁄fig_£t
 (*
fûíame
)

3555 i‡(
ho°
.
c⁄fig
)

3556 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
c⁄fig
);

3557 
ho°
.
c⁄fig
 = 
	`XSTRDUP
 (
MTYPE_HOST
, 
fûíame
);

3558 
	}
}

3561 
	$ö°Æl_deÁu…
 (
node_ty≥
 
node
)

3563 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_exô_cmd
);

3564 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_quô_cmd
);

3565 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_íd_cmd
);

3567 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_wrôe_ãrmöÆ_cmd
);

3568 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_wrôe_fûe_cmd
);

3569 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_wrôe_mem‹y_cmd
);

3570 
	`ö°Æl_ñemít
 (
node
, &
c⁄fig_wrôe_cmd
);

3571 
	`ö°Æl_ñemít
 (
node
, &
show_ru¬ög_c⁄fig_cmd
);

3572 
	}
}

3576 
	$cmd_öô
 (
ãrmöÆ
)

3578 
comm™d_¸
 = 
	`XSTRDUP
(
MTYPE_STRVEC
, "<cr>");

3579 
desc_¸
.
cmd
 = 
comm™d_¸
;

3580 
desc_¸
.
°r
 = 
	`XSTRDUP
(
MTYPE_STRVEC
, "");

3583 
cmdvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

3586 
ho°
.
«me
 = 
NULL
;

3587 
ho°
.
∑ssw‹d
 = 
NULL
;

3588 
ho°
.
íabÀ
 = 
NULL
;

3589 
ho°
.
logfûe
 = 
NULL
;

3590 
ho°
.
c⁄fig
 = 
NULL
;

3591 
ho°
.
löes
 = -1;

3592 
ho°
.
mŸd
 = 
deÁu…_mŸd
;

3593 
ho°
.
mŸdfûe
 = 
NULL
;

3596 
	`ö°Æl_node
 (&
võw_node
, 
NULL
);

3597 
	`ö°Æl_node
 (&
íabÀ_node
, 
NULL
);

3598 
	`ö°Æl_node
 (&
auth_node
, 
NULL
);

3599 
	`ö°Æl_node
 (&
auth_íabÀ_node
, 
NULL
);

3600 
	`ö°Æl_node
 (&
ª°ri˘ed_node
, 
NULL
);

3601 
	`ö°Æl_node
 (&
c⁄fig_node
, 
c⁄fig_wrôe_ho°
);

3604 i‡(
ãrmöÆ
)

3606 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
c⁄fig_exô_cmd
);

3607 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
c⁄fig_quô_cmd
);

3608 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
c⁄fig_íabÀ_cmd
);

3610 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
c⁄fig_exô_cmd
);

3611 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
c⁄fig_quô_cmd
);

3612 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
c⁄fig_íabÀ_cmd
);

3615 i‡(
ãrmöÆ
)

3617 
	`ö°Æl_deÁu…
 (
ENABLE_NODE
);

3618 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
c⁄fig_dißbÀ_cmd
);

3619 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
c⁄fig_ãrmöÆ_cmd
);

3620 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
c›y_ru¬ögc⁄fig_°¨tupc⁄fig_cmd
);

3622 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_°¨tup_c⁄fig_cmd
);

3624 i‡(
ãrmöÆ
)

3626 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
c⁄fig_ãrmöÆ_Àngth_cmd
);

3627 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
c⁄fig_ãrmöÆ_no_Àngth_cmd
);

3629 
	`ö°Æl_deÁu…
 (
CONFIG_NODE
);

3632 i‡(
ãrmöÆ
)

3635 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
£rvi˚_ãrmöÆ_Àngth_cmd
);

3636 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_£rvi˚_ãrmöÆ_Àngth_cmd
);

3639 
	`§™d
(
	`time
(
NULL
));

3640 
	}
}

3643 
	$cmd_ãrmö©e
 ()

3645 
i
, 
j
, 
k
, 
l
;

3646 
cmd_node
 *cmd_node;

3647 
cmd_ñemít
 *cmd_element;

3648 
desc
 *desc;

3649 
ve˘‹
 
cmd_node_v
, 
cmd_ñemít_v
, 
desc_v
;

3651 i‡(
cmdvec
)

3653 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
cmdvec
); i++)

3654 i‡((
cmd_node
 = 
	`ve˘‹_¶Ÿ
 (
cmdvec
, 
i
)Ë!
NULL
)

3656 
cmd_node_v
 = 
cmd_node
->
cmd_ve˘‹
;

3658 
j
 = 0; j < 
	`ve˘‹_a˘ive
 (
cmd_node_v
); j++)

3659 i‡((
cmd_ñemít
 = 
	`ve˘‹_¶Ÿ
 (
cmd_node_v
, 
j
)Ë!
NULL
 &&

3660 
cmd_ñemít
->
°rvec
 !
NULL
)

3662 
cmd_ñemít_v
 = 
cmd_ñemít
->
°rvec
;

3664 
k
 = 0; k < 
	`ve˘‹_a˘ive
 (
cmd_ñemít_v
); k++)

3665 i‡((
desc_v
 = 
	`ve˘‹_¶Ÿ
 (
cmd_ñemít_v
, 
k
)Ë!
NULL
)

3667 
l
 = 0;Ü < 
	`ve˘‹_a˘ive
 (
desc_v
);Ü++)

3668 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
desc_v
, 
l
)Ë!
NULL
)

3670 i‡(
desc
->
cmd
)

3671 
	`XFREE
 (
MTYPE_STRVEC
, 
desc
->
cmd
);

3672 i‡(
desc
->
°r
)

3673 
	`XFREE
 (
MTYPE_STRVEC
, 
desc
->
°r
);

3675 
	`XFREE
 (
MTYPE_DESC
, 
desc
);

3677 
	`ve˘‹_‰ì
 (
desc_v
);

3680 
cmd_ñemít
->
°rvec
 = 
NULL
;

3681 
	`ve˘‹_‰ì
 (
cmd_ñemít_v
);

3684 
	`ve˘‹_‰ì
 (
cmd_node_v
);

3687 
	`ve˘‹_‰ì
 (
cmdvec
);

3688 
cmdvec
 = 
NULL
;

3691 i‡(
comm™d_¸
)

3692 
	`XFREE
(
MTYPE_STRVEC
, 
comm™d_¸
);

3693 i‡(
desc_¸
.
°r
)

3694 
	`XFREE
(
MTYPE_STRVEC
, 
desc_¸
.
°r
);

3695 i‡(
ho°
.
«me
)

3696 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
«me
);

3697 i‡(
ho°
.
∑ssw‹d
)

3698 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d
);

3699 i‡(
ho°
.
∑ssw‹d_í¸y±
)

3700 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
∑ssw‹d_í¸y±
);

3701 i‡(
ho°
.
íabÀ
)

3702 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ
);

3703 i‡(
ho°
.
íabÀ_í¸y±
)

3704 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
íabÀ_í¸y±
);

3705 i‡(
ho°
.
logfûe
)

3706 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
logfûe
);

3707 i‡(
ho°
.
mŸdfûe
)

3708 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
mŸdfûe
);

3709 i‡(
ho°
.
c⁄fig
)

3710 
	`XFREE
 (
MTYPE_HOST
, 
ho°
.
c⁄fig
);

3711 
	}
}

	@common-libs/3rd-party/quagga-lib/src/daemon.c

23 
	~<zebø.h
>

24 
	~<log.h
>

26 #i‚de‡
HAVE_DAEMON


30 
	$d´m⁄
 (
nochdú
, 
no˛o£
)

32 
pid_t
 
pid
;

34 
pid
 = 
	`f‹k
 ();

37 i‡(
pid
 < 0)

39 
	`zlog_îr
 ("f‹k faûed: %s", 
	`ß„_°ªº‹
(
î∫o
));

44 i‡(
pid
 != 0)

45 
	`exô
 (0);

48 
pid
 = 
	`£tsid
();

50 i‡(
pid
 == -1)

52 
	`zlog_îr
 ("£tsid faûed: %s", 
	`ß„_°ªº‹
(
î∫o
));

57 i‡(! 
nochdú
)

58 
	`chdú
 ("/");

61 i‡(! 
no˛o£
)

63 
fd
;

65 
fd
 = 
	`›í
 ("/dev/nuŒ", 
O_RDWR
, 0);

66 i‡(
fd
 != -1)

68 
	`dup2
 (
fd
, 
STDIN_FILENO
);

69 
	`dup2
 (
fd
, 
STDOUT_FILENO
);

70 
	`dup2
 (
fd
, 
STDERR_FILENO
);

71 i‡(
fd
 > 2)

72 
	`˛o£
 (
fd
);

76 
	`umask
 (0027);

79 
	}
}

	@common-libs/3rd-party/quagga-lib/src/distribute.c

22 
	~<zebø.h
>

24 
	~"hash.h
"

25 
	~"if.h
"

26 
	~"fûãr.h
"

27 
	~"comm™d.h
"

28 
	~"di°ribuã.h
"

29 
	~"mem‹y.h
"

32 
hash
 *
	gdi°hash
;

35 (*
di°ribuã_add_hook
Ë(
di°ribuã
 *);

36 (*
di°ribuã_dñëe_hook
Ë(
di°ribuã
 *);

38 
di°ribuã
 *

39 
	$di°ribuã_√w
 ()

41  
	`XCALLOC
 (
MTYPE_DISTRIBUTE
,  (
di°ribuã
));

42 
	}
}

46 
	$di°ribuã_‰ì
 (
di°ribuã
 *
di°
)

48 i‡(
di°
->
i‚ame
)

49 
	`XFREE
 (
MTYPE_DISTRIBUTE_IFNAME
, 
di°
->
i‚ame
);

51 i‡(
di°
->
li°
[
DISTRIBUTE_IN
])

52 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_IN
]);

53 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
])

54 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_OUT
]);

56 i‡(
di°
->
¥efix
[
DISTRIBUTE_IN
])

57 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_IN
]);

58 i‡(
di°
->
¥efix
[
DISTRIBUTE_OUT
])

59 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_OUT
]);

61 
	`XFREE
 (
MTYPE_DISTRIBUTE
, 
di°
);

62 
	}
}

65 
di°ribuã
 *

66 
	$di°ribuã_lookup
 (c⁄° *
i‚ame
)

68 
di°ribuã
 
key
;

69 
di°ribuã
 *
di°
;

72 
key
.
i‚ame
 = (*)ifname;

74 
di°
 = 
	`hash_lookup
 (
di°hash
, &
key
);

76  
di°
;

77 
	}
}

80 
di°ribuã_li°_add_hook
 ((*
func
Ë(
di°ribuã
 *))

82 
di°ribuã_add_hook
 = 
func
;

83 
	}
}

86 
di°ribuã_li°_dñëe_hook
 ((*
func
Ë(
di°ribuã
 *))

88 
di°ribuã_dñëe_hook
 = 
func
;

89 
	}
}

92 
	$di°ribuã_hash_Æloc
 (
di°ribuã
 *
¨g
)

94 
di°ribuã
 *
di°
;

96 
di°
 = 
	`di°ribuã_√w
 ();

97 i‡(
¨g
->
i‚ame
)

98 
di°
->
i‚ame
 = 
	`XSTRDUP
 (
MTYPE_DISTRIBUTE_IFNAME
, 
¨g
->ifname);

100 
di°
->
i‚ame
 = 
NULL
;

101  
di°
;

102 
	}
}

105 
di°ribuã
 *

106 
	$di°ribuã_gë
 (c⁄° *
i‚ame
)

108 
di°ribuã
 
key
;

111 
key
.
i‚ame
 = (*)ifname;

113  
	`hash_gë
 (
di°hash
, &
key
, (* (*Ë(*))
di°ribuã_hash_Æloc
);

114 
	}
}

117 
	$di°ribuã_hash_make
 (*
¨g
)

119 c⁄° 
di°ribuã
 *
di°
 = 
¨g
;

121  
di°
->
i‚ame
 ? 
	`°rög_hash_make
 (dist->ifname) : 0;

122 
	}
}

127 
	$di°ribuã_cmp
 (c⁄° 
di°ribuã
 *
di°1
, c⁄° di°ribuã *
di°2
)

129 i‡(
di°1
->
i‚ame
 && 
di°2
->ifname)

130 i‡(
	`°rcmp
 (
di°1
->
i‚ame
, 
di°2
->ifname) == 0)

132 i‡(! 
di°1
->
i‚ame
 && ! 
di°2
->ifname)

135 
	}
}

138 
di°ribuã
 *

139 
	$di°ribuã_li°_£t
 (c⁄° *
i‚ame
, 
di°ribuã_ty≥
 
ty≥
,

140 c⁄° *
Æi°_«me
)

142 
di°ribuã
 *
di°
;

144 
di°
 = 
	`di°ribuã_gë
 (
i‚ame
);

146 i‡(
ty≥
 =
DISTRIBUTE_IN
)

148 i‡(
di°
->
li°
[
DISTRIBUTE_IN
])

149 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_IN
]);

150 
di°
->
li°
[
DISTRIBUTE_IN
] = 
	`°rdup
 (
Æi°_«me
);

152 i‡(
ty≥
 =
DISTRIBUTE_OUT
)

154 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
])

155 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_OUT
]);

156 
di°
->
li°
[
DISTRIBUTE_OUT
] = 
	`°rdup
 (
Æi°_«me
);

160 (*
di°ribuã_add_hook
Ë(
di°
);

162  
di°
;

163 
	}
}

168 
	$di°ribuã_li°_un£t
 (c⁄° *
i‚ame
, 
di°ribuã_ty≥
 
ty≥
,

169 c⁄° *
Æi°_«me
)

171 
di°ribuã
 *
di°
;

173 
di°
 = 
	`di°ribuã_lookup
 (
i‚ame
);

174 i‡(!
di°
)

177 i‡(
ty≥
 =
DISTRIBUTE_IN
)

179 i‡(!
di°
->
li°
[
DISTRIBUTE_IN
])

181 i‡(
	`°rcmp
 (
di°
->
li°
[
DISTRIBUTE_IN
], 
Æi°_«me
) != 0)

184 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_IN
]);

185 
di°
->
li°
[
DISTRIBUTE_IN
] = 
NULL
;

188 i‡(
ty≥
 =
DISTRIBUTE_OUT
)

190 i‡(!
di°
->
li°
[
DISTRIBUTE_OUT
])

192 i‡(
	`°rcmp
 (
di°
->
li°
[
DISTRIBUTE_OUT
], 
Æi°_«me
) != 0)

195 
	`‰ì
 (
di°
->
li°
[
DISTRIBUTE_OUT
]);

196 
di°
->
li°
[
DISTRIBUTE_OUT
] = 
NULL
;

200 (*
di°ribuã_dñëe_hook
Ë(
di°
);

203 i‡(
di°
->
li°
[
DISTRIBUTE_IN
] =
NULL
 &&

204 
di°
->
li°
[
DISTRIBUTE_OUT
] =
NULL
 &&

205 
di°
->
¥efix
[
DISTRIBUTE_IN
] =
NULL
 &&

206 
di°
->
¥efix
[
DISTRIBUTE_OUT
] =
NULL
)

208 
	`hash_ªÀa£
 (
di°hash
, 
di°
);

209 
	`di°ribuã_‰ì
 (
di°
);

213 
	}
}

216 
di°ribuã
 *

217 
	$di°ribuã_li°_¥efix_£t
 (c⁄° *
i‚ame
, 
di°ribuã_ty≥
 
ty≥
,

218 c⁄° *
∂i°_«me
)

220 
di°ribuã
 *
di°
;

222 
di°
 = 
	`di°ribuã_gë
 (
i‚ame
);

224 i‡(
ty≥
 =
DISTRIBUTE_IN
)

226 i‡(
di°
->
¥efix
[
DISTRIBUTE_IN
])

227 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_IN
]);

228 
di°
->
¥efix
[
DISTRIBUTE_IN
] = 
	`°rdup
 (
∂i°_«me
);

230 i‡(
ty≥
 =
DISTRIBUTE_OUT
)

232 i‡(
di°
->
¥efix
[
DISTRIBUTE_OUT
])

233 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_OUT
]);

234 
di°
->
¥efix
[
DISTRIBUTE_OUT
] = 
	`°rdup
 (
∂i°_«me
);

238 (*
di°ribuã_add_hook
Ë(
di°
);

240  
di°
;

241 
	}
}

246 
	$di°ribuã_li°_¥efix_un£t
 (c⁄° *
i‚ame
, 
di°ribuã_ty≥
 
ty≥
,

247 c⁄° *
∂i°_«me
)

249 
di°ribuã
 *
di°
;

251 
di°
 = 
	`di°ribuã_lookup
 (
i‚ame
);

252 i‡(!
di°
)

255 i‡(
ty≥
 =
DISTRIBUTE_IN
)

257 i‡(!
di°
->
¥efix
[
DISTRIBUTE_IN
])

259 i‡(
	`°rcmp
 (
di°
->
¥efix
[
DISTRIBUTE_IN
], 
∂i°_«me
) != 0)

262 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_IN
]);

263 
di°
->
¥efix
[
DISTRIBUTE_IN
] = 
NULL
;

266 i‡(
ty≥
 =
DISTRIBUTE_OUT
)

268 i‡(!
di°
->
¥efix
[
DISTRIBUTE_OUT
])

270 i‡(
	`°rcmp
 (
di°
->
¥efix
[
DISTRIBUTE_OUT
], 
∂i°_«me
) != 0)

273 
	`‰ì
 (
di°
->
¥efix
[
DISTRIBUTE_OUT
]);

274 
di°
->
¥efix
[
DISTRIBUTE_OUT
] = 
NULL
;

278 (*
di°ribuã_dñëe_hook
Ë(
di°
);

281 i‡(
di°
->
li°
[
DISTRIBUTE_IN
] =
NULL
 &&

282 
di°
->
li°
[
DISTRIBUTE_OUT
] =
NULL
 &&

283 
di°
->
¥efix
[
DISTRIBUTE_IN
] =
NULL
 &&

284 
di°
->
¥efix
[
DISTRIBUTE_OUT
] =
NULL
)

286 
	`hash_ªÀa£
 (
di°hash
, 
di°
);

287 
	`di°ribuã_‰ì
 (
di°
);

291 
	}
}

293 
DEFUN
 (
di°ribuã_li°_Æl
,

294 
di°ribuã_li°_Æl_cmd
,

301 
di°ribuã_ty≥
 
	gty≥
;

302 
di°ribuã
 *
	gdi°
;

305 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

306 
ty≥
 = 
DISTRIBUTE_IN
;

307 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

308 
ty≥
 = 
DISTRIBUTE_OUT
;

311 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

312 
VTY_NEWLINE
);

313  
	gCMD_WARNING
;

317 
	gdi°
 = 
di°ribuã_li°_£t
 (
NULL
, 
ty≥
, 
¨gv
[0]);

319  
	gCMD_SUCCESS
;

322 
ALIAS
 (
di°ribuã_li°_Æl
,

323 
ùv6_di°ribuã_li°_Æl_cmd
,

330 
DEFUN
 (
no_di°ribuã_li°_Æl
,

331 
no_di°ribuã_li°_Æl_cmd
,

333 
NO_STR


339 
	gªt
;

340 
di°ribuã_ty≥
 
	gty≥
;

343 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

344 
ty≥
 = 
DISTRIBUTE_IN
;

345 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

346 
ty≥
 = 
DISTRIBUTE_OUT
;

349 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

350 
VTY_NEWLINE
);

351  
	gCMD_WARNING
;

354 
	gªt
 = 
di°ribuã_li°_un£t
 (
NULL
, 
ty≥
, 
¨gv
[0]);

355 i‡(! 
	gªt
)

357 
vty_out
 (
vty
, "di°ribuãÜi° d€¢'àexi°%s", 
VTY_NEWLINE
);

358  
	gCMD_WARNING
;

360  
	gCMD_SUCCESS
;

363 
ALIAS
 (
no_di°ribuã_li°_Æl
,

364 
no_ùv6_di°ribuã_li°_Æl_cmd
,

366 
NO_STR


372 
DEFUN
 (
di°ribuã_li°
,

373 
di°ribuã_li°_cmd
,

381 
di°ribuã_ty≥
 
	gty≥
;

382 
di°ribuã
 *
	gdi°
;

385 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

386 
ty≥
 = 
DISTRIBUTE_IN
;

387 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

388 
ty≥
 = 
DISTRIBUTE_OUT
;

391 
vty_out
 (
vty
, "di°ribuãÜi° dúe˘i⁄ mu° bê[ö|out]%s", 
VTY_NEWLINE
);

392  
	gCMD_WARNING
;

396 
	gdi°
 = 
di°ribuã_li°_£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

398  
	gCMD_SUCCESS
;

401 
ALIAS
 (
di°ribuã_li°
,

402 
ùv6_di°ribuã_li°_cmd
,

410 
DEFUN
 (
no_di°ricuã_li°
, 
no_di°ribuã_li°_cmd
,

412 
NO_STR


419 
	gªt
;

420 
di°ribuã_ty≥
 
	gty≥
;

423 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

424 
ty≥
 = 
DISTRIBUTE_IN
;

425 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

426 
ty≥
 = 
DISTRIBUTE_OUT
;

429 
vty_out
 (
vty
, "di°ribuãÜi° dúe˘i⁄ mu° bê[ö|out]%s", 
VTY_NEWLINE
);

430  
	gCMD_WARNING
;

433 
	gªt
 = 
di°ribuã_li°_un£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

434 i‡(! 
	gªt
)

436 
vty_out
 (
vty
, "di°ribuãÜi° d€¢'àexi°%s", 
VTY_NEWLINE
);

437  
	gCMD_WARNING
;

439  
	gCMD_SUCCESS
;

442 
ALIAS
 (
no_di°ricuã_li°
, 
no_ùv6_di°ribuã_li°_cmd
,

444 
NO_STR


451 
DEFUN
 (
di°ricuã_li°_¥efix_Æl
,

452 
di°ribuã_li°_¥efix_Æl_cmd
,

460 
di°ribuã_ty≥
 
	gty≥
;

461 
di°ribuã
 *
	gdi°
;

464 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

465 
ty≥
 = 
DISTRIBUTE_IN
;

466 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

467 
ty≥
 = 
DISTRIBUTE_OUT
;

470 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

471 
VTY_NEWLINE
);

472  
	gCMD_WARNING
;

476 
	gdi°
 = 
di°ribuã_li°_¥efix_£t
 (
NULL
, 
ty≥
, 
¨gv
[0]);

478  
	gCMD_SUCCESS
;

481 
ALIAS
 (
di°ricuã_li°_¥efix_Æl
,

482 
ùv6_di°ribuã_li°_¥efix_Æl_cmd
,

490 
DEFUN
 (
no_di°ricuã_li°_¥efix_Æl
,

491 
no_di°ribuã_li°_¥efix_Æl_cmd
,

493 
NO_STR


500 
	gªt
;

501 
di°ribuã_ty≥
 
	gty≥
;

504 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

505 
ty≥
 = 
DISTRIBUTE_IN
;

506 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

507 
ty≥
 = 
DISTRIBUTE_OUT
;

510 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

511 
VTY_NEWLINE
);

512  
	gCMD_WARNING
;

515 
	gªt
 = 
di°ribuã_li°_¥efix_un£t
 (
NULL
, 
ty≥
, 
¨gv
[0]);

516 i‡(! 
	gªt
)

518 
vty_out
 (
vty
, "di°ribuãÜi° d€¢'àexi°%s", 
VTY_NEWLINE
);

519  
	gCMD_WARNING
;

521  
	gCMD_SUCCESS
;

524 
ALIAS
 (
no_di°ricuã_li°_¥efix_Æl
,

525 
no_ùv6_di°ribuã_li°_¥efix_Æl_cmd
,

527 
NO_STR


534 
DEFUN
 (
di°ricuã_li°_¥efix
, 
di°ribuã_li°_¥efix_cmd
,

543 
di°ribuã_ty≥
 
	gty≥
;

544 
di°ribuã
 *
	gdi°
;

547 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

548 
ty≥
 = 
DISTRIBUTE_IN
;

549 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

550 
ty≥
 = 
DISTRIBUTE_OUT
;

553 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

554 
VTY_NEWLINE
);

555  
	gCMD_WARNING
;

559 
	gdi°
 = 
di°ribuã_li°_¥efix_£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

561  
	gCMD_SUCCESS
;

564 
ALIAS
 (
di°ricuã_li°_¥efix
, 
ùv6_di°ribuã_li°_¥efix_cmd
,

573 
DEFUN
 (
no_di°ricuã_li°_¥efix
, 
no_di°ribuã_li°_¥efix_cmd
,

575 
NO_STR


583 
	gªt
;

584 
di°ribuã_ty≥
 
	gty≥
;

587 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

588 
ty≥
 = 
DISTRIBUTE_IN
;

589 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

590 
ty≥
 = 
DISTRIBUTE_OUT
;

593 
vty_out
 (
vty
, "distributeÜist direction must be [in|out]%s",

594 
VTY_NEWLINE
);

595  
	gCMD_WARNING
;

598 
	gªt
 = 
di°ribuã_li°_¥efix_un£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

599 i‡(! 
	gªt
)

601 
vty_out
 (
vty
, "di°ribuãÜi° d€¢'àexi°%s", 
VTY_NEWLINE
);

602  
	gCMD_WARNING
;

604  
	gCMD_SUCCESS
;

607 
ALIAS
 (
no_di°ricuã_li°_¥efix
, 
no_ùv6_di°ribuã_li°_¥efix_cmd
,

609 
NO_STR


618 
	$c⁄fig_show_di°ribuã
 (
vty
 *vty)

620 
i
;

621 
hash_backë
 *
mp
;

622 
di°ribuã
 *
di°
;

625 
di°
 = 
	`di°ribuã_lookup
 (
NULL
);

626 i‡(
di°
 && (di°->
li°
[
DISTRIBUTE_OUT
] || di°->
¥efix
[DISTRIBUTE_OUT]))

628 
	`vty_out
 (
vty
, " Outgoing update filterÜist foráll interface is");

629 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
])

630 
	`vty_out
 (
vty
, " %s", 
di°
->
li°
[
DISTRIBUTE_OUT
]);

631 i‡(
di°
->
¥efix
[
DISTRIBUTE_OUT
])

632 
	`vty_out
 (
vty
, "%s (prefix-list) %s",

633 
di°
->
li°
[
DISTRIBUTE_OUT
] ? "," : "",

634 
di°
->
¥efix
[
DISTRIBUTE_OUT
]);

635 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

638 
	`vty_out
 (
vty
, " Outgoög upd©êfûã∏li° f‹áŒ i¡îÁ˚ i†nŸ së%s", 
VTY_NEWLINE
);

640 
i
 = 0; i < 
di°hash
->
size
; i++)

641 
mp
 = 
di°hash
->
ödex
[
i
]; mp; m∞mp->
√xt
)

643 
di°
 = 
mp
->
d©a
;

644 i‡(
di°
->
i‚ame
)

645 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
] || di°->
¥efix
[DISTRIBUTE_OUT])

647 
	`vty_out
 (
vty
, " %†fûãªd by", 
di°
->
i‚ame
);

648 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
])

649 
	`vty_out
 (
vty
, " %s", 
di°
->
li°
[
DISTRIBUTE_OUT
]);

650 i‡(
di°
->
¥efix
[
DISTRIBUTE_OUT
])

651 
	`vty_out
 (
vty
, "%s (prefix-list) %s",

652 
di°
->
li°
[
DISTRIBUTE_OUT
] ? "," : "",

653 
di°
->
¥efix
[
DISTRIBUTE_OUT
]);

654 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

660 
di°
 = 
	`di°ribuã_lookup
 (
NULL
);

661 i‡(
di°
 && (di°->
li°
[
DISTRIBUTE_IN
] || di°->
¥efix
[DISTRIBUTE_IN]))

663 
	`vty_out
 (
vty
, " Incoming update filterÜist foráll interface is");

664 i‡(
di°
->
li°
[
DISTRIBUTE_IN
])

665 
	`vty_out
 (
vty
, " %s", 
di°
->
li°
[
DISTRIBUTE_IN
]);

666 i‡(
di°
->
¥efix
[
DISTRIBUTE_IN
])

667 
	`vty_out
 (
vty
, "%s (prefix-list) %s",

668 
di°
->
li°
[
DISTRIBUTE_IN
] ? "," : "",

669 
di°
->
¥efix
[
DISTRIBUTE_IN
]);

670 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

673 
	`vty_out
 (
vty
, " Incomög upd©êfûã∏li° f‹áŒ i¡îÁ˚ i†nŸ së%s", 
VTY_NEWLINE
);

675 
i
 = 0; i < 
di°hash
->
size
; i++)

676 
mp
 = 
di°hash
->
ödex
[
i
]; mp; m∞mp->
√xt
)

678 
di°
 = 
mp
->
d©a
;

679 i‡(
di°
->
i‚ame
)

680 i‡(
di°
->
li°
[
DISTRIBUTE_IN
] || di°->
¥efix
[DISTRIBUTE_IN])

682 
	`vty_out
 (
vty
, " %†fûãªd by", 
di°
->
i‚ame
);

683 i‡(
di°
->
li°
[
DISTRIBUTE_IN
])

684 
	`vty_out
 (
vty
, " %s", 
di°
->
li°
[
DISTRIBUTE_IN
]);

685 i‡(
di°
->
¥efix
[
DISTRIBUTE_IN
])

686 
	`vty_out
 (
vty
, "%s (prefix-list) %s",

687 
di°
->
li°
[
DISTRIBUTE_IN
] ? "," : "",

688 
di°
->
¥efix
[
DISTRIBUTE_IN
]);

689 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

693 
	}
}

697 
	$c⁄fig_wrôe_di°ribuã
 (
vty
 *vty)

699 
i
;

700 
hash_backë
 *
mp
;

701 
wrôe
 = 0;

703 
i
 = 0; i < 
di°hash
->
size
; i++)

704 
mp
 = 
di°hash
->
ödex
[
i
]; mp; m∞mp->
√xt
)

706 
di°ribuã
 *
di°
;

708 
di°
 = 
mp
->
d©a
;

710 i‡(
di°
->
li°
[
DISTRIBUTE_IN
])

712 
	`vty_out
 (
vty
, " distribute-list %s in %s%s",

713 
di°
->
li°
[
DISTRIBUTE_IN
],

714 
di°
->
i‚ame
 ? dist->ifname : "",

715 
VTY_NEWLINE
);

716 
wrôe
++;

719 i‡(
di°
->
li°
[
DISTRIBUTE_OUT
])

721 
	`vty_out
 (
vty
, " distribute-list %s out %s%s",

723 
di°
->
li°
[
DISTRIBUTE_OUT
],

724 
di°
->
i‚ame
 ? dist->ifname : "",

725 
VTY_NEWLINE
);

726 
wrôe
++;

729 i‡(
di°
->
¥efix
[
DISTRIBUTE_IN
])

731 
	`vty_out
 (
vty
, " distribute-listÖrefix %s in %s%s",

732 
di°
->
¥efix
[
DISTRIBUTE_IN
],

733 
di°
->
i‚ame
 ? dist->ifname : "",

734 
VTY_NEWLINE
);

735 
wrôe
++;

738 i‡(
di°
->
¥efix
[
DISTRIBUTE_OUT
])

740 
	`vty_out
 (
vty
, " distribute-listÖrefix %s out %s%s",

741 
di°
->
¥efix
[
DISTRIBUTE_OUT
],

742 
di°
->
i‚ame
 ? dist->ifname : "",

743 
VTY_NEWLINE
);

744 
wrôe
++;

747  
wrôe
;

748 
	}
}

752 
	$di°ribuã_li°_ª£t
 ()

754 
	`hash_˛ón
 (
di°hash
, ((*Ë(*)Ë
di°ribuã_‰ì
);

755 
	}
}

759 
	$di°ribuã_li°_öô
 (
node
)

761 
di°hash
 = 
	`hash_¸óã
 (
di°ribuã_hash_make
,

762 ((*Ë(c⁄° *, c⁄° *)Ë
di°ribuã_cmp
);

764 if(
node
==
RIP_NODE
) {

765 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
di°ribuã_li°_Æl_cmd
);

766 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
no_di°ribuã_li°_Æl_cmd
);

767 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
di°ribuã_li°_cmd
);

768 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
no_di°ribuã_li°_cmd
);

769 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
di°ribuã_li°_¥efix_Æl_cmd
);

770 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
no_di°ribuã_li°_¥efix_Æl_cmd
);

771 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
di°ribuã_li°_¥efix_cmd
);

772 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
no_di°ribuã_li°_¥efix_cmd
);

774 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
ùv6_di°ribuã_li°_Æl_cmd
);

775 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
no_ùv6_di°ribuã_li°_Æl_cmd
);

776 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
ùv6_di°ribuã_li°_cmd
);

777 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
no_ùv6_di°ribuã_li°_cmd
);

778 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
ùv6_di°ribuã_li°_¥efix_Æl_cmd
);

779 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
no_ùv6_di°ribuã_li°_¥efix_Æl_cmd
);

780 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
ùv6_di°ribuã_li°_¥efix_cmd
);

781 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
no_ùv6_di°ribuã_li°_¥efix_cmd
);

783 
	}
}

	@common-libs/3rd-party/quagga-lib/src/filter.c

22 
	~<zebø.h
>

24 
	~"¥efix.h
"

25 
	~"fûãr.h
"

26 
	~"mem‹y.h
"

27 
	~"comm™d.h
"

28 
	~"sockuni⁄.h
"

29 
	~"buf„r.h
"

30 
	~"log.h
"

32 
	sfûãr_cisco


35 
	mexãnded
;

36 
ö_addr
 
	maddr
;

37 
ö_addr
 
	maddr_mask
;

38 
ö_addr
 
	mmask
;

39 
ö_addr
 
	mmask_mask
;

42 
	sfûãr_zebø


45 
	mexa˘
;

48 
¥efix
 
	m¥efix
;

52 
	sfûãr


55 
fûãr
 *
	m√xt
;

56 
fûãr
 *
	m¥ev
;

59 
fûãr_ty≥
 
	mty≥
;

62 
	mcisco
;

66 
fûãr_cisco
 
	mcfûãr
;

67 
fûãr_zebø
 
	mzfûãr
;

68 } 
	mu
;

72 
	sac˚ss_li°_li°


74 
ac˚ss_li°
 *
	mhód
;

75 
ac˚ss_li°
 *
	mèû
;

79 
	sac˚ss_ma°î


82 
ac˚ss_li°_li°
 
	mnum
;

85 
ac˚ss_li°_li°
 
	m°r
;

88 (*
	madd_hook
Ë(
	mac˚ss_li°
 *);

91 (*
	mdñëe_hook
Ë(
	mac˚ss_li°
 *);

95 
ac˚ss_ma°î
 
	gac˚ss_ma°î_ùv4
 =

97 {
NULL
, NULL},

98 {
NULL
, NULL},

99 
NULL
,

100 
NULL
,

103 #ifde‡
HAVE_IPV6


105 
ac˚ss_ma°î
 
	gac˚ss_ma°î_ùv6
 =

107 {
NULL
, NULL},

108 {
NULL
, NULL},

109 
NULL
,

110 
NULL
,

114 
ac˚ss_ma°î
 *

115 
	$ac˚ss_ma°î_gë
 (
afi_t
 
afi
)

117 i‡(
afi
 =
AFI_IP
)

118  &
ac˚ss_ma°î_ùv4
;

119 #ifde‡
HAVE_IPV6


120 i‡(
afi
 =
AFI_IP6
)

121  &
ac˚ss_ma°î_ùv6
;

123  
NULL
;

124 
	}
}

127 
fûãr
 *

128 
	$fûãr_√w
 ()

130  (
fûãr
 *Ë
	`XCALLOC
 (
MTYPE_ACCESS_FILTER
,

131  (
fûãr
));

132 
	}
}

135 
	$fûãr_‰ì
 (
fûãr
 *filter)

137 
	`XFREE
 (
MTYPE_ACCESS_FILTER
, 
fûãr
);

138 
	}
}

142 
	$fûãr_ty≥_°r
 (
fûãr
 *filter)

144 
fûãr
->
ty≥
)

146 
FILTER_PERMIT
:

149 
FILTER_DENY
:

152 
FILTER_DYNAMIC
:

159 
	}
}

163 
	$fûãr_m©ch_cisco
 (
fûãr
 *
mfûãr
, 
¥efix
 *
p
)

165 
fûãr_cisco
 *
fûãr
;

166 
ö_addr
 
mask
;

167 
u_öt32_t
 
check_addr
;

168 
u_öt32_t
 
check_mask
;

170 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

171 
check_addr
 = 
p
->
u
.
¥efix4
.
s_addr
 & ~
fûãr
->
addr_mask
.s_addr;

173 i‡(
fûãr
->
exãnded
)

175 
	`maskÀn2ù
 (
p
->
¥efixÀn
, &
mask
);

176 
check_mask
 = 
mask
.
s_addr
 & ~
fûãr
->
mask_mask
.s_addr;

178 i‡(
	`memcmp
 (&
check_addr
, &
fûãr
->
addr
.
s_addr
, 4) == 0

179 && 
	`memcmp
 (&
check_mask
, &
fûãr
->
mask
.
s_addr
, 4) == 0)

182 i‡(
	`memcmp
 (&
check_addr
, &
fûãr
->
addr
.
s_addr
, 4) == 0)

186 
	}
}

190 
	$fûãr_m©ch_zebø
 (
fûãr
 *
mfûãr
, 
¥efix
 *
p
)

192 
fûãr_zebø
 *
fûãr
;

194 
fûãr
 = &
mfûãr
->
u
.
zfûãr
;

196 i‡(
fûãr
->
¥efix
.
Ámûy
 =
p
->family)

198 i‡(
fûãr
->
exa˘
)

200 i‡(
fûãr
->
¥efix
.
¥efixÀn
 =
p
->prefixlen)

201  
	`¥efix_m©ch
 (&
fûãr
->
¥efix
, 
p
);

206  
	`¥efix_m©ch
 (&
fûãr
->
¥efix
, 
p
);

210 
	}
}

213 
ac˚ss_li°
 *

214 
	$ac˚ss_li°_√w
 ()

216  (
ac˚ss_li°
 *Ë
	`XCALLOC
 (
MTYPE_ACCESS_LIST
,

217  (
ac˚ss_li°
));

218 
	}
}

222 
	$ac˚ss_li°_‰ì
 (
ac˚ss_li°
 *
ac˚ss
)

224 
	`XFREE
 (
MTYPE_ACCESS_LIST
, 
ac˚ss
);

225 
	}
}

229 
	$ac˚ss_li°_dñëe
 (
ac˚ss_li°
 *
ac˚ss
)

231 
fûãr
 *filter;

232 
fûãr
 *
√xt
;

233 
ac˚ss_li°_li°
 *
li°
;

234 
ac˚ss_ma°î
 *
ma°î
;

236 
fûãr
 = 
ac˚ss
->
hód
; fûãr; fûã∏
√xt
)

238 
√xt
 = 
fûãr
->next;

239 
	`fûãr_‰ì
 (
fûãr
);

242 
ma°î
 = 
ac˚ss
->master;

244 i‡(
ac˚ss
->
ty≥
 =
ACCESS_TYPE_NUMBER
)

245 
li°
 = &
ma°î
->
num
;

247 
li°
 = &
ma°î
->
°r
;

249 i‡(
ac˚ss
->
√xt
)

250 
ac˚ss
->
√xt
->
¥ev
 =áccess->prev;

252 
li°
->
èû
 = 
ac˚ss
->
¥ev
;

254 i‡(
ac˚ss
->
¥ev
)

255 
ac˚ss
->
¥ev
->
√xt
 =áccess->next;

257 
li°
->
hód
 = 
ac˚ss
->
√xt
;

259 i‡(
ac˚ss
->
«me
)

260 
	`XFREE
 (
MTYPE_ACCESS_LIST_STR
, 
ac˚ss
->
«me
);

262 i‡(
ac˚ss
->
ªm¨k
)

263 
	`XFREE
 (
MTYPE_TMP
, 
ac˚ss
->
ªm¨k
);

265 
	`ac˚ss_li°_‰ì
 (
ac˚ss
);

266 
	}
}

270 
ac˚ss_li°
 *

271 
	$ac˚ss_li°_ö£π
 (
afi_t
 
afi
, c⁄° *
«me
)

273 
i
;

274 
numbî
;

275 
ac˚ss_li°
 *
ac˚ss
;

276 
ac˚ss_li°
 *
poöt
;

277 
ac˚ss_li°_li°
 *
Æi°
;

278 
ac˚ss_ma°î
 *
ma°î
;

280 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
afi
);

281 i‡(
ma°î
 =
NULL
)

282  
NULL
;

285 
ac˚ss
 = 
	`ac˚ss_li°_√w
 ();

286 
ac˚ss
->
«me
 = 
	`XSTRDUP
 (
MTYPE_ACCESS_LIST_STR
,Çame);

287 
ac˚ss
->
ma°î
 = master;

291 
numbî
 = 0, 
i
 = 0; i < 
	`°æí
 (
«me
); i++)

293 i‡(
	`isdigô
 ((Ë
«me
[
i
]))

294 
numbî
 = (numbî * 10Ë+ (
«me
[
i
] - '0');

300 i‡(
i
 =
	`°æí
 (
«me
))

302 
ac˚ss
->
ty≥
 = 
ACCESS_TYPE_NUMBER
;

305 
Æi°
 = &
ma°î
->
num
;

307 
poöt
 = 
Æi°
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

308 i‡(
	`©ﬁ
 (
poöt
->
«me
Ë>
numbî
)

313 
ac˚ss
->
ty≥
 = 
ACCESS_TYPE_STRING
;

316 
Æi°
 = &
ma°î
->
°r
;

319 
poöt
 = 
Æi°
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

320 i‡(
	`°rcmp
 (
poöt
->
«me
,Çame) >= 0)

325 i‡(
Æi°
->
hód
 =
NULL
)

327 
Æi°
->
hód
 =áli°->
èû
 = 
ac˚ss
;

328  
ac˚ss
;

332 i‡(
poöt
 =
NULL
)

334 
ac˚ss
->
¥ev
 = 
Æi°
->
èû
;

335 
Æi°
->
èû
->
√xt
 = 
ac˚ss
;

336 
Æi°
->
èû
 = 
ac˚ss
;

337  
ac˚ss
;

341 i‡(
poöt
 =
Æi°
->
hód
)

343 
ac˚ss
->
√xt
 = 
Æi°
->
hód
;

344 
Æi°
->
hód
->
¥ev
 = 
ac˚ss
;

345 
Æi°
->
hód
 = 
ac˚ss
;

346  
ac˚ss
;

350 
ac˚ss
->
√xt
 = 
poöt
;

351 
ac˚ss
->
¥ev
 = 
poöt
->prev;

353 i‡(
poöt
->
¥ev
)

354 
poöt
->
¥ev
->
√xt
 = 
ac˚ss
;

355 
poöt
->
¥ev
 = 
ac˚ss
;

357  
ac˚ss
;

358 
	}
}

361 
ac˚ss_li°
 *

362 
	$ac˚ss_li°_lookup
 (
afi_t
 
afi
, c⁄° *
«me
)

364 
ac˚ss_li°
 *
ac˚ss
;

365 
ac˚ss_ma°î
 *
ma°î
;

367 i‡(
«me
 =
NULL
)

368  
NULL
;

370 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
afi
);

371 i‡(
ma°î
 =
NULL
)

372  
NULL
;

374 
ac˚ss
 = 
ma°î
->
num
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

375 i‡(
	`°rcmp
 (
ac˚ss
->
«me
,Çame) == 0)

376  
ac˚ss
;

378 
ac˚ss
 = 
ma°î
->
°r
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

379 i‡(
	`°rcmp
 (
ac˚ss
->
«me
,Çame) == 0)

380  
ac˚ss
;

382  
NULL
;

383 
	}
}

387 
ac˚ss_li°
 *

388 
	$ac˚ss_li°_gë
 (
afi_t
 
afi
, c⁄° *
«me
)

390 
ac˚ss_li°
 *
ac˚ss
;

392 
ac˚ss
 = 
	`ac˚ss_li°_lookup
 (
afi
, 
«me
);

393 i‡(
ac˚ss
 =
NULL
)

394 
ac˚ss
 = 
	`ac˚ss_li°_ö£π
 (
afi
, 
«me
);

395  
ac˚ss
;

396 
	}
}

399 
fûãr_ty≥


400 
	$ac˚ss_li°_≠∂y
 (
ac˚ss_li°
 *
ac˚ss
, *
obje˘
)

402 
fûãr
 *filter;

403 
¥efix
 *
p
;

405 
p
 = (
¥efix
 *Ë
obje˘
;

407 i‡(
ac˚ss
 =
NULL
)

408  
FILTER_DENY
;

410 
fûãr
 = 
ac˚ss
->
hód
; fûãr; fûã∏fûãr->
√xt
)

412 i‡(
fûãr
->
cisco
)

414 i‡(
	`fûãr_m©ch_cisco
 (
fûãr
, 
p
))

415  
fûãr
->
ty≥
;

419 i‡(
	`fûãr_m©ch_zebø
 (
fûãr
, 
p
))

420  
fûãr
->
ty≥
;

424  
FILTER_DENY
;

425 
	}
}

429 
ac˚ss_li°_add_hook
 ((*
func
Ë(
ac˚ss_li°
 *
ac˚ss
))

431 
ac˚ss_ma°î_ùv4
.
add_hook
 = 
func
;

432 #ifde‡
HAVE_IPV6


433 
ac˚ss_ma°î_ùv6
.
add_hook
 = 
func
;

435 
	}
}

439 
ac˚ss_li°_dñëe_hook
 ((*
func
Ë(
ac˚ss_li°
 *
ac˚ss
))

441 
ac˚ss_ma°î_ùv4
.
dñëe_hook
 = 
func
;

442 #ifde‡
HAVE_IPV6


443 
ac˚ss_ma°î_ùv6
.
dñëe_hook
 = 
func
;

445 
	}
}

449 
	$ac˚ss_li°_fûãr_add
 (
ac˚ss_li°
 *
ac˚ss
, 
fûãr
 *filter)

451 
fûãr
->
√xt
 = 
NULL
;

452 
fûãr
->
¥ev
 = 
ac˚ss
->
èû
;

454 i‡(
ac˚ss
->
èû
)

455 
ac˚ss
->
èû
->
√xt
 = 
fûãr
;

457 
ac˚ss
->
hód
 = 
fûãr
;

458 
ac˚ss
->
èû
 = 
fûãr
;

461 i‡(
ac˚ss
->
ma°î
->
add_hook
)

462 (*
ac˚ss
->
ma°î
->
add_hook
) (access);

463 
	}
}

467 
	$ac˚ss_li°_em±y
 (
ac˚ss_li°
 *
ac˚ss
)

469 i‡(
ac˚ss
->
hód
 =
NULL
 &&ác˚ss->
èû
 == NULL)

473 
	}
}

478 
	$ac˚ss_li°_fûãr_dñëe
 (
ac˚ss_li°
 *
ac˚ss
, 
fûãr
 *filter)

480 
ac˚ss_ma°î
 *
ma°î
;

482 
ma°î
 = 
ac˚ss
->master;

484 i‡(
fûãr
->
√xt
)

485 
fûãr
->
√xt
->
¥ev
 = filter->prev;

487 
ac˚ss
->
èû
 = 
fûãr
->
¥ev
;

489 i‡(
fûãr
->
¥ev
)

490 
fûãr
->
¥ev
->
√xt
 = filter->next;

492 
ac˚ss
->
hód
 = 
fûãr
->
√xt
;

494 
	`fûãr_‰ì
 (
fûãr
);

497 i‡(
	`ac˚ss_li°_em±y
 (
ac˚ss
))

498 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

501 i‡(
ma°î
->
dñëe_hook
)

502 (*
ma°î
->
dñëe_hook
Ë(
ac˚ss
);

503 
	}
}

517 
fûãr
 *

518 
	$fûãr_lookup_cisco
 (
ac˚ss_li°
 *
ac˚ss
, 
fûãr
 *
m√w
)

520 
fûãr
 *
mfûãr
;

521 
fûãr_cisco
 *
fûãr
;

522 
fûãr_cisco
 *
√w
;

524 
√w
 = &
m√w
->
u
.
cfûãr
;

526 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

528 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

530 i‡(
fûãr
->
exãnded
)

532 i‡(
mfûãr
->
ty≥
 =
m√w
->type

533 && 
fûãr
->
addr
.
s_addr
 =
√w
->addr.s_addr

534 && 
fûãr
->
addr_mask
.
s_addr
 =
√w
->addr_mask.s_addr

535 && 
fûãr
->
mask
.
s_addr
 =
√w
->mask.s_addr

536 && 
fûãr
->
mask_mask
.
s_addr
 =
√w
->mask_mask.s_addr)

537  
mfûãr
;

541 i‡(
mfûãr
->
ty≥
 =
m√w
->type

542 && 
fûãr
->
addr
.
s_addr
 =
√w
->addr.s_addr

543 && 
fûãr
->
addr_mask
.
s_addr
 =
√w
->addr_mask.s_addr)

544  
mfûãr
;

548  
NULL
;

549 
	}
}

551 
fûãr
 *

552 
	$fûãr_lookup_zebø
 (
ac˚ss_li°
 *
ac˚ss
, 
fûãr
 *
m√w
)

554 
fûãr
 *
mfûãr
;

555 
fûãr_zebø
 *
fûãr
;

556 
fûãr_zebø
 *
√w
;

558 
√w
 = &
m√w
->
u
.
zfûãr
;

560 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

562 
fûãr
 = &
mfûãr
->
u
.
zfûãr
;

564 i‡(
fûãr
->
exa˘
 =
√w
->exact

565 && 
mfûãr
->
ty≥
 =
m√w
->type

566 && 
	`¥efix_ßme
 (&
fûãr
->
¥efix
, &
√w
->prefix))

567  
mfûãr
;

569  
NULL
;

570 
	}
}

573 
	$vty_ac˚ss_li°_ªm¨k_un£t
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
)

575 
ac˚ss_li°
 *
ac˚ss
;

577 
ac˚ss
 = 
	`ac˚ss_li°_lookup
 (
afi
, 
«me
);

578 i‡(! 
ac˚ss
)

580 
	`vty_out
 (
vty
, "%%ác˚ss-li° %†d€¢'àexi°%s", 
«me
,

581 
VTY_NEWLINE
);

582  
CMD_WARNING
;

585 i‡(
ac˚ss
->
ªm¨k
)

587 
	`XFREE
 (
MTYPE_TMP
, 
ac˚ss
->
ªm¨k
);

588 
ac˚ss
->
ªm¨k
 = 
NULL
;

591 i‡(
ac˚ss
->
hód
 =
NULL
 &&ác˚ss->
èû
 =NULL &&ác˚ss->
ªm¨k
 == NULL)

592 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

594  
CMD_SUCCESS
;

595 
	}
}

598 
	$fûãr_£t_cisco
 (
vty
 *vty, c⁄° *
«me_°r
, c⁄° *
ty≥_°r
,

599 c⁄° *
addr_°r
, c⁄° *
addr_mask_°r
,

600 c⁄° *
mask_°r
, c⁄° *
mask_mask_°r
,

601 
exãnded
, 
£t
)

603 
ªt
;

604 
fûãr_ty≥
 
ty≥
;

605 
fûãr
 *
mfûãr
;

606 
fûãr_cisco
 *
fûãr
;

607 
ac˚ss_li°
 *
ac˚ss
;

608 
ö_addr
 
addr
;

609 
ö_addr
 
addr_mask
;

610 
ö_addr
 
mask
;

611 
ö_addr
 
mask_mask
;

614 i‡(
	`°∫cmp
 (
ty≥_°r
, "p", 1) == 0)

615 
ty≥
 = 
FILTER_PERMIT
;

616 i‡(
	`°∫cmp
 (
ty≥_°r
, "d", 1) == 0)

617 
ty≥
 = 
FILTER_DENY
;

620 
	`vty_out
 (
vty
, "%% fûã∏ty≥ mu° bê≥rmô o∏díy%s", 
VTY_NEWLINE
);

621  
CMD_WARNING
;

624 
ªt
 = 
	`öë_©⁄
 (
addr_°r
, &
addr
);

625 i‡(
ªt
 <= 0)

627 
	`vty_out
 (
vty
, "%%Inconsistentáddressánd mask%s",

628 
VTY_NEWLINE
);

629  
CMD_WARNING
;

632 
ªt
 = 
	`öë_©⁄
 (
addr_mask_°r
, &
addr_mask
);

633 i‡(
ªt
 <= 0)

635 
	`vty_out
 (
vty
, "%%Inconsistentáddressánd mask%s",

636 
VTY_NEWLINE
);

637  
CMD_WARNING
;

640 i‡(
exãnded
)

642 
ªt
 = 
	`öë_©⁄
 (
mask_°r
, &
mask
);

643 i‡(
ªt
 <= 0)

645 
	`vty_out
 (
vty
, "%%Inconsistentáddressánd mask%s",

646 
VTY_NEWLINE
);

647  
CMD_WARNING
;

650 
ªt
 = 
	`öë_©⁄
 (
mask_mask_°r
, &
mask_mask
);

651 i‡(
ªt
 <= 0)

653 
	`vty_out
 (
vty
, "%%Inconsistentáddressánd mask%s",

654 
VTY_NEWLINE
);

655  
CMD_WARNING
;

659 
mfûãr
 = 
	`fûãr_√w
();

660 
mfûãr
->
ty≥
 =Åype;

661 
mfûãr
->
cisco
 = 1;

662 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

663 
fûãr
->
exãnded
 =Éxtended;

664 
fûãr
->
addr
.
s_addr
 =áddr.s_add∏& ~
addr_mask
.s_addr;

665 
fûãr
->
addr_mask
.
s_addr
 =áddr_mask.s_addr;

667 i‡(
exãnded
)

669 
fûãr
->
mask
.
s_addr
 = mask.s_add∏& ~
mask_mask
.s_addr;

670 
fûãr
->
mask_mask
.
s_addr
 = mask_mask.s_addr;

674 
ac˚ss
 = 
	`ac˚ss_li°_gë
 (
AFI_IP
, 
«me_°r
);

676 i‡(
£t
)

678 i‡(
	`fûãr_lookup_cisco
 (
ac˚ss
, 
mfûãr
))

679 
	`fûãr_‰ì
 (
mfûãr
);

681 
	`ac˚ss_li°_fûãr_add
 (
ac˚ss
, 
mfûãr
);

685 
fûãr
 *
dñëe_fûãr
;

687 
dñëe_fûãr
 = 
	`fûãr_lookup_cisco
 (
ac˚ss
, 
mfûãr
);

688 i‡(
dñëe_fûãr
)

689 
	`ac˚ss_li°_fûãr_dñëe
 (
ac˚ss
, 
dñëe_fûãr
);

691 
	`fûãr_‰ì
 (
mfûãr
);

694  
CMD_SUCCESS
;

695 
	}
}

698 
DEFUN
 (
ac˚ss_li°_°™d¨d
,

699 
ac˚ss_li°_°™d¨d_cmd
,

709  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],árgv[3],

710 
NULL
, NULL, 0, 1);

713 
DEFUN
 (
ac˚ss_li°_°™d¨d_nomask
,

714 
ac˚ss_li°_°™d¨d_nomask_cmd
,

723  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2], "0.0.0.0",

724 
NULL
, NULL, 0, 1);

727 
DEFUN
 (
ac˚ss_li°_°™d¨d_ho°
,

728 
ac˚ss_li°_°™d¨d_ho°_cmd
,

738  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2], "0.0.0.0",

739 
NULL
, NULL, 0, 1);

742 
DEFUN
 (
ac˚ss_li°_°™d¨d_™y
,

743 
ac˚ss_li°_°™d¨d_™y_cmd
,

752  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

753 "255.255.255.255", 
NULL
, NULL, 0, 1);

756 
DEFUN
 (
no_ac˚ss_li°_°™d¨d
,

757 
no_ac˚ss_li°_°™d¨d_cmd
,

759 
NO_STR


768  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],árgv[3],

769 
NULL
, NULL, 0, 0);

772 
DEFUN
 (
no_ac˚ss_li°_°™d¨d_nomask
,

773 
no_ac˚ss_li°_°™d¨d_nomask_cmd
,

775 
NO_STR


783  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2], "0.0.0.0",

784 
NULL
, NULL, 0, 0);

787 
DEFUN
 (
no_ac˚ss_li°_°™d¨d_ho°
,

788 
no_ac˚ss_li°_°™d¨d_ho°_cmd
,

790 
NO_STR


799  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2], "0.0.0.0",

800 
NULL
, NULL, 0, 0);

803 
DEFUN
 (
no_ac˚ss_li°_°™d¨d_™y
,

804 
no_ac˚ss_li°_°™d¨d_™y_cmd
,

806 
NO_STR


814  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

815 "255.255.255.255", 
NULL
, NULL, 0, 0);

819 
DEFUN
 (
ac˚ss_li°_exãnded
,

820 
ac˚ss_li°_exãnded_cmd
,

833  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

834 
¨gv
[3],árgv[4],árgv[5], 1 ,1);

837 
DEFUN
 (
ac˚ss_li°_exãnded_mask_™y
,

838 
ac˚ss_li°_exãnded_mask_™y_cmd
,

850  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

851 
¨gv
[3], "0.0.0.0",

855 
DEFUN
 (
ac˚ss_li°_exãnded_™y_mask
,

856 
ac˚ss_li°_exãnded_™y_mask_cmd
,

868  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

869 "255.255.255.255", 
¨gv
[2],

870 
¨gv
[3], 1, 1);

873 
DEFUN
 (
ac˚ss_li°_exãnded_™y_™y
,

874 
ac˚ss_li°_exãnded_™y_™y_cmd
,

885  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

890 
DEFUN
 (
ac˚ss_li°_exãnded_mask_ho°
,

891 
ac˚ss_li°_exãnded_mask_ho°_cmd
,

904  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

905 
¨gv
[3],árgv[4],

909 
DEFUN
 (
ac˚ss_li°_exãnded_ho°_mask
,

910 
ac˚ss_li°_exãnded_ho°_mask_cmd
,

923  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

924 "0.0.0.0", 
¨gv
[3],

925 
¨gv
[4], 1, 1);

928 
DEFUN
 (
ac˚ss_li°_exãnded_ho°_ho°
,

929 
ac˚ss_li°_exãnded_ho°_ho°_cmd
,

942  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

943 "0.0.0.0", 
¨gv
[3],

947 
DEFUN
 (
ac˚ss_li°_exãnded_™y_ho°
,

948 
ac˚ss_li°_exãnded_™y_ho°_cmd
,

960  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

961 "255.255.255.255", 
¨gv
[2],

965 
DEFUN
 (
ac˚ss_li°_exãnded_ho°_™y
,

966 
ac˚ss_li°_exãnded_ho°_™y_cmd
,

978  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

983 
DEFUN
 (
no_ac˚ss_li°_exãnded
,

984 
no_ac˚ss_li°_exãnded_cmd
,

986 
NO_STR


998  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

999 
¨gv
[3],árgv[4],árgv[5], 1, 0);

1002 
DEFUN
 (
no_ac˚ss_li°_exãnded_mask_™y
,

1003 
no_ac˚ss_li°_exãnded_mask_™y_cmd
,

1005 
NO_STR


1016  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

1017 
¨gv
[3], "0.0.0.0",

1021 
DEFUN
 (
no_ac˚ss_li°_exãnded_™y_mask
,

1022 
no_ac˚ss_li°_exãnded_™y_mask_cmd
,

1024 
NO_STR


1035  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

1036 "255.255.255.255", 
¨gv
[2],

1037 
¨gv
[3], 1, 0);

1040 
DEFUN
 (
no_ac˚ss_li°_exãnded_™y_™y
,

1041 
no_ac˚ss_li°_exãnded_™y_™y_cmd
,

1043 
NO_STR


1053  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

1058 
DEFUN
 (
no_ac˚ss_li°_exãnded_mask_ho°
,

1059 
no_ac˚ss_li°_exãnded_mask_ho°_cmd
,

1061 
NO_STR


1073  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

1074 
¨gv
[3],árgv[4],

1078 
DEFUN
 (
no_ac˚ss_li°_exãnded_ho°_mask
,

1079 
no_ac˚ss_li°_exãnded_ho°_mask_cmd
,

1081 
NO_STR


1093  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

1094 "0.0.0.0", 
¨gv
[3],

1095 
¨gv
[4], 1, 0);

1098 
DEFUN
 (
no_ac˚ss_li°_exãnded_ho°_ho°
,

1099 
no_ac˚ss_li°_exãnded_ho°_ho°_cmd
,

1101 
NO_STR


1113  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

1114 "0.0.0.0", 
¨gv
[3],

1118 
DEFUN
 (
no_ac˚ss_li°_exãnded_™y_ho°
,

1119 
no_ac˚ss_li°_exãnded_™y_ho°_cmd
,

1121 
NO_STR


1132  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1], "0.0.0.0",

1133 "255.255.255.255", 
¨gv
[2],

1137 
DEFUN
 (
no_ac˚ss_li°_exãnded_ho°_™y
,

1138 
no_ac˚ss_li°_exãnded_ho°_™y_cmd
,

1140 
NO_STR


1151  
fûãr_£t_cisco
 (
vty
, 
¨gv
[0],árgv[1],árgv[2],

1157 
	$fûãr_£t_zebø
 (
vty
 *vty, c⁄° *
«me_°r
, c⁄° *
ty≥_°r
,

1158 
afi_t
 
afi
, c⁄° *
¥efix_°r
, 
exa˘
, 
£t
)

1160 
ªt
;

1161 
fûãr_ty≥
 
ty≥
;

1162 
fûãr
 *
mfûãr
;

1163 
fûãr_zebø
 *
fûãr
;

1164 
ac˚ss_li°
 *
ac˚ss
;

1165 
¥efix
 
p
;

1168 i‡(
	`°∫cmp
 (
ty≥_°r
, "p", 1) == 0)

1169 
ty≥
 = 
FILTER_PERMIT
;

1170 i‡(
	`°∫cmp
 (
ty≥_°r
, "d", 1) == 0)

1171 
ty≥
 = 
FILTER_DENY
;

1174 
	`vty_out
 (
vty
, "fûã∏ty≥ mu° bê[≥rmô|díy]%s", 
VTY_NEWLINE
);

1175  
CMD_WARNING
;

1179 i‡(
afi
 =
AFI_IP
)

1181 
ªt
 = 
	`°r2¥efix_ùv4
 (
¥efix_°r
, (
¥efix_ùv4
 *)&
p
);

1182 i‡(
ªt
 <= 0)

1184 
	`vty_out
 (
vty
, "IPáddressÖrefix/prefixlen is malformed%s",

1185 
VTY_NEWLINE
);

1186  
CMD_WARNING
;

1189 #ifde‡
HAVE_IPV6


1190 i‡(
afi
 =
AFI_IP6
)

1192 
ªt
 = 
	`°r2¥efix_ùv6
 (
¥efix_°r
, (
¥efix_ùv6
 *Ë&
p
);

1193 i‡(
ªt
 <= 0)

1195 
	`vty_out
 (
vty
, "IPv6áddressÖrefix/prefixlen is malformed%s",

1196 
VTY_NEWLINE
);

1197  
CMD_WARNING
;

1202  
CMD_WARNING
;

1204 
mfûãr
 = 
	`fûãr_√w
 ();

1205 
mfûãr
->
ty≥
 =Åype;

1206 
fûãr
 = &
mfûãr
->
u
.
zfûãr
;

1207 
	`¥efix_c›y
 (&
fûãr
->
¥efix
, &
p
);

1210 i‡(
exa˘
)

1211 
fûãr
->
exa˘
 = 1;

1214 
ac˚ss
 = 
	`ac˚ss_li°_gë
 (
afi
, 
«me_°r
);

1216 i‡(
£t
)

1218 i‡(
	`fûãr_lookup_zebø
 (
ac˚ss
, 
mfûãr
))

1219 
	`fûãr_‰ì
 (
mfûãr
);

1221 
	`ac˚ss_li°_fûãr_add
 (
ac˚ss
, 
mfûãr
);

1225 
fûãr
 *
dñëe_fûãr
;

1227 
dñëe_fûãr
 = 
	`fûãr_lookup_zebø
 (
ac˚ss
, 
mfûãr
);

1228 i‡(
dñëe_fûãr
)

1229 
	`ac˚ss_li°_fûãr_dñëe
 (
ac˚ss
, 
dñëe_fûãr
);

1231 
	`fûãr_‰ì
 (
mfûãr
);

1234  
CMD_SUCCESS
;

1235 
	}
}

1238 
DEFUN
 (
ac˚ss_li°
,

1239 
ac˚ss_li°_cmd
,

1247  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
,árgv[2], 0, 1);

1250 
DEFUN
 (
ac˚ss_li°_exa˘
,

1251 
ac˚ss_li°_exa˘_cmd
,

1260  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
,árgv[2], 1, 1);

1263 
DEFUN
 (
ac˚ss_li°_™y
,

1264 
ac˚ss_li°_™y_cmd
,

1272  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
, "0.0.0.0/0", 0, 1);

1275 
DEFUN
 (
no_ac˚ss_li°
,

1276 
no_ac˚ss_li°_cmd
,

1278 
NO_STR


1285  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
,árgv[2], 0, 0);

1288 
DEFUN
 (
no_ac˚ss_li°_exa˘
,

1289 
no_ac˚ss_li°_exa˘_cmd
,

1291 
NO_STR


1299  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
,árgv[2], 1, 0);

1302 
DEFUN
 (
no_ac˚ss_li°_™y
,

1303 
no_ac˚ss_li°_™y_cmd
,

1305 
NO_STR


1312  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP
, "0.0.0.0/0", 0, 0);

1315 
DEFUN
 (
no_ac˚ss_li°_Æl
,

1316 
no_ac˚ss_li°_Æl_cmd
,

1318 
NO_STR


1326 
ac˚ss_li°
 *
	gac˚ss
;

1327 
ac˚ss_ma°î
 *
	gma°î
;

1330 
	gac˚ss
 = 
ac˚ss_li°_lookup
 (
AFI_IP
, 
¨gv
[0]);

1331 i‡(
	gac˚ss
 =
NULL
)

1333 
vty_out
 (
vty
, "%%ác˚ss-li° %†d€¢'àexi°%s", 
¨gv
[0],

1334 
VTY_NEWLINE
);

1335  
	gCMD_WARNING
;

1338 
	gma°î
 = 
ac˚ss
->
ma°î
;

1341 
ac˚ss_li°_dñëe
 (
ac˚ss
);

1344 i‡(
	gma°î
->
	gdñëe_hook
)

1345 (*
	gma°î
->
	gdñëe_hook
Ë(
	gac˚ss
);

1347  
	gCMD_SUCCESS
;

1350 
DEFUN
 (
ac˚ss_li°_ªm¨k
,

1351 
ac˚ss_li°_ªm¨k_cmd
,

1362 
ac˚ss_li°
 *
	gac˚ss
;

1364 
	gac˚ss
 = 
ac˚ss_li°_gë
 (
AFI_IP
, 
¨gv
[0]);

1366 i‡(
	gac˚ss
->
	gªm¨k
)

1368 
XFREE
 (
MTYPE_TMP
, 
ac˚ss
->
ªm¨k
);

1369 
	gac˚ss
->
	gªm¨k
 = 
NULL
;

1371 
	gac˚ss
->
	gªm¨k
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 1);

1373  
	gCMD_SUCCESS
;

1376 
DEFUN
 (
no_ac˚ss_li°_ªm¨k
,

1377 
no_ac˚ss_li°_ªm¨k_cmd
,

1379 
NO_STR


1388  
vty_ac˚ss_li°_ªm¨k_un£t
 (
vty
, 
AFI_IP
, 
¨gv
[0]);

1391 
ALIAS
 (
no_ac˚ss_li°_ªm¨k
,

1392 
no_ac˚ss_li°_ªm¨k_¨g_cmd
,

1394 
NO_STR


1404 #ifde‡
HAVE_IPV6


1405 
DEFUN
 (
ùv6_ac˚ss_li°
,

1406 
ùv6_ac˚ss_li°_cmd
,

1408 
IPV6_STR


1415  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
,árgv[2], 0, 1);

1418 
DEFUN
 (
ùv6_ac˚ss_li°_exa˘
,

1419 
ùv6_ac˚ss_li°_exa˘_cmd
,

1421 
IPV6_STR


1429  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
,árgv[2], 1, 1);

1432 
DEFUN
 (
ùv6_ac˚ss_li°_™y
,

1433 
ùv6_ac˚ss_li°_™y_cmd
,

1435 
IPV6_STR


1442  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
, "::/0", 0, 1);

1445 
DEFUN
 (
no_ùv6_ac˚ss_li°
,

1446 
no_ùv6_ac˚ss_li°_cmd
,

1448 
NO_STR


1449 
IPV6_STR


1456  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
,árgv[2], 0, 0);

1459 
DEFUN
 (
no_ùv6_ac˚ss_li°_exa˘
,

1460 
no_ùv6_ac˚ss_li°_exa˘_cmd
,

1462 
NO_STR


1463 
IPV6_STR


1471  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
,árgv[2], 1, 0);

1474 
DEFUN
 (
no_ùv6_ac˚ss_li°_™y
,

1475 
no_ùv6_ac˚ss_li°_™y_cmd
,

1477 
NO_STR


1478 
IPV6_STR


1485  
fûãr_£t_zebø
 (
vty
, 
¨gv
[0],árgv[1], 
AFI_IP6
, "::/0", 0, 0);

1489 
DEFUN
 (
no_ùv6_ac˚ss_li°_Æl
,

1490 
no_ùv6_ac˚ss_li°_Æl_cmd
,

1492 
NO_STR


1493 
IPV6_STR


1497 
ac˚ss_li°
 *
	gac˚ss
;

1498 
ac˚ss_ma°î
 *
	gma°î
;

1501 
	gac˚ss
 = 
ac˚ss_li°_lookup
 (
AFI_IP6
, 
¨gv
[0]);

1502 i‡(
	gac˚ss
 =
NULL
)

1504 
vty_out
 (
vty
, "%%ác˚ss-li° %†d€¢'àexi°%s", 
¨gv
[0],

1505 
VTY_NEWLINE
);

1506  
	gCMD_WARNING
;

1509 
	gma°î
 = 
ac˚ss
->
ma°î
;

1512 
ac˚ss_li°_dñëe
 (
ac˚ss
);

1515 i‡(
	gma°î
->
	gdñëe_hook
)

1516 (*
	gma°î
->
	gdñëe_hook
Ë(
	gac˚ss
);

1518  
	gCMD_SUCCESS
;

1521 
DEFUN
 (
ùv6_ac˚ss_li°_ªm¨k
,

1522 
ùv6_ac˚ss_li°_ªm¨k_cmd
,

1524 
IPV6_STR


1530 
ac˚ss_li°
 *
	gac˚ss
;

1532 
	gac˚ss
 = 
ac˚ss_li°_gë
 (
AFI_IP6
, 
¨gv
[0]);

1534 i‡(
	gac˚ss
->
	gªm¨k
)

1536 
XFREE
 (
MTYPE_TMP
, 
ac˚ss
->
ªm¨k
);

1537 
	gac˚ss
->
	gªm¨k
 = 
NULL
;

1539 
	gac˚ss
->
	gªm¨k
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 1);

1541  
	gCMD_SUCCESS
;

1544 
DEFUN
 (
no_ùv6_ac˚ss_li°_ªm¨k
,

1545 
no_ùv6_ac˚ss_li°_ªm¨k_cmd
,

1547 
NO_STR


1548 
IPV6_STR


1553  
vty_ac˚ss_li°_ªm¨k_un£t
 (
vty
, 
AFI_IP6
, 
¨gv
[0]);

1556 
ALIAS
 (
no_ùv6_ac˚ss_li°_ªm¨k
,

1557 
no_ùv6_ac˚ss_li°_ªm¨k_¨g_cmd
,

1559 
NO_STR


1560 
IPV6_STR


1567 
c⁄fig_wrôe_ac˚ss_zebø
 (
vty
 *, 
fûãr
 *);

1568 
c⁄fig_wrôe_ac˚ss_cisco
 (
vty
 *, 
fûãr
 *);

1572 
	$fûãr_show
 (
vty
 *vty, c⁄° *
«me
, 
afi_t
 
afi
)

1574 
ac˚ss_li°
 *
ac˚ss
;

1575 
ac˚ss_ma°î
 *
ma°î
;

1576 
fûãr
 *
mfûãr
;

1577 
fûãr_cisco
 *
fûãr
;

1578 
wrôe
 = 0;

1580 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
afi
);

1581 i‡(
ma°î
 =
NULL
)

1585 i‡(
zlog_deÁu…
)

1586 
	`vty_out
 (
vty
, "%s:%s",

1587 
zlog_¥Ÿo_«mes
[
zlog_deÁu…
->
¥Ÿocﬁ
], 
VTY_NEWLINE
);

1589 
ac˚ss
 = 
ma°î
->
num
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

1591 i‡(
«me
 && 
	`°rcmp
 (
ac˚ss
->name,Çame) != 0)

1594 
wrôe
 = 1;

1596 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

1598 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

1600 i‡(
wrôe
)

1602 
	`vty_out
 (
vty
, "%s IP%sáccessÜist %s%s",

1603 
mfûãr
->
cisco
 ?

1604 (
fûãr
->
exãnded
 ? "Extended" : "Standard") : "Zebra",

1605 
afi
 =
AFI_IP6
 ? "v6" : "",

1606 
ac˚ss
->
«me
, 
VTY_NEWLINE
);

1607 
wrôe
 = 0;

1610 
	`vty_out
 (
vty
, " %s%s", 
	`fûãr_ty≥_°r
 (
mfûãr
),

1611 
mfûãr
->
ty≥
 =
FILTER_DENY
 ? " " : "");

1613 i‡(! 
mfûãr
->
cisco
)

1614 
	`c⁄fig_wrôe_ac˚ss_zebø
 (
vty
, 
mfûãr
);

1615 i‡(
fûãr
->
exãnded
)

1616 
	`c⁄fig_wrôe_ac˚ss_cisco
 (
vty
, 
mfûãr
);

1619 i‡(
fûãr
->
addr_mask
.
s_addr
 == 0xffffffff)

1620 
	`vty_out
 (
vty
, "ány%s", 
VTY_NEWLINE
);

1623 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr
));

1624 i‡(
fûãr
->
addr_mask
.
s_addr
 != 0)

1625 
	`vty_out
 (
vty
, ", wûdˇrd bô†%s", 
	`öë_¡ﬂ
 (
fûãr
->
addr_mask
));

1626 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1632 
ac˚ss
 = 
ma°î
->
°r
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

1634 i‡(
«me
 && 
	`°rcmp
 (
ac˚ss
->name,Çame) != 0)

1637 
wrôe
 = 1;

1639 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

1641 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

1643 i‡(
wrôe
)

1645 
	`vty_out
 (
vty
, "%s IP%sáccessÜist %s%s",

1646 
mfûãr
->
cisco
 ?

1647 (
fûãr
->
exãnded
 ? "Extended" : "Standard") : "Zebra",

1648 
afi
 =
AFI_IP6
 ? "v6" : "",

1649 
ac˚ss
->
«me
, 
VTY_NEWLINE
);

1650 
wrôe
 = 0;

1653 
	`vty_out
 (
vty
, " %s%s", 
	`fûãr_ty≥_°r
 (
mfûãr
),

1654 
mfûãr
->
ty≥
 =
FILTER_DENY
 ? " " : "");

1656 i‡(! 
mfûãr
->
cisco
)

1657 
	`c⁄fig_wrôe_ac˚ss_zebø
 (
vty
, 
mfûãr
);

1658 i‡(
fûãr
->
exãnded
)

1659 
	`c⁄fig_wrôe_ac˚ss_cisco
 (
vty
, 
mfûãr
);

1662 i‡(
fûãr
->
addr_mask
.
s_addr
 == 0xffffffff)

1663 
	`vty_out
 (
vty
, "ány%s", 
VTY_NEWLINE
);

1666 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr
));

1667 i‡(
fûãr
->
addr_mask
.
s_addr
 != 0)

1668 
	`vty_out
 (
vty
, ", wûdˇrd bô†%s", 
	`öë_¡ﬂ
 (
fûãr
->
addr_mask
));

1669 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1674  
CMD_SUCCESS
;

1675 
	}
}

1677 
DEFUN
 (
show_ù_ac˚ss_li°
,

1678 
show_ù_ac˚ss_li°_cmd
,

1680 
SHOW_STR


1681 
IP_STR


1684  
fûãr_show
 (
vty
, 
NULL
, 
AFI_IP
);

1687 
DEFUN
 (
show_ù_ac˚ss_li°_«me
,

1688 
show_ù_ac˚ss_li°_«me_cmd
,

1690 
SHOW_STR


1691 
IP_STR


1699  
fûãr_show
 (
vty
, 
¨gv
[0], 
AFI_IP
);

1702 #ifde‡
HAVE_IPV6


1703 
DEFUN
 (
show_ùv6_ac˚ss_li°
,

1704 
show_ùv6_ac˚ss_li°_cmd
,

1706 
SHOW_STR


1707 
IPV6_STR


1710  
fûãr_show
 (
vty
, 
NULL
, 
AFI_IP6
);

1713 
DEFUN
 (
show_ùv6_ac˚ss_li°_«me
,

1714 
show_ùv6_ac˚ss_li°_«me_cmd
,

1716 
SHOW_STR


1717 
IPV6_STR


1721  
fûãr_show
 (
vty
, 
¨gv
[0], 
AFI_IP6
);

1726 
	$c⁄fig_wrôe_ac˚ss_cisco
 (
vty
 *vty, 
fûãr
 *
mfûãr
)

1728 
fûãr_cisco
 *
fûãr
;

1730 
fûãr
 = &
mfûãr
->
u
.
cfûãr
;

1732 i‡(
fûãr
->
exãnded
)

1734 
	`vty_out
 (
vty
, " ip");

1735 i‡(
fûãr
->
addr_mask
.
s_addr
 == 0xffffffff)

1736 
	`vty_out
 (
vty
, "ány");

1737 i‡(
fûãr
->
addr_mask
.
s_addr
 == 0)

1738 
	`vty_out
 (
vty
, " ho° %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr
));

1741 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr
));

1742 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr_mask
));

1745 i‡(
fûãr
->
mask_mask
.
s_addr
 == 0xffffffff)

1746 
	`vty_out
 (
vty
, "ány");

1747 i‡(
fûãr
->
mask_mask
.
s_addr
 == 0)

1748 
	`vty_out
 (
vty
, " ho° %s", 
	`öë_¡ﬂ
 (
fûãr
->
mask
));

1751 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
mask
));

1752 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
mask_mask
));

1754 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1758 i‡(
fûãr
->
addr_mask
.
s_addr
 == 0xffffffff)

1759 
	`vty_out
 (
vty
, "ány%s", 
VTY_NEWLINE
);

1762 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr
));

1763 i‡(
fûãr
->
addr_mask
.
s_addr
 != 0)

1764 
	`vty_out
 (
vty
, " %s", 
	`öë_¡ﬂ
 (
fûãr
->
addr_mask
));

1765 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1768 
	}
}

1771 
	$c⁄fig_wrôe_ac˚ss_zebø
 (
vty
 *vty, 
fûãr
 *
mfûãr
)

1773 
fûãr_zebø
 *
fûãr
;

1774 
¥efix
 *
p
;

1775 
buf
[
BUFSIZ
];

1777 
fûãr
 = &
mfûãr
->
u
.
zfûãr
;

1778 
p
 = &
fûãr
->
¥efix
;

1780 i‡(
p
->
¥efixÀn
 =0 && ! 
fûãr
->
exa˘
)

1781 
	`vty_out
 (
vty
, "ány");

1783 
	`vty_out
 (
vty
, " %s/%d%s",

1784 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

1785 
p
->
¥efixÀn
,

1786 
fûãr
->
exa˘
 ? "Éxact-match" : "");

1788 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1789 
	}
}

1792 
	$c⁄fig_wrôe_ac˚ss
 (
vty
 *vty, 
afi_t
 
afi
)

1794 
ac˚ss_li°
 *
ac˚ss
;

1795 
ac˚ss_ma°î
 *
ma°î
;

1796 
fûãr
 *
mfûãr
;

1797 
wrôe
 = 0;

1799 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
afi
);

1800 i‡(
ma°î
 =
NULL
)

1803 
ac˚ss
 = 
ma°î
->
num
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

1805 i‡(
ac˚ss
->
ªm¨k
)

1807 
	`vty_out
 (
vty
, "%saccess-list %sÑemark %s%s",

1808 
afi
 =
AFI_IP
 ? "" : "ipv6 ",

1809 
ac˚ss
->
«me
,ác˚ss->
ªm¨k
,

1810 
VTY_NEWLINE
);

1811 
wrôe
++;

1814 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

1816 
	`vty_out
 (
vty
, "%saccess-list %s %s",

1817 
afi
 =
AFI_IP
 ? "" : "ipv6 ",

1818 
ac˚ss
->
«me
,

1819 
	`fûãr_ty≥_°r
 (
mfûãr
));

1821 i‡(
mfûãr
->
cisco
)

1822 
	`c⁄fig_wrôe_ac˚ss_cisco
 (
vty
, 
mfûãr
);

1824 
	`c⁄fig_wrôe_ac˚ss_zebø
 (
vty
, 
mfûãr
);

1826 
wrôe
++;

1830 
ac˚ss
 = 
ma°î
->
°r
.
hód
;ác˚ss;ác˚s†ac˚ss->
√xt
)

1832 i‡(
ac˚ss
->
ªm¨k
)

1834 
	`vty_out
 (
vty
, "%saccess-list %sÑemark %s%s",

1835 
afi
 =
AFI_IP
 ? "" : "ipv6 ",

1836 
ac˚ss
->
«me
,ác˚ss->
ªm¨k
,

1837 
VTY_NEWLINE
);

1838 
wrôe
++;

1841 
mfûãr
 = 
ac˚ss
->
hód
; mfûãr; mfûã∏mfûãr->
√xt
)

1843 
	`vty_out
 (
vty
, "%saccess-list %s %s",

1844 
afi
 =
AFI_IP
 ? "" : "ipv6 ",

1845 
ac˚ss
->
«me
,

1846 
	`fûãr_ty≥_°r
 (
mfûãr
));

1848 i‡(
mfûãr
->
cisco
)

1849 
	`c⁄fig_wrôe_ac˚ss_cisco
 (
vty
, 
mfûãr
);

1851 
	`c⁄fig_wrôe_ac˚ss_zebø
 (
vty
, 
mfûãr
);

1853 
wrôe
++;

1856  
wrôe
;

1857 
	}
}

1860 
cmd_node
 
	gac˚ss_node
 =

1862 
ACCESS_NODE
,

1868 
	$c⁄fig_wrôe_ac˚ss_ùv4
 (
vty
 *vty)

1870  
	`c⁄fig_wrôe_ac˚ss
 (
vty
, 
AFI_IP
);

1871 
	}
}

1874 
	$ac˚ss_li°_ª£t_ùv4
 ()

1876 
ac˚ss_li°
 *
ac˚ss
;

1877 
ac˚ss_li°
 *
√xt
;

1878 
ac˚ss_ma°î
 *
ma°î
;

1880 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
AFI_IP
);

1881 i‡(
ma°î
 =
NULL
)

1884 
ac˚ss
 = 
ma°î
->
num
.
hód
;ác˚ss;ác˚s†
√xt
)

1886 
√xt
 = 
ac˚ss
->next;

1887 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

1889 
ac˚ss
 = 
ma°î
->
°r
.
hód
;ác˚ss;ác˚s†
√xt
)

1891 
√xt
 = 
ac˚ss
->next;

1892 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

1895 
	`as£π
 (
ma°î
->
num
.
hód
 =
NULL
);

1896 
	`as£π
 (
ma°î
->
num
.
èû
 =
NULL
);

1898 
	`as£π
 (
ma°î
->
°r
.
hód
 =
NULL
);

1899 
	`as£π
 (
ma°î
->
°r
.
èû
 =
NULL
);

1900 
	}
}

1904 
	$ac˚ss_li°_öô_ùv4
 ()

1906 
	`ö°Æl_node
 (&
ac˚ss_node
, 
c⁄fig_wrôe_ac˚ss_ùv4
);

1908 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_ac˚ss_li°_cmd
);

1909 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_ac˚ss_li°_«me_cmd
);

1912 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_cmd
);

1913 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exa˘_cmd
);

1914 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_™y_cmd
);

1915 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_cmd
);

1916 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exa˘_cmd
);

1917 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_™y_cmd
);

1920 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_°™d¨d_cmd
);

1921 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_°™d¨d_nomask_cmd
);

1922 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_°™d¨d_ho°_cmd
);

1923 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_°™d¨d_™y_cmd
);

1924 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_°™d¨d_cmd
);

1925 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_°™d¨d_nomask_cmd
);

1926 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_°™d¨d_ho°_cmd
);

1927 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_°™d¨d_™y_cmd
);

1930 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_cmd
);

1931 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_™y_mask_cmd
);

1932 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_mask_™y_cmd
);

1933 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_™y_™y_cmd
);

1934 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_ho°_mask_cmd
);

1935 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_mask_ho°_cmd
);

1936 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_ho°_ho°_cmd
);

1937 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_™y_ho°_cmd
);

1938 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_exãnded_ho°_™y_cmd
);

1939 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_cmd
);

1940 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_™y_mask_cmd
);

1941 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_mask_™y_cmd
);

1942 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_™y_™y_cmd
);

1943 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_ho°_mask_cmd
);

1944 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_mask_ho°_cmd
);

1945 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_ho°_ho°_cmd
);

1946 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_™y_ho°_cmd
);

1947 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_exãnded_ho°_™y_cmd
);

1949 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ac˚ss_li°_ªm¨k_cmd
);

1950 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_Æl_cmd
);

1951 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_ªm¨k_cmd
);

1952 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ac˚ss_li°_ªm¨k_¨g_cmd
);

1953 
	}
}

1955 #ifde‡
HAVE_IPV6


1956 
cmd_node
 
	gac˚ss_ùv6_node
 =

1958 
ACCESS_IPV6_NODE
,

1964 
	$c⁄fig_wrôe_ac˚ss_ùv6
 (
vty
 *vty)

1966  
	`c⁄fig_wrôe_ac˚ss
 (
vty
, 
AFI_IP6
);

1967 
	}
}

1970 
	$ac˚ss_li°_ª£t_ùv6
 ()

1972 
ac˚ss_li°
 *
ac˚ss
;

1973 
ac˚ss_li°
 *
√xt
;

1974 
ac˚ss_ma°î
 *
ma°î
;

1976 
ma°î
 = 
	`ac˚ss_ma°î_gë
 (
AFI_IP6
);

1977 i‡(
ma°î
 =
NULL
)

1980 
ac˚ss
 = 
ma°î
->
num
.
hód
;ác˚ss;ác˚s†
√xt
)

1982 
√xt
 = 
ac˚ss
->next;

1983 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

1985 
ac˚ss
 = 
ma°î
->
°r
.
hód
;ác˚ss;ác˚s†
√xt
)

1987 
√xt
 = 
ac˚ss
->next;

1988 
	`ac˚ss_li°_dñëe
 (
ac˚ss
);

1991 
	`as£π
 (
ma°î
->
num
.
hód
 =
NULL
);

1992 
	`as£π
 (
ma°î
->
num
.
èû
 =
NULL
);

1994 
	`as£π
 (
ma°î
->
°r
.
hód
 =
NULL
);

1995 
	`as£π
 (
ma°î
->
°r
.
èû
 =
NULL
);

1996 
	}
}

1999 
	$ac˚ss_li°_öô_ùv6
 ()

2001 
	`ö°Æl_node
 (&
ac˚ss_ùv6_node
, 
c⁄fig_wrôe_ac˚ss_ùv6
);

2003 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_ac˚ss_li°_cmd
);

2004 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_ac˚ss_li°_«me_cmd
);

2006 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_ac˚ss_li°_cmd
);

2007 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_ac˚ss_li°_exa˘_cmd
);

2008 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_ac˚ss_li°_™y_cmd
);

2009 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_exa˘_cmd
);

2010 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_cmd
);

2011 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_™y_cmd
);

2013 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_Æl_cmd
);

2014 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_ac˚ss_li°_ªm¨k_cmd
);

2015 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_ªm¨k_cmd
);

2016 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_ac˚ss_li°_ªm¨k_¨g_cmd
);

2017 
	}
}

2021 
	$ac˚ss_li°_öô
 ()

2023 
	`ac˚ss_li°_öô_ùv4
 ();

2024 #ifde‡
HAVE_IPV6


2025 
	`ac˚ss_li°_öô_ùv6
();

2027 
	}
}

2030 
	$ac˚ss_li°_ª£t
 ()

2032 
	`ac˚ss_li°_ª£t_ùv4
 ();

2033 #ifde‡
HAVE_IPV6


2034 
	`ac˚ss_li°_ª£t_ùv6
();

2036 
	}
}

	@common-libs/3rd-party/quagga-lib/src/getopt.c

29 #i‚de‡
_NO_PROTO


30 
	#_NO_PROTO


	)

37 
	~<zebø.h
>

39 #i‡!
deföed
 
__STDC__
 || !__STDC__

43 c⁄°

	)

47 
	~<°dio.h
>

57 
	#GETOPT_INTERFACE_VERSION
 2

	)

58 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

59 
	~<gnu-vîsi⁄s.h
>

60 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


61 
	#ELIDE_CODE


	)

65 #i‚de‡
ELIDE_CODE


70 #ifdef 
__GNU_LIBRARY__


73 
	~<°dlib.h
>

74 
	~<uni°d.h
>

77 #ifde‡
VMS


78 
	~<unixlib.h
>

79 #i‡
HAVE_STRING_H
 - 0

80 
	~<°rög.h
>

84 #i‚de‡
_


87 #ifde‡
HAVE_LIBINTL_H


88 
	~<liböé.h
>

89 
	#_
(
msgid
Ë
	`gëãxt
 (msgid)

	)

91 
	#_
(
msgid
Ë(msgid)

	)

109 
	~"gë›t.h
"

117 *
	g›èrg
 = 
NULL
;

132 
	g›töd
 = 1;

138 
	g__gë›t_öôülized
 = 0;

147 *
	g√xtch¨
;

152 
	g›ãº
 = 1;

158 
	g›t›t
 = '?';

191 
	mREQUIRE_ORDER
, 
	mPERMUTE
, 
	mRETURN_IN_ORDER


192 } 
	g‹dîög
;

195 *
	gposixly_c‹ª˘
;

197 #ifdef 
__GNU_LIBRARY__


202 
	~<°rög.h
>

203 
	#my_ödex
 
°rchr


	)

206 #i‡
HAVE_STRING_H


207 
	~<°rög.h
>

209 
	~<°rögs.h
>

215 #i‚de‡
gëív


216 *
gëív
 ();

220 
	$my_ödex
 (
°r
, 
chr
)

221 c⁄° *
°r
;

222 
chr
;

224 *
°r
)

226 i‡(*
°r
 =
chr
)

227  (*Ë
°r
;

228 
°r
++;

231 
	}
}

235 #ifde‡
__GNUC__


238 #i‡(!
deföed
 
__STDC__
 || !__STDC__Ë&& !deföed 
°æí


241 
°æí
 (const *);

253 
	gfú°_n⁄›t
;

254 
	gœ°_n⁄›t
;

256 #ifde‡
_LIBC


261 *
__gë›t_n⁄›ti⁄_Êags
;

263 
	gn⁄›ti⁄_Êags_max_Àn
;

264 
	gn⁄›ti⁄_Êags_Àn
;

266 
	g‹igöÆ_¨gc
;

267 *c⁄° *
	g‹igöÆ_¨gv
;

273 
__©åibuã__
 ((
unu£d
))

274 
	$°‹e_¨gs_™d_ív
 (
¨gc
, *c⁄° *
¨gv
)

278 
‹igöÆ_¨gc
 = 
¨gc
;

279 
‹igöÆ_¨gv
 = 
¨gv
;

280 
	}
}

281 #ifde‡
ãxt_£t_ñemít


282 
ãxt_£t_ñemít
 (
__libc_suböô
, 
°‹e_¨gs_™d_ív
);

285 
	#SWAP_FLAGS
(
ch1
, 
ch2
) \

286 i‡(
n⁄›ti⁄_Êags_Àn
 > 0) \

288 
__tmp
 = 
__gë›t_n⁄›ti⁄_Êags
[
ch1
]; \

289 
__gë›t_n⁄›ti⁄_Êags
[
ch1
] = __gë›t_n⁄›ti⁄_Êags[
ch2
]; \

290 
__gë›t_n⁄›ti⁄_Êags
[
ch2
] = 
__tmp
; \

291 }

	)

293 
	#SWAP_FLAGS
(
ch1
, 
ch2
)

	)

305 #i‡
deföed
 
__STDC__
 && __STDC__

306 
exch™ge
 (**);

310 
	$exch™ge
 (
¨gv
)

311 **
¨gv
;

313 
bŸtom
 = 
fú°_n⁄›t
;

314 
middÀ
 = 
œ°_n⁄›t
;

315 
t›
 = 
›töd
;

316 *
ãm
;

323 #ifde‡
_LIBC


327 i‡(
n⁄›ti⁄_Êags_Àn
 > 0 && 
t›
 >
n⁄›ti⁄_Êags_max_Àn
)

331 *
√w_°r
 = 
	`mÆloc
 (
t›
 + 1);

332 i‡(
√w_°r
 =
NULL
)

333 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 0;

336 
	`mem£t
 (
	`__memp˝y
 (
√w_°r
, 
__gë›t_n⁄›ti⁄_Êags
,

337 
n⁄›ti⁄_Êags_max_Àn
),

338 '\0', 
t›
 + 1 - 
n⁄›ti⁄_Êags_max_Àn
);

339 
n⁄›ti⁄_Êags_max_Àn
 = 
t›
 + 1;

340 
__gë›t_n⁄›ti⁄_Êags
 = 
√w_°r
;

345 
t›
 > 
middÀ
 && middÀ > 
bŸtom
)

347 i‡(
t›
 - 
middÀ
 > middÀ - 
bŸtom
)

350 
Àn
 = 
middÀ
 - 
bŸtom
;

351 
i
;

354 
i
 = 0; i < 
Àn
; i++)

356 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

357 
¨gv
[
bŸtom
 + 
i
] =árgv[
t›
 - (
middÀ
 - bottom) + i];

358 
¨gv
[
t›
 - (
middÀ
 - 
bŸtom
Ë+ 
i
] = 
ãm
;

359 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
t›
 - (
middÀ
 - bottom) + i);

362 
t›
 -
Àn
;

367 
Àn
 = 
t›
 - 
middÀ
;

368 
i
;

371 
i
 = 0; i < 
Àn
; i++)

373 
ãm
 = 
¨gv
[
bŸtom
 + 
i
];

374 
¨gv
[
bŸtom
 + 
i
] =árgv[
middÀ
 + i];

375 
¨gv
[
middÀ
 + 
i
] = 
ãm
;

376 
	`SWAP_FLAGS
 (
bŸtom
 + 
i
, 
middÀ
 + i);

379 
bŸtom
 +
Àn
;

385 
fú°_n⁄›t
 +(
›töd
 - 
œ°_n⁄›t
);

386 
œ°_n⁄›t
 = 
›töd
;

387 
	}
}

391 #i‡
deföed
 
__STDC__
 && __STDC__

392 c⁄° *
_gë›t_öôülize
 (, *const *, const *);

395 
	$_gë›t_öôülize
 (
¨gc
, 
¨gv
, 
›t°rög
)

396 
¨gc
;

397 *c⁄° *
¨gv
;

398 c⁄° *
›t°rög
;

404 
fú°_n⁄›t
 = 
œ°_n⁄›t
 = 
›töd
;

406 
√xtch¨
 = 
NULL
;

408 
posixly_c‹ª˘
 = 
	`gëív
 ("POSIXLY_CORRECT");

412 i‡(
›t°rög
[0] == '-')

414 
‹dîög
 = 
RETURN_IN_ORDER
;

415 ++
›t°rög
;

417 i‡(
›t°rög
[0] == '+')

419 
‹dîög
 = 
REQUIRE_ORDER
;

420 ++
›t°rög
;

422 i‡(
posixly_c‹ª˘
 !
NULL
)

423 
‹dîög
 = 
REQUIRE_ORDER
;

425 
‹dîög
 = 
PERMUTE
;

427 #ifde‡
_LIBC


428 i‡(
posixly_c‹ª˘
 =
NULL


429 && 
¨gc
 =
‹igöÆ_¨gc
 && 
¨gv
 =
‹igöÆ_¨gv
)

431 i‡(
n⁄›ti⁄_Êags_max_Àn
 == 0)

433 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL


434 || 
__gë›t_n⁄›ti⁄_Êags
[0] == '\0')

435 
n⁄›ti⁄_Êags_max_Àn
 = -1;

438 c⁄° *
‹ig_°r
 = 
__gë›t_n⁄›ti⁄_Êags
;

439 
Àn
 = 
n⁄›ti⁄_Êags_max_Àn
 = 
	`°æí
 (
‹ig_°r
);

440 i‡(
n⁄›ti⁄_Êags_max_Àn
 < 
¨gc
)

441 
n⁄›ti⁄_Êags_max_Àn
 = 
¨gc
;

442 
__gë›t_n⁄›ti⁄_Êags
 =

443 (*Ë
	`mÆloc
 (
n⁄›ti⁄_Êags_max_Àn
);

444 i‡(
__gë›t_n⁄›ti⁄_Êags
 =
NULL
)

445 
n⁄›ti⁄_Êags_max_Àn
 = -1;

447 
	`mem£t
 (
	`__memp˝y
 (
__gë›t_n⁄›ti⁄_Êags
, 
‹ig_°r
, 
Àn
),

448 '\0', 
n⁄›ti⁄_Êags_max_Àn
 - 
Àn
);

451 
n⁄›ti⁄_Êags_Àn
 = 
n⁄›ti⁄_Êags_max_Àn
;

454 
n⁄›ti⁄_Êags_Àn
 = 0;

457  
›t°rög
;

458 
	}
}

517 
	$_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
, 
l⁄g›ts
, 
l⁄göd
, 
l⁄g_⁄ly
)

518 
¨gc
;

519 *c⁄° *
¨gv
;

520 c⁄° *
›t°rög
;

521 c⁄° 
›ti⁄
 *
l⁄g›ts
;

522 *
l⁄göd
;

523 
l⁄g_⁄ly
;

525 
›èrg
 = 
NULL
;

527 i‡(
›töd
 =0 || !
__gë›t_öôülized
)

529 i‡(
›töd
 == 0)

530 
›töd
 = 1;

531 
›t°rög
 = 
	`_gë›t_öôülize
 (
¨gc
, 
¨gv
, optstring);

532 
__gë›t_öôülized
 = 1;

539 #ifde‡
_LIBC


540 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] != '-' ||árgv[optind][1] == '\0' \

541 || (
›töd
 < 
n⁄›ti⁄_Êags_Àn
 \

542 && 
__gë›t_n⁄›ti⁄_Êags
[
›töd
] ='1'))

	)

544 
	#NONOPTION_P
 (
¨gv
[
›töd
][0] !'-' ||árgv[›töd][1] ='\0')

	)

547 i‡(
√xtch¨
 =
NULL
 || *nextchar == '\0')

553 i‡(
œ°_n⁄›t
 > 
›töd
)

554 
œ°_n⁄›t
 = 
›töd
;

555 i‡(
fú°_n⁄›t
 > 
›töd
)

556 
fú°_n⁄›t
 = 
›töd
;

558 i‡(
‹dîög
 =
PERMUTE
)

563 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

564 
	`exch™ge
 ((**Ë
¨gv
);

565 i‡(
œ°_n⁄›t
 !
›töd
)

566 
fú°_n⁄›t
 = 
›töd
;

571 
›töd
 < 
¨gc
 && 
NONOPTION_P
)

572 
›töd
++;

573 
œ°_n⁄›t
 = 
›töd
;

581 i‡(
›töd
 !
¨gc
 && !
	`°rcmp
 (
¨gv
[optind], "--"))

583 
›töd
++;

585 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
 &&Üa°_n⁄›à!
›töd
)

586 
	`exch™ge
 ((**Ë
¨gv
);

587 i‡(
fú°_n⁄›t
 =
œ°_n⁄›t
)

588 
fú°_n⁄›t
 = 
›töd
;

589 
œ°_n⁄›t
 = 
¨gc
;

591 
›töd
 = 
¨gc
;

597 i‡(
›töd
 =
¨gc
)

601 i‡(
fú°_n⁄›t
 !
œ°_n⁄›t
)

602 
›töd
 = 
fú°_n⁄›t
;

609 i‡(
NONOPTION_P
)

611 i‡(
‹dîög
 =
REQUIRE_ORDER
)

613 
›èrg
 = 
¨gv
[
›töd
++];

620 
√xtch¨
 = (
¨gv
[
›töd
] + 1

621 + (
l⁄g›ts
 !
NULL
 && 
¨gv
[
›töd
][1] == '-'));

639 i‡(
l⁄g›ts
 !
NULL


640 && (
¨gv
[
›töd
][1] == '-'

641 || (
l⁄g_⁄ly
 && (
¨gv
[
›töd
][2] || !
	`my_ödex
 (
›t°rög
,árgv[optind][1])))))

643 *
«mìnd
;

644 c⁄° 
›ti⁄
 *
p
;

645 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

646 
exa˘
 = 0;

647 
ambig
 = 0;

648 
ödfound
 = -1;

649 
›ti⁄_ödex
;

651 
«mìnd
 = 
√xtch¨
; *nameend && *nameend != '=';Çameend++)

656 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

657 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

659 i‡((Ë(
«mìnd
 - 
√xtch¨
)

660 =(Ë
	`°æí
 (
p
->
«me
))

663 
pfound
 = 
p
;

664 
ödfound
 = 
›ti⁄_ödex
;

665 
exa˘
 = 1;

668 i‡(
pfound
 =
NULL
)

671 
pfound
 = 
p
;

672 
ödfound
 = 
›ti⁄_ödex
;

676 
ambig
 = 1;

679 i‡(
ambig
 && !
exa˘
)

681 i‡(
›ãº
)

682 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `%s' isámbiguous\n"),

683 
¨gv
[0],árgv[
›töd
]);

684 
√xtch¨
 +
	`°æí
 (nextchar);

685 
›töd
++;

686 
›t›t
 = 0;

690 i‡(
pfound
 !
NULL
)

692 
›ti⁄_ödex
 = 
ödfound
;

693 
›töd
++;

694 i‡(*
«mìnd
)

698 i‡(
pfound
->
has_¨g
)

699 
›èrg
 = 
«mìnd
 + 1;

702 i‡(
›ãº
)

704 i‡(
¨gv
[
›töd
 - 1][1] == '-')

706 
	`Ârötf
 (
°dîr
,

707 
	`_
("%s: option `--%s' doesn'tállowánárgument\n"),

708 
¨gv
[0], 
pfound
->
«me
);

711 
	`Ârötf
 (
°dîr
,

712 
	`_
("%s: option `%c%s' doesn'tállowánárgument\n"),

713 
¨gv
[0],árgv[
›töd
 - 1][0], 
pfound
->
«me
);

716 
√xtch¨
 +
	`°æí
 (nextchar);

718 
›t›t
 = 
pfound
->
vÆ
;

722 i‡(
pfound
->
has_¨g
 == 1)

724 i‡(
›töd
 < 
¨gc
)

725 
›èrg
 = 
¨gv
[
›töd
++];

728 i‡(
›ãº
)

729 
	`Ârötf
 (
°dîr
,

730 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

731 
¨gv
[0],árgv[
›töd
 - 1]);

732 
√xtch¨
 +
	`°æí
 (nextchar);

733 
›t›t
 = 
pfound
->
vÆ
;

734  
›t°rög
[0] == ':' ? ':' : '?';

737 
√xtch¨
 +
	`°æí
 (nextchar);

738 i‡(
l⁄göd
 !
NULL
)

739 *
l⁄göd
 = 
›ti⁄_ödex
;

740 i‡(
pfound
->
Êag
)

742 *(
pfound
->
Êag
Ëpfound->
vÆ
;

745  
pfound
->
vÆ
;

752 i‡(!
l⁄g_⁄ly
 || 
¨gv
[
›töd
][1] == '-'

753 || 
	`my_ödex
 (
›t°rög
, *
√xtch¨
Ë=
NULL
)

755 i‡(
›ãº
)

757 i‡(
¨gv
[
›töd
][1] == '-')

759 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `--%s'\n"),

760 
¨gv
[0], 
√xtch¨
);

763 
	`Ârötf
 (
°dîr
, 
	`_
("%s: unrecognized option `%c%s'\n"),

764 
¨gv
[0],árgv[
›töd
][0], 
√xtch¨
);

766 
√xtch¨
 = (*) "";

767 
›töd
++;

768 
›t›t
 = 0;

776 
c
 = *
√xtch¨
++;

777 *
ãmp
 = 
	`my_ödex
 (
›t°rög
, 
c
);

780 i‡(*
√xtch¨
 == '\0')

781 ++
›töd
;

783 i‡(
ãmp
 =
NULL
 || 
c
 == ':')

785 i‡(
›ãº
)

787 i‡(
posixly_c‹ª˘
)

789 
	`Ârötf
 (
°dîr
, 
	`_
("%s: illegal option -- %c\n"),

790 
¨gv
[0], 
c
);

792 
	`Ârötf
 (
°dîr
, 
	`_
("%s: invalid option -- %c\n"),

793 
¨gv
[0], 
c
);

795 
›t›t
 = 
c
;

799 i‡(
ãmp
[0] == 'W' &&Åemp[1] == ';')

801 *
«mìnd
;

802 c⁄° 
›ti⁄
 *
p
;

803 c⁄° 
›ti⁄
 *
pfound
 = 
NULL
;

804 
exa˘
 = 0;

805 
ambig
 = 0;

806 
ödfound
 = 0;

807 
›ti⁄_ödex
;

810 i‡(*
√xtch¨
 != '\0')

812 
›èrg
 = 
√xtch¨
;

815 
›töd
++;

817 i‡(
›töd
 =
¨gc
)

819 i‡(
›ãº
)

822 
	`Ârötf
 (
°dîr
, 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

823 
¨gv
[0], 
c
);

825 
›t›t
 = 
c
;

826 i‡(
›t°rög
[0] == ':')

827 
c
 = ':';

829 
c
 = '?';

830  
c
;

835 
›èrg
 = 
¨gv
[
›töd
++];

840 
√xtch¨
 = 
«mìnd
 = 
›èrg
; *nameend && *nameend != '=';Çameend++)

845 
p
 = 
l⁄g›ts
, 
›ti⁄_ödex
 = 0;Ö->
«me
;Ö++, option_index++)

846 i‡(!
	`°∫cmp
 (
p
->
«me
, 
√xtch¨
, 
«mìnd
 -Çextchar))

848 i‡((Ë(
«mìnd
 - 
√xtch¨
Ë=
	`°æí
 (
p
->
«me
))

851 
pfound
 = 
p
;

852 
ödfound
 = 
›ti⁄_ödex
;

853 
exa˘
 = 1;

856 i‡(
pfound
 =
NULL
)

859 
pfound
 = 
p
;

860 
ödfound
 = 
›ti⁄_ödex
;

864 
ambig
 = 1;

866 i‡(
ambig
 && !
exa˘
)

868 i‡(
›ãº
)

869 
	`Ârötf
 (
°dîr
, 
	`_
("%s: option `-W %s' isámbiguous\n"),

870 
¨gv
[0],árgv[
›töd
]);

871 
√xtch¨
 +
	`°æí
 (nextchar);

872 
›töd
++;

875 i‡(
pfound
 !
NULL
)

877 
›ti⁄_ödex
 = 
ödfound
;

878 i‡(*
«mìnd
)

882 i‡(
pfound
->
has_¨g
)

883 
›èrg
 = 
«mìnd
 + 1;

886 i‡(
›ãº
)

887 
	`Ârötf
 (
°dîr
, 
	`_
("\
%s: option `-W %s' doesn'tállowánárgument\n"),

889 
¨gv
[0], 
pfound
->
«me
);

891 
√xtch¨
 +
	`°æí
 (nextchar);

895 i‡(
pfound
->
has_¨g
 == 1)

897 i‡(
›töd
 < 
¨gc
)

898 
›èrg
 = 
¨gv
[
›töd
++];

901 i‡(
›ãº
)

902 
	`Ârötf
 (
°dîr
,

903 
	`_
("%s: option `%s'Ñequiresánárgument\n"),

904 
¨gv
[0],árgv[
›töd
 - 1]);

905 
√xtch¨
 +
	`°æí
 (nextchar);

906  
›t°rög
[0] == ':' ? ':' : '?';

909 
√xtch¨
 +
	`°æí
 (nextchar);

910 i‡(
l⁄göd
 !
NULL
)

911 *
l⁄göd
 = 
›ti⁄_ödex
;

912 i‡(
pfound
->
Êag
)

914 *(
pfound
->
Êag
Ëpfound->
vÆ
;

917  
pfound
->
vÆ
;

919 
√xtch¨
 = 
NULL
;

922 i‡(
ãmp
[1] == ':')

924 i‡(
ãmp
[2] == ':')

927 i‡(*
√xtch¨
 != '\0')

929 
›èrg
 = 
√xtch¨
;

930 
›töd
++;

933 
›èrg
 = 
NULL
;

934 
√xtch¨
 = 
NULL
;

939 i‡(*
√xtch¨
 != '\0')

941 
›èrg
 = 
√xtch¨
;

944 
›töd
++;

946 i‡(
›töd
 =
¨gc
)

948 i‡(
›ãº
)

951 
	`Ârötf
 (
°dîr
,

952 
	`_
("%s: optionÑequiresánárgument -- %c\n"),

953 
¨gv
[0], 
c
);

955 
›t›t
 = 
c
;

956 i‡(
›t°rög
[0] == ':')

957 
c
 = ':';

959 
c
 = '?';

964 
›èrg
 = 
¨gv
[
›töd
++];

965 
√xtch¨
 = 
NULL
;

968  
c
;

970 
	}
}

972 #ifde‡
REALLY_NEED_PLAIN_GETOPT


975 
	$gë›t
 (
¨gc
, 
¨gv
, 
›t°rög
)

976 
¨gc
;

977 *c⁄° *
¨gv
;

978 c⁄° *
›t°rög
;

980  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›t°rög
,

981 (c⁄° 
›ti⁄
 *) 0,

984 
	}
}

990 #ifde‡
TEST


996 
	$maö
 (
¨gc
, 
¨gv
)

997 
¨gc
;

998 **
¨gv
;

1000 
c
;

1001 
digô_›töd
 = 0;

1005 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

1007 
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "abc:d:0123456789");

1008 i‡(
c
 == -1)

1011 
c
)

1023 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

1024 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

1025 
digô_›töd
 = 
this_›ti⁄_›töd
;

1026 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

1030 
	`¥ötf
 ("optioná\n");

1034 
	`¥ötf
 ("option b\n");

1038 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

1045 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

1049 i‡(
›töd
 < 
¨gc
)

1051 
	`¥ötf
 ("non-option ARGV-elements: ");

1052 
›töd
 < 
¨gc
)

1053 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

1054 
	`¥ötf
 ("\n");

1057 
	`exô
 (0);

1058 
	}
}

	@common-libs/3rd-party/quagga-lib/src/getopt1.c

27 
	~<zebø.h
>

28 
	~"gë›t.h
"

30 #i‡!
deföed
 
__STDC__
 || !__STDC__

34 c⁄°

	)

38 
	~<°dio.h
>

48 
	#GETOPT_INTERFACE_VERSION
 2

	)

49 #i‡!
deföed
 
_LIBC
 && deföed 
__GLIBC__
 && __GLIBC__ >= 2

50 
	~<gnu-vîsi⁄s.h
>

51 #i‡
_GNU_GETOPT_INTERFACE_VERSION
 =
GETOPT_INTERFACE_VERSION


52 
	#ELIDE_CODE


	)

56 #i‚de‡
ELIDE_CODE


61 #ifde‡
__GNU_LIBRARY__


62 
	~<°dlib.h
>

65 #i‚def 
NULL


66 
	#NULL
 0

	)

70 
	$gë›t_l⁄g
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

71 
¨gc
;

72 *c⁄° *
¨gv
;

73 c⁄° *
›ti⁄s
;

74 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

75 *
›t_ödex
;

77  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 0);

78 
	}
}

86 
	$gë›t_l⁄g_⁄ly
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
)

87 
¨gc
;

88 *c⁄° *
¨gv
;

89 c⁄° *
›ti⁄s
;

90 c⁄° 
›ti⁄
 *
l⁄g_›ti⁄s
;

91 *
›t_ödex
;

93  
	`_gë›t_öã∫Æ
 (
¨gc
, 
¨gv
, 
›ti⁄s
, 
l⁄g_›ti⁄s
, 
›t_ödex
, 1);

94 
	}
}

99 #ifde‡
TEST


101 
	~<°dio.h
>

104 
	$maö
 (
¨gc
, 
¨gv
)

105 
¨gc
;

106 **
¨gv
;

108 
c
;

109 
digô_›töd
 = 0;

113 
this_›ti⁄_›töd
 = 
›töd
 ? optind : 1;

114 
›ti⁄_ödex
 = 0;

115 
›ti⁄
 
l⁄g_›ti⁄s
[] =

126 
c
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "abc:d:0123456789",

127 
l⁄g_›ti⁄s
, &
›ti⁄_ödex
);

128 i‡(
c
 == -1)

131 
c
)

134 
	`¥ötf
 ("›ti⁄ %s", 
l⁄g_›ti⁄s
[
›ti⁄_ödex
].
«me
);

135 i‡(
›èrg
)

136 
	`¥ötf
 (" wôhárg %s", 
›èrg
);

137 
	`¥ötf
 ("\n");

150 i‡(
digô_›töd
 !0 && digô_›töd !
this_›ti⁄_›töd
)

151 
	`¥ötf
 ("digits occur inÅwo differentárgv-elements.\n");

152 
digô_›töd
 = 
this_›ti⁄_›töd
;

153 
	`¥ötf
 ("›ti⁄ %c\n", 
c
);

157 
	`¥ötf
 ("optioná\n");

161 
	`¥ötf
 ("option b\n");

165 
	`¥ötf
 ("›ti⁄ c wôh vÆuê`%s'\n", 
›èrg
);

169 
	`¥ötf
 ("›ti⁄ d wôh vÆuê`%s'\n", 
›èrg
);

176 
	`¥ötf
 ("?? gë›àªtu∫ed ch¨a˘î codê0%ÿ??\n", 
c
);

180 i‡(
›töd
 < 
¨gc
)

182 
	`¥ötf
 ("non-option ARGV-elements: ");

183 
›töd
 < 
¨gc
)

184 
	`¥ötf
 ("%†", 
¨gv
[
›töd
++]);

185 
	`¥ötf
 ("\n");

188 
	`exô
 (0);

189 
	}
}

	@common-libs/3rd-party/quagga-lib/src/hash.c

22 
	~<zebø.h
>

24 
	~"hash.h
"

25 
	~"mem‹y.h
"

28 
hash
 *

29 
hash_¸óã_size
 (
size
, (*
hash_key
) (*),

30 (*
hash_cmp
) (const *, const *))

32 
hash
 *hash;

34 
hash
 = 
	`XMALLOC
 (
MTYPE_HASH
,  (hash));

35 
hash
->
ödex
 = 
	`XCALLOC
 (
MTYPE_HASH_INDEX
,

36  (
hash_backë
 *Ë* 
size
);

37 
hash
->
size
 = size;

38 
hash
->
hash_key
 = hash_key;

39 
hash
->
hash_cmp
 = hash_cmp;

40 
hash
->
cou¡
 = 0;

42  
hash
;

43 
	}
}

46 
hash
 *

47 
hash_¸óã
 ((*
hash_key
) (*),

48 (*
hash_cmp
) (const *, const *))

50  
	`hash_¸óã_size
 (
HASHTABSIZE
, 
hash_key
, 
hash_cmp
);

51 
	}
}

57 
	$hash_Æloc_öã∫
 (*
¨g
)

59  
¨g
;

60 
	}
}

66 
hash_gë
 (
hash
 *hash, *
d©a
, * (*
Æloc_func
) (*))

68 
	gkey
;

69 
	gödex
;

70 *
	g√wd©a
;

71 
hash_backë
 *
	gbackë
;

73 
	gkey
 = (*
hash
->
hash_key
Ë(
d©a
);

74 
	gödex
 = 
key
 % 
hash
->
size
;

76 
	gbackë
 = 
hash
->
ödex
[ödex]; backë !
NULL
; backë = 
backë
->
√xt
)

77 i‡(
backë
->
key
 =key && (*
hash
->
hash_cmp
Ë(backë->
d©a
, 
	gd©a
))

78  
	gbackë
->
	gd©a
;

80 i‡(
	gÆloc_func
)

82 
	g√wd©a
 = (*
Æloc_func
Ë(
d©a
);

83 i‡(
	g√wd©a
 =
NULL
)

84  
NULL
;

86 
	gbackë
 = 
XMALLOC
 (
MTYPE_HASH_BACKET
,  (
hash_backë
));

87 
	gbackë
->
	gd©a
 = 
√wd©a
;

88 
	gbackë
->
	gkey
 = 
key
;

89 
	gbackë
->
	g√xt
 = 
hash
->
ödex
[index];

90 
	ghash
->
	gödex
[
ödex
] = 
backë
;

91 
	ghash
->
	gcou¡
++;

92  
	gbackë
->
	gd©a
;

94  
	gNULL
;

99 
	$hash_lookup
 (
hash
 *hash, *
d©a
)

101  
	`hash_gë
 (
hash
, 
d©a
, 
NULL
);

102 
	}
}

105 
	$°rög_hash_make
 (c⁄° *
°r
)

107 
hash
 = 0;

109 *
°r
)

110 
hash
 = (hash * 33Ë^ (Ë*
°r
++;

112  
hash
;

113 
	}
}

119 
	$hash_ªÀa£
 (
hash
 *hash, *
d©a
)

121 *
ªt
;

122 
key
;

123 
ödex
;

124 
hash_backë
 *
backë
;

125 
hash_backë
 *
µ
;

127 
key
 = (*
hash
->
hash_key
Ë(
d©a
);

128 
ödex
 = 
key
 % 
hash
->
size
;

130 
backë
 = 
µ
 = 
hash
->
ödex
[ödex]; backë; backë = backë->
√xt
)

132 i‡(
backë
->
key
 =key && (*
hash
->
hash_cmp
Ë(backë->
d©a
, data))

134 i‡(
backë
 =
µ
)

135 
hash
->
ödex
[ödex] = 
backë
->
√xt
;

137 
µ
->
√xt
 = 
backë
->next;

139 
ªt
 = 
backë
->
d©a
;

140 
	`XFREE
 (
MTYPE_HASH_BACKET
, 
backë
);

141 
hash
->
cou¡
--;

142  
ªt
;

144 
µ
 = 
backë
;

146  
NULL
;

147 
	}
}

151 
hash_ôî©e
 (
hash
 *hash,

152 (*
func
Ë(
hash_backë
 *, *), *
¨g
)

154 
i
;

155 
hash_backë
 *
hb
;

156 
hash_backë
 *
hb√xt
;

158 
i
 = 0; i < 
hash
->
size
; i++)

159 
hb
 = 
hash
->
ödex
[
i
]; hb; hb = 
hb√xt
)

164 
hb√xt
 = 
hb
->
√xt
;

165 (*
func
Ë(
hb
, 
¨g
);

167 
	}
}

171 
hash_˛ón
 (
hash
 *hash, (*
‰ì_func
) (*))

173 
i
;

174 
hash_backë
 *
hb
;

175 
hash_backë
 *
√xt
;

177 
i
 = 0; i < 
hash
->
size
; i++)

179 
hb
 = 
hash
->
ödex
[
i
]; hb; hb = 
√xt
)

181 
√xt
 = 
hb
->next;

183 i‡(
‰ì_func
)

184 (*
‰ì_func
Ë(
hb
->
d©a
);

186 
	`XFREE
 (
MTYPE_HASH_BACKET
, 
hb
);

187 
hash
->
cou¡
--;

189 
hash
->
ödex
[
i
] = 
NULL
;

191 
	}
}

196 
	$hash_‰ì
 (
hash
 *hash)

198 
	`XFREE
 (
MTYPE_HASH_INDEX
, 
hash
->
ödex
);

199 
	`XFREE
 (
MTYPE_HASH
, 
hash
);

200 
	}
}

	@common-libs/3rd-party/quagga-lib/src/if.c

24 
	~<zebø.h
>

26 
	~"lökli°.h
"

27 
	~"ve˘‹.h
"

28 
	~"vty.h
"

29 
	~"comm™d.h
"

30 
	~"if.h
"

31 
	~"sockuni⁄.h
"

32 
	~"¥efix.h
"

33 
	~"mem‹y.h
"

34 
	~"èbÀ.h
"

35 
	~"buf„r.h
"

36 
	~"°r.h
"

37 
	~"log.h
"

40 
li°
 *
	giÊi°
;

43 
	sif_ma°î


45 (*
	mif_√w_hook
Ë(
	möãrÁ˚
 *);

46 (*
	mif_dñëe_hook
Ë(
	möãrÁ˚
 *);

47 } 
	gif_ma°î
;

58 
	$if_cmp_func
 (
öãrÁ˚
 *
iÂ1
, öãrÁ˚ *
iÂ2
)

60 
l1
, 
l2
;

61 
x1
, 
x2
;

62 *
p1
, *
p2
;

63 
ªs
;

65 
p1
 = 
iÂ1
->
«me
;

66 
p2
 = 
iÂ2
->
«me
;

68 *
p1
 && *
p2
) {

70 
l1
 = 
	`°rc•n
(
p1
, "0123456789");

71 
l2
 = 
	`°rc•n
(
p2
, "0123456789");

74 i‡(
l1
 !
l2
)

75  (
	`°rcmp
(
p1
, 
p2
));

80 
ªs
 = 
	`°∫cmp
(
p1
, 
p2
, 
l1
);

83 i‡(
ªs
)

84  
ªs
;

87 
p1
 +
l1
;

88 
p2
 +
l1
;

90 i‡(!*
p1
)

92 i‡(!*
p2
)

95 
x1
 = 
	`°πﬁ
(
p1
, &p1, 10);

96 
x2
 = 
	`°πﬁ
(
p2
, &p2, 10);

99 i‡(
x1
 < 
x2
)

101 i‡(
x1
 > 
x2
)

107 i‡(*
p1
)

109 i‡(*
p2
)

112 
	}
}

115 
öãrÁ˚
 *

116 
	$if_¸óã
 (c⁄° *
«me
, 
«mñí
)

118 
öãrÁ˚
 *
iÂ
;

120 
iÂ
 = 
	`XCALLOC
 (
MTYPE_IF
,  (
öãrÁ˚
));

121 
iÂ
->
ifödex
 = 
IFINDEX_INTERNAL
;

123 
	`as£π
 (
«me
);

124 
	`as£π
 (
«mñí
 <
INTERFACE_NAMSIZ
);

125 
	`°∫˝y
 (
iÂ
->
«me
,Çame, 
«mñí
);

126 
iÂ
->
«me
[
«mñí
] = '\0';

127 i‡(
	`if_lookup_by_«me
(
iÂ
->
«me
Ë=
NULL
)

128 
	`li°node_add_s‹t
 (
iÊi°
, 
iÂ
);

130 
	`zlog_îr
("if_create(%s): corruption detected -- interface withÅhis "

131 "«mêexi°†Æªady!", 
iÂ
->
«me
);

132 
iÂ
->
c⁄√˘ed
 = 
	`li°_√w
 ();

133 
iÂ
->
c⁄√˘ed
->
dñ
 = ((*Ë(*)Ë
c⁄√˘ed_‰ì
;

135 i‡(
if_ma°î
.
if_√w_hook
)

136 (*
if_ma°î
.
if_√w_hook
Ë(
iÂ
);

138  
iÂ
;

139 
	}
}

143 
	$if_dñëe_ªèö
 (
öãrÁ˚
 *
iÂ
)

145 i‡(
if_ma°î
.
if_dñëe_hook
)

146 (*
if_ma°î
.
if_dñëe_hook
Ë(
iÂ
);

149 
	`li°_dñëe
 (
iÂ
->
c⁄√˘ed
);

150 
	}
}

154 
	$if_dñëe
 (
öãrÁ˚
 *
iÂ
)

156 
	`li°node_dñëe
 (
iÊi°
, 
iÂ
);

158 
	`if_dñëe_ªèö
(
iÂ
);

160 
	`XFREE
 (
MTYPE_IF
, 
iÂ
);

161 
	}
}

165 
if_add_hook
 (
ty≥
, (*
func
)(
öãrÁ˚
 *
iÂ
))

167 
ty≥
) {

168 
IF_NEW_HOOK
:

169 
if_ma°î
.
if_√w_hook
 = 
func
;

171 
IF_DELETE_HOOK
:

172 
if_ma°î
.
if_dñëe_hook
 = 
func
;

177 
	}
}

180 
öãrÁ˚
 *

181 
	$if_lookup_by_ödex
 (
ödex
)

183 
li°node
 *
node
;

184 
öãrÁ˚
 *
iÂ
;

186 
	`ALL_LIST_ELEMENTS_RO
(
iÊi°
, 
node
, 
iÂ
))

188 i‡(
iÂ
->
ifödex
 =
ödex
)

189  
iÂ
;

191  
NULL
;

192 
	}
}

195 
	$ifödex2i‚ame
 (
ödex
)

197 
öãrÁ˚
 *
iÂ
;

199  ((
iÂ
 = 
	`if_lookup_by_ödex
(
ödex
)Ë!
NULL
) ?

200 
iÂ
->
«me
 : "unknown";

201 
	}
}

204 
	$i‚ame2ifödex
 (c⁄° *
«me
)

206 
öãrÁ˚
 *
iÂ
;

208  ((
iÂ
 = 
	`if_lookup_by_«me
(
«me
)Ë!
NULL
Ë? iÂ->
ifödex


209 : 
IFINDEX_INTERNAL
;

210 
	}
}

213 
öãrÁ˚
 *

214 
	$if_lookup_by_«me
 (c⁄° *
«me
)

216 
li°node
 *
node
;

217 
öãrÁ˚
 *
iÂ
;

219 i‡(
«me
)

220 
	`ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
iÂ
))

222 i‡(
	`°rcmp
(
«me
, 
iÂ
->name) == 0)

223  
iÂ
;

225  
NULL
;

226 
	}
}

228 
öãrÁ˚
 *

229 
	$if_lookup_by_«me_Àn
(c⁄° *
«me
, 
size_t
 
«mñí
)

231 
li°node
 *
node
;

232 
öãrÁ˚
 *
iÂ
;

234 i‡(
«mñí
 > 
INTERFACE_NAMSIZ
)

235  
NULL
;

237 
	`ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
iÂ
))

239 i‡(!
	`memcmp
(
«me
, 
iÂ
->«me, 
«mñí
) && (ifp->name[namelen] == '\0'))

240  
iÂ
;

242  
NULL
;

243 
	}
}

246 
öãrÁ˚
 *

247 
	$if_lookup_exa˘_addªss
 (
ö_addr
 
§c
)

249 
li°node
 *
node
;

250 
li°node
 *
˙ode
;

251 
öãrÁ˚
 *
iÂ
;

252 
¥efix
 *
p
;

253 
c⁄√˘ed
 *
c
;

255 
	`ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
iÂ
))

257 
	`ALL_LIST_ELEMENTS_RO
 (
iÂ
->
c⁄√˘ed
, 
˙ode
, 
c
))

259 
p
 = 
c
->
addªss
;

261 i‡(
p
 &&Ö->
Ámûy
 =
AF_INET
)

263 i‡(
	`IPV4_ADDR_SAME
 (&
p
->
u
.
¥efix4
, &
§c
))

264  
iÂ
;

268  
NULL
;

269 
	}
}

272 
öãrÁ˚
 *

273 
	$if_lookup_addªss
 (
ö_addr
 
§c
)

275 
li°node
 *
node
;

276 
¥efix
 
addr
;

277 
be°Àn
 = 0;

278 
li°node
 *
˙ode
;

279 
öãrÁ˚
 *
iÂ
;

280 
c⁄√˘ed
 *
c
;

281 
öãrÁ˚
 *
m©ch
;

283 
addr
.
Ámûy
 = 
AF_INET
;

284 
addr
.
u
.
¥efix4
 = 
§c
;

285 
addr
.
¥efixÀn
 = 
IPV4_MAX_BITLEN
;

287 
m©ch
 = 
NULL
;

289 
	`ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
iÂ
))

291 
	`ALL_LIST_ELEMENTS_RO
 (
iÂ
->
c⁄√˘ed
, 
˙ode
, 
c
))

293 i‡(
c
->
addªss
 && (c->addªss->
Ámûy
 =
AF_INET
) &&

294 
	`¥efix_m©ch
(
	`CONNECTED_PREFIX
(
c
), &
addr
) &&

295 (
c
->
addªss
->
¥efixÀn
 > 
be°Àn
))

297 
be°Àn
 = 
c
->
addªss
->
¥efixÀn
;

298 
m©ch
 = 
iÂ
;

302  
m©ch
;

303 
	}
}

307 
öãrÁ˚
 *

308 
	$if_gë_by_«me
 (c⁄° *
«me
)

310 
öãrÁ˚
 *
iÂ
;

312  ((
iÂ
 = 
	`if_lookup_by_«me
(
«me
)Ë!
NULL
) ? ifp :

313 
	`if_¸óã
(
«me
, 
	`°æí
(name));

314 
	}
}

316 
öãrÁ˚
 *

317 
	$if_gë_by_«me_Àn
(c⁄° *
«me
, 
size_t
 
«mñí
)

319 
öãrÁ˚
 *
iÂ
;

321  ((
iÂ
 = 
	`if_lookup_by_«me_Àn
(
«me
, 
«mñí
)Ë!
NULL
) ? ifp :

322 
	`if_¸óã
(
«me
, 
«mñí
);

323 
	}
}

327 
	$if_is_up
 (
öãrÁ˚
 *
iÂ
)

329  
iÂ
->
Êags
 & 
IFF_UP
;

330 
	}
}

334 
	$if_is_ru¬ög
 (
öãrÁ˚
 *
iÂ
)

336  
iÂ
->
Êags
 & 
IFF_RUNNING
;

337 
	}
}

342 
	$if_is_›î©ive
 (
öãrÁ˚
 *
iÂ
)

344  ((
iÂ
->
Êags
 & 
IFF_UP
) &&

345 (
iÂ
->
Êags
 & 
IFF_RUNNING
 || !
	`CHECK_FLAG
(iÂ->
°©us
, 
ZEBRA_INTERFACE_LINKDETECTION
)));

346 
	}
}

350 
	$if_is_lo›back
 (
öãrÁ˚
 *
iÂ
)

355  (
iÂ
->
Êags
 & (
IFF_LOOPBACK
|
IFF_NOXMIT
|
IFF_VIRTUAL
));

356 
	}
}

360 
	$if_is_brﬂdˇ°
 (
öãrÁ˚
 *
iÂ
)

362  
iÂ
->
Êags
 & 
IFF_BROADCAST
;

363 
	}
}

367 
	$if_is_poöt›oöt
 (
öãrÁ˚
 *
iÂ
)

369  
iÂ
->
Êags
 & 
IFF_POINTOPOINT
;

370 
	}
}

374 
	$if_is_mu…iˇ°
 (
öãrÁ˚
 *
iÂ
)

376  
iÂ
->
Êags
 & 
IFF_MULTICAST
;

377 
	}
}

381 
	$if_Êag_dump
 (
Êag
)

383 
£∑øt‹
 = 0;

384 
logbuf
[
BUFSIZ
];

386 
	#IFF_OUT_LOG
(
X
,
STR
) \

387 i‡(
Êag
 & (
X
)) \

389 i‡(
£∑øt‹
) \

390 
	`°æˇt
 (
logbuf
, ",", 
BUFSIZ
); \

392 
£∑øt‹
 = 1; \

393 
	`°æˇt
 (
logbuf
, 
STR
, 
BUFSIZ
); \

394 }

	)

396 
	`°æ˝y
 (
logbuf
, "<", 
BUFSIZ
);

397 
	`IFF_OUT_LOG
 (
IFF_UP
, "UP");

398 
	`IFF_OUT_LOG
 (
IFF_BROADCAST
, "BROADCAST");

399 
	`IFF_OUT_LOG
 (
IFF_DEBUG
, "DEBUG");

400 
	`IFF_OUT_LOG
 (
IFF_LOOPBACK
, "LOOPBACK");

401 
	`IFF_OUT_LOG
 (
IFF_POINTOPOINT
, "POINTOPOINT");

402 
	`IFF_OUT_LOG
 (
IFF_NOTRAILERS
, "NOTRAILERS");

403 
	`IFF_OUT_LOG
 (
IFF_RUNNING
, "RUNNING");

404 
	`IFF_OUT_LOG
 (
IFF_NOARP
, "NOARP");

405 
	`IFF_OUT_LOG
 (
IFF_PROMISC
, "PROMISC");

406 
	`IFF_OUT_LOG
 (
IFF_ALLMULTI
, "ALLMULTI");

407 
	`IFF_OUT_LOG
 (
IFF_OACTIVE
, "OACTIVE");

408 
	`IFF_OUT_LOG
 (
IFF_SIMPLEX
, "SIMPLEX");

409 
	`IFF_OUT_LOG
 (
IFF_LINK0
, "LINK0");

410 
	`IFF_OUT_LOG
 (
IFF_LINK1
, "LINK1");

411 
	`IFF_OUT_LOG
 (
IFF_LINK2
, "LINK2");

412 
	`IFF_OUT_LOG
 (
IFF_MULTICAST
, "MULTICAST");

413 
	`IFF_OUT_LOG
 (
IFF_NOXMIT
, "NOXMIT");

414 
	`IFF_OUT_LOG
 (
IFF_NORTEXCH
, "NORTEXCH");

415 
	`IFF_OUT_LOG
 (
IFF_VIRTUAL
, "VIRTUAL");

416 
	`IFF_OUT_LOG
 (
IFF_IPV4
, "IPv4");

417 
	`IFF_OUT_LOG
 (
IFF_IPV6
, "IPv6");

419 
	`°æˇt
 (
logbuf
, ">", 
BUFSIZ
);

421  
logbuf
;

422 #unde‡
IFF_OUT_LOG


423 
	}
}

427 
	$if_dump
 (c⁄° 
öãrÁ˚
 *
iÂ
)

429 
li°node
 *
node
;

430 
c⁄√˘ed
 *
c
;

432 
	`zlog_öfo
 ("Interface %s index %d metric %d mtu %d "

433 #ifde‡
HAVE_IPV6


437 
iÂ
->
«me
, iÂ->
ifödex
, iÂ->
mëric
, iÂ->
mtu
,

438 #ifde‡
HAVE_IPV6


439 
iÂ
->
mtu6
,

441 
	`if_Êag_dump
 (
iÂ
->
Êags
));

443 
	`ALL_LIST_ELEMENTS_RO
 (
iÂ
->
c⁄√˘ed
, 
node
, 
c
))

445 
	}
}

449 
	$if_dump_Æl
 ()

451 
li°node
 *
node
;

452 *
p
;

454 
	`ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
p
))

455 
	`if_dump
 (
p
);

456 
	}
}

458 
DEFUN
 (
öãrÁ˚_desc
,

459 
öãrÁ˚_desc_cmd
,

464 
öãrÁ˚
 *
	giÂ
;

466 i‡(
	g¨gc
 == 0)

467  
CMD_SUCCESS
;

469 
	giÂ
 = 
vty
->
ödex
;

470 i‡(
	giÂ
->
	gdesc
)

471 
XFREE
 (
MTYPE_TMP
, 
iÂ
->
desc
);

472 
	giÂ
->
	gdesc
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 0);

474  
	gCMD_SUCCESS
;

477 
DEFUN
 (
no_öãrÁ˚_desc
,

478 
no_öãrÁ˚_desc_cmd
,

480 
NO_STR


483 
öãrÁ˚
 *
	giÂ
;

485 
	giÂ
 = 
vty
->
ödex
;

486 i‡(
	giÂ
->
	gdesc
)

487 
XFREE
 (
MTYPE_TMP
, 
iÂ
->
desc
);

488 
	giÂ
->
	gdesc
 = 
NULL
;

490  
	gCMD_SUCCESS
;

493 #ifde‡
SUNOS_5


514 
öãrÁ˚
 *

515 
	$if_sunwzebø_gë
 (c⁄° *
«me
, 
size_t
 
∆í
)

517 
öãrÁ˚
 *
iÂ
;

518 
size_t
 
£µos
 = 0;

520 i‡–(
iÂ
 = 
	`if_lookup_by_«me_Àn
(
«me
, 
∆í
)Ë!
NULL
)

521  
iÂ
;

524 
£µos
 < 
∆í
 && 
«me
[seppos] != ':')

525 
£µos
++;

528 i‡(
£µos
 < 
∆í
)

529  
	`if_gë_by_«me_Àn
 (
«me
, 
£µos
);

531  
	`if_gë_by_«me_Àn
 (
«me
, 
∆í
);

532 
	}
}

535 
DEFUN
 (
öãrÁ˚
,

536 
öãrÁ˚_cmd
,

541 
öãrÁ˚
 *
	giÂ
;

542 
size_t
 
	g¶
;

544 i‡((
	g¶
 = 
°æí
(
¨gv
[0])Ë> 
INTERFACE_NAMSIZ
)

546 
vty_out
 (
vty
, "%% InterfaceÇame %s is invalid:ÜengthÉxceeds "

548 
¨gv
[0], 
INTERFACE_NAMSIZ
, 
VTY_NEWLINE
);

549  
	gCMD_WARNING
;

552 #ifde‡
SUNOS_5


553 
	giÂ
 = 
if_sunwzebø_gë
 (
¨gv
[0], 
¶
);

555 
	giÂ
 = 
if_gë_by_«me_Àn
(
¨gv
[0], 
¶
);

558 
	gvty
->
	gödex
 = 
iÂ
;

559 
	gvty
->
	gnode
 = 
INTERFACE_NODE
;

561  
	gCMD_SUCCESS
;

564 
DEFUN_NOSH
 (
no_öãrÁ˚
,

565 
no_öãrÁ˚_cmd
,

567 
NO_STR


572 
öãrÁ˚
 *
	giÂ
;

574 
	giÂ
 = 
if_lookup_by_«me
 (
¨gv
[0]);

576 i‡(
	giÂ
 =
NULL
)

578 
vty_out
 (
vty
, "%% I¡îÁ˚ %†d€†nŸÉxi°%s", 
¨gv
[0], 
VTY_NEWLINE
);

579  
	gCMD_WARNING
;

582 i‡(
CHECK_FLAG
 (
iÂ
->
°©us
, 
ZEBRA_INTERFACE_ACTIVE
))

584 
vty_out
 (
vty
, "%% Only inactive interfaces can be deleted%s",

585 
VTY_NEWLINE
);

586  
	gCMD_WARNING
;

589 
if_dñëe
(
iÂ
);

591  
	gCMD_SUCCESS
;

595 
DEFUN
 (
show_addªss
,

596 
show_addªss_cmd
,

598 
SHOW_STR


601 
li°node
 *
	gnode
;

602 
li°node
 *
	gnode2
;

603 
öãrÁ˚
 *
	giÂ
;

604 
c⁄√˘ed
 *
	gifc
;

605 
¥efix
 *
	gp
;

607 
ALL_LIST_ELEMENTS_RO
 (
iÊi°
, 
node
, 
iÂ
))

609 
ALL_LIST_ELEMENTS_RO
 (
iÂ
->
c⁄√˘ed
, 
node2
, 
ifc
))

611 
	gp
 = 
ifc
->
addªss
;

613 i‡(
	gp
->
	gÁmûy
 =
AF_INET
)

614 
vty_out
 (
vty
, "%s/%d%s", 
öë_¡ﬂ
 (
p
->
u
.
¥efix4
),Ö->
¥efixÀn
,

615 
VTY_NEWLINE
);

618  
	gCMD_SUCCESS
;

622 
c⁄√˘ed
 *

623 
	$c⁄√˘ed_√w
 ()

625  
	`XCALLOC
 (
MTYPE_CONNECTED
,  (
c⁄√˘ed
));

626 
	}
}

630 
	$c⁄√˘ed_‰ì
 (
c⁄√˘ed
 *connected)

632 i‡(
c⁄√˘ed
->
addªss
)

633 
	`¥efix_‰ì
 (
c⁄√˘ed
->
addªss
);

635 i‡(
c⁄√˘ed
->
de°ö©i⁄
)

636 
	`¥efix_‰ì
 (
c⁄√˘ed
->
de°ö©i⁄
);

638 i‡(
c⁄√˘ed
->
œbñ
)

639 
	`XFREE
 (
MTYPE_CONNECTED_LABEL
, 
c⁄√˘ed
->
œbñ
);

641 
	`XFREE
 (
MTYPE_CONNECTED
, 
c⁄√˘ed
);

642 
	}
}

645 
__©åibuã__
 ((
unu£d
))

646 
	$c⁄√˘ed_log
 (
c⁄√˘ed
 *c⁄√˘ed, *
°r
)

648 
¥efix
 *
p
;

649 
öãrÁ˚
 *
iÂ
;

650 
logbuf
[
BUFSIZ
];

651 
buf
[
BUFSIZ
];

653 
iÂ
 = 
c⁄√˘ed
->ifp;

654 
p
 = 
c⁄√˘ed
->
addªss
;

656 
	`¢¥ötf
 (
logbuf
, 
BUFSIZ
, "%s interface %s %s %s/%d ",

657 
°r
, 
iÂ
->
«me
, 
	`¥efix_Ámûy_°r
 (
p
),

658 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

659 
p
->
¥efixÀn
);

661 
p
 = 
c⁄√˘ed
->
de°ö©i⁄
;

662 i‡(
p
)

664 
	`°∫ˇt
 (
logbuf
, 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

665 
BUFSIZ
 - 
	`°æí
(
logbuf
));

667 
	`zlog
 (
NULL
, 
LOG_INFO
, "%s", 
logbuf
);

668 
	}
}

672 
	$c⁄√˘ed_ßme_¥efix
 (
¥efix
 *
p1
, ¥efix *
p2
)

674 i‡(
p1
->
Ámûy
 =
p2
->family)

676 i‡(
p1
->
Ámûy
 =
AF_INET
 &&

677 
	`IPV4_ADDR_SAME
 (&
p1
->
u
.
¥efix4
, &
p2
->u.prefix4))

679 #ifde‡
HAVE_IPV6


680 i‡(
p1
->
Ámûy
 =
AF_INET6
 &&

681 
	`IPV6_ADDR_SAME
 (&
p1
->
u
.
¥efix6
, &
p2
->u.prefix6))

686 
	}
}

688 
c⁄√˘ed
 *

689 
	$c⁄√˘ed_dñëe_by_¥efix
 (
öãrÁ˚
 *
iÂ
, 
¥efix
 *
p
)

691 
li°node
 *
node
;

692 
li°node
 *
√xt
;

693 
c⁄√˘ed
 *
ifc
;

696 
node
 = 
	`li°hód
 (
iÂ
->
c⁄√˘ed
);Çode;Çodê
√xt
)

698 
ifc
 = 
	`li°gëd©a
 (
node
);

699 
√xt
 = 
node
->next;

701 i‡(
	`c⁄√˘ed_ßme_¥efix
 (
ifc
->
addªss
, 
p
))

703 
	`li°node_dñëe
 (
iÂ
->
c⁄√˘ed
, 
ifc
);

704  
ifc
;

707  
NULL
;

708 
	}
}

712 
c⁄√˘ed
 *

713 
	$c⁄√˘ed_lookup_addªss
 (
öãrÁ˚
 *
iÂ
, 
ö_addr
 
d°
)

715 
¥efix
 
addr
;

716 
li°node
 *
˙ode
;

717 
c⁄√˘ed
 *
c
;

718 
c⁄√˘ed
 *
m©ch
;

720 
addr
.
Ámûy
 = 
AF_INET
;

721 
addr
.
u
.
¥efix4
 = 
d°
;

722 
addr
.
¥efixÀn
 = 
IPV4_MAX_BITLEN
;

724 
m©ch
 = 
NULL
;

726 
	`ALL_LIST_ELEMENTS_RO
 (
iÂ
->
c⁄√˘ed
, 
˙ode
, 
c
))

728 i‡(
c
->
addªss
 && (c->addªss->
Ámûy
 =
AF_INET
) &&

729 
	`¥efix_m©ch
(
	`CONNECTED_PREFIX
(
c
), &
addr
) &&

730 (!
m©ch
 || (
c
->
addªss
->
¥efixÀn
 > match->address->prefixlen)))

731 
m©ch
 = 
c
;

733  
m©ch
;

734 
	}
}

736 
c⁄√˘ed
 *

737 
	$c⁄√˘ed_add_by_¥efix
 (
öãrÁ˚
 *
iÂ
, 
¥efix
 *
p
,

738 
¥efix
 *
de°ö©i⁄
)

740 
c⁄√˘ed
 *
ifc
;

743 
ifc
 = 
	`c⁄√˘ed_√w
 ();

744 
ifc
->
iÂ
 = ifp;

747 
ifc
->
addªss
 = 
	`¥efix_√w
();

748 
	`mem˝y
 (
ifc
->
addªss
, 
p
, (
¥efix
));

751 i‡(
de°ö©i⁄
)

753 
ifc
->
de°ö©i⁄
 = 
	`¥efix_√w
();

754 
	`mem˝y
 (
ifc
->
de°ö©i⁄
, de°ö©i⁄, (
¥efix
));

758 
	`li°node_add
 (
iÂ
->
c⁄√˘ed
, 
ifc
);

759  
ifc
;

760 
	}
}

762 #i‚de‡
HAVE_IF_NAMETOINDEX


764 
	$if_«mëoödex
 (c⁄° *
«me
)

766 
öãrÁ˚
 *
iÂ
;

768  ((
iÂ
 = 
	`if_lookup_by_«me_Àn
(
«me
, 
	`°∫Àn
“ame, 
IFNAMSIZ
))Ë!
NULL
)

769 ? 
iÂ
->
ifödex
 : 0;

770 
	}
}

773 #i‚de‡
HAVE_IF_INDEXTONAME


775 
	$if_ödext⁄ame
 (
ifödex
, *
«me
)

777 
öãrÁ˚
 *
iÂ
;

779 i‡(!(
iÂ
 = 
	`if_lookup_by_ödex
(
ifödex
)))

780  
NULL
;

781 
	`°∫˝y
 (
«me
, 
iÂ
->«me, 
IFNAMSIZ
);

782  
iÂ
->
«me
;

783 
	}
}

792 
rouã_èbÀ
 *
	giÁddr_ùv4_èbÀ
;

796 
	$iÁddr_ùv4_add
 (
ö_addr
 *
iÁddr
, 
öãrÁ˚
 *
iÂ
)

798 
rouã_node
 *
∫
;

799 
¥efix_ùv4
 
p
;

801 
p
.
Ámûy
 = 
AF_INET
;

802 
p
.
¥efixÀn
 = 
IPV4_MAX_PREFIXLEN
;

803 
p
.
¥efix
 = *
iÁddr
;

805 
∫
 = 
	`rouã_node_gë
 (
iÁddr_ùv4_èbÀ
, (
¥efix
 *Ë&
p
);

806 i‡(
∫
)

808 
	`rouã_u∆ock_node
 (
∫
);

809 
	`zlog_öfo
 ("ifaddr_ipv4_add():áddress %s isálreadyádded",

810 
	`öë_¡ﬂ
 (*
iÁddr
));

813 
∫
->
öfo
 = 
iÂ
;

814 
	}
}

817 
	$iÁddr_ùv4_dñëe
 (
ö_addr
 *
iÁddr
, 
öãrÁ˚
 *
iÂ
)

819 
rouã_node
 *
∫
;

820 
¥efix_ùv4
 
p
;

822 
p
.
Ámûy
 = 
AF_INET
;

823 
p
.
¥efixÀn
 = 
IPV4_MAX_PREFIXLEN
;

824 
p
.
¥efix
 = *
iÁddr
;

826 
∫
 = 
	`rouã_node_lookup
 (
iÁddr_ùv4_èbÀ
, (
¥efix
 *Ë&
p
);

827 i‡(! 
∫
)

829 
	`zlog_öfo
 ("ifaddr_ipv4_delete(): can't findáddress %s",

830 
	`öë_¡ﬂ
 (*
iÁddr
));

833 
∫
->
öfo
 = 
NULL
;

834 
	`rouã_u∆ock_node
 (
∫
);

835 
	`rouã_u∆ock_node
 (
∫
);

836 
	}
}

839 
öãrÁ˚
 *

840 
	$iÁddr_ùv4_lookup
 (
ö_addr
 *
addr
, 
ifödex
)

842 
¥efix_ùv4
 
p
;

843 
rouã_node
 *
∫
;

844 
öãrÁ˚
 *
iÂ
;

846 i‡(
addr
)

848 
p
.
Ámûy
 = 
AF_INET
;

849 
p
.
¥efixÀn
 = 
IPV4_MAX_PREFIXLEN
;

850 
p
.
¥efix
 = *
addr
;

852 
∫
 = 
	`rouã_node_lookup
 (
iÁddr_ùv4_èbÀ
, (
¥efix
 *Ë&
p
);

853 i‡(! 
∫
)

854  
NULL
;

856 
iÂ
 = 
∫
->
öfo
;

857 
	`rouã_u∆ock_node
 (
∫
);

858  
iÂ
;

861  
	`if_lookup_by_ödex
(
ifödex
);

862 
	}
}

867 
	$if_öô
 ()

869 
iÊi°
 = 
	`li°_√w
 ();

871 
iÁddr_ùv4_èbÀ
 = 
	`rouã_èbÀ_öô
 ();

874 i‡(
iÊi°
) {

875 
iÊi°
->
cmp
 = ((*)(*, *))
if_cmp_func
;

879 
	`mem£t
 (&
if_ma°î
, 0,  if_master);

880 
	}
}

883 
	$if_ãrmö©e
 ()

887 
öãrÁ˚
 *
iÂ
;

889 
iÂ
 = 
	`li°node_hód
 (
iÊi°
);

890 i‡(
iÂ
 =
NULL
)

893 
	`if_dñëe
 (
iÂ
);

896 
	`li°_dñëe
 (
iÊi°
);

897 
iÊi°
 = 
NULL
;

898 
	}
}

	@common-libs/3rd-party/quagga-lib/src/if_rmap.c

22 
	~<zebø.h
>

24 
	~"hash.h
"

25 
	~"comm™d.h
"

26 
	~"mem‹y.h
"

27 
	~"if.h
"

28 
	~"if_rm≠.h
"

30 
hash
 *
	gi‰m≠hash
;

33 (*
if_rm≠_add_hook
Ë(
if_rm≠
 *Ë
NULL
;

34 (*
if_rm≠_dñëe_hook
Ë(
if_rm≠
 *Ë
NULL
;

36 
if_rm≠
 *

37 
	$if_rm≠_√w
 ()

39 
if_rm≠
 *
√w
;

41 
√w
 = 
	`XCALLOC
 (
MTYPE_IF_RMAP
,  (
if_rm≠
));

43  
√w
;

44 
	}
}

47 
	$if_rm≠_‰ì
 (
if_rm≠
 *if_rmap)

49 i‡(
if_rm≠
->
i‚ame
)

50 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
i‚ame
);

52 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
])

53 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
]);

54 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
])

55 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
]);

57 
	`XFREE
 (
MTYPE_IF_RMAP
, 
if_rm≠
);

58 
	}
}

60 
if_rm≠
 *

61 
	$if_rm≠_lookup
 (c⁄° *
i‚ame
)

63 
if_rm≠
 
key
;

64 
if_rm≠
 *if_rmap;

67 
key
.
i‚ame
 = (*)ifname;

69 
if_rm≠
 = 
	`hash_lookup
 (
i‰m≠hash
, &
key
);

71  
if_rm≠
;

72 
	}
}

75 
if_rm≠_hook_add
 ((*
func
Ë(
if_rm≠
 *))

77 
if_rm≠_add_hook
 = 
func
;

78 
	}
}

81 
if_rm≠_hook_dñëe
 ((*
func
Ë(
if_rm≠
 *))

83 
if_rm≠_dñëe_hook
 = 
func
;

84 
	}
}

87 
	$if_rm≠_hash_Æloc
 (*
¨g
)

89 
if_rm≠
 *
iÁrg
 = 
¨g
;

90 
if_rm≠
 *if_rmap;

92 
if_rm≠
 = 
	`if_rm≠_√w
 ();

93 
if_rm≠
->
i‚ame
 = 
	`XSTRDUP
 (
MTYPE_IF_RMAP_NAME
, 
iÁrg
->ifname);

95  
if_rm≠
;

96 
	}
}

98 
if_rm≠
 *

99 
	$if_rm≠_gë
 (c⁄° *
i‚ame
)

101 
if_rm≠
 
key
;

104 
key
.
i‚ame
 = (*)ifname;

106  (
if_rm≠
 *Ë
	`hash_gë
 (
i‰m≠hash
, &
key
, 
if_rm≠_hash_Æloc
);

107 
	}
}

110 
	$if_rm≠_hash_make
 (*
d©a
)

112 c⁄° 
if_rm≠
 *if_rm≠ = 
d©a
;

114  
	`°rög_hash_make
 (
if_rm≠
->
i‚ame
);

115 
	}
}

118 
	$if_rm≠_hash_cmp
 (c⁄° *
¨g1
, c⁄° * 
¨g2
)

120 c⁄° 
if_rm≠
 *
if_rm≠1
 = 
¨g1
;

121 c⁄° 
if_rm≠
 *
if_rm≠2
 = 
¨g2
;

123  
	`°rcmp
 (
if_rm≠1
->
i‚ame
, 
if_rm≠2
->ifname) == 0;

124 
	}
}

126 
if_rm≠
 *

127 
	$if_rm≠_£t
 (c⁄° *
i‚ame
, 
if_rm≠_ty≥
 
ty≥
,

128 c⁄° *
rouãm≠_«me
)

130 
if_rm≠
 *if_rmap;

132 
if_rm≠
 = 
	`if_rm≠_gë
 (
i‚ame
);

134 i‡(
ty≥
 =
IF_RMAP_IN
)

136 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
])

137 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
]);

138 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
]

139 
	`XSTRDUP
 (
MTYPE_IF_RMAP_NAME
, 
rouãm≠_«me
);

141 i‡(
ty≥
 =
IF_RMAP_OUT
)

143 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
])

144 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
]);

145 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
]

146 
	`XSTRDUP
 (
MTYPE_IF_RMAP_NAME
, 
rouãm≠_«me
);

149 i‡(
if_rm≠_add_hook
)

150 (*
if_rm≠_add_hook
Ë(
if_rm≠
);

152  
if_rm≠
;

153 
	}
}

156 
	$if_rm≠_un£t
 (c⁄° *
i‚ame
, 
if_rm≠_ty≥
 
ty≥
,

157 c⁄° *
rouãm≠_«me
)

159 
if_rm≠
 *if_rmap;

161 
if_rm≠
 = 
	`if_rm≠_lookup
 (
i‚ame
);

162 i‡(!
if_rm≠
)

165 i‡(
ty≥
 =
IF_RMAP_IN
)

167 i‡(!
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
])

169 i‡(
	`°rcmp
 (
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
], 
rouãm≠_«me
) != 0)

172 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
]);

173 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
] = 
NULL
;

176 i‡(
ty≥
 =
IF_RMAP_OUT
)

178 i‡(!
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
])

180 i‡(
	`°rcmp
 (
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
], 
rouãm≠_«me
) != 0)

183 
	`XFREE
 (
MTYPE_IF_RMAP_NAME
, 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
]);

184 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
] = 
NULL
;

187 i‡(
if_rm≠_dñëe_hook
)

188 (*
if_rm≠_dñëe_hook
Ë(
if_rm≠
);

190 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
] =
NULL
 &&

191 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
] =
NULL
)

193 
	`hash_ªÀa£
 (
i‰m≠hash
, 
if_rm≠
);

194 
	`if_rm≠_‰ì
 (
if_rm≠
);

198 
	}
}

200 
DEFUN
 (
if_rm≠
,

201 
if_rm≠_cmd
,

209 
if_rm≠_ty≥
 
	gty≥
;

210 
if_rm≠
 *
	gif_rm≠
;

212 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

213 
ty≥
 = 
IF_RMAP_IN
;

214 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

215 
ty≥
 = 
IF_RMAP_OUT
;

218 
vty_out
 (
vty
, "rouã-m≠ dúe˘i⁄ mu° bê[ö|out]%s", 
VTY_NEWLINE
);

219  
	gCMD_WARNING
;

222 
	gif_rm≠
 = 
if_rm≠_£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

224  
	gCMD_SUCCESS
;

227 
ALIAS
 (
if_rm≠
,

228 
if_ùv6_rm≠_cmd
,

236 
DEFUN
 (
no_if_rm≠
,

237 
no_if_rm≠_cmd
,

239 
NO_STR


246 
	gªt
;

247 
if_rm≠_ty≥
 
	gty≥
;

249 i‡(
°∫cmp
 (
¨gv
[1], "i", 1) == 0)

250 
ty≥
 = 
IF_RMAP_IN
;

251 i‡(
°∫cmp
 (
¨gv
[1], "o", 1) == 0)

252 
ty≥
 = 
IF_RMAP_OUT
;

255 
vty_out
 (
vty
, "rouã-m≠ dúe˘i⁄ mu° bê[ö|out]%s", 
VTY_NEWLINE
);

256  
	gCMD_WARNING
;

259 
	gªt
 = 
if_rm≠_un£t
 (
¨gv
[2], 
ty≥
,árgv[0]);

260 i‡(! 
	gªt
)

262 
vty_out
 (
vty
, "rouã-m≠ d€¢'àexi°%s", 
VTY_NEWLINE
);

263  
	gCMD_WARNING
;

265  
	gCMD_SUCCESS
;

268 
ALIAS
 (
no_if_rm≠
,

269 
no_if_ùv6_rm≠_cmd
,

271 
NO_STR


280 
	$c⁄fig_wrôe_if_rm≠
 (
vty
 *vty)

282 
i
;

283 
hash_backë
 *
mp
;

284 
wrôe
 = 0;

286 
i
 = 0; i < 
i‰m≠hash
->
size
; i++)

287 
mp
 = 
i‰m≠hash
->
ödex
[
i
]; mp; m∞mp->
√xt
)

289 
if_rm≠
 *if_rmap;

291 
if_rm≠
 = 
mp
->
d©a
;

293 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
])

295 
	`vty_out
 (
vty
, "Ñoute-map %s in %s%s",

296 
if_rm≠
->
rouãm≠
[
IF_RMAP_IN
],

297 
if_rm≠
->
i‚ame
,

298 
VTY_NEWLINE
);

299 
wrôe
++;

302 i‡(
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
])

304 
	`vty_out
 (
vty
, "Ñoute-map %s out %s%s",

305 
if_rm≠
->
rouãm≠
[
IF_RMAP_OUT
],

306 
if_rm≠
->
i‚ame
,

307 
VTY_NEWLINE
);

308 
wrôe
++;

311  
wrôe
;

312 
	}
}

315 
	$if_rm≠_ª£t
 ()

317 
	`hash_˛ón
 (
i‰m≠hash
, ((*Ë(*)Ë
if_rm≠_‰ì
);

318 
	}
}

321 
	$if_rm≠_öô
 (
node
)

323 
i‰m≠hash
 = 
	`hash_¸óã
 (
if_rm≠_hash_make
, 
if_rm≠_hash_cmp
);

324 i‡(
node
 =
RIPNG_NODE
) {

325 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
if_ùv6_rm≠_cmd
);

326 
	`ö°Æl_ñemít
 (
RIPNG_NODE
, &
no_if_ùv6_rm≠_cmd
);

327 } i‡(
node
 =
RIP_NODE
) {

328 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
if_rm≠_cmd
);

329 
	`ö°Æl_ñemít
 (
RIP_NODE
, &
no_if_rm≠_cmd
);

331 
	}
}

	@common-libs/3rd-party/quagga-lib/src/jhash.c

20 
	~"zebø.h
"

21 
	~"jhash.h
"

24 
	#JHASH_GOLDEN_RATIO
 0x9e3779b9

	)

27 
	#__jhash_mix
(
a
, 
b
, 
c
) \

29 
a
 -
b
;á -
c
;á ^= (c>>13); \

30 
b
 -
c
; b -
a
; b ^= (a<<8); \

31 
c
 -
a
; c -
b
; c ^= (b>>13); \

32 
a
 -
b
;á -
c
;á ^= (c>>12); \

33 
b
 -
c
; b -
a
; b ^= (a<<16); \

34 
c
 -
a
; c -
b
; c ^= (b>>5); \

35 
a
 -
b
;á -
c
;á ^= (c>>3); \

36 
b
 -
c
; b -
a
; b ^= (a<<10); \

37 
c
 -
a
; c -
b
; c ^= (b>>15); \

38 }

	)

44 
u_öt32_t


45 
	$jhash
 (*
key
, 
u_öt32_t
 
Àngth
, u_öt32_à
öôvÆ
)

47 
u_öt32_t
 
a
, 
b
, 
c
, 
Àn
;

48 
u_öt8_t
 *
k
 = 
key
;

50 
Àn
 = 
Àngth
;

51 
a
 = 
b
 = 
JHASH_GOLDEN_RATIO
;

52 
c
 = 
öôvÆ
;

54 
Àn
 >= 12)

56 
a
 +=

57 (
k
[0] + ((
u_öt32_t
) k[1] << 8) + ((u_int32_t) k[2] << 16) +

58 ((
u_öt32_t
Ë
k
[3] << 24));

59 
b
 +=

60 (
k
[4] + ((
u_öt32_t
) k[5] << 8) + ((u_int32_t) k[6] << 16) +

61 ((
u_öt32_t
Ë
k
[7] << 24));

62 
c
 +=

63 (
k
[8] + ((
u_öt32_t
) k[9] << 8) + ((u_int32_t) k[10] << 16) +

64 ((
u_öt32_t
Ë
k
[11] << 24));

66 
	`__jhash_mix
 (
a
, 
b
, 
c
);

68 
k
 += 12;

69 
Àn
 -= 12;

72 
c
 +
Àngth
;

73 
Àn
)

76 
c
 +((
u_öt32_t
Ë
k
[10] << 24);

78 
c
 +((
u_öt32_t
Ë
k
[9] << 16);

80 
c
 +((
u_öt32_t
Ë
k
[8] << 8);

82 
b
 +((
u_öt32_t
Ë
k
[7] << 24);

84 
b
 +((
u_öt32_t
Ë
k
[6] << 16);

86 
b
 +((
u_öt32_t
Ë
k
[5] << 8);

88 
b
 +
k
[4];

90 
a
 +((
u_öt32_t
Ë
k
[3] << 24);

92 
a
 +((
u_öt32_t
Ë
k
[2] << 16);

94 
a
 +((
u_öt32_t
Ë
k
[1] << 8);

96 
a
 +
k
[0];

99 
	`__jhash_mix
 (
a
, 
b
, 
c
);

101  
c
;

102 
	}
}

107 
u_öt32_t


108 
	$jhash2
 (
u_öt32_t
 * 
k
, u_öt32_à
Àngth
, u_öt32_à
öôvÆ
)

110 
u_öt32_t
 
a
, 
b
, 
c
, 
Àn
;

112 
a
 = 
b
 = 
JHASH_GOLDEN_RATIO
;

113 
c
 = 
öôvÆ
;

114 
Àn
 = 
Àngth
;

116 
Àn
 >= 3)

118 
a
 +
k
[0];

119 
b
 +
k
[1];

120 
c
 +
k
[2];

121 
	`__jhash_mix
 (
a
, 
b
, 
c
);

122 
k
 += 3;

123 
Àn
 -= 3;

126 
c
 +
Àngth
 * 4;

128 
Àn
)

131 
b
 +
k
[1];

133 
a
 +
k
[0];

136 
	`__jhash_mix
 (
a
, 
b
, 
c
);

138  
c
;

139 
	}
}

148 
u_öt32_t


149 
	$jhash_3w‹ds
 (
u_öt32_t
 
a
, u_öt32_à
b
, u_öt32_à
c
, u_öt32_à
öôvÆ
)

151 
a
 +
JHASH_GOLDEN_RATIO
;

152 
b
 +
JHASH_GOLDEN_RATIO
;

153 
c
 +
öôvÆ
;

155 
	`__jhash_mix
 (
a
, 
b
, 
c
);

157  
c
;

158 
	}
}

160 
u_öt32_t


161 
	$jhash_2w‹ds
 (
u_öt32_t
 
a
, u_öt32_à
b
, u_öt32_à
öôvÆ
)

163  
	`jhash_3w‹ds
 (
a
, 
b
, 0, 
öôvÆ
);

164 
	}
}

166 
u_öt32_t


167 
	$jhash_1w‹d
 (
u_öt32_t
 
a
, u_öt32_à
öôvÆ
)

169  
	`jhash_3w‹ds
 (
a
, 0, 0, 
öôvÆ
);

170 
	}
}

	@common-libs/3rd-party/quagga-lib/src/keychain.c

21 
	~<zebø.h
>

23 
	~"comm™d.h
"

24 
	~"mem‹y.h
"

25 
	~"lökli°.h
"

26 
	~"keychaö.h
"

29 
li°
 *
	gkeychaö_li°
;

31 
keychaö
 *

32 
	$keychaö_√w
 ()

34  
	`XCALLOC
 (
MTYPE_KEYCHAIN
,  (
keychaö
));

35 
	}
}

38 
	$keychaö_‰ì
 (
keychaö
 *keychain)

40 
	`XFREE
 (
MTYPE_KEYCHAIN
, 
keychaö
);

41 
	}
}

43 
key
 *

44 
	$key_√w
 ()

46  
	`XCALLOC
 (
MTYPE_KEY
,  (
key
));

47 
	}
}

50 
	$key_‰ì
 (
key
 *key)

52 
	`XFREE
 (
MTYPE_KEY
, 
key
);

53 
	}
}

55 
keychaö
 *

56 
	$keychaö_lookup
 (c⁄° *
«me
)

58 
li°node
 *
node
;

59 
keychaö
 *keychain;

61 i‡(
«me
 =
NULL
)

62  
NULL
;

64 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö_li°
, 
node
, 
keychaö
))

66 i‡(
	`°rcmp
 (
keychaö
->
«me
,Çame) == 0)

67  
keychaö
;

69  
NULL
;

70 
	}
}

73 
	$key_cmp_func
 (*
¨g1
, *
¨g2
)

75 c⁄° 
key
 *
k1
 = 
¨g1
;

76 c⁄° 
key
 *
k2
 = 
¨g2
;

78 i‡(
k1
->
ödex
 > 
k2
->index)

80 i‡(
k1
->
ödex
 < 
k2
->index)

83 
	}
}

86 
	$key_dñëe_func
 (
key
 *key)

88 i‡(
key
->
°rög
)

89 
	`‰ì
 (
key
->
°rög
);

90 
	`key_‰ì
 (
key
);

91 
	}
}

93 
keychaö
 *

94 
	$keychaö_gë
 (c⁄° *
«me
)

96 
keychaö
 *keychain;

98 
keychaö
 = 
	`keychaö_lookup
 (
«me
);

100 i‡(
keychaö
)

101  
keychaö
;

103 
keychaö
 = 
	`keychaö_√w
 ();

104 
keychaö
->
«me
 = 
	`°rdup
 (name);

105 
keychaö
->
key
 = 
	`li°_√w
 ();

106 
keychaö
->
key
->
cmp
 = ((*)(*, *)Ë
key_cmp_func
;

107 
keychaö
->
key
->
dñ
 = ((*)(*)Ë
key_dñëe_func
;

108 
	`li°node_add
 (
keychaö_li°
, 
keychaö
);

110  
keychaö
;

111 
	}
}

114 
	$keychaö_dñëe
 (
keychaö
 *keychain)

116 i‡(
keychaö
->
«me
)

117 
	`‰ì
 (
keychaö
->
«me
);

119 
	`li°_dñëe
 (
keychaö
->
key
);

120 
	`li°node_dñëe
 (
keychaö_li°
, 
keychaö
);

121 
	`keychaö_‰ì
 (
keychaö
);

122 
	}
}

124 
key
 *

125 
	$key_lookup
 (c⁄° 
keychaö
 *keychaö, 
u_öt32_t
 
ödex
)

127 
li°node
 *
node
;

128 
key
 *key;

130 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö
->
key
, 
node
, key))

132 i‡(
key
->
ödex
 == index)

133  
key
;

135  
NULL
;

136 
	}
}

138 
key
 *

139 
	$key_lookup_f‹_ac˚±
 (c⁄° 
keychaö
 *keychaö, 
u_öt32_t
 
ödex
)

141 
li°node
 *
node
;

142 
key
 *key;

143 
time_t
 
now
;

145 
now
 = 
	`time
 (
NULL
);

147 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö
->
key
, 
node
, key))

149 i‡(
key
->
ödex
 >= index)

151 i‡(
key
->
ac˚±
.
°¨t
 == 0)

152  
key
;

154 i‡(
key
->
ac˚±
.
°¨t
 <
now
)

155 i‡(
key
->
ac˚±
.
íd
 >
now
 || key->accept.end == -1)

156  
key
;

159  
NULL
;

160 
	}
}

162 
key
 *

163 
	$key_m©ch_f‹_ac˚±
 (c⁄° 
keychaö
 *keychaö, c⁄° *
auth_°r
)

165 
li°node
 *
node
;

166 
key
 *key;

167 
time_t
 
now
;

169 
now
 = 
	`time
 (
NULL
);

171 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö
->
key
, 
node
, key))

173 i‡(
key
->
ac˚±
.
°¨t
 == 0 ||

174 (
key
->
ac˚±
.
°¨t
 <
now
 &&

175 (
key
->
ac˚±
.
íd
 >
now
 || key->accept.end == -1)))

176 i‡(
	`°∫cmp
 (
key
->
°rög
, 
auth_°r
, 16) == 0)

177  
key
;

179  
NULL
;

180 
	}
}

182 
key
 *

183 
	$key_lookup_f‹_£nd
 (c⁄° 
keychaö
 *keychain)

185 
li°node
 *
node
;

186 
key
 *key;

187 
time_t
 
now
;

189 
now
 = 
	`time
 (
NULL
);

191 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö
->
key
, 
node
, key))

193 i‡(
key
->
£nd
.
°¨t
 == 0)

194  
key
;

196 i‡(
key
->
£nd
.
°¨t
 <
now
)

197 i‡(
key
->
£nd
.
íd
 >
now
 || key->send.end == -1)

198  
key
;

200  
NULL
;

201 
	}
}

203 
key
 *

204 
	$key_gë
 (c⁄° 
keychaö
 *keychaö, 
u_öt32_t
 
ödex
)

206 
key
 *key;

208 
key
 = 
	`key_lookup
 (
keychaö
, 
ödex
);

210 i‡(
key
)

211  
key
;

213 
key
 = 
	`key_√w
 ();

214 
key
->
ödex
 = index;

215 
	`li°node_add_s‹t
 (
keychaö
->
key
, key);

217  
key
;

218 
	}
}

221 
	$key_dñëe
 (
keychaö
 *keychaö, 
key
 *key)

223 
	`li°node_dñëe
 (
keychaö
->
key
, key);

225 i‡(
key
->
°rög
)

226 
	`‰ì
 (
key
->
°rög
);

227 
	`key_‰ì
 (
key
);

228 
	}
}

230 
DEFUN
 (
key_chaö
,

231 
key_chaö_cmd
,

237 
keychaö
 *
	gkeychaö
;

239 
	gkeychaö
 = 
keychaö_gë
 (
¨gv
[0]);

240 
	gvty
->
	gödex
 = 
keychaö
;

241 
	gvty
->
	gnode
 = 
KEYCHAIN_NODE
;

243  
	gCMD_SUCCESS
;

246 
DEFUN
 (
no_key_chaö
,

247 
no_key_chaö_cmd
,

249 
NO_STR


254 
keychaö
 *
	gkeychaö
;

256 
	gkeychaö
 = 
keychaö_lookup
 (
¨gv
[0]);

258 i‡(! 
	gkeychaö
)

260 
vty_out
 (
vty
, "C™'àföd keychaö %s%s", 
¨gv
[0], 
VTY_NEWLINE
);

261  
	gCMD_WARNING
;

264 
keychaö_dñëe
 (
keychaö
);

266  
	gCMD_SUCCESS
;

269 
DEFUN
 (
key
,

270 
key_cmd
,

275 
keychaö
 *
	gkeychaö
;

276 
key
 *
	gkey
;

277 
u_öt32_t
 
	gödex
;

279 
	gkeychaö
 = 
vty
->
ödex
;

281 
VTY_GET_INTEGER
 ("key idítifõr", 
ödex
, 
¨gv
[0]);

282 
	gkey
 = 
key_gë
 (
keychaö
, 
ödex
);

283 
	gvty
->
	gödex_sub
 = 
key
;

284 
	gvty
->
	gnode
 = 
KEYCHAIN_KEY_NODE
;

286  
	gCMD_SUCCESS
;

289 
DEFUN
 (
no_key
,

290 
no_key_cmd
,

292 
NO_STR


296 
keychaö
 *
	gkeychaö
;

297 
key
 *
	gkey
;

298 
u_öt32_t
 
	gödex
;

300 
	gkeychaö
 = 
vty
->
ödex
;

302 
VTY_GET_INTEGER
 ("key idítifõr", 
ödex
, 
¨gv
[0]);

303 
	gkey
 = 
key_lookup
 (
keychaö
, 
ödex
);

304 i‡(! 
	gkey
)

306 
vty_out
 (
vty
, "C™'àföd key %d%s", 
ödex
, 
VTY_NEWLINE
);

307  
	gCMD_WARNING
;

310 
key_dñëe
 (
keychaö
, 
key
);

312 
	gvty
->
	gnode
 = 
KEYCHAIN_NODE
;

314  
	gCMD_SUCCESS
;

317 
DEFUN
 (
key_°rög
,

318 
key_°rög_cmd
,

323 
key
 *
	gkey
;

325 
	gkey
 = 
vty
->
ödex_sub
;

327 i‡(
	gkey
->
	g°rög
)

328 
‰ì
 (
key
->
°rög
);

329 
	gkey
->
	g°rög
 = 
°rdup
 (
¨gv
[0]);

331  
	gCMD_SUCCESS
;

334 
DEFUN
 (
no_key_°rög
,

335 
no_key_°rög_cmd
,

337 
NO_STR


341 
key
 *
	gkey
;

343 
	gkey
 = 
vty
->
ödex_sub
;

345 i‡(
	gkey
->
	g°rög
)

347 
‰ì
 (
key
->
°rög
);

348 
	gkey
->
	g°rög
 = 
NULL
;

351  
	gCMD_SUCCESS
;

356 
time_t


357 
	$key_°r2time
 (c⁄° *
time_°r
, c⁄° *
day_°r
, c⁄° *
m⁄th_°r
,

358 c⁄° *
yór_°r
)

360 
i
 = 0;

361 *
cﬁ⁄
;

362 
tm
Åm;

363 
time_t
 
time
;

364 
£c
, 
mö
, 
hour
;

365 
day
, 
m⁄th
, 
yór
;

367 c⁄° *
m⁄th_«me
[] =

381 
NULL


384 
	#GET_LONG_RANGE
(
V
,
STR
,
MIN
,
MAX
) \

386 
tm∂
; \

387 *
íd±r
 = 
NULL
; \

388 
tm∂
 = 
	`°πoul
 ((
STR
), &
íd±r
, 10); \

389 i‡(*
íd±r
 !'\0' || 
tm∂
 =
ULONG_MAX
) \

391 i‡–
tm∂
 < (
MIN
Ë||Åm∂ > (
MAX
)) \

393 (
V
Ë
tm∂
; \

394 }

	)

397 
cﬁ⁄
 = 
	`°rchr
 (
time_°r
, ':');

398 i‡(
cﬁ⁄
 =
NULL
)

400 *
cﬁ⁄
 = '\0';

403 
	`GET_LONG_RANGE
 (
hour
, 
time_°r
, 0, 23);

406 
time_°r
 = 
cﬁ⁄
 + 1;

407 
cﬁ⁄
 = 
	`°rchr
 (
time_°r
, ':');

408 i‡(*
time_°r
 ='\0' || 
cﬁ⁄
 =
NULL
)

410 *
cﬁ⁄
 = '\0';

413 
	`GET_LONG_RANGE
 (
mö
, 
time_°r
, 0, 59);

416 
time_°r
 = 
cﬁ⁄
 + 1;

417 i‡(*
time_°r
 == '\0')

421 
	`GET_LONG_RANGE
 (
£c
, 
time_°r
, 0, 59);

424 
	`GET_LONG_RANGE
 (
day
, 
day_°r
, 1, 31);

427 
m⁄th
 = 0;

428 i‡(
	`°æí
 (
m⁄th_°r
) >= 3)

429 
i
 = 0; 
m⁄th_«me
[i]; i++)

430 i‡(
	`°∫cmp
 (
m⁄th_°r
, 
m⁄th_«me
[
i
], 
	`°æí
 (month_str)) == 0)

432 
m⁄th
 = 
i
;

435 i‡(! 
m⁄th_«me
[
i
])

439 
	`GET_LONG_RANGE
 (
yór
, 
yór_°r
, 1993, 2035);

441 
	`mem£t
 (&
tm
, 0,  (tm));

442 
tm
.
tm_£c
 = 
£c
;

443 
tm
.
tm_mö
 = 
mö
;

444 
tm
.
tm_hour
 = 
hour
;

445 
tm
.
tm_m⁄
 = 
m⁄th
;

446 
tm
.
tm_mday
 = 
day
;

447 
tm
.
tm_yór
 = 
yór
 - 1900;

449 
time
 = 
	`mktime
 (&
tm
);

451  
time
;

452 #unde‡
GET_LONG_RANGE


453 
	}
}

456 
	$key_li„time_£t
 (
vty
 *vty, 
key_ønge
 *
kønge
,

457 c⁄° *
°ime_°r
, c⁄° *
sday_°r
,

458 c⁄° *
sm⁄th_°r
, c⁄° *
syór_°r
,

459 c⁄° *
ëime_°r
, c⁄° *
eday_°r
,

460 c⁄° *
em⁄th_°r
, c⁄° *
eyór_°r
)

462 
time_t
 
time_°¨t
;

463 
time_t
 
time_íd
;

465 
time_°¨t
 = 
	`key_°r2time
 (
°ime_°r
, 
sday_°r
, 
sm⁄th_°r
, 
syór_°r
);

466 i‡(
time_°¨t
 < 0)

468 
	`vty_out
 (
vty
, "MÆf‹medÅimêvÆue%s", 
VTY_NEWLINE
);

469  
CMD_WARNING
;

471 
time_íd
 = 
	`key_°r2time
 (
ëime_°r
, 
eday_°r
, 
em⁄th_°r
, 
eyór_°r
);

473 i‡(
time_íd
 < 0)

475 
	`vty_out
 (
vty
, "MÆf‹medÅimêvÆue%s", 
VTY_NEWLINE
);

476  
CMD_WARNING
;

479 i‡(
time_íd
 <
time_°¨t
)

481 
	`vty_out
 (
vty
, "Expúêtimêi†nŸÜ©îÅh™ sèπÅime%s", 
VTY_NEWLINE
);

482  
CMD_WARNING
;

485 
kønge
->
°¨t
 = 
time_°¨t
;

486 
kønge
->
íd
 = 
time_íd
;

488  
CMD_SUCCESS
;

489 
	}
}

492 
	$key_li„time_duøti⁄_£t
 (
vty
 *vty, 
key_ønge
 *
kønge
,

493 c⁄° *
°ime_°r
, c⁄° *
sday_°r
,

494 c⁄° *
sm⁄th_°r
, c⁄° *
syór_°r
,

495 c⁄° *
duøti⁄_°r
)

497 
time_t
 
time_°¨t
;

498 
u_öt32_t
 
duøti⁄
;

500 
time_°¨t
 = 
	`key_°r2time
 (
°ime_°r
, 
sday_°r
, 
sm⁄th_°r
, 
syór_°r
);

501 i‡(
time_°¨t
 < 0)

503 
	`vty_out
 (
vty
, "MÆf‹medÅimêvÆue%s", 
VTY_NEWLINE
);

504  
CMD_WARNING
;

506 
kønge
->
°¨t
 = 
time_°¨t
;

508 
	`VTY_GET_INTEGER
 ("duøti⁄", 
duøti⁄
, 
duøti⁄_°r
);

509 
kønge
->
duøti⁄
 = 1;

510 
kønge
->
íd
 = 
time_°¨t
 + 
duøti⁄
;

512  
CMD_SUCCESS
;

513 
	}
}

516 
	$key_li„time_öföôe_£t
 (
vty
 *vty, 
key_ønge
 *
kønge
,

517 c⁄° *
°ime_°r
, c⁄° *
sday_°r
,

518 c⁄° *
sm⁄th_°r
, c⁄° *
syór_°r
)

520 
time_t
 
time_°¨t
;

522 
time_°¨t
 = 
	`key_°r2time
 (
°ime_°r
, 
sday_°r
, 
sm⁄th_°r
, 
syór_°r
);

523 i‡(
time_°¨t
 < 0)

525 
	`vty_out
 (
vty
, "MÆf‹medÅimêvÆue%s", 
VTY_NEWLINE
);

526  
CMD_WARNING
;

528 
kønge
->
°¨t
 = 
time_°¨t
;

530 
kønge
->
íd
 = -1;

532  
CMD_SUCCESS
;

533 
	}
}

535 
DEFUN
 (
ac˚±_li„time_day_m⁄th_day_m⁄th
,

536 
ac˚±_li„time_day_m⁄th_day_m⁄th_cmd
,

548 
key
 *
	gkey
;

550 
	gkey
 = 
vty
->
ödex_sub
;

552  
key_li„time_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[1],árgv[2],

553 
¨gv
[3],árgv[4],árgv[5],árgv[6],árgv[7]);

556 
DEFUN
 (
ac˚±_li„time_day_m⁄th_m⁄th_day
,

557 
ac˚±_li„time_day_m⁄th_m⁄th_day_cmd
,

569 
key
 *
	gkey
;

571 
	gkey
 = 
vty
->
ödex_sub
;

573  
key_li„time_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[1],árgv[2],

574 
¨gv
[3],árgv[4],árgv[6],árgv[5],árgv[7]);

577 
DEFUN
 (
ac˚±_li„time_m⁄th_day_day_m⁄th
,

578 
ac˚±_li„time_m⁄th_day_day_m⁄th_cmd
,

590 
key
 *
	gkey
;

592 
	gkey
 = 
vty
->
ödex_sub
;

594  
key_li„time_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[2],árgv[1],

595 
¨gv
[3],árgv[4],árgv[5],árgv[6],árgv[7]);

598 
DEFUN
 (
ac˚±_li„time_m⁄th_day_m⁄th_day
,

599 
ac˚±_li„time_m⁄th_day_m⁄th_day_cmd
,

611 
key
 *
	gkey
;

613 
	gkey
 = 
vty
->
ödex_sub
;

615  
key_li„time_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[2],árgv[1],

616 
¨gv
[3],árgv[4],árgv[6],árgv[5],árgv[7]);

619 
DEFUN
 (
ac˚±_li„time_öföôe_day_m⁄th
,

620 
ac˚±_li„time_öföôe_day_m⁄th_cmd
,

629 
key
 *
	gkey
;

631 
	gkey
 = 
vty
->
ödex_sub
;

633  
key_li„time_öföôe_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[1],

634 
¨gv
[2],árgv[3]);

637 
DEFUN
 (
ac˚±_li„time_öföôe_m⁄th_day
,

638 
ac˚±_li„time_öföôe_m⁄th_day_cmd
,

647 
key
 *
	gkey
;

649 
	gkey
 = 
vty
->
ödex_sub
;

651  
key_li„time_öföôe_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[2],

652 
¨gv
[1],árgv[3]);

655 
DEFUN
 (
ac˚±_li„time_duøti⁄_day_m⁄th
,

656 
ac˚±_li„time_duøti⁄_day_m⁄th_cmd
,

666 
key
 *
	gkey
;

668 
	gkey
 = 
vty
->
ödex_sub
;

670  
key_li„time_duøti⁄_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[1],

671 
¨gv
[2],árgv[3],árgv[4]);

674 
DEFUN
 (
ac˚±_li„time_duøti⁄_m⁄th_day
,

675 
ac˚±_li„time_duøti⁄_m⁄th_day_cmd
,

685 
key
 *
	gkey
;

687 
	gkey
 = 
vty
->
ödex_sub
;

689  
key_li„time_duøti⁄_£t
 (
vty
, &
key
->
ac˚±
, 
¨gv
[0],árgv[2],

690 
¨gv
[1],árgv[3],árgv[4]);

693 
DEFUN
 (
£nd_li„time_day_m⁄th_day_m⁄th
,

694 
£nd_li„time_day_m⁄th_day_m⁄th_cmd
,

706 
key
 *
	gkey
;

708 
	gkey
 = 
vty
->
ödex_sub
;

710  
key_li„time_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[1],árgv[2],árgv[3],

711 
¨gv
[4],árgv[5],árgv[6],árgv[7]);

714 
DEFUN
 (
£nd_li„time_day_m⁄th_m⁄th_day
,

715 
£nd_li„time_day_m⁄th_m⁄th_day_cmd
,

727 
key
 *
	gkey
;

729 
	gkey
 = 
vty
->
ödex_sub
;

731  
key_li„time_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[1],árgv[2],árgv[3],

732 
¨gv
[4],árgv[6],árgv[5],árgv[7]);

735 
DEFUN
 (
£nd_li„time_m⁄th_day_day_m⁄th
,

736 
£nd_li„time_m⁄th_day_day_m⁄th_cmd
,

748 
key
 *
	gkey
;

750 
	gkey
 = 
vty
->
ödex_sub
;

752  
key_li„time_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[2],árgv[1],árgv[3],

753 
¨gv
[4],árgv[5],árgv[6],árgv[7]);

756 
DEFUN
 (
£nd_li„time_m⁄th_day_m⁄th_day
,

757 
£nd_li„time_m⁄th_day_m⁄th_day_cmd
,

769 
key
 *
	gkey
;

771 
	gkey
 = 
vty
->
ödex_sub
;

773  
key_li„time_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[2],árgv[1],árgv[3],

774 
¨gv
[4],árgv[6],árgv[5],árgv[7]);

777 
DEFUN
 (
£nd_li„time_öföôe_day_m⁄th
,

778 
£nd_li„time_öföôe_day_m⁄th_cmd
,

787 
key
 *
	gkey
;

789 
	gkey
 = 
vty
->
ödex_sub
;

791  
key_li„time_öföôe_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[1],árgv[2],

792 
¨gv
[3]);

795 
DEFUN
 (
£nd_li„time_öföôe_m⁄th_day
,

796 
£nd_li„time_öföôe_m⁄th_day_cmd
,

805 
key
 *
	gkey
;

807 
	gkey
 = 
vty
->
ödex_sub
;

809  
key_li„time_öföôe_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[2],árgv[1],

810 
¨gv
[3]);

813 
DEFUN
 (
£nd_li„time_duøti⁄_day_m⁄th
,

814 
£nd_li„time_duøti⁄_day_m⁄th_cmd
,

824 
key
 *
	gkey
;

826 
	gkey
 = 
vty
->
ödex_sub
;

828  
key_li„time_duøti⁄_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[1],árgv[2],

829 
¨gv
[3],árgv[4]);

832 
DEFUN
 (
£nd_li„time_duøti⁄_m⁄th_day
,

833 
£nd_li„time_duøti⁄_m⁄th_day_cmd
,

843 
key
 *
	gkey
;

845 
	gkey
 = 
vty
->
ödex_sub
;

847  
key_li„time_duøti⁄_£t
 (
vty
, &
key
->
£nd
, 
¨gv
[0],árgv[2],árgv[1],

848 
¨gv
[3],árgv[4]);

851 
cmd_node
 
	gkeychaö_node
 =

853 
KEYCHAIN_NODE
,

858 
cmd_node
 
	gkeychaö_key_node
 =

860 
KEYCHAIN_KEY_NODE
,

866 
	$keychaö_°r·ime
 (*
buf
, 
bufsiz
, 
time_t
 *
time
)

868 
tm
 *tm;

869 
size_t
 
Àn
;

871 
tm
 = 
	`loˇ…ime
 (
time
);

873 
Àn
 = 
	`°r·ime
 (
buf
, 
bufsiz
, "%T %b %d %Y", 
tm
);

875  
Àn
;

876 
	}
}

879 
	$keychaö_c⁄fig_wrôe
 (
vty
 *vty)

881 
keychaö
 *keychain;

882 
key
 *key;

883 
li°node
 *
node
;

884 
li°node
 *
knode
;

885 
buf
[
BUFSIZ
];

887 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö_li°
, 
node
, 
keychaö
))

889 
	`vty_out
 (
vty
, "key chaö %s%s", 
keychaö
->
«me
, 
VTY_NEWLINE
);

891 
	`ALL_LIST_ELEMENTS_RO
 (
keychaö
->
key
, 
knode
, key))

893 
	`vty_out
 (
vty
, " key %d%s", 
key
->
ödex
, 
VTY_NEWLINE
);

895 i‡(
key
->
°rög
)

896 
	`vty_out
 (
vty
, " key-°rög %s%s", 
key
->
°rög
, 
VTY_NEWLINE
);

898 i‡(
key
->
ac˚±
.
°¨t
)

900 
	`keychaö_°r·ime
 (
buf
, 
BUFSIZ
, &
key
->
ac˚±
.
°¨t
);

901 
	`vty_out
 (
vty
, "ác˚±-li„timê%s", 
buf
);

903 i‡(
key
->
ac˚±
.
íd
 == -1)

904 
	`vty_out
 (
vty
, " infinite");

905 i‡(
key
->
ac˚±
.
duøti⁄
)

906 
	`vty_out
 (
vty
, " duration %ld",

907 ()(
key
->
ac˚±
.
íd
 - key->ac˚±.
°¨t
));

910 
	`keychaö_°r·ime
 (
buf
, 
BUFSIZ
, &
key
->
ac˚±
.
íd
);

911 
	`vty_out
 (
vty
, " %s", 
buf
);

913 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

916 i‡(
key
->
£nd
.
°¨t
)

918 
	`keychaö_°r·ime
 (
buf
, 
BUFSIZ
, &
key
->
£nd
.
°¨t
);

919 
	`vty_out
 (
vty
, " síd-li„timê%s", 
buf
);

921 i‡(
key
->
£nd
.
íd
 == -1)

922 
	`vty_out
 (
vty
, " infinite");

923 i‡(
key
->
£nd
.
duøti⁄
)

924 
	`vty_out
 (
vty
, " duøti⁄ %ld", ()(
key
->
£nd
.
íd
 - key->£nd.
°¨t
));

927 
	`keychaö_°r·ime
 (
buf
, 
BUFSIZ
, &
key
->
£nd
.
íd
);

928 
	`vty_out
 (
vty
, " %s", 
buf
);

930 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

933 
	`vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

937 
	}
}

940 
	$keychaö_öô
 ()

942 
keychaö_li°
 = 
	`li°_√w
 ();

944 
	`ö°Æl_node
 (&
keychaö_node
, 
keychaö_c⁄fig_wrôe
);

945 
	`ö°Æl_node
 (&
keychaö_key_node
, 
NULL
);

947 
	`ö°Æl_deÁu…
 (
KEYCHAIN_NODE
);

948 
	`ö°Æl_deÁu…
 (
KEYCHAIN_KEY_NODE
);

950 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
key_chaö_cmd
);

951 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_key_chaö_cmd
);

952 
	`ö°Æl_ñemít
 (
KEYCHAIN_NODE
, &
key_cmd
);

953 
	`ö°Æl_ñemít
 (
KEYCHAIN_NODE
, &
no_key_cmd
);

955 
	`ö°Æl_ñemít
 (
KEYCHAIN_NODE
, &
key_chaö_cmd
);

956 
	`ö°Æl_ñemít
 (
KEYCHAIN_NODE
, &
no_key_chaö_cmd
);

958 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
key_°rög_cmd
);

959 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
no_key_°rög_cmd
);

961 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
key_chaö_cmd
);

962 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
no_key_chaö_cmd
);

964 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
key_cmd
);

965 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
no_key_cmd
);

967 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_day_m⁄th_day_m⁄th_cmd
);

968 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_day_m⁄th_m⁄th_day_cmd
);

969 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_m⁄th_day_day_m⁄th_cmd
);

970 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_m⁄th_day_m⁄th_day_cmd
);

971 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_öföôe_day_m⁄th_cmd
);

972 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_öföôe_m⁄th_day_cmd
);

973 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_duøti⁄_day_m⁄th_cmd
);

974 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
ac˚±_li„time_duøti⁄_m⁄th_day_cmd
);

976 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_day_m⁄th_day_m⁄th_cmd
);

977 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_day_m⁄th_m⁄th_day_cmd
);

978 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_m⁄th_day_day_m⁄th_cmd
);

979 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_m⁄th_day_m⁄th_day_cmd
);

980 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_öföôe_day_m⁄th_cmd
);

981 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_öföôe_m⁄th_day_cmd
);

982 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_duøti⁄_day_m⁄th_cmd
);

983 
	`ö°Æl_ñemít
 (
KEYCHAIN_KEY_NODE
, &
£nd_li„time_duøti⁄_m⁄th_day_cmd
);

984 
	}
}

	@common-libs/3rd-party/quagga-lib/src/linklist.c

22 
	~<zebø.h
>

24 
	~"lökli°.h
"

25 
	~"mem‹y.h
"

28 
li°
 *

29 
	$li°_√w
 ()

31  
	`XCALLOC
 (
MTYPE_LINK_LIST
,  (
li°
));

32 
	}
}

36 
	$li°_‰ì
 (
li°
 *
l
)

38 
	`XFREE
 (
MTYPE_LINK_LIST
, 
l
);

39 
	}
}

42 
li°node
 *

43 
	$li°node_√w
 ()

45  
	`XCALLOC
 (
MTYPE_LINK_NODE
,  (
li°node
));

46 
	}
}

50 
	$li°node_‰ì
 (
li°node
 *
node
)

52 
	`XFREE
 (
MTYPE_LINK_NODE
, 
node
);

53 
	}
}

57 
	$li°node_add
 (
li°
 *li°, *
vÆ
)

59 
li°node
 *
node
;

61 
	`as£π
 (
vÆ
 !
NULL
);

63 
node
 = 
	`li°node_√w
 ();

65 
node
->
¥ev
 = 
li°
->
èû
;

66 
node
->
d©a
 = 
vÆ
;

68 i‡(
li°
->
hód
 =
NULL
)

69 
li°
->
hód
 = 
node
;

71 
li°
->
èû
->
√xt
 = 
node
;

72 
li°
->
èû
 = 
node
;

74 
li°
->
cou¡
++;

75 
	}
}

84 
	$li°node_add_s‹t
 (
li°
 *li°, *
vÆ
)

86 
li°node
 *
n
;

87 
li°node
 *
√w
;

89 
	`as£π
 (
vÆ
 !
NULL
);

91 
√w
 = 
	`li°node_√w
 ();

92 
√w
->
d©a
 = 
vÆ
;

94 i‡(
li°
->
cmp
)

96 
n
 = 
li°
->
hód
;Ç;Ç =Ç->
√xt
)

98 i‡((*
li°
->
cmp
Ë(
vÆ
, 
n
->
d©a
) < 0)

100 
√w
->
√xt
 = 
n
;

101 
√w
->
¥ev
 = 
n
->prev;

103 i‡(
n
->
¥ev
)

104 
n
->
¥ev
->
√xt
 = 
√w
;

106 
li°
->
hód
 = 
√w
;

107 
n
->
¥ev
 = 
√w
;

108 
li°
->
cou¡
++;

114 
√w
->
¥ev
 = 
li°
->
èû
;

116 i‡(
li°
->
èû
)

117 
li°
->
èû
->
√xt
 = 
√w
;

119 
li°
->
hód
 = 
√w
;

121 
li°
->
èû
 = 
√w
;

122 
li°
->
cou¡
++;

123 
	}
}

126 
	$li°node_add_a·î
 (
li°
 *li°, 
li°node
 *
µ
, *
vÆ
)

128 
li°node
 *
¬
;

130 
	`as£π
 (
vÆ
 !
NULL
);

132 
¬
 = 
	`li°node_√w
 ();

133 
¬
->
d©a
 = 
vÆ
;

135 i‡(
µ
 =
NULL
)

137 i‡(
li°
->
hód
)

138 
li°
->
hód
->
¥ev
 = 
¬
;

140 
li°
->
èû
 = 
¬
;

142 
¬
->
√xt
 = 
li°
->
hód
;

143 
¬
->
¥ev
 = 
µ
;

145 
li°
->
hód
 = 
¬
;

149 i‡(
µ
->
√xt
)

150 
µ
->
√xt
->
¥ev
 = 
¬
;

152 
li°
->
èû
 = 
¬
;

154 
¬
->
√xt
 = 
µ
->next;

155 
¬
->
¥ev
 = 
µ
;

157 
µ
->
√xt
 = 
¬
;

159 
li°
->
cou¡
++;

160 
	}
}

165 
	$li°node_dñëe
 (
li°
 *li°, *
vÆ
)

167 
li°node
 *
node
;

169 
	`as£π
(
li°
);

170 
node
 = 
li°
->
hód
;Çode;Çodênode->
√xt
)

172 i‡(
node
->
d©a
 =
vÆ
)

174 i‡(
node
->
¥ev
)

175 
node
->
¥ev
->
√xt
 =Çode->next;

177 
li°
->
hód
 = 
node
->
√xt
;

179 i‡(
node
->
√xt
)

180 
node
->
√xt
->
¥ev
 =Çode->prev;

182 
li°
->
èû
 = 
node
->
¥ev
;

184 
li°
->
cou¡
--;

185 
	`li°node_‰ì
 (
node
);

189 
	}
}

193 
	$li°node_hód
 (
li°
 *list)

195 
li°node
 *
node
;

197 
	`as£π
(
li°
);

198 
node
 = 
li°
->
hód
;

200 i‡(
node
)

201  
node
->
d©a
;

202  
NULL
;

203 
	}
}

207 
	$li°_dñëe_Æl_node
 (
li°
 *list)

209 
li°node
 *
node
;

210 
li°node
 *
√xt
;

212 
	`as£π
(
li°
);

213 
node
 = 
li°
->
hód
;Çode;Çodê
√xt
)

215 
√xt
 = 
node
->next;

216 i‡(
li°
->
dñ
)

217 (*
li°
->
dñ
Ë(
node
->
d©a
);

218 
	`li°node_‰ì
 (
node
);

220 
li°
->
hód
 =Üi°->
èû
 = 
NULL
;

221 
li°
->
cou¡
 = 0;

222 
	}
}

226 
	$li°_dñëe
 (
li°
 *list)

228 
	`as£π
(
li°
);

229 
	`li°_dñëe_Æl_node
 (
li°
);

230 
	`li°_‰ì
 (
li°
);

231 
	}
}

234 
li°node
 *

235 
	$li°node_lookup
 (
li°
 *li°, *
d©a
)

237 
li°node
 *
node
;

239 
	`as£π
(
li°
);

240 
node
 = 
	`li°hód
(
li°
);Çode;Çodê
	`li°√xäode
 (node))

241 i‡(
d©a
 =
	`li°gëd©a
 (
node
))

242  
node
;

243  
NULL
;

244 
	}
}

248 
	$li°_dñëe_node
 (
li°
 *li°, 
li°node
 *
node
)

250 i‡(
node
->
¥ev
)

251 
node
->
¥ev
->
√xt
 =Çode->next;

253 
li°
->
hód
 = 
node
->
√xt
;

254 i‡(
node
->
√xt
)

255 
node
->
√xt
->
¥ev
 =Çode->prev;

257 
li°
->
èû
 = 
node
->
¥ev
;

258 
li°
->
cou¡
--;

259 
	`li°node_‰ì
 (
node
);

260 
	}
}

264 
	$li°_add_node_¥ev
 (
li°
 *li°, 
li°node
 *
cuºít
, *
vÆ
)

266 
li°node
 *
node
;

268 
	`as£π
 (
vÆ
 !
NULL
);

270 
node
 = 
	`li°node_√w
 ();

271 
node
->
√xt
 = 
cuºít
;

272 
node
->
d©a
 = 
vÆ
;

274 i‡(
cuºít
->
¥ev
 =
NULL
)

275 
li°
->
hód
 = 
node
;

277 
cuºít
->
¥ev
->
√xt
 = 
node
;

279 
node
->
¥ev
 = 
cuºít
->prev;

280 
cuºít
->
¥ev
 = 
node
;

282 
li°
->
cou¡
++;

283 
	}
}

287 
	$li°_add_node_√xt
 (
li°
 *li°, 
li°node
 *
cuºít
, *
vÆ
)

289 
li°node
 *
node
;

291 
	`as£π
 (
vÆ
 !
NULL
);

293 
node
 = 
	`li°node_√w
 ();

294 
node
->
¥ev
 = 
cuºít
;

295 
node
->
d©a
 = 
vÆ
;

297 i‡(
cuºít
->
√xt
 =
NULL
)

298 
li°
->
èû
 = 
node
;

300 
cuºít
->
√xt
->
¥ev
 = 
node
;

302 
node
->
√xt
 = 
cuºít
->next;

303 
cuºít
->
√xt
 = 
node
;

305 
li°
->
cou¡
++;

306 
	}
}

310 
	$li°_add_li°
 (
li°
 *
l
, li° *
m
)

312 
li°node
 *
n
;

314 
n
 = 
	`li°hód
 (
m
);Ç;Ç = 
	`li°√xäode
 (n))

315 
	`li°node_add
 (
l
, 
n
->
d©a
);

316 
	}
}

	@common-libs/3rd-party/quagga-lib/src/log.c

23 
	~<zebø.h
>

25 
	~"log.h
"

26 
	~"mem‹y.h
"

27 
	~"comm™d.h
"

28 #i‚de‡
SUNOS_5


29 
	~<sys/un.h
>

32 #ifde‡
HAVE_UCONTEXT_H


33 
	~<uc⁄ãxt.h
>

36 
	glogfûe_fd
 = -1;

38 
zlog
 *
	gzlog_deÁu…
 = 
NULL
;

40 c⁄° *
	gzlog_¥Ÿo_«mes
[] =

55 
NULL
,

58 c⁄° *
	gzlog_¥i‹ôy
[] =

68 
NULL
,

75 
size_t


76 
	$quagga_time°amp
(
time°amp_¥ecisi⁄
, *
buf
, 
size_t
 
buÊí
)

79 
time_t
 
œ°
;

80 
size_t
 
Àn
;

81 
buf
[28];

82 } 
ˇche
;

83 
timevÆ
 
˛ock
;

86 
	`gëtimeofday
(&
˛ock
, 
NULL
);

89 i‡(
ˇche
.
œ°
 !
˛ock
.
tv_£c
)

91 
tm
 *tm;

92 
ˇche
.
œ°
 = 
˛ock
.
tv_£c
;

93 
tm
 = 
	`loˇ…ime
(&
ˇche
.
œ°
);

94 
ˇche
.
Àn
 = 
	`°r·ime
(ˇche.
buf
, (cache.buf),

95 "%Y/%m/%d %H:%M:%S", 
tm
);

101 i‡(
buÊí
 > 
ˇche
.
Àn
)

103 
	`mem˝y
(
buf
, 
ˇche
.buf, cache.
Àn
);

104 i‡((
time°amp_¥ecisi⁄
 > 0) &&

105 (
buÊí
 > 
ˇche
.
Àn
+1+
time°amp_¥ecisi⁄
))

108 c⁄° 
divis‹
[] = {0, 100000, 10000, 1000, 100, 10, 1};

109 
¥ec
;

110 *
p
 = 
buf
+
ˇche
.
Àn
+1+(
¥ec
 = 
time°amp_¥ecisi⁄
);

111 *
p
-- = '\0';

112 
¥ec
 > 6)

115 *
p
-- = '0';

116 
¥ec
--;

118 
˛ock
.
tv_u£c
 /
divis‹
[
¥ec
];

121 *
p
-- = '0'+(
˛ock
.
tv_u£c
 % 10);

122 
˛ock
.
tv_u£c
 /= 10;

124 --
¥ec
 > 0);

125 *
p
 = '.';

126  
ˇche
.
Àn
+1+
time°amp_¥ecisi⁄
;

128 
buf
[
ˇche
.
Àn
] = '\0';

129  
ˇche
.
Àn
;

131 i‡(
buÊí
 > 0)

132 
buf
[0] = '\0';

134 
	}
}

138 
	$time_¥öt
(
FILE
 *
Â
, 
time°amp_c⁄åﬁ
 *
˘l
)

140 i‡(!
˘l
->
Æªady_ªndîed
)

142 
˘l
->
Àn
 = 
	`quagga_time°amp
(˘l->
¥ecisi⁄
, cé->
buf
, (ctl->buf));

143 
˘l
->
Æªady_ªndîed
 = 1;

145 
	`Ârötf
(
Â
, "%†", 
˘l
->
buf
);

146 
	}
}

151 
	$vzlog
 (
zlog
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

153 
time°amp_c⁄åﬁ
 
ts˘l
;

154 
ts˘l
.
Æªady_ªndîed
 = 0;

157 i‡(
zl
 =
NULL
)

158 
zl
 = 
zlog_deÁu…
;

161 i‡(
zl
 =
NULL
)

163 
ts˘l
.
¥ecisi⁄
 = 0;

164 
	`time_¥öt
(
°dîr
, &
ts˘l
);

165 
	`Ârötf
 (
°dîr
, "%s: ", "unknown");

166 
	`vÂrötf
 (
°dîr
, 
f‹m©
, 
¨gs
);

167 
	`Ârötf
 (
°dîr
, "\n");

168 
	`fÊush
 (
°dîr
);

173 
ts˘l
.
¥ecisi⁄
 = 
zl
->
time°amp_¥ecisi⁄
;

176 i‡(
¥i‹ôy
 <
zl
->
maxlvl
[
ZLOG_DEST_SYSLOG
])

178 
va_li°
 
ac
;

179 
	`va_c›y
(
ac
, 
¨gs
);

180 
	`vsy¶og
 (
¥i‹ôy
|
zlog_deÁu…
->
Ácûôy
, 
f‹m©
, 
ac
);

181 
	`va_íd
(
ac
);

185 i‡((
¥i‹ôy
 <
zl
->
maxlvl
[
ZLOG_DEST_FILE
]Ë&& zl->
Â
)

187 
va_li°
 
ac
;

188 
	`time_¥öt
 (
zl
->
Â
, &
ts˘l
);

189 i‡(
zl
->
ªc‹d_¥i‹ôy
)

190 
	`Ârötf
 (
zl
->
Â
, "%s: ", 
zlog_¥i‹ôy
[
¥i‹ôy
]);

191 
	`Ârötf
 (
zl
->
Â
, "%s: ", 
zlog_¥Ÿo_«mes
[zl->
¥Ÿocﬁ
]);

192 
	`va_c›y
(
ac
, 
¨gs
);

193 
	`vÂrötf
 (
zl
->
Â
, 
f‹m©
, 
ac
);

194 
	`va_íd
(
ac
);

195 
	`Ârötf
 (
zl
->
Â
, "\n");

196 
	`fÊush
 (
zl
->
Â
);

200 i‡(
¥i‹ôy
 <
zl
->
maxlvl
[
ZLOG_DEST_STDOUT
])

202 
va_li°
 
ac
;

203 
	`time_¥öt
 (
°dout
, &
ts˘l
);

204 i‡(
zl
->
ªc‹d_¥i‹ôy
)

205 
	`Ârötf
 (
°dout
, "%s: ", 
zlog_¥i‹ôy
[
¥i‹ôy
]);

206 
	`Ârötf
 (
°dout
, "%s: ", 
zlog_¥Ÿo_«mes
[
zl
->
¥Ÿocﬁ
]);

207 
	`va_c›y
(
ac
, 
¨gs
);

208 
	`vÂrötf
 (
°dout
, 
f‹m©
, 
ac
);

209 
	`va_íd
(
ac
);

210 
	`Ârötf
 (
°dout
, "\n");

211 
	`fÊush
 (
°dout
);

215 i‡(
¥i‹ôy
 <
zl
->
maxlvl
[
ZLOG_DEST_MONITOR
])

216 
	`vty_log
 ((
zl
->
ªc‹d_¥i‹ôy
 ? 
zlog_¥i‹ôy
[
¥i‹ôy
] : 
NULL
),

217 
zlog_¥Ÿo_«mes
[
zl
->
¥Ÿocﬁ
], 
f‹m©
, &
ts˘l
, 
¨gs
);

218 
	}
}

221 
	$°r_≠≥nd
(*
d°
, 
Àn
, c⁄° *
§c
)

223 (
Àn
-- > 0Ë&& *
§c
)

224 *
d°
++ = *
§c
++;

225  
d°
;

226 
	}
}

229 
	$num_≠≥nd
(*
s
, 
Àn
, 
u_l⁄g
 
x
)

231 
buf
[30];

232 *
t
;

234 i‡(!
x
)

235  
	`°r_≠≥nd
(
s
,
Àn
,"0");

236 *(
t
 = &
buf
[(buf)-1]) = '\0';

237 
x
 && (
t
 > 
buf
))

239 *--
t
 = '0'+(
x
 % 10);

240 
x
 /= 10;

242  
	`°r_≠≥nd
(
s
,
Àn
,
t
);

243 
	}
}

245 #i‡
deföed
(
SA_SIGINFO
Ë|| deföed(
HAVE_STACK_TRACE
)

247 
	$hex_≠≥nd
(*
s
, 
Àn
, 
u_l⁄g
 
x
)

249 
buf
[30];

250 *
t
;

252 i‡(!
x
)

253  
	`°r_≠≥nd
(
s
,
Àn
,"0");

254 *(
t
 = &
buf
[(buf)-1]) = '\0';

255 
x
 && (
t
 > 
buf
))

257 
u_öt
 
cc
 = (
x
 % 16);

258 *--
t
 = ((
cc
 < 10) ? ('0'+cc) : ('a'+cc-10));

259 
x
 /= 16;

261  
	`°r_≠≥nd
(
s
,
Àn
,
t
);

262 
	}
}

267 
	$sy¶og_c⁄√˘
()

269 #ifde‡
SUNOS_5


272 
fd
;

273 *
s
;

274 
sockaddr_un
 
addr
;

276 i‡((
fd
 = 
	`sockë
(
AF_UNIX
,
SOCK_DGRAM
,0)) < 0)

278 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

279 #ifde‡
_PATH_LOG


280 
	#SYSLOG_SOCKET_PATH
 
_PATH_LOG


	)

282 
	#SYSLOG_SOCKET_PATH
 "/dev/log"

	)

284 
s
 = 
	`°r_≠≥nd
(
addr
.
sun_∑th
,◊ddr.sun_∑th),
SYSLOG_SOCKET_PATH
);

285 #unde‡
SYSLOG_SOCKET_PATH


286 *
s
 = '\0';

287 i‡(
	`c⁄√˘
(
fd
,(
sockaddr
 *)&
addr
,(addr)) < 0)

289 
	`˛o£
(
fd
);

292  
fd
;

294 
	}
}

297 
	$sy¶og_sigß„
(
¥i‹ôy
, c⁄° *
msg
, 
size_t
 
msgÀn
)

299 
sy¶og_fd
 = -1;

300 
buf
[("<1234567890>rùngd[1234567890]: ")+
msgÀn
+50];

301 *
s
;

303 i‡((
sy¶og_fd
 < 0Ë&& ((sy¶og_fd = 
	`sy¶og_c⁄√˘
()) < 0))

306 
	#LOC
 
s
,
buf
+(buf)-
	)
s

307 
s
 = 
buf
;

308 
s
 = 
	`°r_≠≥nd
(
LOC
,"<");

309 
s
 = 
	`num_≠≥nd
(
LOC
,
¥i‹ôy
);

310 
s
 = 
	`°r_≠≥nd
(
LOC
,">");

312 
s
 = 
	`°r_≠≥nd
(
LOC
,
zlog_deÁu…
->
idít
);

313 i‡(
zlog_deÁu…
->
sy¶og_›ti⁄s
 & 
LOG_PID
)

315 
s
 = 
	`°r_≠≥nd
(
LOC
,"[");

316 
s
 = 
	`num_≠≥nd
(
LOC
,
	`gëpid
());

317 
s
 = 
	`°r_≠≥nd
(
LOC
,"]");

319 
s
 = 
	`°r_≠≥nd
(
LOC
,": ");

320 
s
 = 
	`°r_≠≥nd
(
LOC
,
msg
);

321 
	`wrôe
(
sy¶og_fd
,
buf
,
s
-buf);

322 #unde‡
LOC


323 
	}
}

326 
	$›í_¸ashlog
()

328 
	#CRASHLOG_PREFIX
 "/v¨/tmp/quagga."

	)

329 
	#CRASHLOG_SUFFIX
 "¸ashlog"

	)

330 i‡(
zlog_deÁu…
 && zlog_deÁu…->
idít
)

333 c⁄° *
p
;

334 
size_t
 
ûí
;

336 
p
 = 
zlog_deÁu…
->
idít
, 
ûí
 = 0; *p;Ö++)

337 
ûí
++;

339 
buf
[(
CRASHLOG_PREFIX
)+
ûí
+(
CRASHLOG_SUFFIX
)+3];

340 *
s
 = 
buf
;

341 
	#LOC
 
s
,
buf
+(buf)-
	)
s

342 
s
 = 
	`°r_≠≥nd
(
LOC
, 
CRASHLOG_PREFIX
);

343 
s
 = 
	`°r_≠≥nd
(
LOC
, 
zlog_deÁu…
->
idít
);

344 
s
 = 
	`°r_≠≥nd
(
LOC
, ".");

345 
s
 = 
	`°r_≠≥nd
(
LOC
, 
CRASHLOG_SUFFIX
);

346 #unde‡
LOC


347 *
s
 = '\0';

348  
	`›í
(
buf
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 
LOGFILE_MASK
);

351  
	`›í
(
CRASHLOG_PREFIX
 
CRASHLOG_SUFFIX
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
,

352 
LOGFILE_MASK
);

353 #unde‡
CRASHLOG_SUFFIX


354 #unde‡
CRASHLOG_PREFIX


355 
	}
}

359 
zlog_sig«l
(
signo
, c⁄° *
a˘i⁄


360 #ifde‡
SA_SIGINFO


361 , 
sigöfo_t
 *
sigöfo
, *
¥ogøm_cou¡î


365 
time_t
 
	gnow
;

366 
	gbuf
[("DEFAULT: Received signal Sát T (si_addr 0xP, PC 0xP);áborting...")+100];

367 *
	gs
 = 
buf
;

368 *
	gmsg°¨t
 = 
buf
;

369 
	#LOC
 
s
,
buf
+(buf)-
	)
s

371 
time
(&
now
);

372 i‡(
	gzlog_deÁu…
)

374 
	gs
 = 
°r_≠≥nd
(
LOC
,
zlog_¥Ÿo_«mes
[
zlog_deÁu…
->
¥Ÿocﬁ
]);

375 *
	gs
++ = ':';

376 *
	gs
++ = ' ';

377 
	gmsg°¨t
 = 
s
;

379 
	gs
 = 
°r_≠≥nd
(
LOC
,"Received signal ");

380 
	gs
 = 
num_≠≥nd
(
LOC
,
signo
);

381 
	gs
 = 
°r_≠≥nd
(
LOC
,"át ");

382 
	gs
 = 
num_≠≥nd
(
LOC
,
now
);

383 #ifde‡
SA_SIGINFO


384 
	gs
 = 
°r_≠≥nd
(
LOC
," (si_addr 0x");

385 
	gs
 = 
hex_≠≥nd
(
LOC
,(
u_l⁄g
)(
sigöfo
->
si_addr
));

386 i‡(
	g¥ogøm_cou¡î
)

388 
	gs
 = 
°r_≠≥nd
(
LOC
,", PC 0x");

389 
	gs
 = 
hex_≠≥nd
(
LOC
,(
u_l⁄g
)
¥ogøm_cou¡î
);

391 
	gs
 = 
°r_≠≥nd
(
LOC
,"); ");

393 
	gs
 = 
°r_≠≥nd
(
LOC
,"; ");

395 
	gs
 = 
°r_≠≥nd
(
LOC
,
a˘i⁄
);

396 i‡(
	gs
 < 
	gbuf
+(buf))

397 *
	gs
++ = '\n';

400 
	#PRI
 
LOG_CRIT


	)

402 
	#DUMP
(
FD
Ë
	`wrôe
(FD, 
buf
, 
s
-buf);

	)

404 i‡((
	glogfûe_fd
 >0Ë|| ((
logfûe_fd
 = 
›í_¸ashlog
()) >= 0))

405 
DUMP
(
logfûe_fd
)

406 i‡(!
zlog_deÁu…
)

407 
DUMP
(
STDERR_FILENO
)

410 i‡(
PRI
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_STDOUT
])

411 
DUMP
(
STDOUT_FILENO
)

413 *--
s
 = '\0';

414 i‡(
	gPRI
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
])

415 
vty_log_fixed
(
buf
,
s
-buf);

416 i‡(
	gPRI
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
])

417 
sy¶og_sigß„
(
PRI
|
zlog_deÁu…
->
Ácûôy
,
msg°¨t
,
s
-msgstart);

419 #unde‡
DUMP


421 
zlog_backåa˚_sigß„
(
PRI
,

422 #ifde‡
SA_SIGINFO


423 
¥ogøm_cou¡î


425 
NULL


428 #unde‡
PRI


429 #unde‡
LOC


435 
	$zlog_backåa˚_sigß„
(
¥i‹ôy
, *
¥ogøm_cou¡î
)

437 #ifde‡
HAVE_STACK_TRACE


438 c⁄° 
p˛abñ
[] = "Program counter: ";

439 *
¨øy
[64];

440 
size
;

441 
buf
[100];

442 *
s
, **
bt
 = 
NULL
;

443 
	#LOC
 
s
,
buf
+(buf)-
	)
s

445 #ifde‡
HAVE_GLIBC_BACKTRACE


446 i‡(((
size
 = 
	`backåa˚
(
¨øy
,(array)/(array[0]))) <= 0) ||

447 ((
size_t
)
size
 > (
¨øy
)/(array[0])))

450 
	#DUMP
(
FD
) { \

451 i‡(
¥ogøm_cou¡î
) \

453 
	`wrôe
(
FD
, 
p˛abñ
, (pclabel)-1); \

454 
	`backåa˚_symbﬁs_fd
(&
¥ogøm_cou¡î
, 1, 
FD
); \

456 
	`wrôe
(
FD
, 
buf
, 
s
-buf); \

457 
	`backåa˚_symbﬁs_fd
(
¨øy
, 
size
, 
FD
); \

458 }

	)

459 #ñi‡
	`deföed
(
HAVE_PRINTSTACK
)

460 
	#DUMP
(
FD
) { \

461 i‡(
¥ogøm_cou¡î
) \

462 
	`wrôe
((
FD
), 
p˛abñ
, (pclabel)-1); \

463 
	`wrôe
((
FD
), 
buf
, 
s
-buf); \

464 
	`¥öt°ack
((
FD
)); \

465 }

	)

468 
s
 = 
buf
;

469 
s
 = 
	`°r_≠≥nd
(
LOC
,"Backtrace for ");

470 
s
 = 
	`num_≠≥nd
(
LOC
,
size
);

471 
s
 = 
	`°r_≠≥nd
(
LOC
," stack frames:\n");

473 i‡((
logfûe_fd
 >0Ë|| (÷ogfûe_fd = 
	`›í_¸ashlog
()) >= 0))

474 
	`DUMP
(
logfûe_fd
)

475 i‡(!
zlog_deÁu…
)

476 
	`DUMP
(
STDERR_FILENO
)

479 i‡(
¥i‹ôy
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_STDOUT
])

480 
	`DUMP
(
STDOUT_FILENO
)

482 *--
s
 = '\0';

483 i‡(
¥i‹ôy
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
])

484 
	`vty_log_fixed
(
buf
,
s
-buf);

485 i‡(
¥i‹ôy
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
])

486 
	`sy¶og_sigß„
(
¥i‹ôy
|
zlog_deÁu…
->
Ácûôy
,
buf
,
s
-buf);

488 
i
;

489 #ifde‡
HAVE_GLIBC_BACKTRACE


490 
bt
 = 
	`backåa˚_symbﬁs
(
¨øy
, 
size
);

493 
i
 = 0; i < 
size
; i++)

495 
s
 = 
buf
;

496 i‡(
bt
)

497 
s
 = 
	`°r_≠≥nd
(
LOC
, 
bt
[
i
]);

499 
s
 = 
	`°r_≠≥nd
(
LOC
,"[bt ");

500 
s
 = 
	`num_≠≥nd
(
LOC
,
i
);

501 
s
 = 
	`°r_≠≥nd
(
LOC
,"] 0x");

502 
s
 = 
	`hex_≠≥nd
(
LOC
,(
u_l⁄g
)(
¨øy
[
i
]));

504 *
s
 = '\0';

505 i‡(
¥i‹ôy
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_MONITOR
])

506 
	`vty_log_fixed
(
buf
,
s
-buf);

507 i‡(
¥i‹ôy
 <
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_SYSLOG
])

508 
	`sy¶og_sigß„
(
¥i‹ôy
|
zlog_deÁu…
->
Ácûôy
,
buf
,
s
-buf);

510 i‡(
bt
)

511 
	`‰ì
(
bt
);

514 #unde‡
DUMP


515 #unde‡
LOC


517 
	}
}

520 
	$zlog_backåa˚
(
¥i‹ôy
)

522 #i‚de‡
HAVE_GLIBC_BACKTRACE


523 
	`zlog
(
NULL
, 
¥i‹ôy
, "No backtraceávailable onÅhisÖlatform.");

525 *
¨øy
[20];

526 
size
, 
i
;

527 **
°rögs
;

529 i‡(((
size
 = 
	`backåa˚
(
¨øy
,(array)/(array[0]))) <= 0) ||

530 ((
size_t
)
size
 > (
¨øy
)/(array[0])))

532 
	`zlog_îr
("Cannot get backtrace,Ñeturned invalid # of frames %d "

534 
size
, ()((
¨øy
)/(array[0])));

537 
	`zlog
(
NULL
, 
¥i‹ôy
, "Backåa˚ f‹ %d sèck fømes:", 
size
);

538 i‡(!(
°rögs
 = 
	`backåa˚_symbﬁs
(
¨øy
, 
size
)))

540 
	`zlog_îr
("Cannot get backtrace symbols (out of memory?)");

541 
i
 = 0; i < 
size
; i++)

542 
	`zlog
(
NULL
, 
¥i‹ôy
, "[bà%d] %p",
i
,
¨øy
[i]);

546 
i
 = 0; i < 
size
; i++)

547 
	`zlog
(
NULL
, 
¥i‹ôy
, "[bà%d] %s",
i
,
°rögs
[i]);

548 
	`‰ì
(
°rögs
);

551 
	}
}

554 
	$zlog
 (
zlog
 *
zl
, 
¥i‹ôy
, c⁄° *
f‹m©
, ...)

556 
va_li°
 
¨gs
;

558 
	`va_°¨t
(
¨gs
, 
f‹m©
);

559 
	`vzlog
 (
zl
, 
¥i‹ôy
, 
f‹m©
, 
¨gs
);

560 
	`va_íd
 (
¨gs
);

561 
	}
}

563 
	#ZLOG_FUNC
(
FUNCNAME
,
PRIORITY
) \

565 
	`FUNCNAME
(c⁄° *
f‹m©
, ...) \

567 
va_li°
 
¨gs
; \

568 
	`va_°¨t
(
¨gs
, 
f‹m©
); \

569 
	`vzlog
 (
NULL
, 
PRIORITY
, 
f‹m©
, 
¨gs
); \

570 
	`va_íd
(
¨gs
); \

571 }

	)

573 
	$ZLOG_FUNC
(
zlog_îr
, 
LOG_ERR
)

575 
	$ZLOG_FUNC
(
zlog_w¨n
, 
LOG_WARNING
)

577 
	$ZLOG_FUNC
(
zlog_öfo
, 
LOG_INFO
)

579 
	$ZLOG_FUNC
(
zlog_nŸi˚
, 
LOG_NOTICE
)

581 
	$ZLOG_FUNC
(
zlog_debug
, 
LOG_DEBUG
)

583 #unde‡
ZLOG_FUNC


585 
	#PLOG_FUNC
(
FUNCNAME
,
PRIORITY
) \

587 
	`FUNCNAME
(
zlog
 *
zl
, c⁄° *
f‹m©
, ...) \

589 
va_li°
 
¨gs
; \

590 
	`va_°¨t
(
¨gs
, 
f‹m©
); \

591 
	`vzlog
 (
zl
, 
PRIORITY
, 
f‹m©
, 
¨gs
); \

592 
	`va_íd
(
¨gs
); \

593 
	}

	)
}

595 
	$PLOG_FUNC
(
∂og_îr
, 
LOG_ERR
)

597 
	$PLOG_FUNC
(
∂og_w¨n
, 
LOG_WARNING
)

599 
	$PLOG_FUNC
(
∂og_öfo
, 
LOG_INFO
)

601 
	$PLOG_FUNC
(
∂og_nŸi˚
, 
LOG_NOTICE
)

603 
	$PLOG_FUNC
(
∂og_debug
, 
LOG_DEBUG
)

605 #unde‡
PLOG_FUNC


608 
	$_zlog_as£π_Áûed
 (c⁄° *
as£πi⁄
, c⁄° *
fûe
,

609 
löe
, c⁄° *
fun˘i⁄
)

612 i‡(
zlog_deÁu…
 && !zlog_deÁu…->
Â
 &&

613 ((
logfûe_fd
 = 
	`›í_¸ashlog
()) >= 0) &&

614 ((
zlog_deÁu…
->
Â
 = 
	`fd›í
(
logfûe_fd
, "w")Ë!
NULL
))

615 
zlog_deÁu…
->
maxlvl
[
ZLOG_DEST_FILE
] = 
LOG_ERR
;

616 
	`zlog
(
NULL
, 
LOG_CRIT
, "Assertion `%s' failed in file %s,Üine %u, function %s",

617 
as£πi⁄
,
fûe
,
löe
,(
fun˘i⁄
 ? function : "?"));

618 
	`zlog_backåa˚
(
LOG_CRIT
);

619 
	`ab‹t
();

620 
	}
}

624 
zlog
 *

625 
	$›ízlog
 (c⁄° *
¥og«me
, 
zlog_¥Ÿo_t
 
¥Ÿocﬁ
,

626 
sy¶og_Êags
, 
sy¶og_Ácûôy
)

628 
zlog
 *
zl
;

629 
u_öt
 
i
;

631 
zl
 = 
	`XCALLOC
(
MTYPE_ZLOG
,  (
zlog
));

633 
zl
->
idít
 = 
¥og«me
;

634 
zl
->
¥Ÿocﬁ
 =Örotocol;

635 
zl
->
Ácûôy
 = 
sy¶og_Ácûôy
;

636 
zl
->
sy¶og_›ti⁄s
 = 
sy¶og_Êags
;

639 
i
 = 0; i < (
zl
->
maxlvl
)/(zl->maxlvl[0]); i++)

640 
zl
->
maxlvl
[
i
] = 
ZLOG_DISABLED
;

641 
zl
->
maxlvl
[
ZLOG_DEST_MONITOR
] = 
LOG_DEBUG
;

642 
zl
->
deÁu…_lvl
 = 
LOG_DEBUG
;

644 
	`›ílog
 (
¥og«me
, 
sy¶og_Êags
, 
zl
->
Ácûôy
);

646  
zl
;

647 
	}
}

650 
	$˛o£zlog
 (
zlog
 *
zl
)

652 
	`˛o£log
();

654 i‡(
zl
->
Â
 !
NULL
)

655 
	`f˛o£
 (
zl
->
Â
);

657 i‡(
zl
->
fûíame
 !
NULL
)

658 
	`‰ì
 (
zl
->
fûíame
);

660 
	`XFREE
 (
MTYPE_ZLOG
, 
zl
);

661 
	}
}

665 
	$zlog_£t_Àvñ
 (
zlog
 *
zl
, 
zlog_de°_t
 
de°
, 
log_Àvñ
)

667 i‡(
zl
 =
NULL
)

668 
zl
 = 
zlog_deÁu…
;

670 
zl
->
maxlvl
[
de°
] = 
log_Àvñ
;

671 
	}
}

674 
	$zlog_£t_fûe
 (
zlog
 *
zl
, c⁄° *
fûíame
, 
log_Àvñ
)

676 
FILE
 *
Â
;

677 
mode_t
 
ﬁdumask
;

680 
	`zlog_ª£t_fûe
 (
zl
);

683 i‡(
zl
 =
NULL
)

684 
zl
 = 
zlog_deÁu…
;

687 
ﬁdumask
 = 
	`umask
 (0777 & ~
LOGFILE_MASK
);

688 
Â
 = 
	`f›í
 (
fûíame
, "a");

689 
	`umask
(
ﬁdumask
);

690 i‡(
Â
 =
NULL
)

694 
zl
->
fûíame
 = 
	`°rdup
 (filename);

695 
zl
->
maxlvl
[
ZLOG_DEST_FILE
] = 
log_Àvñ
;

696 
zl
->
Â
 = fp;

697 
logfûe_fd
 = 
	`fûío
(
Â
);

700 
	}
}

704 
	$zlog_ª£t_fûe
 (
zlog
 *
zl
)

706 i‡(
zl
 =
NULL
)

707 
zl
 = 
zlog_deÁu…
;

709 i‡(
zl
->
Â
)

710 
	`f˛o£
 (
zl
->
Â
);

711 
zl
->
Â
 = 
NULL
;

712 
logfûe_fd
 = -1;

713 
zl
->
maxlvl
[
ZLOG_DEST_FILE
] = 
ZLOG_DISABLED
;

715 i‡(
zl
->
fûíame
)

716 
	`‰ì
 (
zl
->
fûíame
);

717 
zl
->
fûíame
 = 
NULL
;

720 
	}
}

724 
	$zlog_rŸ©e
 (
zlog
 *
zl
)

726 
Àvñ
;

728 i‡(
zl
 =
NULL
)

729 
zl
 = 
zlog_deÁu…
;

731 i‡(
zl
->
Â
)

732 
	`f˛o£
 (
zl
->
Â
);

733 
zl
->
Â
 = 
NULL
;

734 
logfûe_fd
 = -1;

735 
Àvñ
 = 
zl
->
maxlvl
[
ZLOG_DEST_FILE
];

736 
zl
->
maxlvl
[
ZLOG_DEST_FILE
] = 
ZLOG_DISABLED
;

738 i‡(
zl
->
fûíame
)

740 
mode_t
 
ﬁdumask
;

741 
ßve_î∫o
;

743 
ﬁdumask
 = 
	`umask
 (0777 & ~
LOGFILE_MASK
);

744 
zl
->
Â
 = 
	`f›í
 (zl->
fûíame
, "a");

745 
ßve_î∫o
 = 
î∫o
;

746 
	`umask
(
ﬁdumask
);

747 i‡(
zl
->
Â
 =
NULL
)

749 
	`zlog_îr
("LogÑotate failed: cannot open file %s foráppend: %s",

750 
zl
->
fûíame
, 
	`ß„_°ªº‹
(
ßve_î∫o
));

753 
logfûe_fd
 = 
	`fûío
(
zl
->
Â
);

754 
zl
->
maxlvl
[
ZLOG_DEST_FILE
] = 
Àvñ
;

758 
	}
}

762 
	$lookup
 (c⁄° 
mesßge
 *
mes
, 
key
)

764 c⁄° 
mesßge
 *
≤t
;

766 
≤t
 = 
mes
;Ö¡->
key
 != 0;Önt++)

767 i‡(
≤t
->
key
 == key)

768  
≤t
->
°r
;

771 
	}
}

780 
	$mes_lookup
 (c⁄° 
mesßge
 *
me¶i°
, 
max
, 
ödex
,

781 c⁄° *
n⁄e
, c⁄° *
me¢ame
)

783 
pos
 = 
ödex
 - 
me¶i°
[0].
key
;

790 i‡((
pos
 >0Ë&& (po†< 
max
)

791 && (
me¶i°
[
pos
].
key
 =
ödex
))

792  
me¶i°
[
pos
].
°r
;

796 
i
;

798 
i
 = 0; i < 
max
; i++, 
me¶i°
++)

800 i‡(
me¶i°
->
key
 =
ödex
)

802 c⁄° *
°r
 = (
me¶i°
->°∏? me¶i°->°∏: 
n⁄e
);

804 
	`zlog_debug
 ("message index %d [%s] found in %sátÖosition %d (max is %d)",

805 
ödex
, 
°r
, 
me¢ame
, 
i
, 
max
);

806  
°r
;

810 
	`zlog_îr
("mesßgêödex %dÇŸ found i¿%†(max i†%d)", 
ödex
, 
me¢ame
, 
max
);

811 
	`as£π
 (
n⁄e
);

812  
n⁄e
;

813 
	}
}

817 
	$ß„_°ªº‹
(
î∫um
)

819 c⁄° *
s
 = 
	`°ªº‹
(
î∫um
);

820  (
s
 !
NULL
) ? s : "UnknownÉrror";

821 
	}
}

823 
	szebø_desc_èbÀ


825 
	mty≥
;

826 c⁄° *
	m°rög
;

827 
	mchr
;

830 
	#DESC_ENTRY
(
T
,
S
,
C
Ë[(T)] = { (T), (S), (CË}

	)

831 c⁄° 
zebø_desc_èbÀ
 
	grouã_ty≥s
[] = {

832 
DESC_ENTRY
 (
ZEBRA_ROUTE_SYSTEM
, "system", 'X' ),

833 
DESC_ENTRY
 (
ZEBRA_ROUTE_KERNEL
, "kernel", 'K' ),

834 
DESC_ENTRY
 (
ZEBRA_ROUTE_CONNECT
, "connected", 'C' ),

835 
DESC_ENTRY
 (
ZEBRA_ROUTE_STATIC
, "static", 'S' ),

836 
DESC_ENTRY
 (
ZEBRA_ROUTE_RIP
, "rip", 'R' ),

837 
DESC_ENTRY
 (
ZEBRA_ROUTE_RIPNG
, "ripng", 'R' ),

838 
DESC_ENTRY
 (
ZEBRA_ROUTE_OSPF
, "ospf", 'O' ),

839 
DESC_ENTRY
 (
ZEBRA_ROUTE_OSPF6
, "ospf6", 'O' ),

840 
DESC_ENTRY
 (
ZEBRA_ROUTE_ISIS
, "isis", 'I' ),

841 
DESC_ENTRY
 (
ZEBRA_ROUTE_BGP
, "bgp", 'B' ),

842 
DESC_ENTRY
 (
ZEBRA_ROUTE_HSLS
, "hsls", 'H' ),

844 #unde‡
DESC_ENTRY


846 
	#DESC_ENTRY
(
T
Ë[(T)] = { (T), (#T), '\0' }

	)

847 c⁄° 
zebø_desc_èbÀ
 
	gcomm™d_ty≥s
[] = {

848 
DESC_ENTRY
 (
ZEBRA_INTERFACE_ADD
),

849 
DESC_ENTRY
 (
ZEBRA_INTERFACE_DELETE
),

850 
DESC_ENTRY
 (
ZEBRA_INTERFACE_ADDRESS_ADD
),

851 
DESC_ENTRY
 (
ZEBRA_INTERFACE_ADDRESS_DELETE
),

852 
DESC_ENTRY
 (
ZEBRA_INTERFACE_UP
),

853 
DESC_ENTRY
 (
ZEBRA_INTERFACE_DOWN
),

854 
DESC_ENTRY
 (
ZEBRA_IPV4_ROUTE_ADD
),

855 
DESC_ENTRY
 (
ZEBRA_IPV4_ROUTE_DELETE
),

856 
DESC_ENTRY
 (
ZEBRA_IPV6_ROUTE_ADD
),

857 
DESC_ENTRY
 (
ZEBRA_IPV6_ROUTE_DELETE
),

858 
DESC_ENTRY
 (
ZEBRA_REDISTRIBUTE_ADD
),

859 
DESC_ENTRY
 (
ZEBRA_REDISTRIBUTE_DELETE
),

860 
DESC_ENTRY
 (
ZEBRA_REDISTRIBUTE_DEFAULT_ADD
),

861 
DESC_ENTRY
 (
ZEBRA_REDISTRIBUTE_DEFAULT_DELETE
),

862 
DESC_ENTRY
 (
ZEBRA_IPV4_NEXTHOP_LOOKUP
),

863 
DESC_ENTRY
 (
ZEBRA_IPV6_NEXTHOP_LOOKUP
),

864 
DESC_ENTRY
 (
ZEBRA_IPV4_IMPORT_LOOKUP
),

865 
DESC_ENTRY
 (
ZEBRA_IPV6_IMPORT_LOOKUP
),

866 
DESC_ENTRY
 (
ZEBRA_INTERFACE_RENAME
),

867 
DESC_ENTRY
 (
ZEBRA_ROUTER_ID_ADD
),

868 
DESC_ENTRY
 (
ZEBRA_ROUTER_ID_DELETE
),

869 
DESC_ENTRY
 (
ZEBRA_ROUTER_ID_UPDATE
),

871 #unde‡
DESC_ENTRY


873 c⁄° 
zebø_desc_èbÀ
 
	gunknown
 = { 0, "unknown", '?' };

875 c⁄° 
zebø_desc_èbÀ
 *

876 
	$zrouã_lookup
(
u_öt
 
zrouã
)

878 
u_öt
 
i
;

880 i‡(
zrouã
 >(
rouã_ty≥s
)/(route_types[0]))

882 
	`zlog_îr
("unknow¿zebøÑouãÅy≥: %u", 
zrouã
);

883  &
unknown
;

885 i‡(
zrouã
 =
rouã_ty≥s
[zrouã].
ty≥
)

886  &
rouã_ty≥s
[
zrouã
];

887 
i
 = 0; i < (
rouã_ty≥s
)/(route_types[0]); i++)

889 i‡(
zrouã
 =
rouã_ty≥s
[
i
].
ty≥
)

891 
	`zlog_w¨n
("internalÉrror:ÑouteÅypeÅable out of order "

892 "whûê£¨chög f‹ %u,ÖÀa£ÇŸify devñ›îs", 
zrouã
);

893  &
rouã_ty≥s
[
i
];

896 
	`zlog_îr
("öã∫ÆÉº‹: c™nŸ födÑouãÅy≥ %u i¿èbÀ!", 
zrouã
);

897  &
unknown
;

898 
	}
}

901 
	$zebø_rouã_°rög
(
u_öt
 
zrouã
)

903  
	`zrouã_lookup
(
zrouã
)->
°rög
;

904 
	}
}

907 
	$zebø_rouã_ch¨
(
u_öt
 
zrouã
)

909  
	`zrouã_lookup
(
zrouã
)->
chr
;

910 
	}
}

913 
	$z£rv_comm™d_°rög
 (
comm™d
)

915 i‡(
comm™d
 >(
comm™d_ty≥s
)/(command_types[0]))

917 
	`zlog_îr
 ("unknow¿z£rv comm™dÅy≥: %u", 
comm™d
);

918  
unknown
.
°rög
;

920  
comm™d_ty≥s
[
comm™d
].
°rög
;

921 
	}
}

923 
	#RTSIZE
 ((
rouã_ty≥s
)/‘ouã_ty≥s[0]))

	)

926 
	$¥Ÿo_«me2num
(c⁄° *
s
)

928 
i
;

930 
i
=0; i<
RTSIZE
; ++i)

931 i‡(
	`°rˇ£cmp
(
s
, 
rouã_ty≥s
[
i
].
°rög
) == 0)

932  
rouã_ty≥s
[
i
].
ty≥
;

934 
	}
}

935 #unde‡
RTSIZE


	@common-libs/3rd-party/quagga-lib/src/md5.c

42 
	~<zebø.h
>

43 
	~"md5.h
"

45 
	#SHIFT
(
X
, 
s
Ë(((XË<< (s)Ë| ((XË>> (32 - (s))))

	)

47 
	#F
(
X
, 
Y
, 
Z
Ë(((XË& (Y)Ë| ((~XË& (Z)))

	)

48 
	#G
(
X
, 
Y
, 
Z
Ë(((XË& (Z)Ë| ((YË& (~Z)))

	)

49 
	#H
(
X
, 
Y
, 
Z
Ë((XË^ (YË^ (Z))

	)

50 
	#I
(
X
, 
Y
, 
Z
Ë((YË^ ((XË| (~Z)))

	)

52 
	#ROUND1
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
) { \

53 (
a
Ë◊Ë+ 
	`F
((
b
), (
c
), (
d
)Ë+ 
X
[(
k
)] + 
T
[(
i
)]; \

54 (
a
Ë
	`SHIFT
(◊), (
s
)); \

55 (
a
Ë(
b
) + (a); \

56 }

	)

58 
	#ROUND2
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
) { \

59 (
a
Ë◊Ë+ 
	`G
((
b
), (
c
), (
d
)Ë+ 
X
[(
k
)] + 
T
[(
i
)]; \

60 (
a
Ë
	`SHIFT
(◊), (
s
)); \

61 (
a
Ë(
b
) + (a); \

62 }

	)

64 
	#ROUND3
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
) { \

65 (
a
Ë◊Ë+ 
	`H
((
b
), (
c
), (
d
)Ë+ 
X
[(
k
)] + 
T
[(
i
)]; \

66 (
a
Ë
	`SHIFT
(◊), (
s
)); \

67 (
a
Ë(
b
) + (a); \

68 }

	)

70 
	#ROUND4
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
) { \

71 (
a
Ë◊Ë+ 
	`I
((
b
), (
c
), (
d
)Ë+ 
X
[(
k
)] + 
T
[(
i
)]; \

72 (
a
Ë
	`SHIFT
(◊), (
s
)); \

73 (
a
Ë(
b
) + (a); \

74 }

	)

76 
	#Sa
 7

	)

77 
	#Sb
 12

	)

78 
	#Sc
 17

	)

79 
	#Sd
 22

	)

81 
	#Se
 5

	)

82 
	#Sf
 9

	)

83 
	#Sg
 14

	)

84 
	#Sh
 20

	)

86 
	#Si
 4

	)

87 
	#Sj
 11

	)

88 
	#Sk
 16

	)

89 
	#Sl
 23

	)

91 
	#Sm
 6

	)

92 
	#Sn
 10

	)

93 
	#So
 15

	)

94 
	#Sp
 21

	)

96 
	#MD5_A0
 0x67452301

	)

97 
	#MD5_B0
 0xefcdab89

	)

98 
	#MD5_C0
 0x98badc„

	)

99 
	#MD5_D0
 0x10325476

	)

102 c⁄° 
uöt32_t
 
	gT
[65] = {

125 c⁄° 
uöt8_t
 
	gmd5_∑dd©
[
MD5_BUFLEN
] = {

136 
md5_ˇlc
 (c⁄° 
uöt8_t
 *, 
md5_˘xt
 *);

138 
	$md5_öô
(
md5_˘xt
 *
˘xt
)

140 
˘xt
->
md5_n
 = 0;

141 
˘xt
->
md5_i
 = 0;

142 
˘xt
->
md5_°a
 = 
MD5_A0
;

143 
˘xt
->
md5_°b
 = 
MD5_B0
;

144 
˘xt
->
md5_°c
 = 
MD5_C0
;

145 
˘xt
->
md5_°d
 = 
MD5_D0
;

146 
	`mem£t
 (
˘xt
->
md5_buf
, 0, (ctxt->md5_buf));

147 
	}
}

149 
	$md5_lo›
(
md5_˘xt
 *
˘xt
, c⁄° *
vöput
, 
uöt
 
Àn
)

151 
uöt
 
g≠
, 
i
;

152 c⁄° 
uöt8_t
 *
öput
 = 
vöput
;

154 
˘xt
->
md5_n
 +
Àn
 * 8;

155 
g≠
 = 
MD5_BUFLEN
 - 
˘xt
->
md5_i
;

157 i‡(
Àn
 >
g≠
) {

158 
	`mem˝y
 (
˘xt
->
md5_buf
 + ctxt->
md5_i
, 
öput
, 
g≠
);

159 
	`md5_ˇlc
(
˘xt
->
md5_buf
, ctxt);

161 
i
 = 
g≠
; i + 
MD5_BUFLEN
 <
Àn
; i += MD5_BUFLEN) {

162 
	`md5_ˇlc
((
öput
 + 
i
), 
˘xt
);

165 
˘xt
->
md5_i
 = 
Àn
 - 
i
;

166 
	`mem˝y
 (
˘xt
->
md5_buf
, (
öput
 + 
i
), ctxt->
md5_i
);

168 
	`mem˝y
 (
˘xt
->
md5_buf
 + ctxt->
md5_i
, 
öput
, 
Àn
);

169 
˘xt
->
md5_i
 +
Àn
;

171 
	}
}

173 
	$md5_∑d
(
md5_˘xt
 *
˘xt
)

175 
uöt
 
g≠
;

178 
g≠
 = 
MD5_BUFLEN
 - 
˘xt
->
md5_i
;

179 i‡(
g≠
 > 8) {

180 
	`mem˝y
 (
˘xt
->
md5_buf
 + ctxt->
md5_i
, 
md5_∑dd©
,

181 
g≠
 - (
˘xt
->
md5_n
));

184 
	`mem˝y
 (
˘xt
->
md5_buf
 + ctxt->
md5_i
, 
md5_∑dd©
, 
g≠
);

185 
	`md5_ˇlc
 (
˘xt
->
md5_buf
, ctxt);

186 
	`mem˝y
 (
˘xt
->
md5_buf
, 
md5_∑dd©
 + 
g≠
,

187 
MD5_BUFLEN
 - (
˘xt
->
md5_n
));

191 i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

192 
	`mem˝y
 (&
˘xt
->
md5_buf
[56], &˘xt->
md5_n8
[0], 8);

195 
˘xt
->
md5_buf
[56] = ctxt->
md5_n8
[7];

196 
˘xt
->
md5_buf
[57] = ctxt->
md5_n8
[6];

197 
˘xt
->
md5_buf
[58] = ctxt->
md5_n8
[5];

198 
˘xt
->
md5_buf
[59] = ctxt->
md5_n8
[4];

199 
˘xt
->
md5_buf
[60] = ctxt->
md5_n8
[3];

200 
˘xt
->
md5_buf
[61] = ctxt->
md5_n8
[2];

201 
˘xt
->
md5_buf
[62] = ctxt->
md5_n8
[1];

202 
˘xt
->
md5_buf
[63] = ctxt->
md5_n8
[0];

204 
	`md5_ˇlc
(
˘xt
->
md5_buf
, ctxt);

205 
	}
}

207 
	$md5_ªsu…
(
uöt8_t
 *
dige°
, 
md5_˘xt
 *
˘xt
)

210 i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

211 
	`mem˝y
 (
dige°
, &
˘xt
->
md5_°8
[0], 16);

212 i‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

214 
dige°
[ 0] = 
˘xt
->
md5_°8
[ 3]; digest[ 1] = ctxt->md5_st8[ 2];

215 
dige°
[ 2] = 
˘xt
->
md5_°8
[ 1]; digest[ 3] = ctxt->md5_st8[ 0];

216 
dige°
[ 4] = 
˘xt
->
md5_°8
[ 7]; digest[ 5] = ctxt->md5_st8[ 6];

217 
dige°
[ 6] = 
˘xt
->
md5_°8
[ 5]; digest[ 7] = ctxt->md5_st8[ 4];

218 
dige°
[ 8] = 
˘xt
->
md5_°8
[11]; digest[ 9] = ctxt->md5_st8[10];

219 
dige°
[10] = 
˘xt
->
md5_°8
[ 9]; digest[11] = ctxt->md5_st8[ 8];

220 
dige°
[12] = 
˘xt
->
md5_°8
[15]; digest[13] = ctxt->md5_st8[14];

221 
dige°
[14] = 
˘xt
->
md5_°8
[13]; digest[15] = ctxt->md5_st8[12];

223 
	}
}

225 
	$md5_ˇlc
(c⁄° 
uöt8_t
 *
b64
, 
md5_˘xt
 * 
˘xt
)

227 
uöt32_t
 
A
 = 
˘xt
->
md5_°a
;

228 
uöt32_t
 
B
 = 
˘xt
->
md5_°b
;

229 
uöt32_t
 
C
 = 
˘xt
->
md5_°c
;

230 
uöt32_t
 
D
 = 
˘xt
->
md5_°d
;

231 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

232 c⁄° 
uöt32_t
 *
X
 = (c⁄° uöt32_à*)
b64
;

233 #ñi‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

234 
uöt32_t
 
X
[16];

236 i‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

240 
uöt8_t
 *
y
 = (uöt8_à*)
X
;

241 
y
[ 0] = 
b64
[ 3]; y[ 1] = b64[ 2]; y[ 2] = b64[ 1]; y[ 3] = b64[ 0];

242 
y
[ 4] = 
b64
[ 7]; y[ 5] = b64[ 6]; y[ 6] = b64[ 5]; y[ 7] = b64[ 4];

243 
y
[ 8] = 
b64
[11]; y[ 9] = b64[10]; y[10] = b64[ 9]; y[11] = b64[ 8];

244 
y
[12] = 
b64
[15]; y[13] = b64[14]; y[14] = b64[13]; y[15] = b64[12];

245 
y
[16] = 
b64
[19]; y[17] = b64[18]; y[18] = b64[17]; y[19] = b64[16];

246 
y
[20] = 
b64
[23]; y[21] = b64[22]; y[22] = b64[21]; y[23] = b64[20];

247 
y
[24] = 
b64
[27]; y[25] = b64[26]; y[26] = b64[25]; y[27] = b64[24];

248 
y
[28] = 
b64
[31]; y[29] = b64[30]; y[30] = b64[29]; y[31] = b64[28];

249 
y
[32] = 
b64
[35]; y[33] = b64[34]; y[34] = b64[33]; y[35] = b64[32];

250 
y
[36] = 
b64
[39]; y[37] = b64[38]; y[38] = b64[37]; y[39] = b64[36];

251 
y
[40] = 
b64
[43]; y[41] = b64[42]; y[42] = b64[41]; y[43] = b64[40];

252 
y
[44] = 
b64
[47]; y[45] = b64[46]; y[46] = b64[45]; y[47] = b64[44];

253 
y
[48] = 
b64
[51]; y[49] = b64[50]; y[50] = b64[49]; y[51] = b64[48];

254 
y
[52] = 
b64
[55]; y[53] = b64[54]; y[54] = b64[53]; y[55] = b64[52];

255 
y
[56] = 
b64
[59]; y[57] = b64[58]; y[58] = b64[57]; y[59] = b64[56];

256 
y
[60] = 
b64
[63]; y[61] = b64[62]; y[62] = b64[61]; y[63] = b64[60];

260 
	`ROUND1
(
A
, 
B
, 
C
, 
D
, 0, 
Sa
, 1); ROUND1(D, A, B, C, 1, 
Sb
, 2);

261 
	`ROUND1
(
C
, 
D
, 
A
, 
B
, 2, 
Sc
, 3); ROUND1(B, C, D, A, 3, 
Sd
, 4);

262 
	`ROUND1
(
A
, 
B
, 
C
, 
D
, 4, 
Sa
, 5); ROUND1(D, A, B, C, 5, 
Sb
, 6);

263 
	`ROUND1
(
C
, 
D
, 
A
, 
B
, 6, 
Sc
, 7); ROUND1(B, C, D, A, 7, 
Sd
, 8);

264 
	`ROUND1
(
A
, 
B
, 
C
, 
D
, 8, 
Sa
, 9); ROUND1(D, A, B, C, 9, 
Sb
, 10);

265 
	`ROUND1
(
C
, 
D
, 
A
, 
B
, 10, 
Sc
, 11); ROUND1(B, C, D, A, 11, 
Sd
, 12);

266 
	`ROUND1
(
A
, 
B
, 
C
, 
D
, 12, 
Sa
, 13); ROUND1(D, A, B, C, 13, 
Sb
, 14);

267 
	`ROUND1
(
C
, 
D
, 
A
, 
B
, 14, 
Sc
, 15); ROUND1(B, C, D, A, 15, 
Sd
, 16);

269 
	`ROUND2
(
A
, 
B
, 
C
, 
D
, 1, 
Se
, 17); ROUND2(D, A, B, C, 6, 
Sf
, 18);

270 
	`ROUND2
(
C
, 
D
, 
A
, 
B
, 11, 
Sg
, 19); ROUND2(B, C, D, A, 0, 
Sh
, 20);

271 
	`ROUND2
(
A
, 
B
, 
C
, 
D
, 5, 
Se
, 21); ROUND2(D, A, B, C, 10, 
Sf
, 22);

272 
	`ROUND2
(
C
, 
D
, 
A
, 
B
, 15, 
Sg
, 23); ROUND2(B, C, D, A, 4, 
Sh
, 24);

273 
	`ROUND2
(
A
, 
B
, 
C
, 
D
, 9, 
Se
, 25); ROUND2(D, A, B, C, 14, 
Sf
, 26);

274 
	`ROUND2
(
C
, 
D
, 
A
, 
B
, 3, 
Sg
, 27); ROUND2(B, C, D, A, 8, 
Sh
, 28);

275 
	`ROUND2
(
A
, 
B
, 
C
, 
D
, 13, 
Se
, 29); ROUND2(D, A, B, C, 2, 
Sf
, 30);

276 
	`ROUND2
(
C
, 
D
, 
A
, 
B
, 7, 
Sg
, 31); ROUND2(B, C, D, A, 12, 
Sh
, 32);

278 
	`ROUND3
(
A
, 
B
, 
C
, 
D
, 5, 
Si
, 33); ROUND3(D, A, B, C, 8, 
Sj
, 34);

279 
	`ROUND3
(
C
, 
D
, 
A
, 
B
, 11, 
Sk
, 35); ROUND3(B, C, D, A, 14, 
Sl
, 36);

280 
	`ROUND3
(
A
, 
B
, 
C
, 
D
, 1, 
Si
, 37); ROUND3(D, A, B, C, 4, 
Sj
, 38);

281 
	`ROUND3
(
C
, 
D
, 
A
, 
B
, 7, 
Sk
, 39); ROUND3(B, C, D, A, 10, 
Sl
, 40);

282 
	`ROUND3
(
A
, 
B
, 
C
, 
D
, 13, 
Si
, 41); ROUND3(D, A, B, C, 0, 
Sj
, 42);

283 
	`ROUND3
(
C
, 
D
, 
A
, 
B
, 3, 
Sk
, 43); ROUND3(B, C, D, A, 6, 
Sl
, 44);

284 
	`ROUND3
(
A
, 
B
, 
C
, 
D
, 9, 
Si
, 45); ROUND3(D, A, B, C, 12, 
Sj
, 46);

285 
	`ROUND3
(
C
, 
D
, 
A
, 
B
, 15, 
Sk
, 47); ROUND3(B, C, D, A, 2, 
Sl
, 48);

287 
	`ROUND4
(
A
, 
B
, 
C
, 
D
, 0, 
Sm
, 49); ROUND4(D, A, B, C, 7, 
Sn
, 50);

288 
	`ROUND4
(
C
, 
D
, 
A
, 
B
, 14, 
So
, 51); ROUND4(B, C, D, A, 5, 
Sp
, 52);

289 
	`ROUND4
(
A
, 
B
, 
C
, 
D
, 12, 
Sm
, 53); ROUND4(D, A, B, C, 3, 
Sn
, 54);

290 
	`ROUND4
(
C
, 
D
, 
A
, 
B
, 10, 
So
, 55); ROUND4(B, C, D, A, 1, 
Sp
, 56);

291 
	`ROUND4
(
A
, 
B
, 
C
, 
D
, 8, 
Sm
, 57); ROUND4(D, A, B, C, 15, 
Sn
, 58);

292 
	`ROUND4
(
C
, 
D
, 
A
, 
B
, 6, 
So
, 59); ROUND4(B, C, D, A, 13, 
Sp
, 60);

293 
	`ROUND4
(
A
, 
B
, 
C
, 
D
, 4, 
Sm
, 61); ROUND4(D, A, B, C, 11, 
Sn
, 62);

294 
	`ROUND4
(
C
, 
D
, 
A
, 
B
, 2, 
So
, 63); ROUND4(B, C, D, A, 9, 
Sp
, 64);

296 
˘xt
->
md5_°a
 +
A
;

297 
˘xt
->
md5_°b
 +
B
;

298 
˘xt
->
md5_°c
 +
C
;

299 
˘xt
->
md5_°d
 +
D
;

300 
	}
}

	@common-libs/3rd-party/quagga-lib/src/memory.c

23 
	~<zebø.h
>

25 #i‡!
deföed
(
HAVE_STDLIB_H
Ë|| (deföed(
GNU_LINUX
Ë&& deföed(
HAVE_MALLINFO
))

26 
	~<mÆloc.h
>

29 
	~"log.h
"

30 
	~"mem‹y.h
"

32 
Æloc_öc
 ();

33 
Æloc_dec
 ();

34 
log_mem°©s
(
log_¥i‹ôy
);

36 c⁄° 
mesßge
 
	gm°r
 [] =

38 { 
MTYPE_THREAD
, "thread" },

39 { 
MTYPE_THREAD_MASTER
, "thread_master" },

40 { 
MTYPE_VECTOR
, "vector" },

41 { 
MTYPE_VECTOR_INDEX
, "vector_index" },

42 { 
MTYPE_IF
, "interface" },

43 { 0, 
NULL
 },

47 
__©åibuã__
 ((
n‹ëu∫
))

48 
	$zîr‹
 (c⁄° *
‚ame
, 
ty≥
, 
size_t
 
size
)

50 
	`zlog_îr
 ("%s : can'tállocate memory for `%s' size %d: %s\n",

51 
‚ame
, 
	`lookup
 (
m°r
, 
ty≥
), (Ë
size
, 
	`ß„_°ªº‹
(
î∫o
));

52 
	`log_mem°©s
(
LOG_WARNING
);

57 
	`zlog_backåa˚
(
LOG_WARNING
);

58 
	`ab‹t
();

59 
	}
}

67 
	$zmÆloc
 (
ty≥
, 
size_t
 
size
)

69 *
mem‹y
;

71 
mem‹y
 = 
	`mÆloc
 (
size
);

73 i‡(
mem‹y
 =
NULL
)

74 
	`zîr‹
 ("mÆloc", 
ty≥
, 
size
);

76 
	`Æloc_öc
 (
ty≥
);

78  
mem‹y
;

79 
	}
}

85 
	$zˇŒoc
 (
ty≥
, 
size_t
 
size
)

87 *
mem‹y
;

89 
mem‹y
 = 
	`ˇŒoc
 (1, 
size
);

91 i‡(
mem‹y
 =
NULL
)

92 
	`zîr‹
 ("ˇŒoc", 
ty≥
, 
size
);

94 
	`Æloc_öc
 (
ty≥
);

96  
mem‹y
;

97 
	}
}

107 
	$zªÆloc
 (
ty≥
, *
±r
, 
size_t
 
size
)

109 *
mem‹y
;

111 
mem‹y
 = 
	`ªÆloc
 (
±r
, 
size
);

112 i‡(
mem‹y
 =
NULL
)

113 
	`zîr‹
 ("ªÆloc", 
ty≥
, 
size
);

114 i‡(
±r
 =
NULL
)

115 
	`Æloc_öc
 (
ty≥
);

117  
mem‹y
;

118 
	}
}

127 
	$z‰ì
 (
ty≥
, *
±r
)

129 i‡(
±r
 !
NULL
)

131 
	`Æloc_dec
 (
ty≥
);

132 
	`‰ì
 (
±r
);

134 
	}
}

143 
	$z°rdup
 (
ty≥
, c⁄° *
°r
)

145 *
dup
;

147 
dup
 = 
	`°rdup
 (
°r
);

148 i‡(
dup
 =
NULL
)

149 
	`zîr‹
 ("°rdup", 
ty≥
, 
	`°æí
 (
°r
));

150 
	`Æloc_öc
 (
ty≥
);

151  
dup
;

152 
	}
}

154 #ifde‡
MEMORY_LOG


157 c⁄° *
	m«me
;

158 
	mÆloc
;

159 
	mt_mÆloc
;

160 
	mc_mÆloc
;

161 
	mt_ˇŒoc
;

162 
	mc_ˇŒoc
;

163 
	mt_ªÆloc
;

164 
	mt_‰ì
;

165 
	mc_°rdup
;

166 } 
	gm°©
 [
MTYPE_MAX
];

169 
	$mty≥_log
 (*
func
, *
mem‹y
, c⁄° *
fûe
, 
löe
, 
ty≥
)

171 
	`zlog_debug
 ("%s: %†%∞%†%d", 
func
, 
	`lookup
 (
m°r
, 
ty≥
), 
mem‹y
, 
fûe
, 
löe
);

172 
	}
}

175 
	$mty≥_zmÆloc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, 
size_t
 
size
)

177 *
mem‹y
;

179 
m°©
[
ty≥
].
c_mÆloc
++;

180 
m°©
[
ty≥
].
t_mÆloc
++;

182 
mem‹y
 = 
	`zmÆloc
 (
ty≥
, 
size
);

183 
	`mty≥_log
 ("zmÆloc", 
mem‹y
, 
fûe
, 
löe
, 
ty≥
);

185  
mem‹y
;

186 
	}
}

189 
	$mty≥_zˇŒoc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, 
size_t
 
size
)

191 *
mem‹y
;

193 
m°©
[
ty≥
].
c_ˇŒoc
++;

194 
m°©
[
ty≥
].
t_ˇŒoc
++;

196 
mem‹y
 = 
	`zˇŒoc
 (
ty≥
, 
size
);

197 
	`mty≥_log
 ("xˇŒoc", 
mem‹y
, 
fûe
, 
löe
, 
ty≥
);

199  
mem‹y
;

200 
	}
}

203 
	$mty≥_zªÆloc
 (c⁄° *
fûe
, 
löe
, 
ty≥
, *
±r
, 
size_t
 
size
)

205 *
mem‹y
;

208 
m°©
[
ty≥
].
t_ªÆloc
++;

210 
mem‹y
 = 
	`zªÆloc
 (
ty≥
, 
±r
, 
size
);

212 
	`mty≥_log
 ("xªÆloc", 
mem‹y
, 
fûe
, 
löe
, 
ty≥
);

214  
mem‹y
;

215 
	}
}

219 
	$mty≥_z‰ì
 (c⁄° *
fûe
, 
löe
, 
ty≥
, *
±r
)

221 
m°©
[
ty≥
].
t_‰ì
++;

223 
	`mty≥_log
 ("x‰ì", 
±r
, 
fûe
, 
löe
, 
ty≥
);

225 
	`z‰ì
 (
ty≥
, 
±r
);

226 
	}
}

229 
	$mty≥_z°rdup
 (c⁄° *
fûe
, 
löe
, 
ty≥
, c⁄° *
°r
)

231 *
mem‹y
;

233 
m°©
[
ty≥
].
c_°rdup
++;

235 
mem‹y
 = 
	`z°rdup
 (
ty≥
, 
°r
);

237 
	`mty≥_log
 ("x°rdup", 
mem‹y
, 
fûe
, 
löe
, 
ty≥
);

239  
mem‹y
;

240 
	}
}

244 *
	m«me
;

245 
	mÆloc
;

246 } 
	gm°©
 [
MTYPE_MAX
];

251 
	$Æloc_öc
 (
ty≥
)

253 
m°©
[
ty≥
].
Æloc
++;

254 
	}
}

258 
	$Æloc_dec
 (
ty≥
)

260 
m°©
[
ty≥
].
Æloc
--;

261 
	}
}

264 
	~"ve˘‹.h
"

265 
	~"vty.h
"

266 
	~"comm™d.h
"

269 
	$log_mem°©s
(
¥i
)

271 
mli°
 *
ml
;

273 
ml
 = 
mli°s
; ml->
li°
; ml++)

275 
mem‹y_li°
 *
m
;

277 
	`zlog
 (
NULL
, 
¥i
, "Mem‹y utûiz©i⁄ i¿moduÀ %s:", 
ml
->
«me
);

278 
m
 = 
ml
->
li°
; m->
ödex
 >= 0; m++)

279 i‡(
m
->
ödex
 && 
m°©
[m->ödex].
Æloc
)

280 
	`zlog
 (
NULL
, 
¥i
, " %-30s: %10ld", 
m
->
f‹m©
, 
m°©
[m->
ödex
].
Æloc
);

282 
	}
}

285 
	$log_mem°©s_°dîr
 (c⁄° *
¥efix
)

287 
mli°
 *
ml
;

288 
mem‹y_li°
 *
m
;

289 
i
;

290 
j
 = 0;

292 
ml
 = 
mli°s
; ml->
li°
; ml++)

294 
i
 = 0;

296 
m
 = 
ml
->
li°
; m->
ödex
 >= 0; m++)

297 i‡(
m
->
ödex
 && 
m°©
[m->ödex].
Æloc
)

299 i‡(!
i
)

300 
	`Ârötf
 (
°dîr
,

302 
¥efix
,

303 
ml
->
«me
);

304 
	`Ârötf
 (
°dîr
,

306 
¥efix
,

307 
m
->
f‹m©
,

308 
m°©
[
m
->
ödex
].
Æloc
,

309 
m°©
[
m
->
ödex
].
Æloc
 < 0 ? " (REPORT THIS BUG!)" : "");

310 
i
 = 
j
 = 1;

314 i‡(
j
)

315 
	`Ârötf
 (
°dîr
,

318 
¥efix
);

320 
	`Ârötf
 (
°dîr
,

322 
¥efix
);

323 
	}
}

326 
	$show_£∑øt‹
(
vty
 *vty)

328 
	`vty_out
 (
vty
, "-----------------------------\r\n");

329 
	}
}

332 
	$show_mem‹y_vty
 (
vty
 *vty, 
mem‹y_li°
 *
li°
)

334 
mem‹y_li°
 *
m
;

335 
√ed£p
 = 0;

337 
m
 = 
li°
; m->
ödex
 >= 0; m++)

338 i‡(
m
->
ödex
 == 0)

340 i‡(
√ed£p
)

342 
	`show_£∑øt‹
 (
vty
);

343 
√ed£p
 = 0;

346 i‡(
m°©
[
m
->
ödex
].
Æloc
)

348 
	`vty_out
 (
vty
, "%-30s: %10ld\r\n", 
m
->
f‹m©
, 
m°©
[m->
ödex
].
Æloc
);

349 
√ed£p
 = 1;

351  
√ed£p
;

352 
	}
}

354 #ifde‡
HAVE_MALLINFO


356 
	$show_mem‹y_mÆlöfo
 (
vty
 *vty)

358 
mÆlöfo
 
möfo
 = 
	`mÆlöfo
();

359 
buf
[
MTYPE_MEMSTR_LEN
];

361 
	`vty_out
 (
vty
, "Sy°emáŒoˇt‹ sèti°ics:%s", 
VTY_NEWLINE
);

362 
	`vty_out
 (
vty
, " Total heapállocated: %s%s",

363 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
¨ía
),

364 
VTY_NEWLINE
);

365 
	`vty_out
 (
vty
, " Holding block headers: %s%s",

366 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
hblkhd
),

367 
VTY_NEWLINE
);

368 
	`vty_out
 (
vty
, " Used small blocks: %s%s",

369 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
usmblks
),

370 
VTY_NEWLINE
);

371 
	`vty_out
 (
vty
, " Used ordinary blocks: %s%s",

372 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
u‹dblks
),

373 
VTY_NEWLINE
);

374 
	`vty_out
 (
vty
, " Free small blocks: %s%s",

375 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
fsmblks
),

376 
VTY_NEWLINE
);

377 
	`vty_out
 (
vty
, " Free ordinary blocks: %s%s",

378 
	`mty≥_mem°r
 (
buf
, 
MTYPE_MEMSTR_LEN
, 
möfo
.
f‹dblks
),

379 
VTY_NEWLINE
);

380 
	`vty_out
 (
vty
, " Ordinary blocks: %ld%s",

381 ()
möfo
.
‹dblks
,

382 
VTY_NEWLINE
);

383 
	`vty_out
 (
vty
, " Small blocks: %ld%s",

384 ()
möfo
.
smblks
,

385 
VTY_NEWLINE
);

386 
	`vty_out
 (
vty
, " Holding blocks: %ld%s",

387 ()
möfo
.
hblks
,

388 
VTY_NEWLINE
);

389 
	`vty_out
 (
vty
, "(see system documentation for 'mallinfo' for meaning)%s",

390 
VTY_NEWLINE
);

392 
	}
}

395 
DEFUN
 (
show_mem‹y_Æl
,

396 
show_mem‹y_Æl_cmd
,

402 
mli°
 *
	gml
;

403 
	g√ed£p
 = 0;

405 #ifde‡
HAVE_MALLINFO


406 
	g√ed£p
 = 
show_mem‹y_mÆlöfo
 (
vty
);

409 
	gml
 = 
mli°s
; ml->
	gli°
; ml++)

411 i‡(
	g√ed£p
)

412 
show_£∑øt‹
 (
vty
);

413 
	g√ed£p
 = 
show_mem‹y_vty
 (
vty
, 
ml
->
li°
);

416  
	gCMD_SUCCESS
;

419 
ALIAS
 (
show_mem‹y_Æl
,

420 
show_mem‹y_cmd
,

425 
DEFUN
 (
show_mem‹y_lib
,

426 
show_mem‹y_lib_cmd
,

428 
SHOW_STR


432 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_lib
);

433  
	gCMD_SUCCESS
;

436 
DEFUN
 (
show_mem‹y_zebø
,

437 
show_mem‹y_zebø_cmd
,

439 
SHOW_STR


443 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_zebø
);

444  
	gCMD_SUCCESS
;

447 
DEFUN
 (
show_mem‹y_rù
,

448 
show_mem‹y_rù_cmd
,

450 
SHOW_STR


454 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_rù
);

455  
	gCMD_SUCCESS
;

458 
DEFUN
 (
show_mem‹y_rùng
,

459 
show_mem‹y_rùng_cmd
,

461 
SHOW_STR


465 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_rùng
);

466  
	gCMD_SUCCESS
;

469 
DEFUN
 (
show_mem‹y_bgp
,

470 
show_mem‹y_bgp_cmd
,

472 
SHOW_STR


476 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_bgp
);

477  
	gCMD_SUCCESS
;

480 
DEFUN
 (
show_mem‹y_o•f
,

481 
show_mem‹y_o•f_cmd
,

483 
SHOW_STR


487 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_o•f
);

488  
	gCMD_SUCCESS
;

491 
DEFUN
 (
show_mem‹y_o•f6
,

492 
show_mem‹y_o•f6_cmd
,

494 
SHOW_STR


498 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_o•f6
);

499  
	gCMD_SUCCESS
;

502 
DEFUN
 (
show_mem‹y_isis
,

503 
show_mem‹y_isis_cmd
,

505 
SHOW_STR


509 
show_mem‹y_vty
 (
vty
, 
mem‹y_li°_isis
);

510  
	gCMD_SUCCESS
;

514 
	$mem‹y_öô
 ()

516 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_cmd
);

517 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_Æl_cmd
);

518 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_lib_cmd
);

519 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_rù_cmd
);

520 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_rùng_cmd
);

521 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_bgp_cmd
);

522 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_o•f_cmd
);

523 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_o•f6_cmd
);

524 
	`ö°Æl_ñemít
 (
RESTRICTED_NODE
, &
show_mem‹y_isis_cmd
);

526 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_cmd
);

527 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_Æl_cmd
);

528 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_lib_cmd
);

529 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_rù_cmd
);

530 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_rùng_cmd
);

531 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_bgp_cmd
);

532 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_o•f_cmd
);

533 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_o•f6_cmd
);

534 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_mem‹y_isis_cmd
);

536 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_cmd
);

537 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_Æl_cmd
);

538 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_lib_cmd
);

539 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_zebø_cmd
);

540 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_rù_cmd
);

541 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_rùng_cmd
);

542 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_bgp_cmd
);

543 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_o•f_cmd
);

544 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_o•f6_cmd
);

545 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_mem‹y_isis_cmd
);

546 
	}
}

557 
	$mty≥_mem°r
 (*
buf
, 
size_t
 
Àn
, 
byãs
)

559 
t
, 
g
, 
m
, 
k
;

562 i‡(!
byãs
)

564 i‡(
byãs
 == 1)

570 
t
 = 
byãs
 >> ( () >= 8 ? 40 : 0);

572 
t
 = 0;

573 
g
 = 
byãs
 >> 30;

574 
m
 = 
byãs
 >> 20;

575 
k
 = 
byãs
 >> 10;

577 i‡(
t
 > 10)

583 i‡(
byãs
 & (1UL << ( () >= 8 ? 39 : 0)))

584 
t
++;

585 
	`¢¥ötf
 (
buf
, 
Àn
, "%4d TiB", 
t
);

587 i‡(
g
 > 10)

589 i‡(
byãs
 & (1 << 29))

590 
g
++;

591 
	`¢¥ötf
 (
buf
, 
Àn
, "%d GiB", 
g
);

593 i‡(
m
 > 10)

595 i‡(
byãs
 & (1 << 19))

596 
m
++;

597 
	`¢¥ötf
 (
buf
, 
Àn
, "%d MiB", 
m
);

599 i‡(
k
 > 10)

601 i‡(
byãs
 & (1 << 9))

602 
k
++;

603 
	`¢¥ötf
 (
buf
, 
Àn
, "%d KiB", 
k
);

606 
	`¢¥ötf
 (
buf
, 
Àn
, "%ld byãs", 
byãs
);

608  
buf
;

609 
	}
}

612 
	$mty≥_°©s_Æloc
 (
ty≥
)

614  
m°©
[
ty≥
].
Æloc
;

615 
	}
}

	@common-libs/3rd-party/quagga-lib/src/memtypes.c

10 
	~"zebø.h
"

11 
	~"mem‹y.h
"

13 
mem‹y_li°
 
	gmem‹y_li°_lib
[] =

15 { 
MTYPE_TMP
, "Temporary memory" },

16 { 
MTYPE_STRVEC
, "String vector" },

17 { 
MTYPE_VECTOR
, "Vector" },

18 { 
MTYPE_VECTOR_INDEX
, "Vector index" },

19 { 
MTYPE_LINK_LIST
, "Link List" },

20 { 
MTYPE_LINK_NODE
, "Link Node" },

21 { 
MTYPE_THREAD
, "Thread" },

22 { 
MTYPE_THREAD_MASTER
, "Thread master" },

23 { 
MTYPE_THREAD_STATS
, "Thread stats" },

24 { 
MTYPE_THREAD_FUNCNAME
, "Thread functionÇame" },

25 { 
MTYPE_VTY
, "VTY" },

26 { 
MTYPE_VTY_OUT_BUF
, "VTY output buffer" },

27 { 
MTYPE_VTY_HIST
, "VTY history" },

28 { 
MTYPE_IF
, "Interface" },

29 { 
MTYPE_CONNECTED
, "Connected" },

30 { 
MTYPE_CONNECTED_LABEL
, "Connected interfaceÜabel" },

31 { 
MTYPE_BUFFER
, "Buffer" },

32 { 
MTYPE_BUFFER_DATA
, "Buffer data" },

33 { 
MTYPE_STREAM
, "Stream" },

34 { 
MTYPE_STREAM_DATA
, "Stream data" },

35 { 
MTYPE_STREAM_FIFO
, "Stream FIFO" },

36 { 
MTYPE_PREFIX
, "Prefix" },

37 { 
MTYPE_PREFIX_IPV4
, "Prefix IPv4" },

38 { 
MTYPE_PREFIX_IPV6
, "Prefix IPv6" },

39 { 
MTYPE_HASH
, "Hash" },

40 { 
MTYPE_HASH_BACKET
, "Hash Bucket" },

41 { 
MTYPE_HASH_INDEX
, "Hash Index" },

42 { 
MTYPE_ROUTE_TABLE
, "RouteÅable" },

43 { 
MTYPE_ROUTE_NODE
, "RouteÇode" },

44 { 
MTYPE_DISTRIBUTE
, "DistributeÜist" },

45 { 
MTYPE_DISTRIBUTE_IFNAME
, "Dist-list ifname" },

46 { 
MTYPE_ACCESS_LIST
, "Access List" },

47 { 
MTYPE_ACCESS_LIST_STR
, "Access List Str" },

48 { 
MTYPE_ACCESS_FILTER
, "Access Filter" },

49 { 
MTYPE_PREFIX_LIST
, "Prefix List" },

50 { 
MTYPE_PREFIX_LIST_ENTRY
, "Prefix List Entry" },

51 { 
MTYPE_PREFIX_LIST_STR
, "Prefix List Str" },

52 { 
MTYPE_ROUTE_MAP
, "Route map" },

53 { 
MTYPE_ROUTE_MAP_NAME
, "Route mapÇame" },

54 { 
MTYPE_ROUTE_MAP_INDEX
, "Route map index" },

55 { 
MTYPE_ROUTE_MAP_RULE
, "Route mapÑule" },

56 { 
MTYPE_ROUTE_MAP_RULE_STR
, "Route mapÑule str" },

57 { 
MTYPE_ROUTE_MAP_COMPILED
, "Route map compiled" },

58 { 
MTYPE_DESC
, "Command desc" },

59 { 
MTYPE_KEY
, "Key" },

60 { 
MTYPE_KEYCHAIN
, "Key chain" },

61 { 
MTYPE_IF_RMAP
, "InterfaceÑoute map" },

62 { 
MTYPE_IF_RMAP_NAME
, "I.f.Ñoute mapÇame", },

63 { 
MTYPE_SOCKUNION
, "Socket union" },

64 { 
MTYPE_PRIVS
, "Privilege information" },

65 { 
MTYPE_ZLOG
, "Logging" },

66 { 
MTYPE_ZCLIENT
, "Zclient" },

67 { 
MTYPE_WORK_QUEUE
, "Work queue" },

68 { 
MTYPE_WORK_QUEUE_ITEM
, "Work queue item" },

69 { 
MTYPE_WORK_QUEUE_NAME
, "Work queueÇame string" },

70 { 
MTYPE_PQUEUE
, "Priority queue" },

71 { 
MTYPE_PQUEUE_DATA
, "Priority queue data" },

72 { 
MTYPE_HOST
, "Host config" },

73 { -1, 
NULL
 },

76 
mem‹y_li°
 
	gmem‹y_li°_zebø
[] =

78 { 
MTYPE_RTADV_PREFIX
, "Router Advertisement Prefix" },

79 { 
MTYPE_VRF
, "VRF" },

80 { 
MTYPE_VRF_NAME
, "VRFÇame" },

81 { 
MTYPE_NEXTHOP
, "Nexthop" },

82 { 
MTYPE_RIB
, "RIB" },

83 { 
MTYPE_RIB_QUEUE
, "RIBÖrocess work queue" },

84 { 
MTYPE_STATIC_IPV4
, "Static IPv4Ñoute" },

85 { 
MTYPE_STATIC_IPV6
, "Static IPv6Ñoute" },

86 { -1, 
NULL
 },

89 
mem‹y_li°
 
	gmem‹y_li°_bgp
[] =

91 { 
MTYPE_BGP
, "BGP instance" },

92 { 
MTYPE_BGP_LISTENER
, "BGPÜisten socket details" },

93 { 
MTYPE_BGP_PEER
, "BGPÖeer" },

94 { 
MTYPE_BGP_PEER_HOST
, "BGPÖeer hostname" },

95 { 
MTYPE_PEER_GROUP
, "Peer group" },

96 { 
MTYPE_PEER_DESC
, "Peer description" },

97 { 
MTYPE_PEER_PASSWORD
, "PeerÖassword string" },

98 { 
MTYPE_ATTR
, "BGPáttribute" },

99 { 
MTYPE_ATTR_EXTRA
, "BGPÉxtraáttributes" },

100 { 
MTYPE_AS_PATH
, "BGPáspath" },

101 { 
MTYPE_AS_SEG
, "BGPáspath seg" },

102 { 
MTYPE_AS_SEG_DATA
, "BGPáspath segment data" },

103 { 
MTYPE_AS_STR
, "BGPáspath str" },

104 { 0, 
NULL
 },

105 { 
MTYPE_BGP_TABLE
, "BGPÅable" },

106 { 
MTYPE_BGP_NODE
, "BGPÇode" },

107 { 
MTYPE_BGP_ROUTE
, "BGPÑoute" },

108 { 
MTYPE_BGP_ROUTE_EXTRA
, "BGPáncillaryÑoute info" },

109 { 
MTYPE_BGP_CONN
, "BGP connected" },

110 { 
MTYPE_BGP_STATIC
, "BGP static" },

111 { 
MTYPE_BGP_ADVERTISE_ATTR
, "BGPádváttr" },

112 { 
MTYPE_BGP_ADVERTISE
, "BGPádv" },

113 { 
MTYPE_BGP_SYNCHRONISE
, "BGP synchronise" },

114 { 
MTYPE_BGP_ADJ_IN
, "BGPádj in" },

115 { 
MTYPE_BGP_ADJ_OUT
, "BGPádj out" },

116 { 0, 
NULL
 },

117 { 
MTYPE_AS_LIST
, "BGP ASÜist" },

118 { 
MTYPE_AS_FILTER
, "BGP AS filter" },

119 { 
MTYPE_AS_FILTER_STR
, "BGP AS filter str" },

120 { 0, 
NULL
 },

121 { 
MTYPE_COMMUNITY
, "community" },

122 { 
MTYPE_COMMUNITY_VAL
, "community val" },

123 { 
MTYPE_COMMUNITY_STR
, "community str" },

124 { 0, 
NULL
 },

125 { 
MTYPE_ECOMMUNITY
, "extcommunity" },

126 { 
MTYPE_ECOMMUNITY_VAL
, "extcommunity val" },

127 { 
MTYPE_ECOMMUNITY_STR
, "extcommunity str" },

128 { 0, 
NULL
 },

129 { 
MTYPE_COMMUNITY_LIST
, "community-list" },

130 { 
MTYPE_COMMUNITY_LIST_NAME
, "community-listÇame" },

131 { 
MTYPE_COMMUNITY_LIST_ENTRY
, "community-listÉntry" },

132 { 
MTYPE_COMMUNITY_LIST_CONFIG
, "community-list config" },

133 { 
MTYPE_COMMUNITY_LIST_HANDLER
, "community-list handler" },

134 { 0, 
NULL
 },

135 { 
MTYPE_CLUSTER
, "ClusterÜist" },

136 { 
MTYPE_CLUSTER_VAL
, "ClusterÜist val" },

137 { 0, 
NULL
 },

138 { 
MTYPE_BGP_PROCESS_QUEUE
, "BGP Process queue" },

139 { 
MTYPE_BGP_CLEAR_NODE_QUEUE
, "BGPÇode clear queue" },

140 { 0, 
NULL
 },

141 { 
MTYPE_TRANSIT
, "BGPÅransitáttr" },

142 { 
MTYPE_TRANSIT_VAL
, "BGPÅransit val" },

143 { 0, 
NULL
 },

144 { 
MTYPE_BGP_DISTANCE
, "BGP distance" },

145 { 
MTYPE_BGP_NEXTHOP_CACHE
, "BGPÇexthop" },

146 { 
MTYPE_BGP_CONFED_LIST
, "BGP confedÜist" },

147 { 
MTYPE_PEER_UPDATE_SOURCE
, "BGPÖeer update interface" },

148 { 
MTYPE_BGP_DAMP_INFO
, "Dampening info" },

149 { 
MTYPE_BGP_DAMP_ARRAY
, "BGP Dampeningárray" },

150 { 
MTYPE_BGP_REGEXP
, "BGPÑegexp" },

151 { 
MTYPE_BGP_AGGREGATE
, "BGPággregate" },

152 { -1, 
NULL
 }

155 
mem‹y_li°
 
	gmem‹y_li°_rù
[] =

157 { 
MTYPE_RIP
, "RIP structure" },

158 { 
MTYPE_RIP_INFO
, "RIPÑoute info" },

159 { 
MTYPE_RIP_INTERFACE
, "RIP interface" },

160 { 
MTYPE_RIP_PEER
, "RIPÖeer" },

161 { 
MTYPE_RIP_OFFSET_LIST
, "RIP offsetÜist" },

162 { 
MTYPE_RIP_DISTANCE
, "RIP distance" },

163 { -1, 
NULL
 }

166 
mem‹y_li°
 
	gmem‹y_li°_rùng
[] =

168 { 
MTYPE_RIPNG
, "RIPng structure" },

169 { 
MTYPE_RIPNG_ROUTE
, "RIPngÑoute info" },

170 { 
MTYPE_RIPNG_AGGREGATE
, "RIPngággregate" },

171 { 
MTYPE_RIPNG_PEER
, "RIPngÖeer" },

172 { 
MTYPE_RIPNG_OFFSET_LIST
, "RIPng offsetÜst" },

173 { 
MTYPE_RIPNG_RTE_DATA
, "RIPngÑte data" },

174 { -1, 
NULL
 }

177 
mem‹y_li°
 
	gmem‹y_li°_o•f
[] =

179 { 
MTYPE_OSPF_TOP
, "OSPFÅop" },

180 { 
MTYPE_OSPF_AREA
, "OSPFárea" },

181 { 
MTYPE_OSPF_AREA_RANGE
, "OSPFáreaÑange" },

182 { 
MTYPE_OSPF_NETWORK
, "OSPFÇetwork" },

183 { 
MTYPE_OSPF_NEIGHBOR_STATIC
,"OSPF staticÇbr" },

184 { 
MTYPE_OSPF_IF
, "OSPF interface" },

185 { 
MTYPE_OSPF_NEIGHBOR
, "OSPFÇeighbor" },

186 { 
MTYPE_OSPF_ROUTE
, "OSPFÑoute" },

187 { 
MTYPE_OSPF_TMP
, "OSPFÅmp mem" },

188 { 
MTYPE_OSPF_LSA
, "OSPF LSA" },

189 { 
MTYPE_OSPF_LSA_DATA
, "OSPF LSA data" },

190 { 
MTYPE_OSPF_LSDB
, "OSPF LSDB" },

191 { 
MTYPE_OSPF_PACKET
, "OSPFÖacket" },

192 { 
MTYPE_OSPF_FIFO
, "OSPF FIFO queue" },

193 { 
MTYPE_OSPF_VERTEX
, "OSPF vertex" },

194 { 
MTYPE_OSPF_VERTEX_PARENT
, "OSPF vertexÖarent", },

195 { 
MTYPE_OSPF_NEXTHOP
, "OSPFÇexthop" },

196 { 
MTYPE_OSPF_PATH
, "OSPFÖath" },

197 { 
MTYPE_OSPF_VL_DATA
, "OSPF VL data" },

198 { 
MTYPE_OSPF_CRYPT_KEY
, "OSPF crypt key" },

199 { 
MTYPE_OSPF_EXTERNAL_INFO
, "OSPFÉxt. info" },

200 { 
MTYPE_OSPF_DISTANCE
, "OSPF distance" },

201 { 
MTYPE_OSPF_IF_INFO
, "OSPF if info" },

202 { 
MTYPE_OSPF_IF_PARAMS
, "OSPF ifÖarams" },

203 { 
MTYPE_OSPF_MESSAGE
, "OSPF message" },

204 { -1, 
NULL
 },

207 
mem‹y_li°
 
	gmem‹y_li°_o•f6
[] =

209 { 
MTYPE_OSPF6_TOP
, "OSPF6Åop" },

210 { 
MTYPE_OSPF6_AREA
, "OSPF6área" },

211 { 
MTYPE_OSPF6_IF
, "OSPF6 interface" },

212 { 
MTYPE_OSPF6_NEIGHBOR
, "OSPF6Çeighbor" },

213 { 
MTYPE_OSPF6_ROUTE
, "OSPF6Ñoute" },

214 { 
MTYPE_OSPF6_PREFIX
, "OSPF6Örefix" },

215 { 
MTYPE_OSPF6_MESSAGE
, "OSPF6 message" },

216 { 
MTYPE_OSPF6_LSA
, "OSPF6 LSA" },

217 { 
MTYPE_OSPF6_LSA_SUMMARY
, "OSPF6 LSA summary" },

218 { 
MTYPE_OSPF6_LSDB
, "OSPF6 LSA database" },

219 { 
MTYPE_OSPF6_VERTEX
, "OSPF6 vertex" },

220 { 
MTYPE_OSPF6_SPFTREE
, "OSPF6 SPFÅree" },

221 { 
MTYPE_OSPF6_NEXTHOP
, "OSPF6Çexthop" },

222 { 
MTYPE_OSPF6_EXTERNAL_INFO
,"OSPF6Éxt. info" },

223 { 
MTYPE_OSPF6_OTHER
, "OSPF6 other" },

224 { -1, 
NULL
 },

227 
mem‹y_li°
 
	gmem‹y_li°_isis
[] =

229 { 
MTYPE_ISIS
, "ISIS" },

230 { 
MTYPE_ISIS_TMP
, "ISIS TMP" },

231 { 
MTYPE_ISIS_CIRCUIT
, "ISIS circuit" },

232 { 
MTYPE_ISIS_LSP
, "ISIS LSP" },

233 { 
MTYPE_ISIS_ADJACENCY
, "ISISádjacency" },

234 { 
MTYPE_ISIS_AREA
, "ISISárea" },

235 { 
MTYPE_ISIS_AREA_ADDR
, "ISISáreaáddress" },

236 { 
MTYPE_ISIS_TLV
, "ISIS TLV" },

237 { 
MTYPE_ISIS_DYNHN
, "ISIS dyn hostname" },

238 { 
MTYPE_ISIS_SPFTREE
, "ISIS SPFtree" },

239 { 
MTYPE_ISIS_VERTEX
, "ISIS vertex" },

240 { 
MTYPE_ISIS_ROUTE_INFO
, "ISISÑoute info" },

241 { 
MTYPE_ISIS_NEXTHOP
, "ISISÇexthop" },

242 { 
MTYPE_ISIS_NEXTHOP6
, "ISISÇexthop6" },

243 { -1, 
NULL
 },

246 
mem‹y_li°
 
	gmem‹y_li°_vtysh
[] =

248 { 
MTYPE_VTYSH_CONFIG
, "Vtysh configuration", },

249 { 
MTYPE_VTYSH_CONFIG_LINE
, "Vtysh configurationÜine" },

250 { -1, 
NULL
 },

253 
mem‹y_li°
 
	gmem‹y_li°_kulvis‹
[] =

255 { 
MTYPE_KULVISOR_CONTEXT
, "Kulvisor context" },

256 { 
MTYPE_KULVISOR_GUEST
, "Kulvisor guest" },

257 { 
MTYPE_KULVISOR_GUEST_NAME
, "Kulvisor guestÇame" },

258 { 
MTYPE_KULVISOR_GUEST_VCONN_NAME
,"Kulvisor guestÇame" },

259 { 
MTYPE_KULVISOR_GUEST_SWITCH
, "Kulvisor guest-switch" },

260 { 
MTYPE_KULVISOR_GUEST_FLOWSPACE
, "Kulvisor guest flowspace" },

261 { 
MTYPE_KULVISOR_SWITCH
, "Kulvisor switch" },

262 { 
MTYPE_KULVISOR_SWITCH_NAME
, "Kulvisor switchÇame" },

263 { 
MTYPE_KULVISOR_SWITCH_HOSTNAME
, "Kulvisor switch hostname" },

264 { 
MTYPE_KULVISOR_XID_TRANS
, "KulvisorÅransaction-id" },

265 { 
MTYPE_KULVISOR_FLOW_MATCH
, "Kulvisor flow-match" },

266 { 
MTYPE_KULVISOR_FLOW_MOD
, "Kulvisor flow-mod" },

267 { 
MTYPE_KULVISOR_FLOW_INSTRUCTION
,"Kulvisor flow-instruction" },

268 { 
MTYPE_KULVISOR_ACTION
, "Kulvisor flow-action" },

269 { 
MTYPE_KULVISOR_TOKEN_BUCKET
, "KulvisorÅoken bucket" },

270 { 
MTYPE_KULVISOR_TMP
, "Kulvisor TMP" },

271 { -1, 
NULL
 },

274 
mli°
 
	gmli°s
[] 
__©åibuã__
 ((
unu£d
)) = {

275 { 
mem‹y_li°_lib
, "LIB" },

276 { 
mem‹y_li°_zebø
, "ZEBRA" },

277 { 
mem‹y_li°_rù
, "RIP" },

278 { 
mem‹y_li°_rùng
, "RIPNG" },

279 { 
mem‹y_li°_o•f
, "OSPF" },

280 { 
mem‹y_li°_o•f6
, "OSPF6" },

281 { 
mem‹y_li°_isis
, "ISIS" },

282 { 
mem‹y_li°_bgp
, "BGP" },

283 { 
mem‹y_li°_kulvis‹
,"KULVISOR" },

284 { 
NULL
, NULL},

	@common-libs/3rd-party/quagga-lib/src/network.c

23 
	~<zebø.h
>

24 
	~"log.h
"

25 
	~"√tw‹k.h
"

29 
	$ªadn
 (
fd
, 
u_ch¨
 *
±r
, 
nbyãs
)

31 
∆e·
;

32 
ƒód
;

34 
∆e·
 = 
nbyãs
;

36 
∆e·
 > 0)

38 
ƒód
 = 
	`ªad
 (
fd
, 
±r
, 
∆e·
);

40 i‡(
ƒód
 < 0)

41  (
ƒód
);

43 i‡(
ƒód
 == 0)

46 
∆e·
 -
ƒód
;

47 
±r
 +
ƒód
;

50  
nbyãs
 - 
∆e·
;

51 
	}
}

55 
	$wrôí
(
fd
, c⁄° 
u_ch¨
 *
±r
, 
nbyãs
)

57 
∆e·
;

58 
nwrôãn
;

60 
∆e·
 = 
nbyãs
;

62 
∆e·
 > 0)

64 
nwrôãn
 = 
	`wrôe
(
fd
, 
±r
, 
∆e·
);

66 i‡(
nwrôãn
 <= 0)

67  (
nwrôãn
);

69 
∆e·
 -
nwrôãn
;

70 
±r
 +
nwrôãn
;

72  
nbyãs
 - 
∆e·
;

73 
	}
}

76 
	$q_£t_n⁄blockög
(
fd
)

78 
Êags
;

82 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
)) < 0)

84 
	`zlog_w¨n
("fcntl(F_GETFL) failed for fd %d: %s",

85 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

88 i‡(
	`f˙é
(
fd
, 
F_SETFL
, (
Êags
 | 
O_NONBLOCK
)) < 0)

90 
	`zlog_w¨n
("fcntl failed setting fd %dÇon-blocking: %s",

91 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

95 
	}
}

	@common-libs/3rd-party/quagga-lib/src/pid_output.c

23 
	~<zebø.h
>

24 
	~<f˙é.h
>

25 
	~<log.h
>

26 
	~"vîsi⁄.h
"

28 
	#PIDFILE_MASK
 0644

	)

29 #i‚de‡
HAVE_FCNTL


31 
pid_t


32 
	$pid_ouçut
 (c⁄° *
∑th
)

34 
FILE
 *
Â
;

35 
pid_t
 
pid
;

36 
mode_t
 
ﬁdumask
;

38 
pid
 = 
	`gëpid
();

40 
ﬁdumask
 = 
	`umask
(0777 & ~
PIDFILE_MASK
);

41 
Â
 = 
	`f›í
 (
∑th
, "w");

42 i‡(
Â
 !
NULL
)

44 
	`Ârötf
 (
Â
, "%d\n", (Ë
pid
);

45 
	`f˛o£
 (
Â
);

46 
	`umask
(
ﬁdumask
);

47  
pid
;

51 
	`zlog_w¨n
("Can't fopenÖidÜock file %s (%s), continuing",

52 
∑th
, 
	`ß„_°ªº‹
(
î∫o
));

53 
	`umask
(
ﬁdumask
);

55 
	}
}

59 
pid_t


60 
	$pid_ouçut
 (c⁄° *
∑th
)

62 
tmp
;

63 
fd
;

64 
pid_t
 
pid
;

65 
buf
[16];

66 
Êock
 
lock
;

67 
mode_t
 
ﬁdumask
;

69 
pid
 = 
	`gëpid
 ();

71 
ﬁdumask
 = 
	`umask
(0777 & ~
PIDFILE_MASK
);

72 
fd
 = 
	`›í
 (
∑th
, 
O_RDWR
 | 
O_CREAT
, 
PIDFILE_MASK
);

73 i‡(
fd
 < 0)

75 
	`zlog_îr
("Can't createÖidÜock file %s (%s),Éxiting",

76 
∑th
, 
	`ß„_°ªº‹
(
î∫o
));

77 
	`umask
(
ﬁdumask
);

78 
	`exô
(1);

82 
size_t
 
pidsize
;

84 
	`umask
(
ﬁdumask
);

85 
	`mem£t
 (&
lock
, 0, (lock));

87 
lock
.
l_ty≥
 = 
F_WRLCK
;

88 
lock
.
l_whí˚
 = 
SEEK_SET
;

90 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
lock
) < 0)

92 
	`zlog_îr
("CouldÇŸÜockÖid_fûê%s,Éxôög", 
∑th
);

93 
	`exô
(1);

96 
	`•rötf
 (
buf
, "%d\n", (Ë
pid
);

97 
pidsize
 = 
	`°æí
(
buf
);

98 i‡((
tmp
 = 
	`wrôe
 (
fd
, 
buf
, 
pidsize
)) != ()pidsize)

99 
	`zlog_îr
("CouldÇot writeÖid %dÅoÖid_file %s,Ñc was %d: %s",

100 ()
pid
,
∑th
,
tmp
,
	`ß„_°ªº‹
(
î∫o
));

101 i‡(
	`·runˇã
(
fd
, 
pidsize
) < 0)

102 
	`zlog_îr
("CouldÇotÅruncateÖid_file %sÅo %u bytes: %s",

103 
∑th
,(
u_öt
)
pidsize
,
	`ß„_°ªº‹
(
î∫o
));

105  
pid
;

106 
	}
}

	@common-libs/3rd-party/quagga-lib/src/plist.c

22 
	~<zebø.h
>

24 
	~"¥efix.h
"

25 
	~"comm™d.h
"

26 
	~"mem‹y.h
"

27 
	~"∂i°.h
"

28 
	~"sockuni⁄.h
"

29 
	~"buf„r.h
"

30 
	~"°ªam.h
"

31 
	~"log.h
"

34 
	s¥efix_li°_íåy


36 
	m£q
;

38 
	mÀ
;

39 
	mge
;

41 
¥efix_li°_ty≥
 
	mty≥
;

43 
	m™y
;

44 
¥efix
 
	m¥efix
;

46 
	mªf˙t
;

47 
	mhô˙t
;

49 
¥efix_li°_íåy
 *
	m√xt
;

50 
¥efix_li°_íåy
 *
	m¥ev
;

54 
	s¥efix_li°_li°


56 
¥efix_li°
 *
	mhód
;

57 
¥efix_li°
 *
	mèû
;

61 
	s¥efix_ma°î


64 
¥efix_li°_li°
 
	mnum
;

67 
¥efix_li°_li°
 
	m°r
;

70 
	m£qnum
;

73 
¥efix_li°
 *
	mª˚¡
;

76 (*
	madd_hook
Ë(
	m¥efix_li°
 *);

79 (*
	mdñëe_hook
Ë(
	m¥efix_li°
 *);

83 
¥efix_ma°î
 
	g¥efix_ma°î_ùv4
 =

85 {
NULL
, NULL},

86 {
NULL
, NULL},

88 
NULL
,

89 
NULL
,

92 #ifde‡
HAVE_IPV6


94 
¥efix_ma°î
 
	g¥efix_ma°î_ùv6
 =

96 {
NULL
, NULL},

97 {
NULL
, NULL},

99 
NULL
,

100 
NULL
,

105 
¥efix_ma°î
 
	g¥efix_ma°î_‹f
 =

107 {
NULL
, NULL},

108 {
NULL
, NULL},

110 
NULL
,

111 
NULL
,

114 
¥efix_ma°î
 *

115 
	$¥efix_ma°î_gë
 (
afi_t
 
afi
)

117 i‡(
afi
 =
AFI_IP
)

118  &
¥efix_ma°î_ùv4
;

119 #ifde‡
HAVE_IPV6


120 i‡(
afi
 =
AFI_IP6
)

121  &
¥efix_ma°î_ùv6
;

123 i‡(
afi
 =
AFI_ORF_PREFIX
)

124  &
¥efix_ma°î_‹f
;

125  
NULL
;

126 
	}
}

129 
¥efix_li°
 *

130 
	$¥efix_li°_lookup
 (
afi_t
 
afi
, c⁄° *
«me
)

132 
¥efix_li°
 *
∂i°
;

133 
¥efix_ma°î
 *
ma°î
;

135 i‡(
«me
 =
NULL
)

136  
NULL
;

138 
ma°î
 = 
	`¥efix_ma°î_gë
 (
afi
);

139 i‡(
ma°î
 =
NULL
)

140  
NULL
;

142 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° =Öli°->
√xt
)

143 i‡(
	`°rcmp
 (
∂i°
->
«me
,Çame) == 0)

144  
∂i°
;

146 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° =Öli°->
√xt
)

147 i‡(
	`°rcmp
 (
∂i°
->
«me
,Çame) == 0)

148  
∂i°
;

150  
NULL
;

151 
	}
}

153 
¥efix_li°
 *

154 
	$¥efix_li°_√w
 ()

156 
¥efix_li°
 *
√w
;

158 
√w
 = 
	`XCALLOC
 (
MTYPE_PREFIX_LIST
,  (
¥efix_li°
));

159  
√w
;

160 
	}
}

163 
	$¥efix_li°_‰ì
 (
¥efix_li°
 *
∂i°
)

165 
	`XFREE
 (
MTYPE_PREFIX_LIST
, 
∂i°
);

166 
	}
}

168 
¥efix_li°_íåy
 *

169 
	$¥efix_li°_íåy_√w
 ()

171 
¥efix_li°_íåy
 *
√w
;

173 
√w
 = 
	`XCALLOC
 (
MTYPE_PREFIX_LIST_ENTRY
,  (
¥efix_li°_íåy
));

174  
√w
;

175 
	}
}

178 
	$¥efix_li°_íåy_‰ì
 (
¥efix_li°_íåy
 *
≥¡ry
)

180 
	`XFREE
 (
MTYPE_PREFIX_LIST_ENTRY
, 
≥¡ry
);

181 
	}
}

185 
¥efix_li°
 *

186 
	$¥efix_li°_ö£π
 (
afi_t
 
afi
, c⁄° *
«me
)

188 
i
;

189 
numbî
;

190 
¥efix_li°
 *
∂i°
;

191 
¥efix_li°
 *
poöt
;

192 
¥efix_li°_li°
 *
li°
;

193 
¥efix_ma°î
 *
ma°î
;

195 
ma°î
 = 
	`¥efix_ma°î_gë
 (
afi
);

196 i‡(
ma°î
 =
NULL
)

197  
NULL
;

200 
∂i°
 = 
	`¥efix_li°_√w
 ();

201 
∂i°
->
«me
 = 
	`XSTRDUP
 (
MTYPE_PREFIX_LIST_STR
,Çame);

202 
∂i°
->
ma°î
 = master;

206 
numbî
 = 0, 
i
 = 0; i < 
	`°æí
 (
«me
); i++)

208 i‡(
	`isdigô
 ((Ë
«me
[
i
]))

209 
numbî
 = (numbî * 10Ë+ (
«me
[
i
] - '0');

215 i‡(
i
 =
	`°æí
 (
«me
))

217 
∂i°
->
ty≥
 = 
PREFIX_TYPE_NUMBER
;

220 
li°
 = &
ma°î
->
num
;

222 
poöt
 = 
li°
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

223 i‡(
	`©ﬁ
 (
poöt
->
«me
Ë>
numbî
)

228 
∂i°
->
ty≥
 = 
PREFIX_TYPE_STRING
;

231 
li°
 = &
ma°î
->
°r
;

234 
poöt
 = 
li°
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

235 i‡(
	`°rcmp
 (
poöt
->
«me
,Çame) >= 0)

240 i‡(
li°
->
hód
 =
NULL
)

242 
li°
->
hód
 =Üi°->
èû
 = 
∂i°
;

243  
∂i°
;

247 i‡(
poöt
 =
NULL
)

249 
∂i°
->
¥ev
 = 
li°
->
èû
;

250 
li°
->
èû
->
√xt
 = 
∂i°
;

251 
li°
->
èû
 = 
∂i°
;

252  
∂i°
;

256 i‡(
poöt
 =
li°
->
hód
)

258 
∂i°
->
√xt
 = 
li°
->
hód
;

259 
li°
->
hód
->
¥ev
 = 
∂i°
;

260 
li°
->
hód
 = 
∂i°
;

261  
∂i°
;

265 
∂i°
->
√xt
 = 
poöt
;

266 
∂i°
->
¥ev
 = 
poöt
->prev;

268 i‡(
poöt
->
¥ev
)

269 
poöt
->
¥ev
->
√xt
 = 
∂i°
;

270 
poöt
->
¥ev
 = 
∂i°
;

272  
∂i°
;

273 
	}
}

275 
¥efix_li°
 *

276 
	$¥efix_li°_gë
 (
afi_t
 
afi
, c⁄° *
«me
)

278 
¥efix_li°
 *
∂i°
;

280 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

282 i‡(
∂i°
 =
NULL
)

283 
∂i°
 = 
	`¥efix_li°_ö£π
 (
afi
, 
«me
);

284  
∂i°
;

285 
	}
}

289 
	$¥efix_li°_dñëe
 (
¥efix_li°
 *
∂i°
)

291 
¥efix_li°_li°
 *
li°
;

292 
¥efix_ma°î
 *
ma°î
;

293 
¥efix_li°_íåy
 *
≥¡ry
;

294 
¥efix_li°_íåy
 *
√xt
;

297 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy = 
√xt
)

299 
√xt
 = 
≥¡ry
->next;

300 
	`¥efix_li°_íåy_‰ì
 (
≥¡ry
);

301 
∂i°
->
cou¡
--;

304 
ma°î
 = 
∂i°
->master;

306 i‡(
∂i°
->
ty≥
 =
PREFIX_TYPE_NUMBER
)

307 
li°
 = &
ma°î
->
num
;

309 
li°
 = &
ma°î
->
°r
;

311 i‡(
∂i°
->
√xt
)

312 
∂i°
->
√xt
->
¥ev
 =Ölist->prev;

314 
li°
->
èû
 = 
∂i°
->
¥ev
;

316 i‡(
∂i°
->
¥ev
)

317 
∂i°
->
¥ev
->
√xt
 =Ölist->next;

319 
li°
->
hód
 = 
∂i°
->
√xt
;

321 i‡(
∂i°
->
desc
)

322 
	`XFREE
 (
MTYPE_TMP
, 
∂i°
->
desc
);

326 
ma°î
->
ª˚¡
 = 
NULL
;

328 i‡(
∂i°
->
«me
)

329 
	`XFREE
 (
MTYPE_PREFIX_LIST_STR
, 
∂i°
->
«me
);

331 
	`¥efix_li°_‰ì
 (
∂i°
);

333 i‡(
ma°î
->
dñëe_hook
)

334 (*
ma°î
->
dñëe_hook
Ë(
NULL
);

335 
	}
}

337 
¥efix_li°_íåy
 *

338 
	$¥efix_li°_íåy_make
 (
¥efix
 *¥efix, 
¥efix_li°_ty≥
 
ty≥
,

339 
£q
, 
À
, 
ge
, 
™y
)

341 
¥efix_li°_íåy
 *
≥¡ry
;

343 
≥¡ry
 = 
	`¥efix_li°_íåy_√w
 ();

345 i‡(
™y
)

346 
≥¡ry
->
™y
 = 1;

348 
	`¥efix_c›y
 (&
≥¡ry
->
¥efix
,Örefix);

349 
≥¡ry
->
ty≥
 =Åype;

350 
≥¡ry
->
£q
 = seq;

351 
≥¡ry
->
À
 =Üe;

352 
≥¡ry
->
ge
 = ge;

354  
≥¡ry
;

355 
	}
}

359 
¥efix_li°_add_hook
 ((*
func
Ë(
¥efix_li°
 *
∂i°
))

361 
¥efix_ma°î_ùv4
.
add_hook
 = 
func
;

362 #ifde‡
HAVE_IPV6


363 
¥efix_ma°î_ùv6
.
add_hook
 = 
func
;

365 
	}
}

369 
¥efix_li°_dñëe_hook
 ((*
func
Ë(
¥efix_li°
 *
∂i°
))

371 
¥efix_ma°î_ùv4
.
dñëe_hook
 = 
func
;

372 #ifde‡
HAVE_IPV6


373 
¥efix_ma°î_ùv6
.
dñëe_hook
 = 
func
;

375 
	}
}

379 
	$¥efix_√w_£q_gë
 (
¥efix_li°
 *
∂i°
)

381 
max£q
;

382 
√w£q
;

383 
¥efix_li°_íåy
 *
≥¡ry
;

385 
max£q
 = 
√w£q
 = 0;

387 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

389 i‡(
max£q
 < 
≥¡ry
->
£q
)

390 
max£q
 = 
≥¡ry
->
£q
;

393 
√w£q
 = ((
max£q
 / 5) * 5) + 5;

395  
√w£q
;

396 
	}
}

399 
¥efix_li°_íåy
 *

400 
	$¥efix_£q_check
 (
¥efix_li°
 *
∂i°
, 
£q
)

402 
¥efix_li°_íåy
 *
≥¡ry
;

404 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

405 i‡(
≥¡ry
->
£q
 == seq)

406  
≥¡ry
;

407  
NULL
;

408 
	}
}

410 
¥efix_li°_íåy
 *

411 
	$¥efix_li°_íåy_lookup
 (
¥efix_li°
 *
∂i°
, 
¥efix
 *prefix,

412 
¥efix_li°_ty≥
 
ty≥
, 
£q
, 
À
, 
ge
)

414 
¥efix_li°_íåy
 *
≥¡ry
;

416 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

417 i‡(
	`¥efix_ßme
 (&
≥¡ry
->
¥efix
,ÖªfixË&&Öíåy->
ty≥
 ==Åype)

419 i‡(
£q
 >0 && 
≥¡ry
->seq != seq)

422 i‡(
≥¡ry
->
À
 !=Üe)

424 i‡(
≥¡ry
->
ge
 != ge)

427  
≥¡ry
;

430  
NULL
;

431 
	}
}

434 
	$¥efix_li°_íåy_dñëe
 (
¥efix_li°
 *
∂i°
,

435 
¥efix_li°_íåy
 *
≥¡ry
,

436 
upd©e_li°
)

438 i‡(
∂i°
 =
NULL
 || 
≥¡ry
 == NULL)

440 i‡(
≥¡ry
->
¥ev
)

441 
≥¡ry
->
¥ev
->
√xt
 =Öentry->next;

443 
∂i°
->
hód
 = 
≥¡ry
->
√xt
;

444 i‡(
≥¡ry
->
√xt
)

445 
≥¡ry
->
√xt
->
¥ev
 =Öentry->prev;

447 
∂i°
->
èû
 = 
≥¡ry
->
¥ev
;

449 
	`¥efix_li°_íåy_‰ì
 (
≥¡ry
);

451 
∂i°
->
cou¡
--;

453 i‡(
upd©e_li°
)

455 i‡(
∂i°
->
ma°î
->
dñëe_hook
)

456 (*
∂i°
->
ma°î
->
dñëe_hook
) (plist);

458 i‡(
∂i°
->
hód
 =
NULL
 &&Öli°->
èû
 =NULL &&Öli°->
desc
 == NULL)

459 
	`¥efix_li°_dñëe
 (
∂i°
);

461 
∂i°
->
ma°î
->
ª˚¡
 =Ölist;

463 
	}
}

466 
	$¥efix_li°_íåy_add
 (
¥efix_li°
 *
∂i°
,

467 
¥efix_li°_íåy
 *
≥¡ry
)

469 
¥efix_li°_íåy
 *
ª∂a˚
;

470 
¥efix_li°_íåy
 *
poöt
;

473 i‡(
≥¡ry
->
£q
 == -1)

474 
≥¡ry
->
£q
 = 
	`¥efix_√w_£q_gë
 (
∂i°
);

477 
ª∂a˚
 = 
	`¥efix_£q_check
 (
∂i°
, 
≥¡ry
->
£q
);

478 i‡(
ª∂a˚
)

479 
	`¥efix_li°_íåy_dñëe
 (
∂i°
, 
ª∂a˚
, 0);

482 
poöt
 = 
∂i°
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

483 i‡(
poöt
->
£q
 >
≥¡ry
->seq)

487 
≥¡ry
->
√xt
 = 
poöt
;

489 i‡(
poöt
)

491 i‡(
poöt
->
¥ev
)

492 
poöt
->
¥ev
->
√xt
 = 
≥¡ry
;

494 
∂i°
->
hód
 = 
≥¡ry
;

496 
≥¡ry
->
¥ev
 = 
poöt
->prev;

497 
poöt
->
¥ev
 = 
≥¡ry
;

501 i‡(
∂i°
->
èû
)

502 
∂i°
->
èû
->
√xt
 = 
≥¡ry
;

504 
∂i°
->
hód
 = 
≥¡ry
;

506 
≥¡ry
->
¥ev
 = 
∂i°
->
èû
;

507 
∂i°
->
èû
 = 
≥¡ry
;

511 
∂i°
->
cou¡
++;

514 i‡(
∂i°
->
ma°î
->
add_hook
)

515 (*
∂i°
->
ma°î
->
add_hook
) (plist);

517 
∂i°
->
ma°î
->
ª˚¡
 =Ölist;

518 
	}
}

522 
	$¥efix_li°_ty≥_°r
 (
¥efix_li°_íåy
 *
≥¡ry
)

524 
≥¡ry
->
ty≥
)

526 
PREFIX_PERMIT
:

528 
PREFIX_DENY
:

533 
	}
}

536 
	$¥efix_li°_íåy_m©ch
 (
¥efix_li°_íåy
 *
≥¡ry
, 
¥efix
 *
p
)

538 
ªt
;

540 
ªt
 = 
	`¥efix_m©ch
 (&
≥¡ry
->
¥efix
, 
p
);

541 i‡(! 
ªt
)

545 i‡(! 
≥¡ry
->
À
 && !Öíåy->
ge
)

547 i‡(
≥¡ry
->
¥efix
.
¥efixÀn
 !
p
->prefixlen)

552 i‡(
≥¡ry
->
À
)

553 i‡(
p
->
¥efixÀn
 > 
≥¡ry
->
À
)

556 i‡(
≥¡ry
->
ge
)

557 i‡(
p
->
¥efixÀn
 < 
≥¡ry
->
ge
)

561 
	}
}

563 
¥efix_li°_ty≥


564 
	$¥efix_li°_≠∂y
 (
¥efix_li°
 *
∂i°
, *
obje˘
)

566 
¥efix_li°_íåy
 *
≥¡ry
;

567 
¥efix
 *
p
;

569 
p
 = (
¥efix
 *Ë
obje˘
;

571 i‡(
∂i°
 =
NULL
)

572  
PREFIX_DENY
;

574 i‡(
∂i°
->
cou¡
 == 0)

575  
PREFIX_PERMIT
;

577 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

579 
≥¡ry
->
ªf˙t
++;

580 i‡(
	`¥efix_li°_íåy_m©ch
 (
≥¡ry
, 
p
))

582 
≥¡ry
->
hô˙t
++;

583  
≥¡ry
->
ty≥
;

587  
PREFIX_DENY
;

588 
	}
}

590 
__©åibuã__
 ((
unu£d
))

591 
	$¥efix_li°_¥öt
 (
¥efix_li°
 *
∂i°
)

593 
¥efix_li°_íåy
 *
≥¡ry
;

595 i‡(
∂i°
 =
NULL
)

598 
	`¥ötf
 ("ùÖªfix-li° %s: %dÉ¡rõs\n", 
∂i°
->
«me
,Öli°->
cou¡
);

600 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

602 i‡(
≥¡ry
->
™y
)

603 
	`¥ötf
 ("™y %s\n", 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
));

606 
¥efix
 *
p
;

607 
buf
[
BUFSIZ
];

609 
p
 = &
≥¡ry
->
¥efix
;

611 
	`¥ötf
 (" seq %d %s %s/%d",

612 
≥¡ry
->
£q
,

613 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
),

614 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

615 
p
->
¥efixÀn
);

616 i‡(
≥¡ry
->
ge
)

617 
	`¥ötf
 (" gê%d", 
≥¡ry
->
ge
);

618 i‡(
≥¡ry
->
À
)

619 
	`¥ötf
 ("Üê%d", 
≥¡ry
->
À
);

620 
	`¥ötf
 ("\n");

623 
	}
}

626 
¥efix_li°_íåy
 *

627 
	$¥efix_íåy_dup_check
 (
¥efix_li°
 *
∂i°
,

628 
¥efix_li°_íåy
 *
√w
)

630 
¥efix_li°_íåy
 *
≥¡ry
;

631 
£q
 = 0;

633 i‡(
√w
->
£q
 == -1)

634 
£q
 = 
	`¥efix_√w_£q_gë
 (
∂i°
);

636 
£q
 = 
√w
->seq;

638 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

640 i‡(
	`¥efix_ßme
 (&
≥¡ry
->
¥efix
, &
√w
->prefix)

641 && 
≥¡ry
->
ty≥
 =
√w
->type

642 && 
≥¡ry
->
À
 =
√w
->le

643 && 
≥¡ry
->
ge
 =
√w
->ge

644 && 
≥¡ry
->
£q
 != seq)

645  
≥¡ry
;

647  
NULL
;

648 
	}
}

651 
	$vty_övÆid_¥efix_ønge
 (
vty
 *vty, c⁄° *
¥efix
)

653 
	`vty_out
 (
vty
, "%% InvalidÖrefixÑange for %s, make sure:Üen < ge-value <=Üe-value%s",

654 
¥efix
, 
VTY_NEWLINE
);

655  
CMD_WARNING
;

656 
	}
}

659 
	$vty_¥efix_li°_ö°Æl
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
,

660 c⁄° *
£q
, c⁄° *
ty≥°r
,

661 c⁄° *
¥efix
, c⁄° *
ge
, c⁄° *
À
)

663 
ªt
;

664 
¥efix_li°_ty≥
 
ty≥
;

665 
¥efix_li°
 *
∂i°
;

666 
¥efix_li°_íåy
 *
≥¡ry
;

667 
¥efix_li°_íåy
 *
dup
;

668 
¥efix
 
p
;

669 
™y
 = 0;

670 
£qnum
 = -1;

671 
Ànum
 = 0;

672 
gíum
 = 0;

675 i‡(
£q
)

676 
£qnum
 = 
	`©oi
 (
£q
);

679 i‡(
ge
)

680 
gíum
 = 
	`©oi
 (
ge
);

681 i‡(
À
)

682 
Ànum
 = 
	`©oi
 (
À
);

685 i‡(
	`°∫cmp
 ("≥rmô", 
ty≥°r
, 1) == 0)

686 
ty≥
 = 
PREFIX_PERMIT
;

687 i‡(
	`°∫cmp
 ("díy", 
ty≥°r
, 1) == 0)

688 
ty≥
 = 
PREFIX_DENY
;

691 
	`vty_out
 (
vty
, "%%ÖªfixÅy≥ mu° bê≥rmô o∏díy%s", 
VTY_NEWLINE
);

692  
CMD_WARNING
;

696 i‡(
afi
 =
AFI_IP
)

698 i‡(
	`°∫cmp
 ("™y", 
¥efix
, 
	`°æí
 (prefix)) == 0)

700 
ªt
 = 
	`°r2¥efix_ùv4
 ("0.0.0.0/0", (
¥efix_ùv4
 *Ë&
p
);

701 
gíum
 = 0;

702 
Ànum
 = 
IPV4_MAX_BITLEN
;

703 
™y
 = 1;

706 
ªt
 = 
	`°r2¥efix_ùv4
 (
¥efix
, (
¥efix_ùv4
 *Ë&
p
);

708 i‡(
ªt
 <= 0)

710 
	`vty_out
 (
vty
, "%% MÆf‹med IPv4Öªfix%s", 
VTY_NEWLINE
);

711  
CMD_WARNING
;

714 #ifde‡
HAVE_IPV6


715 i‡(
afi
 =
AFI_IP6
)

717 i‡(
	`°∫cmp
 ("™y", 
¥efix
, 
	`°æí
 (prefix)) == 0)

719 
ªt
 = 
	`°r2¥efix_ùv6
 ("::/0", (
¥efix_ùv6
 *Ë&
p
);

720 
gíum
 = 0;

721 
Ànum
 = 
IPV6_MAX_BITLEN
;

722 
™y
 = 1;

725 
ªt
 = 
	`°r2¥efix_ùv6
 (
¥efix
, (
¥efix_ùv6
 *Ë&
p
);

727 i‡(
ªt
 <= 0)

729 
	`vty_out
 (
vty
, "%% MÆf‹med IPv6Öªfix%s", 
VTY_NEWLINE
);

730  
CMD_WARNING
;

736 i‡(
gíum
 && gíum <
p
.
¥efixÀn
)

737  
	`vty_övÆid_¥efix_ønge
 (
vty
, 
¥efix
);

739 i‡(
Ànum
 &&Üíum <
p
.
¥efixÀn
)

740  
	`vty_övÆid_¥efix_ønge
 (
vty
, 
¥efix
);

742 i‡(
Ànum
 && 
gíum
 >Üenum)

743  
	`vty_övÆid_¥efix_ønge
 (
vty
, 
¥efix
);

745 i‡(
gíum
 && 
Ànum
 =(
afi
 =
AFI_IP
 ? 32 : 128))

746 
Ànum
 = 0;

749 
∂i°
 = 
	`¥efix_li°_gë
 (
afi
, 
«me
);

752 
≥¡ry
 = 
	`¥efix_li°_íåy_make
 (&
p
, 
ty≥
, 
£qnum
, 
Ànum
, 
gíum
, 
™y
);

755 
dup
 = 
	`¥efix_íåy_dup_check
 (
∂i°
, 
≥¡ry
);

757 i‡(
dup
)

759 
	`¥efix_li°_íåy_‰ì
 (
≥¡ry
);

760 
	`vty_out
 (
vty
, "%% Insertion failed -Örefix-listÉntryÉxists:%s",

761 
VTY_NEWLINE
);

762 
	`vty_out
 (
vty
, " seq %d %†%s", 
dup
->
£q
, 
ty≥°r
, 
¥efix
);

763 i‡(! 
™y
 && 
gíum
)

764 
	`vty_out
 (
vty
, " gê%d", 
gíum
);

765 i‡(! 
™y
 && 
Ànum
)

766 
	`vty_out
 (
vty
, "Üê%d", 
Ànum
);

767 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

768  
CMD_WARNING
;

772 
	`¥efix_li°_íåy_add
 (
∂i°
, 
≥¡ry
);

774  
CMD_SUCCESS
;

775 
	}
}

778 
	$vty_¥efix_li°_unö°Æl
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
,

779 c⁄° *
£q
, c⁄° *
ty≥°r
,

780 c⁄° *
¥efix
, c⁄° *
ge
, c⁄° *
À
)

782 
ªt
;

783 
¥efix_li°_ty≥
 
ty≥
;

784 
¥efix_li°
 *
∂i°
;

785 
¥efix_li°_íåy
 *
≥¡ry
;

786 
¥efix
 
p
;

787 
£qnum
 = -1;

788 
Ànum
 = 0;

789 
gíum
 = 0;

792 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

793 i‡(! 
∂i°
)

795 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

796  
CMD_WARNING
;

800 i‡(
£q
 =
NULL
 && 
ty≥°r
 =NULL && 
¥efix
 == NULL &&

801 
ge
 =
NULL
 && 
À
 == NULL)

803 
	`¥efix_li°_dñëe
 (
∂i°
);

804  
CMD_SUCCESS
;

808 i‡((
ty≥°r
 =
NULL
Ë|| (
¥efix
 == NULL))

810 
	`vty_out
 (
vty
, "%% BŸhÖªfixándÅy≥Ñequúed%s", 
VTY_NEWLINE
);

811  
CMD_WARNING
;

815 i‡(
£q
)

816 
£qnum
 = 
	`©oi
 (
£q
);

819 i‡(
ge
)

820 
gíum
 = 
	`©oi
 (
ge
);

821 i‡(
À
)

822 
Ànum
 = 
	`©oi
 (
À
);

825 i‡(
	`°∫cmp
 ("≥rmô", 
ty≥°r
, 1) == 0)

826 
ty≥
 = 
PREFIX_PERMIT
;

827 i‡(
	`°∫cmp
 ("díy", 
ty≥°r
, 1) == 0)

828 
ty≥
 = 
PREFIX_DENY
;

831 
	`vty_out
 (
vty
, "%%ÖªfixÅy≥ mu° bê≥rmô o∏díy%s", 
VTY_NEWLINE
);

832  
CMD_WARNING
;

836 i‡(
afi
 =
AFI_IP
)

838 i‡(
	`°∫cmp
 ("™y", 
¥efix
, 
	`°æí
 (prefix)) == 0)

840 
ªt
 = 
	`°r2¥efix_ùv4
 ("0.0.0.0/0", (
¥efix_ùv4
 *Ë&
p
);

841 
gíum
 = 0;

842 
Ànum
 = 
IPV4_MAX_BITLEN
;

845 
ªt
 = 
	`°r2¥efix_ùv4
 (
¥efix
, (
¥efix_ùv4
 *Ë&
p
);

847 i‡(
ªt
 <= 0)

849 
	`vty_out
 (
vty
, "%% MÆf‹med IPv4Öªfix%s", 
VTY_NEWLINE
);

850  
CMD_WARNING
;

853 #ifde‡
HAVE_IPV6


854 i‡(
afi
 =
AFI_IP6
)

856 i‡(
	`°∫cmp
 ("™y", 
¥efix
, 
	`°æí
 (prefix)) == 0)

858 
ªt
 = 
	`°r2¥efix_ùv6
 ("::/0", (
¥efix_ùv6
 *Ë&
p
);

859 
gíum
 = 0;

860 
Ànum
 = 
IPV6_MAX_BITLEN
;

863 
ªt
 = 
	`°r2¥efix_ùv6
 (
¥efix
, (
¥efix_ùv6
 *Ë&
p
);

865 i‡(
ªt
 <= 0)

867 
	`vty_out
 (
vty
, "%% MÆf‹med IPv6Öªfix%s", 
VTY_NEWLINE
);

868  
CMD_WARNING
;

874 
≥¡ry
 = 
	`¥efix_li°_íåy_lookup
(
∂i°
, &
p
, 
ty≥
, 
£qnum
, 
Ànum
, 
gíum
);

876 i‡(
≥¡ry
 =
NULL
)

878 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

879  
CMD_WARNING
;

883 
	`¥efix_li°_íåy_dñëe
 (
∂i°
, 
≥¡ry
, 1);

885  
CMD_SUCCESS
;

886 
	}
}

889 
	$vty_¥efix_li°_desc_un£t
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
)

891 
¥efix_li°
 *
∂i°
;

893 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

894 i‡(! 
∂i°
)

896 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

897  
CMD_WARNING
;

900 i‡(
∂i°
->
desc
)

902 
	`XFREE
 (
MTYPE_TMP
, 
∂i°
->
desc
);

903 
∂i°
->
desc
 = 
NULL
;

906 i‡(
∂i°
->
hód
 =
NULL
 &&Öli°->
èû
 =NULL &&Öli°->
desc
 == NULL)

907 
	`¥efix_li°_dñëe
 (
∂i°
);

909  
CMD_SUCCESS
;

910 
	}
}

912 
	edi•œy_ty≥


914 
	mn‹mÆ_di•œy
,

915 
	msumm¨y_di•œy
,

916 
	mdëaû_di•œy
,

917 
	m£quítül_di•œy
,

918 
	ml⁄gî_di•œy
,

919 
	mfú°_m©ch_di•œy


923 
	$vty_show_¥efix_íåy
 (
vty
 *vty, 
afi_t
 
afi
, 
¥efix_li°
 *
∂i°
,

924 
¥efix_ma°î
 *
ma°î
, 
di•œy_ty≥
 
dty≥
,

925 
£qnum
)

927 
¥efix_li°_íåy
 *
≥¡ry
;

930 i‡(
zlog_deÁu…
)

931 
	`vty_out
 (
vty
, "%s: ", 
zlog_¥Ÿo_«mes
[
zlog_deÁu…
->
¥Ÿocﬁ
]);

933 i‡(
dty≥
 =
n‹mÆ_di•œy
)

935 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s: %dÉntries%s",

936 
afi
 =
AFI_IP
 ? "" : "v6",

937 
∂i°
->
«me
,Öli°->
cou¡
, 
VTY_NEWLINE
);

938 i‡(
∂i°
->
desc
)

939 
	`vty_out
 (
vty
, " Des¸ùti⁄: %s%s", 
∂i°
->
desc
, 
VTY_NEWLINE
);

941 i‡(
dty≥
 =
summ¨y_di•œy
 || dty≥ =
dëaû_di•œy
)

943 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s:%s",

944 
afi
 =
AFI_IP
 ? "" : "v6", 
∂i°
->
«me
, 
VTY_NEWLINE
);

946 i‡(
∂i°
->
desc
)

947 
	`vty_out
 (
vty
, " Des¸ùti⁄: %s%s", 
∂i°
->
desc
, 
VTY_NEWLINE
);

949 
	`vty_out
 (
vty
, " count: %d,ÑangeÉntries: %d, sequences: %d - %d%s",

950 
∂i°
->
cou¡
,Öli°->
øngecou¡
,

951 
∂i°
->
hód
 ?Öli°->hód->
£q
 : 0,

952 
∂i°
->
èû
 ?Öli°->èû->
£q
 : 0,

953 
VTY_NEWLINE
);

956 i‡(
dty≥
 !
summ¨y_di•œy
)

958 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

960 i‡(
dty≥
 =
£quítül_di•œy
 && 
≥¡ry
->
£q
 !
£qnum
)

963 
	`vty_out
 (
vty
, " ");

965 i‡(
ma°î
->
£qnum
)

966 
	`vty_out
 (
vty
, "£q %d ", 
≥¡ry
->
£q
);

968 
	`vty_out
 (
vty
, "%†", 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
));

970 i‡(
≥¡ry
->
™y
)

971 
	`vty_out
 (
vty
, "any");

974 
¥efix
 *
p
 = &
≥¡ry
->prefix;

975 
buf
[
BUFSIZ
];

977 
	`vty_out
 (
vty
, "%s/%d",

978 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

979 
p
->
¥efixÀn
);

981 i‡(
≥¡ry
->
ge
)

982 
	`vty_out
 (
vty
, " gê%d", 
≥¡ry
->
ge
);

983 i‡(
≥¡ry
->
À
)

984 
	`vty_out
 (
vty
, "Üê%d", 
≥¡ry
->
À
);

987 i‡(
dty≥
 =
dëaû_di•œy
 || dty≥ =
£quítül_di•œy
)

988 
	`vty_out
 (
vty
, " (hit count: %ld,Ñefcount: %ld)",

989 
≥¡ry
->
hô˙t
,Öíåy->
ªf˙t
);

991 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

994 
	}
}

997 
	$vty_show_¥efix_li°
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
,

998 c⁄° *
£q
, 
di•œy_ty≥
 
dty≥
)

1000 
¥efix_li°
 *
∂i°
;

1001 
¥efix_ma°î
 *
ma°î
;

1002 
£qnum
 = 0;

1004 
ma°î
 = 
	`¥efix_ma°î_gë
 (
afi
);

1005 i‡(
ma°î
 =
NULL
)

1006  
CMD_WARNING
;

1008 i‡(
£q
)

1009 
£qnum
 = 
	`©oi
 (
£q
);

1011 i‡(
«me
)

1013 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

1014 i‡(! 
∂i°
)

1016 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

1017  
CMD_WARNING
;

1019 
	`vty_show_¥efix_íåy
 (
vty
, 
afi
, 
∂i°
, 
ma°î
, 
dty≥
, 
£qnum
);

1023 i‡(
dty≥
 =
dëaû_di•œy
 || dty≥ =
summ¨y_di•œy
)

1025 i‡(
ma°î
->
ª˚¡
)

1026 
	`vty_out
 (
vty
, "Prefix-list withÅheÜast deletion/insertion: %s%s",

1027 
ma°î
->
ª˚¡
->
«me
, 
VTY_NEWLINE
);

1030 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° =Öli°->
√xt
)

1031 
	`vty_show_¥efix_íåy
 (
vty
, 
afi
, 
∂i°
, 
ma°î
, 
dty≥
, 
£qnum
);

1033 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° =Öli°->
√xt
)

1034 
	`vty_show_¥efix_íåy
 (
vty
, 
afi
, 
∂i°
, 
ma°î
, 
dty≥
, 
£qnum
);

1037  
CMD_SUCCESS
;

1038 
	}
}

1041 
	$vty_show_¥efix_li°_¥efix
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
,

1042 c⁄° *
¥efix
, 
di•œy_ty≥
 
ty≥
)

1044 
¥efix_li°
 *
∂i°
;

1045 
¥efix_li°_íåy
 *
≥¡ry
;

1046 
¥efix
 
p
;

1047 
ªt
;

1048 
m©ch
;

1050 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

1051 i‡(! 
∂i°
)

1053 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

1054  
CMD_WARNING
;

1057 
ªt
 = 
	`°r2¥efix
 (
¥efix
, &
p
);

1058 i‡(
ªt
 <= 0)

1060 
	`vty_out
 (
vty
, "%%Öªfix i†mÆf‹med%s", 
VTY_NEWLINE
);

1061  
CMD_WARNING
;

1064 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

1066 
m©ch
 = 0;

1068 i‡(
ty≥
 =
n‹mÆ_di•œy
 ||Åy≥ =
fú°_m©ch_di•œy
)

1069 i‡(
	`¥efix_ßme
 (&
p
, &
≥¡ry
->
¥efix
))

1070 
m©ch
 = 1;

1072 i‡(
ty≥
 =
l⁄gî_di•œy
)

1073 i‡(
	`¥efix_m©ch
 (&
p
, &
≥¡ry
->
¥efix
))

1074 
m©ch
 = 1;

1076 i‡(
m©ch
)

1078 
	`vty_out
 (
vty
, " seq %d %s ",

1079 
≥¡ry
->
£q
,

1080 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
));

1082 i‡(
≥¡ry
->
™y
)

1083 
	`vty_out
 (
vty
, "any");

1086 
¥efix
 *
p
 = &
≥¡ry
->prefix;

1087 
buf
[
BUFSIZ
];

1089 
	`vty_out
 (
vty
, "%s/%d",

1090 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

1091 
p
->
¥efixÀn
);

1093 i‡(
≥¡ry
->
ge
)

1094 
	`vty_out
 (
vty
, " gê%d", 
≥¡ry
->
ge
);

1095 i‡(
≥¡ry
->
À
)

1096 
	`vty_out
 (
vty
, "Üê%d", 
≥¡ry
->
À
);

1099 i‡(
ty≥
 =
n‹mÆ_di•œy
 ||Åy≥ =
fú°_m©ch_di•œy
)

1100 
	`vty_out
 (
vty
, " (hit count: %ld,Ñefcount: %ld)",

1101 
≥¡ry
->
hô˙t
,Öíåy->
ªf˙t
);

1103 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1105 i‡(
ty≥
 =
fú°_m©ch_di•œy
)

1106  
CMD_SUCCESS
;

1109  
CMD_SUCCESS
;

1110 
	}
}

1113 
	$vty_˛ór_¥efix_li°
 (
vty
 *vty, 
afi_t
 
afi
, c⁄° *
«me
,

1114 c⁄° *
¥efix
)

1116 
¥efix_ma°î
 *
ma°î
;

1117 
¥efix_li°
 *
∂i°
;

1118 
¥efix_li°_íåy
 *
≥¡ry
;

1119 
ªt
;

1120 
¥efix
 
p
;

1122 
ma°î
 = 
	`¥efix_ma°î_gë
 (
afi
);

1123 i‡(
ma°î
 =
NULL
)

1124  
CMD_WARNING
;

1126 i‡(
«me
 =
NULL
 && 
¥efix
 == NULL)

1128 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° =Öli°->
√xt
)

1129 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

1130 
≥¡ry
->
hô˙t
 = 0;

1132 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° =Öli°->
√xt
)

1133 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

1134 
≥¡ry
->
hô˙t
 = 0;

1138 
∂i°
 = 
	`¥efix_li°_lookup
 (
afi
, 
«me
);

1139 i‡(! 
∂i°
)

1141 
	`vty_out
 (
vty
, "%% C™'àföd s≥cifõdÖªfix-li°%s", 
VTY_NEWLINE
);

1142  
CMD_WARNING
;

1145 i‡(
¥efix
)

1147 
ªt
 = 
	`°r2¥efix
 (
¥efix
, &
p
);

1148 i‡(
ªt
 <= 0)

1150 
	`vty_out
 (
vty
, "%%Öªfix i†mÆf‹med%s", 
VTY_NEWLINE
);

1151  
CMD_WARNING
;

1155 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

1157 i‡(
¥efix
)

1159 i‡(
	`¥efix_m©ch
 (&
≥¡ry
->
¥efix
, &
p
))

1160 
≥¡ry
->
hô˙t
 = 0;

1163 
≥¡ry
->
hô˙t
 = 0;

1166  
CMD_SUCCESS
;

1167 
	}
}

1169 
DEFUN
 (
ù_¥efix_li°
,

1170 
ù_¥efix_li°_cmd
,

1172 
IP_STR


1173 
PREFIX_LIST_STR


1180  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,

1181 
¨gv
[1],árgv[2], 
NULL
, NULL);

1184 
DEFUN
 (
ù_¥efix_li°_ge
,

1185 
ù_¥efix_li°_ge_cmd
,

1187 
IP_STR


1188 
PREFIX_LIST_STR


1196  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1197 
¨gv
[2],árgv[3], 
NULL
);

1200 
DEFUN
 (
ù_¥efix_li°_ge_À
,

1201 
ù_¥efix_li°_ge_À_cmd
,

1203 
IP_STR


1204 
PREFIX_LIST_STR


1214  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1215 
¨gv
[2],árgv[3],árgv[4]);

1218 
DEFUN
 (
ù_¥efix_li°_À
,

1219 
ù_¥efix_li°_À_cmd
,

1221 
IP_STR


1222 
PREFIX_LIST_STR


1230  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1231 
¨gv
[2], 
NULL
,árgv[3]);

1234 
DEFUN
 (
ù_¥efix_li°_À_ge
,

1235 
ù_¥efix_li°_À_ge_cmd
,

1237 
IP_STR


1238 
PREFIX_LIST_STR


1248  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1249 
¨gv
[2],árgv[4],árgv[3]);

1252 
DEFUN
 (
ù_¥efix_li°_£q
,

1253 
ù_¥efix_li°_£q_cmd
,

1255 
IP_STR


1256 
PREFIX_LIST_STR


1265  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1266 
¨gv
[3], 
NULL
, NULL);

1269 
DEFUN
 (
ù_¥efix_li°_£q_ge
,

1270 
ù_¥efix_li°_£q_ge_cmd
,

1272 
IP_STR


1273 
PREFIX_LIST_STR


1283  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1284 
¨gv
[3],árgv[4], 
NULL
);

1287 
DEFUN
 (
ù_¥efix_li°_£q_ge_À
,

1288 
ù_¥efix_li°_£q_ge_À_cmd
,

1290 
IP_STR


1291 
PREFIX_LIST_STR


1303  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1304 
¨gv
[3],árgv[4],árgv[5]);

1307 
DEFUN
 (
ù_¥efix_li°_£q_À
,

1308 
ù_¥efix_li°_£q_À_cmd
,

1310 
IP_STR


1311 
PREFIX_LIST_STR


1321  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1322 
¨gv
[3], 
NULL
,árgv[4]);

1325 
DEFUN
 (
ù_¥efix_li°_£q_À_ge
,

1326 
ù_¥efix_li°_£q_À_ge_cmd
,

1328 
IP_STR


1329 
PREFIX_LIST_STR


1341  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1342 
¨gv
[3],árgv[5],árgv[4]);

1345 
DEFUN
 (
no_ù_¥efix_li°
,

1346 
no_ù_¥efix_li°_cmd
,

1348 
NO_STR


1349 
IP_STR


1350 
PREFIX_LIST_STR


1353  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
, NULL,

1354 
NULL
, NULL, NULL);

1357 
DEFUN
 (
no_ù_¥efix_li°_¥efix
,

1358 
no_ù_¥efix_li°_¥efix_cmd
,

1360 
NO_STR


1361 
IP_STR


1362 
PREFIX_LIST_STR


1369  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1370 
¨gv
[2], 
NULL
, NULL);

1373 
DEFUN
 (
no_ù_¥efix_li°_ge
,

1374 
no_ù_¥efix_li°_ge_cmd
,

1376 
NO_STR


1377 
IP_STR


1378 
PREFIX_LIST_STR


1386  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1387 
¨gv
[2],árgv[3], 
NULL
);

1390 
DEFUN
 (
no_ù_¥efix_li°_ge_À
,

1391 
no_ù_¥efix_li°_ge_À_cmd
,

1393 
NO_STR


1394 
IP_STR


1395 
PREFIX_LIST_STR


1405  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1406 
¨gv
[2],árgv[3],árgv[4]);

1409 
DEFUN
 (
no_ù_¥efix_li°_À
,

1410 
no_ù_¥efix_li°_À_cmd
,

1412 
NO_STR


1413 
IP_STR


1414 
PREFIX_LIST_STR


1422  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1423 
¨gv
[2], 
NULL
,árgv[3]);

1426 
DEFUN
 (
no_ù_¥efix_li°_À_ge
,

1427 
no_ù_¥efix_li°_À_ge_cmd
,

1429 
NO_STR


1430 
IP_STR


1431 
PREFIX_LIST_STR


1441  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
,árgv[1],

1442 
¨gv
[2],árgv[4],árgv[3]);

1445 
DEFUN
 (
no_ù_¥efix_li°_£q
,

1446 
no_ù_¥efix_li°_£q_cmd
,

1448 
NO_STR


1449 
IP_STR


1450 
PREFIX_LIST_STR


1459  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1460 
¨gv
[3], 
NULL
, NULL);

1463 
DEFUN
 (
no_ù_¥efix_li°_£q_ge
,

1464 
no_ù_¥efix_li°_£q_ge_cmd
,

1466 
NO_STR


1467 
IP_STR


1468 
PREFIX_LIST_STR


1478  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1479 
¨gv
[3],árgv[4], 
NULL
);

1482 
DEFUN
 (
no_ù_¥efix_li°_£q_ge_À
,

1483 
no_ù_¥efix_li°_£q_ge_À_cmd
,

1485 
NO_STR


1486 
IP_STR


1487 
PREFIX_LIST_STR


1499  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1500 
¨gv
[3],árgv[4],árgv[5]);

1503 
DEFUN
 (
no_ù_¥efix_li°_£q_À
,

1504 
no_ù_¥efix_li°_£q_À_cmd
,

1506 
NO_STR


1507 
IP_STR


1508 
PREFIX_LIST_STR


1518  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1519 
¨gv
[3], 
NULL
,árgv[4]);

1522 
DEFUN
 (
no_ù_¥efix_li°_£q_À_ge
,

1523 
no_ù_¥efix_li°_£q_À_ge_cmd
,

1525 
NO_STR


1526 
IP_STR


1527 
PREFIX_LIST_STR


1539  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1],árgv[2],

1540 
¨gv
[3],árgv[5],árgv[4]);

1543 
DEFUN
 (
ù_¥efix_li°_£quí˚_numbî
,

1544 
ù_¥efix_li°_£quí˚_numbî_cmd
,

1546 
IP_STR


1547 
PREFIX_LIST_STR


1550 
	g¥efix_ma°î_ùv4
.
	g£qnum
 = 1;

1551  
	gCMD_SUCCESS
;

1554 
DEFUN
 (
no_ù_¥efix_li°_£quí˚_numbî
,

1555 
no_ù_¥efix_li°_£quí˚_numbî_cmd
,

1557 
NO_STR


1558 
IP_STR


1559 
PREFIX_LIST_STR


1562 
	g¥efix_ma°î_ùv4
.
	g£qnum
 = 0;

1563  
	gCMD_SUCCESS
;

1566 
DEFUN
 (
ù_¥efix_li°_des¸ùti⁄
,

1567 
ù_¥efix_li°_des¸ùti⁄_cmd
,

1569 
IP_STR


1570 
PREFIX_LIST_STR


1575 
¥efix_li°
 *
	g∂i°
;

1577 
	g∂i°
 = 
¥efix_li°_gë
 (
AFI_IP
, 
¨gv
[0]);

1579 i‡(
	g∂i°
->
	gdesc
)

1581 
XFREE
 (
MTYPE_TMP
, 
∂i°
->
desc
);

1582 
	g∂i°
->
	gdesc
 = 
NULL
;

1584 
	g∂i°
->
	gdesc
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 1);

1586  
	gCMD_SUCCESS
;

1589 
DEFUN
 (
no_ù_¥efix_li°_des¸ùti⁄
,

1590 
no_ù_¥efix_li°_des¸ùti⁄_cmd
,

1592 
NO_STR


1593 
IP_STR


1594 
PREFIX_LIST_STR


1598  
vty_¥efix_li°_desc_un£t
 (
vty
, 
AFI_IP
, 
¨gv
[0]);

1601 
ALIAS
 (
no_ù_¥efix_li°_des¸ùti⁄
,

1602 
no_ù_¥efix_li°_des¸ùti⁄_¨g_cmd
,

1604 
NO_STR


1605 
IP_STR


1606 
PREFIX_LIST_STR


1611 
DEFUN
 (
show_ù_¥efix_li°
,

1612 
show_ù_¥efix_li°_cmd
,

1614 
SHOW_STR


1615 
IP_STR


1616 
PREFIX_LIST_STR
)

1618  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
NULL
, NULL, 
n‹mÆ_di•œy
);

1621 
DEFUN
 (
show_ù_¥efix_li°_«me
,

1622 
show_ù_¥efix_li°_«me_cmd
,

1624 
SHOW_STR


1625 
IP_STR


1626 
PREFIX_LIST_STR


1629  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
, 
n‹mÆ_di•œy
);

1632 
DEFUN
 (
show_ù_¥efix_li°_«me_£q
,

1633 
show_ù_¥efix_li°_«me_£q_cmd
,

1635 
SHOW_STR


1636 
IP_STR


1637 
PREFIX_LIST_STR


1642  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1], 
£quítül_di•œy
);

1645 
DEFUN
 (
show_ù_¥efix_li°_¥efix
,

1646 
show_ù_¥efix_li°_¥efix_cmd
,

1648 
SHOW_STR


1649 
IP_STR


1650 
PREFIX_LIST_STR


1654  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1], 
n‹mÆ_di•œy
);

1657 
DEFUN
 (
show_ù_¥efix_li°_¥efix_l⁄gî
,

1658 
show_ù_¥efix_li°_¥efix_l⁄gî_cmd
,

1660 
SHOW_STR


1661 
IP_STR


1662 
PREFIX_LIST_STR


1667  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1], 
l⁄gî_di•œy
);

1670 
DEFUN
 (
show_ù_¥efix_li°_¥efix_fú°_m©ch
,

1671 
show_ù_¥efix_li°_¥efix_fú°_m©ch_cmd
,

1673 
SHOW_STR


1674 
IP_STR


1675 
PREFIX_LIST_STR


1680  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1], 
fú°_m©ch_di•œy
);

1683 
DEFUN
 (
show_ù_¥efix_li°_summ¨y
,

1684 
show_ù_¥efix_li°_summ¨y_cmd
,

1686 
SHOW_STR


1687 
IP_STR


1688 
PREFIX_LIST_STR


1691  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
NULL
, NULL, 
summ¨y_di•œy
);

1694 
DEFUN
 (
show_ù_¥efix_li°_summ¨y_«me
,

1695 
show_ù_¥efix_li°_summ¨y_«me_cmd
,

1697 
SHOW_STR


1698 
IP_STR


1699 
PREFIX_LIST_STR


1703  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
, 
summ¨y_di•œy
);

1707 
DEFUN
 (
show_ù_¥efix_li°_dëaû
,

1708 
show_ù_¥efix_li°_dëaû_cmd
,

1710 
SHOW_STR


1711 
IP_STR


1712 
PREFIX_LIST_STR


1715  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
NULL
, NULL, 
dëaû_di•œy
);

1718 
DEFUN
 (
show_ù_¥efix_li°_dëaû_«me
,

1719 
show_ù_¥efix_li°_dëaû_«me_cmd
,

1721 
SHOW_STR


1722 
IP_STR


1723 
PREFIX_LIST_STR


1727  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
, 
dëaû_di•œy
);

1730 
DEFUN
 (
˛ór_ù_¥efix_li°
,

1731 
˛ór_ù_¥efix_li°_cmd
,

1733 
CLEAR_STR


1734 
IP_STR


1735 
PREFIX_LIST_STR
)

1737  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP
, 
NULL
, NULL);

1740 
DEFUN
 (
˛ór_ù_¥efix_li°_«me
,

1741 
˛ór_ù_¥efix_li°_«me_cmd
,

1743 
CLEAR_STR


1744 
IP_STR


1745 
PREFIX_LIST_STR


1748  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0], 
NULL
);

1751 
DEFUN
 (
˛ór_ù_¥efix_li°_«me_¥efix
,

1752 
˛ór_ù_¥efix_li°_«me_¥efix_cmd
,

1754 
CLEAR_STR


1755 
IP_STR


1756 
PREFIX_LIST_STR


1760  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP
, 
¨gv
[0],árgv[1]);

1763 #ifde‡
HAVE_IPV6


1764 
DEFUN
 (
ùv6_¥efix_li°
,

1765 
ùv6_¥efix_li°_cmd
,

1767 
IPV6_STR


1768 
PREFIX_LIST_STR


1775  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,

1776 
¨gv
[1],árgv[2], 
NULL
, NULL);

1779 
DEFUN
 (
ùv6_¥efix_li°_ge
,

1780 
ùv6_¥efix_li°_ge_cmd
,

1782 
IPV6_STR


1783 
PREFIX_LIST_STR


1791  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1792 
¨gv
[2],árgv[3], 
NULL
);

1795 
DEFUN
 (
ùv6_¥efix_li°_ge_À
,

1796 
ùv6_¥efix_li°_ge_À_cmd
,

1798 
IPV6_STR


1799 
PREFIX_LIST_STR


1810  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1811 
¨gv
[2],árgv[3],árgv[4]);

1814 
DEFUN
 (
ùv6_¥efix_li°_À
,

1815 
ùv6_¥efix_li°_À_cmd
,

1817 
IPV6_STR


1818 
PREFIX_LIST_STR


1826  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1827 
¨gv
[2], 
NULL
,árgv[3]);

1830 
DEFUN
 (
ùv6_¥efix_li°_À_ge
,

1831 
ùv6_¥efix_li°_À_ge_cmd
,

1833 
IPV6_STR


1834 
PREFIX_LIST_STR


1844  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1845 
¨gv
[2],árgv[4],árgv[3]);

1848 
DEFUN
 (
ùv6_¥efix_li°_£q
,

1849 
ùv6_¥efix_li°_£q_cmd
,

1851 
IPV6_STR


1852 
PREFIX_LIST_STR


1861  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

1862 
¨gv
[3], 
NULL
, NULL);

1865 
DEFUN
 (
ùv6_¥efix_li°_£q_ge
,

1866 
ùv6_¥efix_li°_£q_ge_cmd
,

1868 
IPV6_STR


1869 
PREFIX_LIST_STR


1879  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

1880 
¨gv
[3],árgv[4], 
NULL
);

1883 
DEFUN
 (
ùv6_¥efix_li°_£q_ge_À
,

1884 
ùv6_¥efix_li°_£q_ge_À_cmd
,

1886 
IPV6_STR


1887 
PREFIX_LIST_STR


1899  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

1900 
¨gv
[3],árgv[4],árgv[5]);

1903 
DEFUN
 (
ùv6_¥efix_li°_£q_À
,

1904 
ùv6_¥efix_li°_£q_À_cmd
,

1906 
IPV6_STR


1907 
PREFIX_LIST_STR


1917  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

1918 
¨gv
[3], 
NULL
,árgv[4]);

1921 
DEFUN
 (
ùv6_¥efix_li°_£q_À_ge
,

1922 
ùv6_¥efix_li°_£q_À_ge_cmd
,

1924 
IPV6_STR


1925 
PREFIX_LIST_STR


1937  
vty_¥efix_li°_ö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

1938 
¨gv
[3],árgv[5],árgv[4]);

1941 
DEFUN
 (
no_ùv6_¥efix_li°
,

1942 
no_ùv6_¥efix_li°_cmd
,

1944 
NO_STR


1945 
IPV6_STR


1946 
PREFIX_LIST_STR


1949  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
, NULL,

1950 
NULL
, NULL, NULL);

1953 
DEFUN
 (
no_ùv6_¥efix_li°_¥efix
,

1954 
no_ùv6_¥efix_li°_¥efix_cmd
,

1956 
NO_STR


1957 
IPV6_STR


1958 
PREFIX_LIST_STR


1965  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1966 
¨gv
[2], 
NULL
, NULL);

1969 
DEFUN
 (
no_ùv6_¥efix_li°_ge
,

1970 
no_ùv6_¥efix_li°_ge_cmd
,

1972 
NO_STR


1973 
IPV6_STR


1974 
PREFIX_LIST_STR


1982  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

1983 
¨gv
[2],árgv[3], 
NULL
);

1986 
DEFUN
 (
no_ùv6_¥efix_li°_ge_À
,

1987 
no_ùv6_¥efix_li°_ge_À_cmd
,

1989 
NO_STR


1990 
IPV6_STR


1991 
PREFIX_LIST_STR


2001  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

2002 
¨gv
[2],árgv[3],árgv[4]);

2005 
DEFUN
 (
no_ùv6_¥efix_li°_À
,

2006 
no_ùv6_¥efix_li°_À_cmd
,

2008 
NO_STR


2009 
IPV6_STR


2010 
PREFIX_LIST_STR


2018  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

2019 
¨gv
[2], 
NULL
,árgv[3]);

2022 
DEFUN
 (
no_ùv6_¥efix_li°_À_ge
,

2023 
no_ùv6_¥efix_li°_À_ge_cmd
,

2025 
NO_STR


2026 
IPV6_STR


2027 
PREFIX_LIST_STR


2037  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
,árgv[1],

2038 
¨gv
[2],árgv[4],árgv[3]);

2041 
DEFUN
 (
no_ùv6_¥efix_li°_£q
,

2042 
no_ùv6_¥efix_li°_£q_cmd
,

2044 
NO_STR


2045 
IPV6_STR


2046 
PREFIX_LIST_STR


2055  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

2056 
¨gv
[3], 
NULL
, NULL);

2059 
DEFUN
 (
no_ùv6_¥efix_li°_£q_ge
,

2060 
no_ùv6_¥efix_li°_£q_ge_cmd
,

2062 
NO_STR


2063 
IPV6_STR


2064 
PREFIX_LIST_STR


2074  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

2075 
¨gv
[3],árgv[4], 
NULL
);

2078 
DEFUN
 (
no_ùv6_¥efix_li°_£q_ge_À
,

2079 
no_ùv6_¥efix_li°_£q_ge_À_cmd
,

2081 
NO_STR


2082 
IPV6_STR


2083 
PREFIX_LIST_STR


2095  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

2096 
¨gv
[3],árgv[4],árgv[5]);

2099 
DEFUN
 (
no_ùv6_¥efix_li°_£q_À
,

2100 
no_ùv6_¥efix_li°_£q_À_cmd
,

2102 
NO_STR


2103 
IPV6_STR


2104 
PREFIX_LIST_STR


2114  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

2115 
¨gv
[3], 
NULL
,árgv[4]);

2118 
DEFUN
 (
no_ùv6_¥efix_li°_£q_À_ge
,

2119 
no_ùv6_¥efix_li°_£q_À_ge_cmd
,

2121 
NO_STR


2122 
IPV6_STR


2123 
PREFIX_LIST_STR


2135  
vty_¥efix_li°_unö°Æl
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1],árgv[2],

2136 
¨gv
[3],árgv[5],árgv[4]);

2139 
DEFUN
 (
ùv6_¥efix_li°_£quí˚_numbî
,

2140 
ùv6_¥efix_li°_£quí˚_numbî_cmd
,

2142 
IPV6_STR


2143 
PREFIX_LIST_STR


2146 
	g¥efix_ma°î_ùv6
.
	g£qnum
 = 1;

2147  
	gCMD_SUCCESS
;

2150 
DEFUN
 (
no_ùv6_¥efix_li°_£quí˚_numbî
,

2151 
no_ùv6_¥efix_li°_£quí˚_numbî_cmd
,

2153 
NO_STR


2154 
IPV6_STR


2155 
PREFIX_LIST_STR


2158 
	g¥efix_ma°î_ùv6
.
	g£qnum
 = 0;

2159  
	gCMD_SUCCESS
;

2162 
DEFUN
 (
ùv6_¥efix_li°_des¸ùti⁄
,

2163 
ùv6_¥efix_li°_des¸ùti⁄_cmd
,

2165 
IPV6_STR


2166 
PREFIX_LIST_STR


2171 
¥efix_li°
 *
	g∂i°
;

2173 
	g∂i°
 = 
¥efix_li°_gë
 (
AFI_IP6
, 
¨gv
[0]);

2175 i‡(
	g∂i°
->
	gdesc
)

2177 
XFREE
 (
MTYPE_TMP
, 
∂i°
->
desc
);

2178 
	g∂i°
->
	gdesc
 = 
NULL
;

2180 
	g∂i°
->
	gdesc
 = 
¨gv_c⁄ˇt
(
¨gv
, 
¨gc
, 1);

2182  
	gCMD_SUCCESS
;

2185 
DEFUN
 (
no_ùv6_¥efix_li°_des¸ùti⁄
,

2186 
no_ùv6_¥efix_li°_des¸ùti⁄_cmd
,

2188 
NO_STR


2189 
IPV6_STR


2190 
PREFIX_LIST_STR


2194  
vty_¥efix_li°_desc_un£t
 (
vty
, 
AFI_IP6
, 
¨gv
[0]);

2197 
ALIAS
 (
no_ùv6_¥efix_li°_des¸ùti⁄
,

2198 
no_ùv6_¥efix_li°_des¸ùti⁄_¨g_cmd
,

2200 
NO_STR


2201 
IPV6_STR


2202 
PREFIX_LIST_STR


2207 
DEFUN
 (
show_ùv6_¥efix_li°
,

2208 
show_ùv6_¥efix_li°_cmd
,

2210 
SHOW_STR


2211 
IPV6_STR


2212 
PREFIX_LIST_STR
)

2214  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
NULL
, NULL, 
n‹mÆ_di•œy
);

2217 
DEFUN
 (
show_ùv6_¥efix_li°_«me
,

2218 
show_ùv6_¥efix_li°_«me_cmd
,

2220 
SHOW_STR


2221 
IPV6_STR


2222 
PREFIX_LIST_STR


2225  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
, 
n‹mÆ_di•œy
);

2228 
DEFUN
 (
show_ùv6_¥efix_li°_«me_£q
,

2229 
show_ùv6_¥efix_li°_«me_£q_cmd
,

2231 
SHOW_STR


2232 
IPV6_STR


2233 
PREFIX_LIST_STR


2238  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1], 
£quítül_di•œy
);

2241 
DEFUN
 (
show_ùv6_¥efix_li°_¥efix
,

2242 
show_ùv6_¥efix_li°_¥efix_cmd
,

2244 
SHOW_STR


2245 
IPV6_STR


2246 
PREFIX_LIST_STR


2250  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1], 
n‹mÆ_di•œy
);

2253 
DEFUN
 (
show_ùv6_¥efix_li°_¥efix_l⁄gî
,

2254 
show_ùv6_¥efix_li°_¥efix_l⁄gî_cmd
,

2256 
SHOW_STR


2257 
IPV6_STR


2258 
PREFIX_LIST_STR


2263  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1], 
l⁄gî_di•œy
);

2266 
DEFUN
 (
show_ùv6_¥efix_li°_¥efix_fú°_m©ch
,

2267 
show_ùv6_¥efix_li°_¥efix_fú°_m©ch_cmd
,

2269 
SHOW_STR


2270 
IPV6_STR


2271 
PREFIX_LIST_STR


2276  
vty_show_¥efix_li°_¥efix
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1], 
fú°_m©ch_di•œy
);

2279 
DEFUN
 (
show_ùv6_¥efix_li°_summ¨y
,

2280 
show_ùv6_¥efix_li°_summ¨y_cmd
,

2282 
SHOW_STR


2283 
IPV6_STR


2284 
PREFIX_LIST_STR


2287  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
NULL
, NULL, 
summ¨y_di•œy
);

2290 
DEFUN
 (
show_ùv6_¥efix_li°_summ¨y_«me
,

2291 
show_ùv6_¥efix_li°_summ¨y_«me_cmd
,

2293 
SHOW_STR


2294 
IPV6_STR


2295 
PREFIX_LIST_STR


2299  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
, 
summ¨y_di•œy
);

2302 
DEFUN
 (
show_ùv6_¥efix_li°_dëaû
,

2303 
show_ùv6_¥efix_li°_dëaû_cmd
,

2305 
SHOW_STR


2306 
IPV6_STR


2307 
PREFIX_LIST_STR


2310  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
NULL
, NULL, 
dëaû_di•œy
);

2313 
DEFUN
 (
show_ùv6_¥efix_li°_dëaû_«me
,

2314 
show_ùv6_¥efix_li°_dëaû_«me_cmd
,

2316 
SHOW_STR


2317 
IPV6_STR


2318 
PREFIX_LIST_STR


2322  
vty_show_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
, 
dëaû_di•œy
);

2325 
DEFUN
 (
˛ór_ùv6_¥efix_li°
,

2326 
˛ór_ùv6_¥efix_li°_cmd
,

2328 
CLEAR_STR


2329 
IPV6_STR


2330 
PREFIX_LIST_STR
)

2332  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP6
, 
NULL
, NULL);

2335 
DEFUN
 (
˛ór_ùv6_¥efix_li°_«me
,

2336 
˛ór_ùv6_¥efix_li°_«me_cmd
,

2338 
CLEAR_STR


2339 
IPV6_STR


2340 
PREFIX_LIST_STR


2343  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0], 
NULL
);

2346 
DEFUN
 (
˛ór_ùv6_¥efix_li°_«me_¥efix
,

2347 
˛ór_ùv6_¥efix_li°_«me_¥efix_cmd
,

2349 
CLEAR_STR


2350 
IPV6_STR


2351 
PREFIX_LIST_STR


2355  
vty_˛ór_¥efix_li°
 (
vty
, 
AFI_IP6
, 
¨gv
[0],árgv[1]);

2361 
	$c⁄fig_wrôe_¥efix_afi
 (
afi_t
 
afi
, 
vty
 *vty)

2363 
¥efix_li°
 *
∂i°
;

2364 
¥efix_li°_íåy
 *
≥¡ry
;

2365 
¥efix_ma°î
 *
ma°î
;

2366 
wrôe
 = 0;

2368 
ma°î
 = 
	`¥efix_ma°î_gë
 (
afi
);

2369 i‡(
ma°î
 =
NULL
)

2372 i‡(! 
ma°î
->
£qnum
)

2374 
	`vty_out
 (
vty
, "no ip%sÖrefix-list sequence-number%s",

2375 
afi
 =
AFI_IP
 ? "" : "v6", 
VTY_NEWLINE
);

2376 
	`vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

2379 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° =Öli°->
√xt
)

2381 i‡(
∂i°
->
desc
)

2383 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s description %s%s",

2384 
afi
 =
AFI_IP
 ? "" : "v6",

2385 
∂i°
->
«me
,Öli°->
desc
, 
VTY_NEWLINE
);

2386 
wrôe
++;

2389 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

2391 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s ",

2392 
afi
 =
AFI_IP
 ? "" : "v6",

2393 
∂i°
->
«me
);

2395 i‡(
ma°î
->
£qnum
)

2396 
	`vty_out
 (
vty
, "£q %d ", 
≥¡ry
->
£q
);

2398 
	`vty_out
 (
vty
, "%†", 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
));

2400 i‡(
≥¡ry
->
™y
)

2401 
	`vty_out
 (
vty
, "any");

2404 
¥efix
 *
p
 = &
≥¡ry
->prefix;

2405 
buf
[
BUFSIZ
];

2407 
	`vty_out
 (
vty
, "%s/%d",

2408 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

2409 
p
->
¥efixÀn
);

2411 i‡(
≥¡ry
->
ge
)

2412 
	`vty_out
 (
vty
, " gê%d", 
≥¡ry
->
ge
);

2413 i‡(
≥¡ry
->
À
)

2414 
	`vty_out
 (
vty
, "Üê%d", 
≥¡ry
->
À
);

2416 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

2417 
wrôe
++;

2422 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° =Öli°->
√xt
)

2424 i‡(
∂i°
->
desc
)

2426 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s description %s%s",

2427 
afi
 =
AFI_IP
 ? "" : "v6",

2428 
∂i°
->
«me
,Öli°->
desc
, 
VTY_NEWLINE
);

2429 
wrôe
++;

2432 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

2434 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s ",

2435 
afi
 =
AFI_IP
 ? "" : "v6",

2436 
∂i°
->
«me
);

2438 i‡(
ma°î
->
£qnum
)

2439 
	`vty_out
 (
vty
, "£q %d ", 
≥¡ry
->
£q
);

2441 
	`vty_out
 (
vty
, "%s", 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
));

2443 i‡(
≥¡ry
->
™y
)

2444 
	`vty_out
 (
vty
, "ány");

2447 
¥efix
 *
p
 = &
≥¡ry
->prefix;

2448 
buf
[
BUFSIZ
];

2450 
	`vty_out
 (
vty
, " %s/%d",

2451 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

2452 
p
->
¥efixÀn
);

2454 i‡(
≥¡ry
->
ge
)

2455 
	`vty_out
 (
vty
, " gê%d", 
≥¡ry
->
ge
);

2456 i‡(
≥¡ry
->
À
)

2457 
	`vty_out
 (
vty
, "Üê%d", 
≥¡ry
->
À
);

2459 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

2460 
wrôe
++;

2464  
wrôe
;

2465 
	}
}

2467 
°ªam
 *

2468 
	$¥efix_bgp_‹f_íåy
 (
°ªam
 *
s
, 
¥efix_li°
 *
∂i°
,

2469 
u_ch¨
 
öô_Êag
, u_ch¨ 
≥rmô_Êag
, u_ch¨ 
díy_Êag
)

2471 
¥efix_li°_íåy
 *
≥¡ry
;

2473 i‡(! 
∂i°
)

2474  
s
;

2476 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

2478 
u_ch¨
 
Êag
 = 
öô_Êag
;

2479 
¥efix
 *
p
 = &
≥¡ry
->prefix;

2481 
Êag
 |(
≥¡ry
->
ty≥
 =
PREFIX_PERMIT
 ?

2482 
≥rmô_Êag
 : 
díy_Êag
);

2483 
	`°ªam_putc
 (
s
, 
Êag
);

2484 
	`°ªam_pué
 (
s
, (
u_öt32_t
)
≥¡ry
->
£q
);

2485 
	`°ªam_putc
 (
s
, (
u_ch¨
)
≥¡ry
->
ge
);

2486 
	`°ªam_putc
 (
s
, (
u_ch¨
)
≥¡ry
->
À
);

2487 
	`°ªam_put_¥efix
 (
s
, 
p
);

2490  
s
;

2491 
	}
}

2494 
	$¥efix_bgp_‹f_£t
 (*
«me
, 
afi_t
 
afi
, 
‹f_¥efix
 *
‹Â
,

2495 
≥rmô
, 
£t
)

2497 
¥efix_li°
 *
∂i°
;

2498 
¥efix_li°_íåy
 *
≥¡ry
;

2501 i‡(
‹Â
->
ge
 && orÂ->gê<‹Â->
p
.
¥efixÀn
)

2502  
CMD_WARNING
;

2503 i‡(
‹Â
->
À
 && orÂ->À <‹Â->
p
.
¥efixÀn
)

2504  
CMD_WARNING
;

2505 i‡(
‹Â
->
À
 && orÂ->
ge
 > orfp->le)

2506  
CMD_WARNING
;

2508 i‡(
‹Â
->
ge
 && orÂ->
À
 =(
afi
 =
AFI_IP
 ? 32 : 128))

2509 
‹Â
->
À
 = 0;

2511 
∂i°
 = 
	`¥efix_li°_gë
 (
AFI_ORF_PREFIX
, 
«me
);

2512 i‡(! 
∂i°
)

2513  
CMD_WARNING
;

2515 i‡(
£t
)

2517 
≥¡ry
 = 
	`¥efix_li°_íåy_make
 (&
‹Â
->
p
,

2518 (
≥rmô
 ? 
PREFIX_PERMIT
 : 
PREFIX_DENY
),

2519 
‹Â
->
£q
, orÂ->
À
, orÂ->
ge
, 0);

2521 i‡(
	`¥efix_íåy_dup_check
 (
∂i°
, 
≥¡ry
))

2523 
	`¥efix_li°_íåy_‰ì
 (
≥¡ry
);

2524  
CMD_WARNING
;

2527 
	`¥efix_li°_íåy_add
 (
∂i°
, 
≥¡ry
);

2531 
≥¡ry
 = 
	`¥efix_li°_íåy_lookup
 (
∂i°
, &
‹Â
->
p
,

2532 (
≥rmô
 ? 
PREFIX_PERMIT
 : 
PREFIX_DENY
),

2533 
‹Â
->
£q
, orÂ->
À
, orÂ->
ge
);

2535 i‡(! 
≥¡ry
)

2536  
CMD_WARNING
;

2538 
	`¥efix_li°_íåy_dñëe
 (
∂i°
, 
≥¡ry
, 1);

2541  
CMD_SUCCESS
;

2542 
	}
}

2545 
	$¥efix_bgp_‹f_ªmove_Æl
 (*
«me
)

2547 
¥efix_li°
 *
∂i°
;

2549 
∂i°
 = 
	`¥efix_li°_lookup
 (
AFI_ORF_PREFIX
, 
«me
);

2550 i‡(
∂i°
)

2551 
	`¥efix_li°_dñëe
 (
∂i°
);

2552 
	}
}

2556 
	$¥efix_bgp_show_¥efix_li°
 (
vty
 *vty, 
afi_t
 
afi
, *
«me
)

2558 
¥efix_li°
 *
∂i°
;

2559 
¥efix_li°_íåy
 *
≥¡ry
;

2561 
∂i°
 = 
	`¥efix_li°_lookup
 (
AFI_ORF_PREFIX
, 
«me
);

2562 i‡(! 
∂i°
)

2565 i‡(! 
vty
)

2566  
∂i°
->
cou¡
;

2568 
	`vty_out
 (
vty
, "ip%sÖrefix-list %s: %dÉntries%s",

2569 
afi
 =
AFI_IP
 ? "" : "v6",

2570 
∂i°
->
«me
,Öli°->
cou¡
, 
VTY_NEWLINE
);

2572 
≥¡ry
 = 
∂i°
->
hód
;Öíåy;Öíåy =Öíåy->
√xt
)

2574 
¥efix
 *
p
 = &
≥¡ry
->prefix;

2575 
buf
[
BUFSIZ
];

2577 
	`vty_out
 (
vty
, " seq %d %†%s/%d", 
≥¡ry
->
£q
,

2578 
	`¥efix_li°_ty≥_°r
 (
≥¡ry
),

2579 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
),

2580 
p
->
¥efixÀn
);

2582 i‡(
≥¡ry
->
ge
)

2583 
	`vty_out
 (
vty
, " gê%d", 
≥¡ry
->
ge
);

2584 i‡(
≥¡ry
->
À
)

2585 
	`vty_out
 (
vty
, "Üê%d", 
≥¡ry
->
À
);

2587 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

2589  
∂i°
->
cou¡
;

2590 
	}
}

2593 
	$¥efix_li°_ª£t_‹f
 ()

2595 
¥efix_li°
 *
∂i°
;

2596 
¥efix_li°
 *
√xt
;

2597 
¥efix_ma°î
 *
ma°î
;

2599 
ma°î
 = 
	`¥efix_ma°î_gë
 (
AFI_ORF_PREFIX
);

2600 i‡(
ma°î
 =
NULL
)

2603 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° = 
√xt
)

2605 
√xt
 = 
∂i°
->next;

2606 
	`¥efix_li°_dñëe
 (
∂i°
);

2608 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° = 
√xt
)

2610 
√xt
 = 
∂i°
->next;

2611 
	`¥efix_li°_dñëe
 (
∂i°
);

2614 
	`as£π
 (
ma°î
->
num
.
hód
 =
NULL
);

2615 
	`as£π
 (
ma°î
->
num
.
èû
 =
NULL
);

2617 
	`as£π
 (
ma°î
->
°r
.
hód
 =
NULL
);

2618 
	`as£π
 (
ma°î
->
°r
.
èû
 =
NULL
);

2620 
ma°î
->
£qnum
 = 1;

2621 
ma°î
->
ª˚¡
 = 
NULL
;

2622 
	}
}

2626 
cmd_node
 
	g¥efix_node
 =

2628 
PREFIX_NODE
,

2634 
	$c⁄fig_wrôe_¥efix_ùv4
 (
vty
 *vty)

2636  
	`c⁄fig_wrôe_¥efix_afi
 (
AFI_IP
, 
vty
);

2637 
	}
}

2640 
	$¥efix_li°_ª£t_ùv4
 ()

2642 
¥efix_li°
 *
∂i°
;

2643 
¥efix_li°
 *
√xt
;

2644 
¥efix_ma°î
 *
ma°î
;

2646 
ma°î
 = 
	`¥efix_ma°î_gë
 (
AFI_IP
);

2647 i‡(
ma°î
 =
NULL
)

2650 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° = 
√xt
)

2652 
√xt
 = 
∂i°
->next;

2653 
	`¥efix_li°_dñëe
 (
∂i°
);

2655 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° = 
√xt
)

2657 
√xt
 = 
∂i°
->next;

2658 
	`¥efix_li°_dñëe
 (
∂i°
);

2661 
	`as£π
 (
ma°î
->
num
.
hód
 =
NULL
);

2662 
	`as£π
 (
ma°î
->
num
.
èû
 =
NULL
);

2664 
	`as£π
 (
ma°î
->
°r
.
hód
 =
NULL
);

2665 
	`as£π
 (
ma°î
->
°r
.
èû
 =
NULL
);

2667 
ma°î
->
£qnum
 = 1;

2668 
ma°î
->
ª˚¡
 = 
NULL
;

2669 
	}
}

2672 
	$¥efix_li°_öô_ùv4
 ()

2674 
	`ö°Æl_node
 (&
¥efix_node
, 
c⁄fig_wrôe_¥efix_ùv4
);

2676 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_cmd
);

2677 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_ge_cmd
);

2678 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_ge_À_cmd
);

2679 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_À_cmd
);

2680 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_À_ge_cmd
);

2681 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£q_cmd
);

2682 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£q_ge_cmd
);

2683 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£q_ge_À_cmd
);

2684 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£q_À_cmd
);

2685 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£q_À_ge_cmd
);

2687 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_cmd
);

2688 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_¥efix_cmd
);

2689 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_ge_cmd
);

2690 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_ge_À_cmd
);

2691 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_À_cmd
);

2692 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_À_ge_cmd
);

2693 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£q_cmd
);

2694 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£q_ge_cmd
);

2695 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£q_ge_À_cmd
);

2696 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£q_À_cmd
);

2697 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£q_À_ge_cmd
);

2699 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_des¸ùti⁄_cmd
);

2700 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_des¸ùti⁄_cmd
);

2701 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_des¸ùti⁄_¨g_cmd
);

2703 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ù_¥efix_li°_£quí˚_numbî_cmd
);

2704 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ù_¥efix_li°_£quí˚_numbî_cmd
);

2706 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_cmd
);

2707 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_«me_cmd
);

2708 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_«me_£q_cmd
);

2709 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_¥efix_cmd
);

2710 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_¥efix_l⁄gî_cmd
);

2711 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_¥efix_fú°_m©ch_cmd
);

2712 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_summ¨y_cmd
);

2713 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_summ¨y_«me_cmd
);

2714 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_dëaû_cmd
);

2715 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ù_¥efix_li°_dëaû_«me_cmd
);

2717 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_cmd
);

2718 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_«me_cmd
);

2719 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_«me_£q_cmd
);

2720 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_¥efix_cmd
);

2721 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_¥efix_l⁄gî_cmd
);

2722 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_¥efix_fú°_m©ch_cmd
);

2723 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_summ¨y_cmd
);

2724 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_summ¨y_«me_cmd
);

2725 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_dëaû_cmd
);

2726 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ù_¥efix_li°_dëaû_«me_cmd
);

2728 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ù_¥efix_li°_cmd
);

2729 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ù_¥efix_li°_«me_cmd
);

2730 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ù_¥efix_li°_«me_¥efix_cmd
);

2731 
	}
}

2733 #ifde‡
HAVE_IPV6


2735 
cmd_node
 
	g¥efix_ùv6_node
 =

2737 
PREFIX_IPV6_NODE
,

2743 
	$c⁄fig_wrôe_¥efix_ùv6
 (
vty
 *vty)

2745  
	`c⁄fig_wrôe_¥efix_afi
 (
AFI_IP6
, 
vty
);

2746 
	}
}

2749 
	$¥efix_li°_ª£t_ùv6
 ()

2751 
¥efix_li°
 *
∂i°
;

2752 
¥efix_li°
 *
√xt
;

2753 
¥efix_ma°î
 *
ma°î
;

2755 
ma°î
 = 
	`¥efix_ma°î_gë
 (
AFI_IP6
);

2756 i‡(
ma°î
 =
NULL
)

2759 
∂i°
 = 
ma°î
->
num
.
hód
;Öli°;Öli° = 
√xt
)

2761 
√xt
 = 
∂i°
->next;

2762 
	`¥efix_li°_dñëe
 (
∂i°
);

2764 
∂i°
 = 
ma°î
->
°r
.
hód
;Öli°;Öli° = 
√xt
)

2766 
√xt
 = 
∂i°
->next;

2767 
	`¥efix_li°_dñëe
 (
∂i°
);

2770 
	`as£π
 (
ma°î
->
num
.
hód
 =
NULL
);

2771 
	`as£π
 (
ma°î
->
num
.
èû
 =
NULL
);

2773 
	`as£π
 (
ma°î
->
°r
.
hód
 =
NULL
);

2774 
	`as£π
 (
ma°î
->
°r
.
èû
 =
NULL
);

2776 
ma°î
->
£qnum
 = 1;

2777 
ma°î
->
ª˚¡
 = 
NULL
;

2778 
	}
}

2781 
	$¥efix_li°_öô_ùv6
 ()

2783 
	`ö°Æl_node
 (&
¥efix_ùv6_node
, 
c⁄fig_wrôe_¥efix_ùv6
);

2785 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_cmd
);

2786 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_ge_cmd
);

2787 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_ge_À_cmd
);

2788 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_À_cmd
);

2789 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_À_ge_cmd
);

2790 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£q_cmd
);

2791 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£q_ge_cmd
);

2792 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£q_ge_À_cmd
);

2793 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£q_À_cmd
);

2794 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£q_À_ge_cmd
);

2796 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_cmd
);

2797 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_¥efix_cmd
);

2798 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_ge_cmd
);

2799 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_ge_À_cmd
);

2800 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_À_cmd
);

2801 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_À_ge_cmd
);

2802 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£q_cmd
);

2803 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£q_ge_cmd
);

2804 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£q_ge_À_cmd
);

2805 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£q_À_cmd
);

2806 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£q_À_ge_cmd
);

2808 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_des¸ùti⁄_cmd
);

2809 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_des¸ùti⁄_cmd
);

2810 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_des¸ùti⁄_¨g_cmd
);

2812 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
ùv6_¥efix_li°_£quí˚_numbî_cmd
);

2813 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_ùv6_¥efix_li°_£quí˚_numbî_cmd
);

2815 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_cmd
);

2816 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_«me_cmd
);

2817 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_«me_£q_cmd
);

2818 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_¥efix_cmd
);

2819 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_¥efix_l⁄gî_cmd
);

2820 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_¥efix_fú°_m©ch_cmd
);

2821 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_summ¨y_cmd
);

2822 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_summ¨y_«me_cmd
);

2823 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_dëaû_cmd
);

2824 
	`ö°Æl_ñemít
 (
VIEW_NODE
, &
show_ùv6_¥efix_li°_dëaû_«me_cmd
);

2826 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_cmd
);

2827 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_«me_cmd
);

2828 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_«me_£q_cmd
);

2829 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_¥efix_cmd
);

2830 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_¥efix_l⁄gî_cmd
);

2831 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_¥efix_fú°_m©ch_cmd
);

2832 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_summ¨y_cmd
);

2833 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_summ¨y_«me_cmd
);

2834 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_dëaû_cmd
);

2835 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
show_ùv6_¥efix_li°_dëaû_«me_cmd
);

2837 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ùv6_¥efix_li°_cmd
);

2838 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ùv6_¥efix_li°_«me_cmd
);

2839 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
˛ór_ùv6_¥efix_li°_«me_¥efix_cmd
);

2840 
	}
}

2844 
	$¥efix_li°_öô
 ()

2846 
	`¥efix_li°_öô_ùv4
 ();

2847 #ifde‡
HAVE_IPV6


2848 
	`¥efix_li°_öô_ùv6
 ();

2850 
	}
}

2853 
	$¥efix_li°_ª£t
 ()

2855 
	`¥efix_li°_ª£t_ùv4
 ();

2856 #ifde‡
HAVE_IPV6


2857 
	`¥efix_li°_ª£t_ùv6
 ();

2859 
	`¥efix_li°_ª£t_‹f
 ();

2860 
	}
}

	@common-libs/3rd-party/quagga-lib/src/pqueue.c

21 
	~<zebø.h
>

23 
	~"mem‹y.h
"

24 
	~"pqueue.h
"

39 
	#DATA_SIZE
 ( (*))

	)

40 
	#PARENT_OF
(
x
Ë((x - 1Ë/ 2)

	)

41 
	#LEFT_OF
(
x
Ë(2 * x + 1)

	)

42 
	#RIGHT_OF
(
x
Ë(2 * x + 2)

	)

43 
	#HAVE_CHILD
(
x
,
q
Ë(x < (q)->
size
 / 2)

	)

46 
	$åickÀ_up
 (
ödex
, 
pqueue
 *
queue
)

48 *
tmp
;

51 
tmp
 = 
queue
->
¨øy
[
ödex
];

55 
ödex
 > 0 &&

56 (*
queue
->
cmp
Ë(
tmp
, queue->
¨øy
[
	`PARENT_OF
 (
ödex
)]) < 0)

59 
queue
->
¨øy
[
ödex
] = queue->¨øy[
	`PARENT_OF
 (index)];

60 i‡(
queue
->
upd©e
 !
NULL
)

61 (*
queue
->
upd©e
Ë(queue->
¨øy
[
ödex
], index);

62 
ödex
 = 
	`PARENT_OF
 (index);

66 
queue
->
¨øy
[
ödex
] = 
tmp
;

67 i‡(
queue
->
upd©e
 !
NULL
)

68 (*
queue
->
upd©e
Ë(
tmp
, 
ödex
);

69 
	}
}

72 
	$åickÀ_down
 (
ödex
, 
pqueue
 *
queue
)

74 *
tmp
;

75 
which
;

78 
tmp
 = 
queue
->
¨øy
[
ödex
];

81 
	`HAVE_CHILD
 (
ödex
, 
queue
))

85 i‡(
	`RIGHT_OF
 (
ödex
Ë< 
queue
->
size
 &&

86 (*
queue
->
cmp
Ë(queue->
¨øy
[
	`LEFT_OF
 (
ödex
)],

87 
queue
->
¨øy
[
	`RIGHT_OF
 (
ödex
)]) > 0)

88 
which
 = 
	`RIGHT_OF
 (
ödex
);

90 
which
 = 
	`LEFT_OF
 (
ödex
);

93 i‡((*
queue
->
cmp
Ë(queue->
¨øy
[
which
], 
tmp
) > 0)

97 
queue
->
¨øy
[
ödex
] = queue->¨øy[
which
];

98 i‡(
queue
->
upd©e
 !
NULL
)

99 (*
queue
->
upd©e
Ë(queue->
¨øy
[
ödex
], index);

100 
ödex
 = 
which
;

104 
queue
->
¨øy
[
ödex
] = 
tmp
;

105 i‡(
queue
->
upd©e
 !
NULL
)

106 (*
queue
->
upd©e
Ë(
tmp
, 
ödex
);

107 
	}
}

109 
pqueue
 *

110 
	$pqueue_¸óã
 ()

112 
pqueue
 *
queue
;

114 
queue
 = 
	`XCALLOC
 (
MTYPE_PQUEUE
,  (
pqueue
));

116 
queue
->
¨øy
 = 
	`XCALLOC
 (
MTYPE_PQUEUE_DATA
,

117 
DATA_SIZE
 * 
PQUEUE_INIT_ARRAYSIZE
);

118 
queue
->
¨øy_size
 = 
PQUEUE_INIT_ARRAYSIZE
;

121 
queue
->
upd©e
 = 
NULL
;

122  
queue
;

123 
	}
}

126 
	$pqueue_dñëe
 (
pqueue
 *
queue
)

128 
	`XFREE
 (
MTYPE_PQUEUE_DATA
, 
queue
->
¨øy
);

129 
	`XFREE
 (
MTYPE_PQUEUE
, 
queue
);

130 
	}
}

133 
	$pqueue_ex∑nd
 (
pqueue
 *
queue
)

135 **
√w¨øy
;

137 
√w¨øy
 = 
	`XCALLOC
 (
MTYPE_PQUEUE_DATA
, 
queue
->
¨øy_size
 * 
DATA_SIZE
 * 2);

138 i‡(
√w¨øy
 =
NULL
)

141 
	`mem˝y
 (
√w¨øy
, 
queue
->
¨øy
, queue->
¨øy_size
 * 
DATA_SIZE
);

143 
	`XFREE
 (
MTYPE_PQUEUE_DATA
, 
queue
->
¨øy
);

144 
queue
->
¨øy
 = 
√w¨øy
;

145 
queue
->
¨øy_size
 *= 2;

148 
	}
}

151 
	$pqueue_íqueue
 (*
d©a
, 
pqueue
 *
queue
)

153 i‡(
queue
->
size
 + 2 >queue->
¨øy_size
 && ! 
	`pqueue_ex∑nd
 (queue))

156 
queue
->
¨øy
[queue->
size
] = 
d©a
;

157 i‡(
queue
->
upd©e
 !
NULL
)

158 (*
queue
->
upd©e
Ë(
d©a
, queue->
size
);

159 
	`åickÀ_up
 (
queue
->
size
, queue);

160 
queue
->
size
 ++;

161 
	}
}

164 
	$pqueue_dequeue
 (
pqueue
 *
queue
)

166 *
d©a
 = 
queue
->
¨øy
[0];

167 
queue
->
¨øy
[0] = queue->¨øy[--queue->
size
];

168 
	`åickÀ_down
 (0, 
queue
);

169  
d©a
;

170 
	}
}

	@common-libs/3rd-party/quagga-lib/src/prefix.c

23 
	~<zebø.h
>

25 
	~"¥efix.h
"

26 
	~"vty.h
"

27 
	~"sockuni⁄.h
"

28 
	~"mem‹y.h
"

29 
	~"log.h
"

32 c⁄° 
u_ch¨
 
	gmaskbô
[] = {0x00, 0x80, 0xc0, 0xe0, 0xf0,

36 #i‚de‡
PNBBY


37 
	#PNBBY
 8

	)

40 
	#MASKBIT
(
off£t
Ë((0xf‡<< (
PNBBY
 - (off£t))Ë& 0xff)

	)

44 
	$afi2Ámûy
 (
afi_t
 
afi
)

46 i‡(
afi
 =
AFI_IP
)

47  
AF_INET
;

48 #ifde‡
HAVE_IPV6


49 i‡(
afi
 =
AFI_IP6
)

50  
AF_INET6
;

53 
	}
}

55 
afi_t


56 
	$Ámûy2afi
 (
Ámûy
)

58 i‡(
Ámûy
 =
AF_INET
)

59  
AFI_IP
;

60 #ifde‡
HAVE_IPV6


61 i‡(
Ámûy
 =
AF_INET6
)

62  
AFI_IP6
;

65 
	}
}

69 
	$¥efix_m©ch
 (c⁄° 
¥efix
 *
n
, c⁄° ¥efix *
p
)

71 
off£t
;

72 
shi·
;

73 c⁄° 
u_ch¨
 *
≈
, *
µ
;

76 i‡(
n
->
¥efixÀn
 > 
p
->prefixlen)

80 
≈
 = (c⁄° 
u_ch¨
 *)&
n
->
u
.
¥efix
;

81 
µ
 = (c⁄° 
u_ch¨
 *)&
p
->
u
.
¥efix
;

83 
off£t
 = 
n
->
¥efixÀn
 / 
PNBBY
;

84 
shi·
 = 
n
->
¥efixÀn
 % 
PNBBY
;

86 i‡(
shi·
)

87 i‡(
maskbô
[
shi·
] & (
≈
[
off£t
] ^ 
µ
[offset]))

90 
off£t
--)

91 i‡(
≈
[
off£t
] !
µ
[offset])

94 
	}
}

98 
	$¥efix_c›y
 (
¥efix
 *
de°
, c⁄° ¥efix *
§c
)

100 
de°
->
Ámûy
 = 
§c
->family;

101 
de°
->
¥efixÀn
 = 
§c
->prefixlen;

103 i‡(
§c
->
Ámûy
 =
AF_INET
)

104 
de°
->
u
.
¥efix4
 = 
§c
->u.prefix4;

105 #ifde‡
HAVE_IPV6


106 i‡(
§c
->
Ámûy
 =
AF_INET6
)

107 
de°
->
u
.
¥efix6
 = 
§c
->u.prefix6;

109 i‡(
§c
->
Ámûy
 =
AF_UNSPEC
)

111 
de°
->
u
.
Õ
.
id
 = 
§c
->u.lp.id;

112 
de°
->
u
.
Õ
.
adv_rouãr
 = 
§c
->u.lp.adv_router;

116 
	`zlog
 (
NULL
, 
LOG_ERR
, "prefix_copy(): Unknownáddress family %d",

117 
§c
->
Ámûy
);

118 
	`as£π
 (0);

120 
	}
}

131 
	$¥efix_ßme
 (c⁄° 
¥efix
 *
p1
, c⁄° ¥efix *
p2
)

133 i‡(
p1
->
Ámûy
 =
p2
->Ámûy &&Ö1->
¥efixÀn
 ==Ö2->prefixlen)

135 i‡(
p1
->
Ámûy
 =
AF_INET
)

136 i‡(
	`IPV4_ADDR_SAME
 (&
p1
->
u
.
¥efix
, &
p2
->u.prefix))

138 #ifde‡
HAVE_IPV6


139 i‡(
p1
->
Ámûy
 =
AF_INET6
 )

140 i‡(
	`IPV6_ADDR_SAME
 (&
p1
->
u
.
¥efix
, &
p2
->u.prefix))

145 
	}
}

158 
	$¥efix_cmp
 (c⁄° 
¥efix
 *
p1
, c⁄° ¥efix *
p2
)

160 
off£t
;

161 
shi·
;

164 c⁄° 
u_ch¨
 *
µ1
 = (c⁄° u_ch¨ *)&
p1
->
u
.
¥efix
;

165 c⁄° 
u_ch¨
 *
µ2
 = (c⁄° u_ch¨ *)&
p2
->
u
.
¥efix
;

167 i‡(
p1
->
Ámûy
 !
p2
->Ámûy ||Ö1->
¥efixÀn
 !=Ö2->prefixlen)

170 
off£t
 = 
p1
->
¥efixÀn
 / 8;

171 
shi·
 = 
p1
->
¥efixÀn
 % 8;

173 i‡(
shi·
)

174 i‡(
maskbô
[
shi·
] & (
µ1
[
off£t
] ^ 
µ2
[offset]))

177 
off£t
--)

178 i‡(
µ1
[
off£t
] !
µ2
[offset])

182 
	}
}

186 
	$¥efix_Ámûy_°r
 (c⁄° 
¥efix
 *
p
)

188 i‡(
p
->
Ámûy
 =
AF_INET
)

190 #ifde‡
HAVE_IPV6


191 i‡(
p
->
Ámûy
 =
AF_INET6
)

195 
	}
}

198 
¥efix_ùv4
 *

199 
	$¥efix_ùv4_√w
 ()

201 
¥efix_ùv4
 *
p
;

206 
p
 = (
¥efix_ùv4
 *)
	`¥efix_√w
();

207 
p
->
Ámûy
 = 
AF_INET
;

208  
p
;

209 
	}
}

213 
	$¥efix_ùv4_‰ì
 (
¥efix_ùv4
 *
p
)

215 
	`¥efix_‰ì
((
¥efix
 *)
p
);

216 
	}
}

220 
	$°r2¥efix_ùv4
 (c⁄° *
°r
, 
¥efix_ùv4
 *
p
)

222 
ªt
;

223 
∂í
;

224 *
≤t
;

225 *
˝
;

228 
≤t
 = 
	`°rchr
 (
°r
, '/');

231 i‡(
≤t
 =
NULL
)

234 
ªt
 = 
	`öë_©⁄
 (
°r
, &
p
->
¥efix
);

235 i‡(
ªt
 == 0)

239 
p
->
Ámûy
 = 
AF_INET
;

240 
p
->
¥efixÀn
 = 
IPV4_MAX_BITLEN
;

242  
ªt
;

246 
˝
 = 
	`XMALLOC
 (
MTYPE_TMP
, (
≤t
 - 
°r
) + 1);

247 
	`°∫˝y
 (
˝
, 
°r
, 
≤t
 - str);

248 *(
˝
 + (
≤t
 - 
°r
)) = '\0';

249 
ªt
 = 
	`öë_©⁄
 (
˝
, &
p
->
¥efix
);

250 
	`XFREE
 (
MTYPE_TMP
, 
˝
);

253 
∂í
 = (
u_ch¨
Ë
	`©oi
 (++
≤t
);

254 i‡(
∂í
 > 
IPV4_MAX_PREFIXLEN
)

257 
p
->
Ámûy
 = 
AF_INET
;

258 
p
->
¥efixÀn
 = 
∂í
;

261  
ªt
;

262 
	}
}

266 
	$maskÀn2ù
 (
maskÀn
, 
ö_addr
 *
√tmask
)

268 
u_ch¨
 *
≤t
;

269 
bô
;

270 
off£t
;

272 
	`mem£t
 (
√tmask
, 0,  (
ö_addr
));

273 
≤t
 = (*Ë
√tmask
;

275 
off£t
 = 
maskÀn
 / 8;

276 
bô
 = 
maskÀn
 % 8;

278 
off£t
--)

279 *
≤t
++ = 0xff;

281 i‡(
bô
)

282 *
≤t
 = 
maskbô
[
bô
];

283 
	}
}

287 
u_ch¨


288 
	$ù_maskÀn
 (
ö_addr
 
√tmask
)

290 
u_ch¨
 
Àn
;

291 
u_ch¨
 *
≤t
;

292 
u_ch¨
 *
íd
;

293 
u_ch¨
 
vÆ
;

295 
Àn
 = 0;

296 
≤t
 = (
u_ch¨
 *Ë&
√tmask
;

297 
íd
 = 
≤t
 + 4;

299 (
≤t
 < 
íd
) && (*pnt == 0xff))

301 
Àn
+= 8;

302 
≤t
++;

305 i‡(
≤t
 < 
íd
)

307 
vÆ
 = *
≤t
;

308 
vÆ
)

310 
Àn
++;

311 
vÆ
 <<= 1;

314  
Àn
;

315 
	}
}

319 
	$≠∂y_mask_ùv4
 (
¥efix_ùv4
 *
p
)

321 
u_ch¨
 *
≤t
;

322 
ödex
;

323 
off£t
;

325 
ödex
 = 
p
->
¥efixÀn
 / 8;

327 i‡(
ödex
 < 4)

329 
≤t
 = (
u_ch¨
 *Ë&
p
->
¥efix
;

330 
off£t
 = 
p
->
¥efixÀn
 % 8;

332 
≤t
[
ödex
] &
maskbô
[
off£t
];

333 
ödex
++;

335 
ödex
 < 4)

336 
≤t
[
ödex
++] = 0;

338 
	}
}

342 
	$¥efix_ùv4_™y
 (c⁄° 
¥efix_ùv4
 *
p
)

344  (
p
->
¥efix
.
s_addr
 =0 &&Ö->
¥efixÀn
 == 0);

345 
	}
}

347 #ifde‡
HAVE_IPV6


350 
¥efix_ùv6
 *

351 
	$¥efix_ùv6_√w
 ()

353 
¥efix_ùv6
 *
p
;

357 
p
 = (
¥efix_ùv6
 *)
	`¥efix_√w
();

358 
p
->
Ámûy
 = 
AF_INET6
;

359  
p
;

360 
	}
}

364 
	$¥efix_ùv6_‰ì
 (
¥efix_ùv6
 *
p
)

366 
	`¥efix_‰ì
((
¥efix
 *)
p
);

367 
	}
}

371 
	$°r2¥efix_ùv6
 (c⁄° *
°r
, 
¥efix_ùv6
 *
p
)

373 *
≤t
;

374 *
˝
;

375 
ªt
;

377 
≤t
 = 
	`°rchr
 (
°r
, '/');

380 i‡(
≤t
 =
NULL
)

382 
ªt
 = 
	`öë_±⁄
 (
AF_INET6
, 
°r
, &
p
->
¥efix
);

383 i‡(
ªt
 == 0)

385 
p
->
¥efixÀn
 = 
IPV6_MAX_BITLEN
;

389 
∂í
;

391 
˝
 = 
	`XMALLOC
 (0, (
≤t
 - 
°r
) + 1);

392 
	`°∫˝y
 (
˝
, 
°r
, 
≤t
 - str);

393 *(
˝
 + (
≤t
 - 
°r
)) = '\0';

394 
ªt
 = 
	`öë_±⁄
 (
AF_INET6
, 
˝
, &
p
->
¥efix
);

395 
	`‰ì
 (
˝
);

396 i‡(
ªt
 == 0)

398 
∂í
 = (
u_ch¨
Ë
	`©oi
 (++
≤t
);

399 i‡(
∂í
 > 128)

401 
p
->
¥efixÀn
 = 
∂í
;

403 
p
->
Ámûy
 = 
AF_INET6
;

405  
ªt
;

406 
	}
}

411 
	$ù6_maskÀn
 (
ö6_addr
 
√tmask
)

413 
Àn
 = 0;

414 
vÆ
;

415 *
≤t
;

417 
≤t
 = (*Ë& 
√tmask
;

419 (*
≤t
 =0xffË&& 
Àn
 < 128)

421 
Àn
 += 8;

422 
≤t
++;

425 i‡(
Àn
 < 128)

427 
vÆ
 = *
≤t
;

428 
vÆ
)

430 
Àn
++;

431 
vÆ
 <<= 1;

434  
Àn
;

435 
	}
}

438 
	$maskÀn2ù6
 (
maskÀn
, 
ö6_addr
 *
√tmask
)

440 *
≤t
;

441 
bô
;

442 
off£t
;

444 
	`mem£t
 (
√tmask
, 0,  (
ö6_addr
));

445 
≤t
 = (*Ë
√tmask
;

447 
off£t
 = 
maskÀn
 / 8;

448 
bô
 = 
maskÀn
 % 8;

450 
off£t
--)

451 *
≤t
++ = 0xff;

453 i‡(
bô
)

454 *
≤t
 = 
maskbô
[
bô
];

455 
	}
}

458 
	$≠∂y_mask_ùv6
 (
¥efix_ùv6
 *
p
)

460 
u_ch¨
 *
≤t
;

461 
ödex
;

462 
off£t
;

464 
ödex
 = 
p
->
¥efixÀn
 / 8;

466 i‡(
ödex
 < 16)

468 
≤t
 = (
u_ch¨
 *Ë&
p
->
¥efix
;

469 
off£t
 = 
p
->
¥efixÀn
 % 8;

471 
≤t
[
ödex
] &
maskbô
[
off£t
];

472 
ödex
++;

474 
ödex
 < 16)

475 
≤t
[
ödex
++] = 0;

477 
	}
}

480 
	$°r2ö6_addr
 (c⁄° *
°r
, 
ö6_addr
 *
addr
)

482 
i
;

483 
x
;

486 
i
 = 0; i < 16; i++)

488 
	`ssˇnf
 (
°r
 + (
i
 * 2), "%02x", &
x
);

489 
addr
->
s6_addr
[
i
] = 
x
 & 0xff;

491 
	}
}

495 
	$≠∂y_mask
 (
¥efix
 *
p
)

497 
p
->
Ámûy
)

499 
AF_INET
:

500 
	`≠∂y_mask_ùv4
 ((
¥efix_ùv4
 *)
p
);

502 #ifde‡
HAVE_IPV6


503 
AF_INET6
:

504 
	`≠∂y_mask_ùv6
 ((
¥efix_ùv6
 *)
p
);

511 
	}
}

515 
¥efix
 *

516 
	$sockuni⁄2¥efix
 (c⁄° 
sockuni⁄
 *
de°
,

517 c⁄° 
sockuni⁄
 *
mask
)

519 i‡(
de°
->
ß
.
ß_Ámûy
 =
AF_INET
)

521 
¥efix_ùv4
 *
p
;

523 
p
 = 
	`¥efix_ùv4_√w
 ();

524 
p
->
Ámûy
 = 
AF_INET
;

525 
p
->
¥efix
 = 
de°
->
sö
.
sö_addr
;

526 
p
->
¥efixÀn
 = 
	`ù_maskÀn
 (
mask
->
sö
.
sö_addr
);

527  (
¥efix
 *Ë
p
;

529 #ifde‡
HAVE_IPV6


530 i‡(
de°
->
ß
.
ß_Ámûy
 =
AF_INET6
)

532 
¥efix_ùv6
 *
p
;

534 
p
 = 
	`¥efix_ùv6_√w
 ();

535 
p
->
Ámûy
 = 
AF_INET6
;

536 
p
->
¥efixÀn
 = 
	`ù6_maskÀn
 (
mask
->
sö6
.
sö6_addr
);

537 
	`mem˝y
 (&
p
->
¥efix
, &
de°
->
sö6
.
sö6_addr
,  (
ö6_addr
));

538  (
¥efix
 *Ë
p
;

541  
NULL
;

542 
	}
}

545 
¥efix
 *

546 
	$sockuni⁄2ho°¥efix
 (c⁄° 
sockuni⁄
 *
su
)

548 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET
)

550 
¥efix_ùv4
 *
p
;

552 
p
 = 
	`¥efix_ùv4_√w
 ();

553 
p
->
Ámûy
 = 
AF_INET
;

554 
p
->
¥efix
 = 
su
->
sö
.
sö_addr
;

555 
p
->
¥efixÀn
 = 
IPV4_MAX_BITLEN
;

556  (
¥efix
 *Ë
p
;

558 #ifde‡
HAVE_IPV6


559 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET6
)

561 
¥efix_ùv6
 *
p
;

563 
p
 = 
	`¥efix_ùv6_√w
 ();

564 
p
->
Ámûy
 = 
AF_INET6
;

565 
p
->
¥efixÀn
 = 
IPV6_MAX_BITLEN
;

566 
	`mem˝y
 (&
p
->
¥efix
, &
su
->
sö6
.
sö6_addr
,  (
ö6_addr
));

567  (
¥efix
 *Ë
p
;

570  
NULL
;

571 
	}
}

574 
	$¥efix_bÀn
 (c⁄° 
¥efix
 *
p
)

576 
p
->
Ámûy
)

578 
AF_INET
:

579  
IPV4_MAX_BYTELEN
;

581 #ifde‡
HAVE_IPV6


582 
AF_INET6
:

583  
IPV6_MAX_BYTELEN
;

588 
	}
}

592 
	$°r2¥efix
 (c⁄° *
°r
, 
¥efix
 *
p
)

594 
ªt
;

597 
ªt
 = 
	`°r2¥efix_ùv4
 (
°r
, (
¥efix_ùv4
 *Ë
p
);

598 i‡(
ªt
)

599  
ªt
;

601 #ifde‡
HAVE_IPV6


603 
ªt
 = 
	`°r2¥efix_ùv6
 (
°r
, (
¥efix_ùv6
 *Ë
p
);

604 i‡(
ªt
)

605  
ªt
;

609 
	}
}

612 
	$¥efix2°r
 (c⁄° 
¥efix
 *
p
, *
°r
, 
size
)

614 
buf
[
BUFSIZ
];

616 
	`öë_¡›
 (
p
->
Ámûy
, &p->
u
.
¥efix
, 
buf
, 
BUFSIZ
);

617 
	`¢¥ötf
 (
°r
, 
size
, "%s/%d", 
buf
, 
p
->
¥efixÀn
);

619 
	}
}

621 
¥efix
 *

622 
	$¥efix_√w
 ()

624 
¥efix
 *
p
;

626 
p
 = 
	`XCALLOC
 (
MTYPE_PREFIX
,  *p);

627  
p
;

628 
	}
}

632 
	$¥efix_‰ì
 (
¥efix
 *
p
)

634 
	`XFREE
 (
MTYPE_PREFIX
, 
p
);

635 
	}
}

641 
	$Æl_digô
 (c⁄° *
°r
)

643 ; *
°r
 != '\0'; str++)

644 i‡(!
	`isdigô
 ((Ë*
°r
))

647 
	}
}

650 
	$≠∂y_˛assful_mask_ùv4
 (
¥efix_ùv4
 *
p
)

653 
u_öt32_t
 
de°ö©i⁄
;

655 
de°ö©i⁄
 = 
	`¡ohl
 (
p
->
¥efix
.
s_addr
);

657 i‡(
p
->
¥efixÀn
 =
IPV4_MAX_PREFIXLEN
);

659 i‡(
	`IN_CLASSC
 (
de°ö©i⁄
))

661 
p
->
¥efixÀn
=24;

662 
	`≠∂y_mask_ùv4
(
p
);

664 i‡(
	`IN_CLASSB
(
de°ö©i⁄
))

666 
p
->
¥efixÀn
=16;

667 
	`≠∂y_mask_ùv4
(
p
);

671 
p
->
¥efixÀn
=8;

672 
	`≠∂y_mask_ùv4
(
p
);

674 
	}
}

676 
ö_addr_t


677 
	$ùv4_√tw‹k_addr
 (
ö_addr_t
 
ho°addr
, 
maskÀn
)

679 
ö_addr
 
mask
;

681 
	`maskÀn2ù
 (
maskÀn
, &
mask
);

682  
ho°addr
 & 
mask
.
s_addr
;

683 
	}
}

685 
ö_addr_t


686 
	$ùv4_brﬂdˇ°_addr
 (
ö_addr_t
 
ho°addr
, 
maskÀn
)

688 
ö_addr
 
mask
;

690 
	`maskÀn2ù
 (
maskÀn
, &
mask
);

691  (
maskÀn
 !
IPV4_MAX_PREFIXLEN
-1) ?

693 (
ho°addr
 | ~
mask
.
s_addr
) :

695 (
ho°addr
 ^ ~
mask
.
s_addr
);

696 
	}
}

702 
	$√tmask_°r2¥efix_°r
 (c⁄° *
√t_°r
, c⁄° *
mask_°r
,

703 *
¥efix_°r
)

705 
ö_addr
 
√tw‹k
;

706 
ö_addr
 
mask
;

707 
u_ch¨
 
¥efixÀn
;

708 
u_öt32_t
 
de°ö©i⁄
;

709 
ªt
;

711 
ªt
 = 
	`öë_©⁄
 (
√t_°r
, &
√tw‹k
);

712 i‡(! 
ªt
)

715 i‡(
mask_°r
)

717 
ªt
 = 
	`öë_©⁄
 (
mask_°r
, &
mask
);

718 i‡(! 
ªt
)

721 
¥efixÀn
 = 
	`ù_maskÀn
 (
mask
);

725 
de°ö©i⁄
 = 
	`¡ohl
 (
√tw‹k
.
s_addr
);

727 i‡(
√tw‹k
.
s_addr
 == 0)

728 
¥efixÀn
 = 0;

729 i‡(
	`IN_CLASSC
 (
de°ö©i⁄
))

730 
¥efixÀn
 = 24;

731 i‡(
	`IN_CLASSB
 (
de°ö©i⁄
))

732 
¥efixÀn
 = 16;

733 i‡(
	`IN_CLASSA
 (
de°ö©i⁄
))

734 
¥efixÀn
 = 8;

739 
	`•rötf
 (
¥efix_°r
, "%s/%d", 
√t_°r
, 
¥efixÀn
);

742 
	}
}

744 #ifde‡
HAVE_IPV6


747 
	$öë6_¡ﬂ
 (
ö6_addr
 
addr
)

749 
buf
[
INET6_ADDRSTRLEN
];

751 
	`öë_¡›
 (
AF_INET6
, &
addr
, 
buf
, 
INET6_ADDRSTRLEN
);

752  
buf
;

753 
	}
}

	@common-libs/3rd-party/quagga-lib/src/privs.c

24 
	~<zebø.h
>

25 
	~"log.h
"

26 
	~"¥ivs.h
"

27 
	~"mem‹y.h
"

29 #ifde‡
HAVE_CAPABILITIES


41 #ifde‡
HAVE_LCAPS


43 
	s_p£t
 {

44 
	mnum
;

45 
ˇp_vÆue_t
 *
	mˇps
;

47 
ˇp_vÆue_t
 
	tpvÆue_t
;

48 
_p£t
 
	tp£t_t
;

49 
ˇp_t
 
	tp°‹age_t
;

51 #ñi‡
deföed
 (
HAVE_SOLARIS_CAPABILITIES
)

52 
¥iv_t
 
	tpvÆue_t
;

53 
¥iv_£t_t
 
	tp£t_t
;

54 
¥iv_£t_t
 *
	tp°‹age_t
;

63 
zebø_¥ivs_cuºít_t
 
	gz¥ivs_nuŒ_°©e
 = 
ZPRIVS_RAISED
;

66 
	s_z¥ivs_t


68 #ifde‡
HAVE_CAPABILITIES


69 
p°‹age_t
 
	mˇps
;

70 
p£t_t
 *
	msysˇps_p
;

71 
p£t_t
 *
	msysˇps_i
;

73 
uid_t
 
	mzuid
,

74 
	mzsuid
;

75 
gid_t
 
	mzgid
;

76 
gid_t
 
	mvtygΩ
;

77 } 
	gz¥ivs_°©e
;

80 #ifde‡
HAVE_CAPABILITIES


81 
z¥ivs_ch™ge_ˇps
 (
zebø_¥ivs_›s_t
);

82 
zebø_¥ivs_cuºít_t
 
z¥ivs_°©e_ˇps
 ();

84 
z¥ivs_ch™ge_uid
 (
zebø_¥ivs_›s_t
);

85 
zebø_¥ivs_cuºít_t
 
z¥ivs_°©e_uid
 ();

86 
z¥ivs_ch™ge_nuŒ
 (
zebø_¥ivs_›s_t
);

87 
zebø_¥ivs_cuºít_t
 
z¥ivs_°©e_nuŒ
 ();

89 #ifde‡
HAVE_CAPABILITIES


91 
p£t_t
 *
zˇps2sys
 (
zebø_ˇ∑bûôõs_t
 *, );

92 
z¥ivs_ˇps_öô
 (
zebø_¥ivs_t
 *);

93 
z¥ivs_ˇps_ãrmö©e
 ();

98 
	mnum
;

99 
pvÆue_t
 *
	msy°em_ˇps
;

100 } 
	gˇp_m≠
 [
ZCAP_MAX
] =

102 #ifde‡
HAVE_LCAPS


103 [
ZCAP_SETID
] = { 2, (
pvÆue_t
 []Ë{ 
CAP_SETGID
,

104 
CAP_SETUID
 }, },

105 [
ZCAP_BIND
] = { 2, (
pvÆue_t
 []Ë{ 
CAP_NET_BIND_SERVICE
,

106 
CAP_NET_BROADCAST
 }, },

107 [
ZCAP_NET_ADMIN
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_NET_ADMIN
 }, },

108 [
ZCAP_NET_RAW
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_NET_RAW
 }, },

109 [
ZCAP_CHROOT
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_SYS_CHROOT
, }, },

110 [
ZCAP_NICE
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_SYS_NICE
 }, },

111 [
ZCAP_PTRACE
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_SYS_PTRACE
 }, },

112 [
ZCAP_DAC_OVERRIDE
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_DAC_OVERRIDE
 }, },

113 [
ZCAP_READ_SEARCH
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_DAC_READ_SEARCH
 }, },

114 [
ZCAP_SYS_ADMIN
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_SYS_ADMIN
 }, },

115 [
ZCAP_FOWNER
] = { 1, (
pvÆue_t
 []Ë{ 
CAP_FOWNER
 }, },

116 #ñi‡
deföed
(
HAVE_SOLARIS_CAPABILITIES
)

118 [
ZCAP_SETID
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_PROC_SETID
 }, },

119 [
ZCAP_BIND
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_NET_PRIVADDR
 }, },

121 #ifde‡
PRIV_SYS_IP_CONFIG


122 [
ZCAP_NET_ADMIN
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_SYS_IP_CONFIG
 }, },

124 [
ZCAP_NET_ADMIN
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_SYS_NET_CONFIG
 }, },

126 [
ZCAP_NET_RAW
] = { 2, (
pvÆue_t
 []Ë{ 
PRIV_NET_RAWACCESS
,

127 
PRIV_NET_ICMPACCESS
 }, },

128 [
ZCAP_CHROOT
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_PROC_CHROOT
 }, },

129 [
ZCAP_NICE
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_PROC_PRIOCNTL
 }, },

130 [
ZCAP_PTRACE
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_PROC_SESSION
 }, },

131 [
ZCAP_DAC_OVERRIDE
] = { 2, (
pvÆue_t
 []Ë{ 
PRIV_FILE_DAC_EXECUTE
,

132 
PRIV_FILE_DAC_READ
,

133 
PRIV_FILE_DAC_SEARCH
,

134 
PRIV_FILE_DAC_WRITE
,

135 
PRIV_FILE_DAC_SEARCH
 }, },

136 [
ZCAP_READ_SEARCH
] = { 2, (
pvÆue_t
 []Ë{ 
PRIV_FILE_DAC_SEARCH
,

137 
PRIV_FILE_DAC_READ
 }, },

138 [
ZCAP_SYS_ADMIN
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_SYS_ADMIN
 }, },

139 [
ZCAP_FOWNER
] = { 1, (
pvÆue_t
 []Ë{ 
PRIV_FILE_OWNER
 }, },

143 #ifde‡
HAVE_LCAPS


146 
p£t_t
 *

147 
	$zˇps2sys
 (
zebø_ˇ∑bûôõs_t
 *
zˇps
, 
num
)

149 
p£t_t
 *
sysˇps
;

150 
i
, 
j
 = 0, 
cou¡
 = 0;

152 i‡(!
num
)

153  
NULL
;

156 
i
0; i < 
num
; i++)

157 
cou¡
 +
ˇp_m≠
[
zˇps
[
i
]].
num
;

159 i‡–(
sysˇps
 = 
	`XCALLOC
 (
MTYPE_PRIVS
, ((
p£t_t
Ë* 
num
))Ë=
NULL
)

161 
	`Ârötf
 (
°dîr
, "%s: couldÇŸáŒoˇã sysˇps!", 
__func__
);

162  
NULL
;

165 
sysˇps
->
ˇps
 = 
	`XCALLOC
 (
MTYPE_PRIVS
, ( (
pvÆue_t
Ë* 
cou¡
));

167 i‡(!
sysˇps
->
ˇps
)

169 
	`Ârötf
 (
°dîr
, "%s: couldÇŸ XCALLOC c≠s!", 
__func__
);

170  
NULL
;

174 
cou¡
 = 0;

175 
i
=0; i < 
num
; i++)

176 
j
 = 0; j < 
ˇp_m≠
[
zˇps
[
i
]].
num
; j++)

177 
sysˇps
->
ˇps
[
cou¡
++] = 
ˇp_m≠
[
zˇps
[
i
]].
sy°em_ˇps
[
j
];

180 
sysˇps
->
num
 = 
cou¡
;

182  
sysˇps
;

183 
	}
}

187 
	$z¥ivs_ch™ge_ˇps
 (
zebø_¥ivs_›s_t
 
›
)

189 
ˇp_Êag_vÆue_t
 
cÊag
;

192 
	`as£π
 (
z¥ivs_°©e
.
sysˇps_p
 && z¥ivs_°©e.
ˇps
);

193 i‡(! (
z¥ivs_°©e
.
sysˇps_p
 && z¥ivs_°©e.
ˇps
))

194 
	`exô
 (1);

196 i‡(
›
 =
ZPRIVS_RAISE
)

197 
cÊag
 = 
CAP_SET
;

198 i‡(
›
 =
ZPRIVS_LOWER
)

199 
cÊag
 = 
CAP_CLEAR
;

203 i‡–!
	`ˇp_£t_Êag
 (
z¥ivs_°©e
.
ˇps
, 
CAP_EFFECTIVE
,

204 
z¥ivs_°©e
.
sysˇps_p
->
num
,

205 
z¥ivs_°©e
.
sysˇps_p
->
ˇps
,

206 
cÊag
))

207  
	`ˇp_£t_¥oc
 (
z¥ivs_°©e
.
ˇps
);

209 
	}
}

211 
zebø_¥ivs_cuºít_t


212 
	$z¥ivs_°©e_ˇps
 ()

214 
i
;

215 
ˇp_Êag_vÆue_t
 
vÆ
;

218 
	`as£π
 (
z¥ivs_°©e
.
sysˇps_p
 && z¥ivs_°©e.
ˇps
);

219 i‡(! (
z¥ivs_°©e
.
sysˇps_p
 && z¥ivs_°©e.
ˇps
))

220 
	`exô
 (1);

222 
i
=0; i < 
z¥ivs_°©e
.
sysˇps_p
->
num
; i++)

224 i‡–
	`ˇp_gë_Êag
 (
z¥ivs_°©e
.
ˇps
, z¥ivs_°©e.
sysˇps_p
->ˇps[
i
],

225 
CAP_EFFECTIVE
, &
vÆ
) )

227 
	`zlog_w¨n
 ("zprivs_state_caps: couldÇot cap_get_flag, %s",

228 
	`ß„_°ªº‹
 (
î∫o
) );

229  
ZPRIVS_UNKNOWN
;

231 i‡(
vÆ
 =
CAP_SET
)

232  
ZPRIVS_RAISED
;

234  
ZPRIVS_LOWERED
;

235 
	}
}

238 
	$z¥ivs_ˇps_öô
 (
zebø_¥ivs_t
 *
z¥ivs
)

240 
z¥ivs_°©e
.
sysˇps_p
 = 
	`zˇps2sys
 (
z¥ivs
->
ˇps_p
, z¥ivs->
ˇp_num_p
);

241 
z¥ivs_°©e
.
sysˇps_i
 = 
	`zˇps2sys
 (
z¥ivs
->
ˇps_i
, z¥ivs->
ˇp_num_i
);

244 i‡–
	`¥˘l
(
PR_SET_KEEPCAPS
, 1, 0, 0, 0) == -1 )

246 
	`Ârötf
 (
°dîr
, "privs_init: couldÇot set PR_SET_KEEPCAPS, %s\n",

247 
	`ß„_°ªº‹
 (
î∫o
) );

248 
	`exô
(1);

251 i‡–!
z¥ivs_°©e
.
sysˇps_p
 )

253 
	`Ârötf
 (
°dîr
, "privs_init: capabilitiesÉnabled, "

258 i‡(
z¥ivs_°©e
.
zuid
)

260 i‡–
	`£åeuid
 (
z¥ivs_°©e
.
zuid
, zprivs_state.zuid) )

262 
	`Ârötf
 (
°dîr
, "zprivs_init (cap): couldÇot setreuid, %s\n",

263 
	`ß„_°ªº‹
 (
î∫o
));

264 
	`exô
 (1);

268 i‡–!(
z¥ivs_°©e
.
ˇps
 = 
	`ˇp_öô
()) )

270 
	`Ârötf
 (
°dîr
, "privs_init: failedÅo cap_init, %s\n",

271 
	`ß„_°ªº‹
 (
î∫o
));

272 
	`exô
 (1);

275 i‡–
	`ˇp_˛ór
 (
z¥ivs_°©e
.
ˇps
) )

277 
	`Ârötf
 (
°dîr
, "privs_init: failedÅo cap_clear, %s\n",

278 
	`ß„_°ªº‹
 (
î∫o
));

279 
	`exô
 (1);

283 
	`ˇp_£t_Êag
(
z¥ivs_°©e
.
ˇps
, 
CAP_PERMITTED
,

284 
z¥ivs_°©e
.
sysˇps_p
->
num
,

285 
z¥ivs_°©e
.
sysˇps_p
->
ˇps
,

286 
CAP_SET
);

289 i‡(
z¥ivs_°©e
.
sysˇps_i
 && z¥ivs_°©e.sysˇps_i->
num
)

291 
	`ˇp_£t_Êag
(
z¥ivs_°©e
.
ˇps
, 
CAP_INHERITABLE
,

292 
z¥ivs_°©e
.
sysˇps_i
->
num
,

293 
z¥ivs_°©e
.
sysˇps_i
->
ˇps
,

294 
CAP_SET
);

300 i‡–
	`ˇp_£t_¥oc
 (
z¥ivs_°©e
.
ˇps
) )

302 
	`Ârötf
 (
°dîr
, "privs_init: initial cap_set_proc failed\n");

303 
	`exô
 (1);

307 
z¥ivs
->
ch™ge
 = 
z¥ivs_ch™ge_ˇps
;

308 
z¥ivs
->
cuºít_°©e
 = 
z¥ivs_°©e_ˇps
;

309 
	}
}

312 
	$z¥ivs_ˇps_ãrmö©e
 ()

315 i‡(
z¥ivs_°©e
.
ˇps
)

316 
	`ˇp_˛ór
 (
z¥ivs_°©e
.
ˇps
);

319 i‡–
	`ˇp_£t_¥oc
 (
z¥ivs_°©e
.
ˇps
) )

321 
	`Ârötf
 (
°dîr
, "privs_terminate: cap_set_proc failed, %s",

322 
	`ß„_°ªº‹
 (
î∫o
) );

323 
	`exô
 (1);

327 i‡(
z¥ivs_°©e
.
sysˇps_p
->
num
)

329 
	`XFREE
 (
MTYPE_PRIVS
, 
z¥ivs_°©e
.
sysˇps_p
->
ˇps
);

330 
	`XFREE
 (
MTYPE_PRIVS
, 
z¥ivs_°©e
.
sysˇps_p
);

333 i‡(
z¥ivs_°©e
.
sysˇps_i
 && z¥ivs_°©e.sysˇps_i->
num
)

335 
	`XFREE
 (
MTYPE_PRIVS
, 
z¥ivs_°©e
.
sysˇps_i
->
ˇps
);

336 
	`XFREE
 (
MTYPE_PRIVS
, 
z¥ivs_°©e
.
sysˇps_i
);

339 
	`ˇp_‰ì
 (
z¥ivs_°©e
.
ˇps
);

340 
	}
}

341 #ñi‡
deföed
 (
HAVE_SOLARIS_CAPABILITIES
)

352 
p£t_t
 *

353 
	$zˇps2sys
 (
zebø_ˇ∑bûôõs_t
 *
zˇps
, 
num
)

355 
p£t_t
 *
sysˇps
;

356 
i
, 
j
 = 0;

358 i‡((
sysˇps
 = 
	`¥iv_Æloc£t
()Ë=
NULL
)

360 
	`Ârötf
 (
°dîr
, "%s: couldÇŸáŒoˇã sysˇps!\n", 
__func__
);

361 
	`exô
 (1);

364 
	`¥iv_em±y£t
 (
sysˇps
);

366 
i
=0; i < 
num
; i++)

367 
j
 = 0; j < 
ˇp_m≠
[
zˇps
[
i
]].
num
; j++)

368 
	`¥iv_add£t
 (
sysˇps
, 
ˇp_m≠
[
zˇps
[
i
]].
sy°em_ˇps
[
j
]);

370  
sysˇps
;

371 
	}
}

377 
	$z¥ivs_ch™ge_ˇps
 (
zebø_¥ivs_›s_t
 
›
)

381 
	`as£π
 (
z¥ivs_°©e
.
sysˇps_p
);

382 i‡(!
z¥ivs_°©e
.
sysˇps_p
)

384 
	`Ârötf
 (
°dîr
, "%s: Eek, missög c≠s!", 
__func__
);

385 
	`exô
 (1);

391 i‡(
›
 =
ZPRIVS_RAISE
)

392 
	`¥iv_c›y£t
 (
z¥ivs_°©e
.
sysˇps_p
, z¥ivs_°©e.
ˇps
);

393 i‡(
›
 =
ZPRIVS_LOWER
)

394 
	`¥iv_em±y£t
 (
z¥ivs_°©e
.
ˇps
);

398 i‡(
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_EFFECTIVE
, 
z¥ivs_°©e
.
ˇps
) != 0)

402 
	}
}

405 
zebø_¥ivs_cuºít_t


406 
	$z¥ivs_°©e_ˇps
 ()

408 
zebø_¥ivs_cuºít_t
 
ªsu…
;

409 
p£t_t
 *
ef„˘ive
;

411 i‡–(
ef„˘ive
 = 
	`¥iv_Æloc£t
()Ë=
NULL
)

413 
	`Ârötf
 (
°dîr
, "%s: faûedÅÿgëÖriv_Æloc£t! %s\n", 
__func__
,

414 
	`ß„_°ªº‹
 (
î∫o
));

415  
ZPRIVS_UNKNOWN
;

418 i‡(
	`gëµriv
 (
PRIV_EFFECTIVE
, 
ef„˘ive
))

420 
	`Ârötf
 (
°dîr
, "%s: faûedÅÿgë sèã! %s\n", 
__func__
,

421 
	`ß„_°ªº‹
 (
î∫o
));

422 
ªsu…
 = 
ZPRIVS_UNKNOWN
;

426 i‡(
	`¥iv_i£m±y£t
 (
ef„˘ive
Ë=
B_TRUE
)

427 
ªsu…
 = 
ZPRIVS_LOWERED
;

429 
ªsu…
 = 
ZPRIVS_RAISED
;

432 i‡(
ef„˘ive
)

433 
	`¥iv_‰ì£t
 (
ef„˘ive
);

435  
ªsu…
;

436 
	}
}

439 
	$z¥ivs_ˇps_öô
 (
zebø_¥ivs_t
 *
z¥ivs
)

441 
p£t_t
 *
basic
;

442 
p£t_t
 *
em±y
;

445 
z¥ivs_°©e
.
sysˇps_p
 = 
	`zˇps2sys
 (
z¥ivs
->
ˇps_p
, z¥ivs->
ˇp_num_p
);

446 
z¥ivs_°©e
.
sysˇps_i
 = 
	`zˇps2sys
 (
z¥ivs
->
ˇps_i
, z¥ivs->
ˇp_num_i
);

449 i‡(!
z¥ivs_°©e
.
sysˇps_p
)

451 
	`Ârötf
 (
°dîr
, "%s: capabilitiesÉnabled, "

453 
__func__
);

460 i‡((
basic
 = 
	`¥iv_°r_to_£t
("basic", ",", 
NULL
)) == NULL)

462 
	`Ârötf
 (
°dîr
, "%s: couldn'àgë basi¯£t!\n", 
__func__
);

463 
	`exô
 (1);

467 
	`¥iv_uni⁄
 (
basic
, 
z¥ivs_°©e
.
sysˇps_p
);

468 
	`¥iv_‰ì£t
 (
basic
);

471 i‡–(
em±y
 = 
	`¥iv_Æloc£t
()Ë=
NULL
)

473 
	`Ârötf
 (
°dîr
, "%s: couldn'àgëÉm±y së!\n", 
__func__
);

474 
	`exô
 (1);

476 
	`¥iv_em±y£t
 (
em±y
);

481 i‡(
	`£çÊags
 (
PRIV_AWARE
, 1))

483 
	`Ârötf
 (
°dîr
, "%s:Éº‹ sëtög PRIV_AWARE!, %s\n", 
__func__
,

484 
	`ß„_°ªº‹
 (
î∫o
) );

485 
	`exô
 (1);

489 
	`as£π
 (
z¥ivs_°©e
.
sysˇps_i
 && z¥ivs_°©e.
sysˇps_p
);

494 i‡(
z¥ivs_°©e
.
zuid
)

496 i‡–
	`£åeuid
 (
z¥ivs_°©e
.
zuid
, zprivs_state.zuid) )

498 
	`Ârötf
 (
°dîr
, "%s: couldÇot setreuid, %s\n",

499 
__func__
, 
	`ß„_°ªº‹
 (
î∫o
));

500 
	`exô
 (1);

505 i‡(
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_PERMITTED
, 
z¥ivs_°©e
.
sysˇps_p
))

507 
	`Ârötf
 (
°dîr
, "%s:Éº‹ sëtögÖîmôãd së!, %s\n", 
__func__
,

508 
	`ß„_°ªº‹
 (
î∫o
) );

509 
	`exô
 (1);

513 i‡(
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_INHERITABLE
, 
z¥ivs_°©e
.
sysˇps_i
))

515 
	`Ârötf
 (
°dîr
, "%s:Éº‹ sëtög inhîôabÀ së!, %s\n", 
__func__
,

516 
	`ß„_°ªº‹
 (
î∫o
) );

517 
	`exô
 (1);

521 i‡(
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_EFFECTIVE
, 
em±y
))

523 
	`Ârötf
 (
°dîr
, "%s:Éº‹ sëtögÉf„˘ivê£t!, %s\n", 
__func__
,

524 
	`ß„_°ªº‹
 (
î∫o
) );

525 
	`exô
 (1);

529 
z¥ivs_°©e
.
ˇps
 = 
em±y
;

532 
z¥ivs
->
ch™ge
 = 
z¥ivs_ch™ge_ˇps
;

533 
z¥ivs
->
cuºít_°©e
 = 
z¥ivs_°©e_ˇps
;

534 
	}
}

537 
	$z¥ivs_ˇps_ãrmö©e
 ()

539 
	`as£π
 (
z¥ivs_°©e
.
ˇps
);

542 
	`¥iv_em±y£t
 (
z¥ivs_°©e
.
ˇps
);

543 
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_EFFECTIVE
, 
z¥ivs_°©e
.
ˇps
);

544 
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_PERMITTED
, 
z¥ivs_°©e
.
ˇps
);

545 
	`£ç¥iv
 (
PRIV_SET
, 
PRIV_INHERITABLE
, 
z¥ivs_°©e
.
ˇps
);

548 i‡(
z¥ivs_°©e
.
sysˇps_p
)

549 
	`¥iv_‰ì£t
 (
z¥ivs_°©e
.
sysˇps_p
);

550 i‡(
z¥ivs_°©e
.
sysˇps_i
)

551 
	`¥iv_‰ì£t
 (
z¥ivs_°©e
.
sysˇps_i
);

553 
	`¥iv_‰ì£t
 (
z¥ivs_°©e
.
ˇps
);

554 
	}
}

561 
	$z¥ivs_ch™ge_uid
 (
zebø_¥ivs_›s_t
 
›
)

564 i‡(
›
 =
ZPRIVS_RAISE
)

565  
	`£ãuid
 (
z¥ivs_°©e
.
zsuid
);

566 i‡(
›
 =
ZPRIVS_LOWER
)

567  
	`£ãuid
 (
z¥ivs_°©e
.
zuid
);

570 
	}
}

572 
zebø_¥ivs_cuºít_t


573 
	$z¥ivs_°©e_uid
 ()

575  ( (
z¥ivs_°©e
.
zuid
 =
	`gëeuid
()Ë? 
ZPRIVS_LOWERED
 : 
ZPRIVS_RAISED
);

576 
	}
}

579 
	$z¥ivs_ch™ge_nuŒ
 (
zebø_¥ivs_›s_t
 
›
)

582 
	}
}

584 
zebø_¥ivs_cuºít_t


585 
	$z¥ivs_°©e_nuŒ
 ()

587  
z¥ivs_nuŒ_°©e
;

588 
	}
}

591 
	$z¥ivs_öô
(
zebø_¥ivs_t
 *
z¥ivs
)

593 
∑sswd
 *
pwíåy
 = 
NULL
;

594 
group
 *
gª¡ry
 = 
NULL
;

596 i‡(!
z¥ivs
)

598 
	`Ârötf
 (
°dîr
, "zprivs_init: called with NULLárg!\n");

599 
	`exô
 (1);

603 i‡(! (
z¥ivs
->
u£r
 || z¥ivs->
group


604 || 
z¥ivs
->
ˇp_num_p
 || z¥ivs->
ˇp_num_i
) )

606 
z¥ivs
->
ch™ge
 = 
z¥ivs_ch™ge_nuŒ
;

607 
z¥ivs
->
cuºít_°©e
 = 
z¥ivs_°©e_nuŒ
;

611 i‡(
z¥ivs
->
u£r
)

613 i‡–(
pwíåy
 = 
	`gëpw«m
 (
z¥ivs
->
u£r
)) )

615 
z¥ivs_°©e
.
zuid
 = 
pwíåy
->
pw_uid
;

620 
	`Ârötf
 (
°dîr
, "privs_init: couldÇotÜookup user %s\n",

621 
z¥ivs
->
u£r
);

622 
	`exô
 (1);

626 
gª¡ry
 = 
NULL
;

628 i‡(
z¥ivs
->
vty_group
)

631 i‡–(
gª¡ry
 = 
	`gëg∫am
 (
z¥ivs
->
vty_group
)) )

633 
z¥ivs_°©e
.
vtygΩ
 = 
gª¡ry
->
gr_gid
;

634 i‡–
	`£tgroups
 (1, &
z¥ivs_°©e
.
vtygΩ
) )

636 
	`Ârötf
 (
°dîr
, "privs_init: couldÇot setgroups, %s\n",

637 
	`ß„_°ªº‹
 (
î∫o
) );

638 
	`exô
 (1);

643 
	`Ârötf
 (
°dîr
, "privs_init: couldÇotÜookup vty group %s\n",

644 
z¥ivs
->
vty_group
);

645 
	`exô
 (1);

649 i‡(
z¥ivs
->
group
)

651 i‡–(
gª¡ry
 = 
	`gëg∫am
 (
z¥ivs
->
group
)) )

653 
z¥ivs_°©e
.
zgid
 = 
gª¡ry
->
gr_gid
;

657 
	`Ârötf
 (
°dîr
, "privs_init: couldÇotÜookup group %s\n",

658 
z¥ivs
->
group
);

659 
	`exô
 (1);

662 i‡–
	`£åegid
 (
z¥ivs_°©e
.
zgid
, zprivs_state.zgid) )

664 
	`Ârötf
 (
°dîr
, "zprivs_init: couldÇot setregid, %s\n",

665 
	`ß„_°ªº‹
 (
î∫o
) );

666 
	`exô
 (1);

670 #ifde‡
HAVE_CAPABILITIES


671 
	`z¥ivs_ˇps_öô
 (
z¥ivs
);

679 
z¥ivs_°©e
.
zsuid
 = 
	`gëeuid
();

680 i‡–
z¥ivs_°©e
.
zuid
 )

682 i‡–
	`£åeuid
 (-1, 
z¥ivs_°©e
.
zuid
) )

684 
	`Ârötf
 (
°dîr
, "privs_init (uid): couldÇot setreuid, %s\n",

685 
	`ß„_°ªº‹
 (
î∫o
));

686 
	`exô
 (1);

690 
z¥ivs
->
ch™ge
 = 
z¥ivs_ch™ge_uid
;

691 
z¥ivs
->
cuºít_°©e
 = 
z¥ivs_°©e_uid
;

693 
	}
}

696 
	$z¥ivs_ãrmö©e
 (
zebø_¥ivs_t
 *
z¥ivs
)

698 i‡(!
z¥ivs
)

700 
	`Ârötf
 (
°dîr
, "%s:Çÿ¥iv†°ru˘ giví,Åîmö©ög", 
__func__
);

701 
	`exô
 (0);

704 #ifde‡
HAVE_CAPABILITIES


705 
	`z¥ivs_ˇps_ãrmö©e
();

707 i‡(
z¥ivs_°©e
.
zuid
)

709 i‡–
	`£åeuid
 (
z¥ivs_°©e
.
zuid
, zprivs_state.zuid) )

711 
	`Ârötf
 (
°dîr
, "privs_terminate: couldÇot setreuid, %s",

712 
	`ß„_°ªº‹
 (
î∫o
) );

713 
	`exô
 (1);

718 
z¥ivs
->
ch™ge
 = 
z¥ivs_ch™ge_nuŒ
;

719 
z¥ivs
->
cuºít_°©e
 = 
z¥ivs_°©e_nuŒ
;

720 
z¥ivs_nuŒ_°©e
 = 
ZPRIVS_LOWERED
;

722 
	}
}

725 
	$z¥ivs_gë_ids
(
z¥ivs_ids_t
 *
ids
)

728 
ids
->
uid_¥iv
 = 
	`gëuid
();

729 (
z¥ivs_°©e
.
zuid
Ë? (
ids
->
uid_n‹mÆ
 = zprivs_state.zuid)

730 : (
ids
->
uid_n‹mÆ
 = -1);

731 (
z¥ivs_°©e
.
zgid
Ë? (
ids
->
gid_n‹mÆ
 = zprivs_state.zgid)

732 : (
ids
->
gid_n‹mÆ
 = -1);

733 (
z¥ivs_°©e
.
vtygΩ
Ë? (
ids
->
gid_vty
 = zprivs_state.vtygrp)

734 : (
ids
->
gid_vty
 = -1);

737 
	}
}

	@common-libs/3rd-party/quagga-lib/src/regex.c

23 #i‡
deföed
 
_AIX
 && !deföed 
REGEX_MALLOC


24 #¥agm®
Æloˇ


27 #unde‡
_GNU_SOURCE


28 
	#_GNU_SOURCE


	)

30 #ifde‡
HAVE_CONFIG_H


31 
	~<c⁄fig.h
>

33 #ifde‡
_WIN32


35 
	~<¥o˚ss.h
>

38 #i‚de‡
PARAMS


39 #i‡
deföed
 
__GNUC__
 || (deföed 
__STDC__
 && __STDC__)

40 
	#PARAMS
(
¨gs
Ë
	)
args

42 
	#PARAMS
(
¨gs
Ë()

	)

46 #i‡
deföed
 
STDC_HEADERS
 && !deföed 
emacs


47 
	~<°ddef.h
>

50 
	~<sys/ty≥s.h
>

53 
	#WIDE_CHAR_SUPPORT
 (
HAVE_WCTYPE_H
 && 
HAVE_WCHAR_H
 && 
HAVE_BTOWC
)

	)

57 #i‡
deföed
 
_LIBC
 || 
WIDE_CHAR_SUPPORT


59 
	~<wch¨.h
>

60 
	~<w˘y≥.h
>

63 #ifde‡
_LIBC


65 
	#ªg‰ì
(
¥eg
Ë
	`__ªg‰ì
 (¥eg)

	)

66 
	#ªgexec
(
¥
, 
°
, 
nm
, 
pm
, 
ef
Ë
	`__ªgexec
 (¥, st,Çm,Öm,Éf)

	)

67 
	#ªgcomp
(
¥eg
, 
∑âîn
, 
cÊags
Ë
	`__ªgcomp
 (¥eg,Ö©ã∫, cÊags)

	)

68 
	#ªgîr‹
(
îrcode
, 
¥eg
, 
îrbuf
, 
îrbuf_size
) \

69 
	`__ªgîr‹
(
îrcode
, 
¥eg
, 
îrbuf
, 
îrbuf_size
)

	)

70 
	#ª_£t_ªgi°îs
(
bu
, 
ª
, 
nu
, 
°
, 
í
) \

71 
	`__ª_£t_ªgi°îs
 (
bu
, 
ª
, 
nu
, 
°
, 
í
)

	)

72 
	#ª_m©ch_2
(
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
, 
pos
, 
ªgs
, 
°›
) \

73 
	`__ª_m©ch_2
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
, 
pos
, 
ªgs
, 
°›
)

	)

74 
	#ª_m©ch
(
buÂ
, 
°rög
, 
size
, 
pos
, 
ªgs
) \

75 
	`__ª_m©ch
 (
buÂ
, 
°rög
, 
size
, 
pos
, 
ªgs
)

	)

76 
	#ª_£¨ch
(
buÂ
, 
°rög
, 
size
, 
°¨ços
, 
ønge
, 
ªgs
) \

77 
	`__ª_£¨ch
 (
buÂ
, 
°rög
, 
size
, 
°¨ços
, 
ønge
, 
ªgs
)

	)

78 
	#ª_compûe_∑âîn
(
∑âîn
, 
Àngth
, 
buÂ
) \

79 
	`__ª_compûe_∑âîn
 (
∑âîn
, 
Àngth
, 
buÂ
)

	)

80 
	#ª_£t_sy¡ax
(
sy¡ax
Ë
	`__ª_£t_sy¡ax
 (sy¡ax)

	)

81 
	#ª_£¨ch_2
(
buÂ
, 
°1
, 
s1
, 
°2
, 
s2
, 
°¨ços
, 
ønge
, 
ªgs
, 
°›
) \

82 
	`__ª_£¨ch_2
 (
buÂ
, 
°1
, 
s1
, 
°2
, 
s2
, 
°¨ços
, 
ønge
, 
ªgs
, 
°›
)

	)

83 
	#ª_compûe_Á°m≠
(
buÂ
Ë
	`__ª_compûe_Á°m≠
 (buÂ)

	)

85 
	#btowc
 
__btowc


	)

89 #i‡
HAVE_LIBINTL_H
 || 
deföed
 
_LIBC


90 
	~<liböé.h
>

92 
	#gëãxt
(
msgid
Ë(msgid)

	)

95 #i‚de‡
gëãxt_no›


98 
	#gëãxt_no›
(
Såög
Ë
	)
String

103 #ifde‡
emacs


105 
	~"li•.h
"

106 
	~"buf„r.h
"

107 
	~"sy¡ax.h
"

114 #unde‡
REL_ALLOC


116 #i‡
deföed
 
STDC_HEADERS
 || deföed 
_LIBC


117 
	~<°dlib.h
>

119 *
mÆloc
 ();

120 *
ªÆloc
 ();

125 #ifde‡
INHIBIT_STRING_HEADER


126 #i‡!(
deföed
 
HAVE_BZERO
 && deföed 
HAVE_BCOPY
)

127 #i‡!
deföed
 
bzîo
 && !deföed 
bc›y


128 #unde‡
INHIBIT_STRING_HEADER


136 #i‚de‡
INHIBIT_STRING_HEADER


137 #i‡
deföed
 
HAVE_STRING_H
 || deföed 
STDC_HEADERS
 || deföed 
_LIBC


138 
	~<°rög.h
>

139 #i‚de‡
bzîo


140 #i‚de‡
_LIBC


141 
	#bzîo
(
s
, 
n
Ë(
	`mem£t
 (s, '\0',Ç), (s))

	)

143 
	#bzîo
(
s
, 
n
Ë
	`__bzîo
 (s,Ç)

	)

147 
	~<°rögs.h
>

148 #i‚de‡
memcmp


149 
	#memcmp
(
s1
, 
s2
, 
n
Ë
	`bcmp
 (s1, s2,Ç)

	)

151 #i‚de‡
mem˝y


152 
	#mem˝y
(
d
, 
s
, 
n
Ë(
	`bc›y
 (s, d,Ç), (d))

	)

161 #i‚de‡
Sw‹d


162 
	#Sw‹d
 1

	)

165 #ifde‡
SWITCH_ENUM_BUG


166 
	#SWITCH_ENUM_CAST
(
x
Ë(()(x))

	)

168 
	#SWITCH_ENUM_CAST
(
x
Ë(x)

	)

172 
	#CHAR_SET_SIZE
 256

	)

174 #ifde‡
SYNTAX_TABLE


176 *
ª_sy¡ax_èbÀ
;

180 
	gª_sy¡ax_èbÀ
[
CHAR_SET_SIZE
];

183 
	$öô_sy¡ax_⁄˚
 ()

185 
c
;

186 
d⁄e
;

188 i‡(
d⁄e
)

191 
	`mem£t
 (
ª_sy¡ax_èbÀ
, 0, Ñe_syntax_table);

193 
c
 = 'a'; c <= 'z'; c++)

194 
ª_sy¡ax_èbÀ
[
c
] = 
Sw‹d
;

196 
c
 = 'A'; c <= 'Z'; c++)

197 
ª_sy¡ax_èbÀ
[
c
] = 
Sw‹d
;

199 
c
 = '0'; c <= '9'; c++)

200 
ª_sy¡ax_èbÀ
[
c
] = 
Sw‹d
;

202 
ª_sy¡ax_èbÀ
['_'] = 
Sw‹d
;

204 
d⁄e
 = 1;

205 
	}
}

209 
	#SYNTAX
(
c
Ë
ª_sy¡ax_èbÀ
[c]

	)

214 
	~<ªgex-gnu.h
>

217 
	~<˘y≥.h
>

231 #unde‡
ISASCII


232 #i‡
deföed
 
STDC_HEADERS
 || (!deföed 
ißscii
 && !deföed 
HAVE_ISASCII
)

233 
	#ISASCII
(
c
Ë1

	)

235 
	#ISASCII
(
c
Ë
	`ißscii
(c)

	)

238 #ifde‡
isbœnk


239 
	#ISBLANK
(
c
Ë(
	`ISASCII
 (cË&& 
	`isbœnk
 (c))

	)

241 
	#ISBLANK
(
c
Ë((cË=' ' || (cË='\t')

	)

243 #ifde‡
isgøph


244 
	#ISGRAPH
(
c
Ë(
	`ISASCII
 (cË&& 
	`isgøph
 (c))

	)

246 
	#ISGRAPH
(
c
Ë(
	`ISASCII
 (cË&& 
	`i•röt
 (cË&& !
	`is•a˚
 (c))

	)

249 #unde‡
ISPRINT


250 
	#ISPRINT
(
c
Ë(
	`ISASCII
 (cË&& 
	`i•röt
 (c))

	)

251 
	#ISDIGIT
(
c
Ë(
	`ISASCII
 (cË&& 
	`isdigô
 (c))

	)

252 
	#ISALNUM
(
c
Ë(
	`ISASCII
 (cË&& 
	`iß um
 (c))

	)

253 
	#ISALPHA
(
c
Ë(
	`ISASCII
 (cË&& 
	`ißÕha
 (c))

	)

254 
	#ISCNTRL
(
c
Ë(
	`ISASCII
 (cË&& 
	`is˙ål
 (c))

	)

255 
	#ISLOWER
(
c
Ë(
	`ISASCII
 (cË&& 
	`i¶owî
 (c))

	)

256 
	#ISPUNCT
(
c
Ë(
	`ISASCII
 (cË&& 
	`i•un˘
 (c))

	)

257 
	#ISSPACE
(
c
Ë(
	`ISASCII
 (cË&& 
	`is•a˚
 (c))

	)

258 
	#ISUPPER
(
c
Ë(
	`ISASCII
 (cË&& 
	`isuµî
 (c))

	)

259 
	#ISXDIGIT
(
c
Ë(
	`ISASCII
 (cË&& 
	`isxdigô
 (c))

	)

261 #ifde‡
_tﬁowî


262 
	#TOLOWER
(
c
Ë
	`_tﬁowî
(c)

	)

264 
	#TOLOWER
(
c
Ë
	`tﬁowî
(c)

	)

267 #i‚de‡
NULL


268 
	#NULL
 (*)0

	)

275 #unde‡
SIGN_EXTEND_CHAR


276 #i‡
__STDC__


277 
	#SIGN_EXTEND_CHAR
(
c
Ë((sig√d Ë(c))

	)

280 
	#SIGN_EXTEND_CHAR
(
c
Ë((((Ë(c)Ë^ 128Ë- 128)

	)

293 #ifde‡
REGEX_MALLOC


295 
	#REGEX_ALLOCATE
 
mÆloc


	)

296 
	#REGEX_REALLOCATE
(
sour˚
, 
osize
, 
nsize
Ë
	`ªÆloc
 (sour˚,Çsize)

	)

297 
	#REGEX_FREE
 
‰ì


	)

302 #i‚de‡
Æloˇ


305 #ifde‡
__GNUC__


306 
	#Æloˇ
 
__buûtö_Æloˇ


	)

308 #i‡
HAVE_ALLOCA_H


309 
	~<Æloˇ.h
>

315 
	#REGEX_ALLOCATE
 
Æloˇ


	)

318 
	#REGEX_REALLOCATE
(
sour˚
, 
osize
, 
nsize
) \

319 (
de°ö©i⁄
 = (*Ë
	`Æloˇ
 (
nsize
), \

320 
	`mem˝y
 (
de°ö©i⁄
, 
sour˚
, 
osize
))

	)

323 
	#REGEX_FREE
(
¨g
Ë(()0Ë

	)

329 #i‡
deföed
 
REL_ALLOC
 && deföed 
REGEX_MALLOC


331 
	#REGEX_ALLOCATE_STACK
(
size
) \

332 
	`r_Æloc
 (&
Áûuª_°ack_±r
, (
size
))

	)

333 
	#REGEX_REALLOCATE_STACK
(
sour˚
, 
osize
, 
nsize
) \

334 
	`r_ª_Æloc
 (&
Áûuª_°ack_±r
, (
nsize
))

	)

335 
	#REGEX_FREE_STACK
(
±r
) \

336 
	`r_Æloc_‰ì
 (&
Áûuª_°ack_±r
)

	)

340 #ifde‡
REGEX_MALLOC


342 
	#REGEX_ALLOCATE_STACK
 
mÆloc


	)

343 
	#REGEX_REALLOCATE_STACK
(
sour˚
, 
osize
, 
nsize
Ë
	`ªÆloc
 (sour˚,Çsize)

	)

344 
	#REGEX_FREE_STACK
 
‰ì


	)

348 
	#REGEX_ALLOCATE_STACK
 
Æloˇ


	)

350 
	#REGEX_REALLOCATE_STACK
(
sour˚
, 
osize
, 
nsize
) \

351 
	`REGEX_REALLOCATE
 (
sour˚
, 
osize
, 
nsize
)

	)

353 
	#REGEX_FREE_STACK
(
¨g
)

	)

362 
	#FIRST_STRING_P
(
±r
) \

363 (
size1
 && 
°rög1
 <(
±r
Ë&& (±rË<°rög1 + size1)

	)

366 
	#TALLOC
(
n
, 
t
Ë(— *Ë
	`mÆloc
 (“Ë*  (t)))

	)

367 
	#RETALLOC
(
addr
, 
n
, 
t
Ë(◊ddrË— *Ë
	`ªÆloc
 (addr, (nË*  (t)))

	)

368 
	#RETALLOC_IF
(
addr
, 
n
, 
t
) \

369 i‡(
addr
Ë
	`RETALLOC
(◊ddr), (
n
), 
t
); ◊ddrË
	`TALLOC
 (“),Å)

	)

370 
	#REGEX_TALLOC
(
n
, 
t
Ë(— *Ë
	`REGEX_ALLOCATE
 (“Ë*  (t)))

	)

372 
	#BYTEWIDTH
 8

	)

374 
	#STREQ
(
s1
, 
s2
Ë((
	`°rcmp
 (s1, s2Ë=0))

	)

376 #unde‡
MAX


377 #unde‡
MIN


378 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

379 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

381 
	tboﬁón
;

382 
	#Ál£
 0

	)

383 
	#åue
 1

	)

385 
ª_m©ch_2_öã∫Æ
 
PARAMS
 ((
ª_∑âîn_buf„r
 *
buÂ
,

386 c⁄° *
°rög1
, 
size1
,

387 c⁄° *
°rög2
, 
size2
,

388 
pos
,

389 
ª_ªgi°îs
 *
ªgs
,

390 
°›
));

399 
	mno_›
 = 0,

402 
	msuc˚ed
,

405 
	mexa˘n
,

408 
	m™ych¨
,

416 
	mch¨£t
,

420 
	mch¨£t_nŸ
,

429 
	m°¨t_mem‹y
,

438 
	m°›_mem‹y
,

442 
	mdu∂iˇã
,

445 
	mbeglöe
,

448 
	mídlöe
,

452 
	mbegbuf
,

455 
	mídbuf
,

458 
	mjump
,

461 
	mjump_∑°_Æt
,

465 
	m⁄_Áûuª_jump
,

469 
	m⁄_Áûuª_kìp_°rög_jump
,

473 
	mp›_Áûuª_jump
,

482 
	mmaybe_p›_jump
,

489 
	mdummy_Áûuª_jump
,

493 
	mpush_dummy_Áûuª
,

497 
	msuc˚ed_n
,

501 
	mjump_n
,

506 
	m£t_numbî_©
,

508 
	mw‹dch¨
,

509 
	mnŸw‹dch¨
,

511 
	mw‹dbeg
,

512 
	mw‹díd
,

514 
	mw‹dbound
,

515 
	mnŸw‹dbound


517 #ifde‡
emacs


518 ,
	mbef‹e_dŸ
,

519 
	m©_dŸ
,

520 
	ma·î_dŸ
,

524 
	msy¡ax•ec
,

527 
	mnŸsy¡ax•ec


529 } 
	tª_›code_t
;

535 
	#STORE_NUMBER
(
de°ö©i⁄
, 
numbî
) \

537 (
de°ö©i⁄
)[0] = (
numbî
) & 0377; \

538 (
de°ö©i⁄
)[1] = (
numbî
) >> 8; \

539 } 0)

	)

545 
	#STORE_NUMBER_AND_INCR
(
de°ö©i⁄
, 
numbî
) \

547 
	`STORE_NUMBER
 (
de°ö©i⁄
, 
numbî
); \

548 (
de°ö©i⁄
) += 2; \

549 } 0)

	)

554 
	#EXTRACT_NUMBER
(
de°ö©i⁄
, 
sour˚
) \

556 (
de°ö©i⁄
Ë*(
sour˚
) & 0377; \

557 (
de°ö©i⁄
Ë+
	`SIGN_EXTEND_CHAR
 (*((
sour˚
) + 1)) << 8; \

558 } 0)

	)

560 #ifde‡
DEBUG


561 
exåa˘_numbî
 
_RE_ARGS
 ((*
de°
, *
sour˚
));

563 
	$exåa˘_numbî
 (
de°
, 
sour˚
)

564 *
de°
;

565 *
sour˚
;

567 
ãmp
 = 
	`SIGN_EXTEND_CHAR
 (*(
sour˚
 + 1));

568 *
de°
 = *
sour˚
 & 0377;

569 *
de°
 +
ãmp
 << 8;

570 
	}
}

572 #i‚de‡
EXTRACT_MACROS


573 #unde‡
EXTRACT_NUMBER


574 
	#EXTRACT_NUMBER
(
de°
, 
§c
Ë
	`exåa˘_numbî
 (&de°, src)

	)

582 
	#EXTRACT_NUMBER_AND_INCR
(
de°ö©i⁄
, 
sour˚
) \

584 
	`EXTRACT_NUMBER
 (
de°ö©i⁄
, 
sour˚
); \

585 (
sour˚
) += 2; \

586 } 0)

	)

588 #ifde‡
DEBUG


589 
exåa˘_numbî_™d_ö¸
 
_RE_ARGS
 ((*
de°ö©i⁄
,

590 **
sour˚
));

592 
	$exåa˘_numbî_™d_ö¸
 (
de°ö©i⁄
, 
sour˚
)

593 *
de°ö©i⁄
;

594 **
sour˚
;

596 
	`exåa˘_numbî
 (
de°ö©i⁄
, *
sour˚
);

597 *
sour˚
 += 2;

598 
	}
}

600 #i‚de‡
EXTRACT_MACROS


601 #unde‡
EXTRACT_NUMBER_AND_INCR


602 
	#EXTRACT_NUMBER_AND_INCR
(
de°
, 
§c
) \

603 
	`exåa˘_numbî_™d_ö¸
 (&
de°
, &
§c
)

	)

614 #ifde‡
DEBUG


617 
	~<°dio.h
>

620 
	~"zas£π.h
"

622 
	gdebug
;

624 
	#DEBUG_STATEMENT
(
e
Ë
	)
e

625 
	#DEBUG_PRINT1
(
x
Ëi‡(
debug
Ë
	`¥ötf
 (x)

	)

626 
	#DEBUG_PRINT2
(
x1
, 
x2
Ëi‡(
debug
Ë
	`¥ötf
 (x1, x2)

	)

627 
	#DEBUG_PRINT3
(
x1
, 
x2
, 
x3
Ëi‡(
debug
Ë
	`¥ötf
 (x1, x2, x3)

	)

628 
	#DEBUG_PRINT4
(
x1
, 
x2
, 
x3
, 
x4
Ëi‡(
debug
Ë
	`¥ötf
 (x1, x2, x3, x4)

	)

629 
	#DEBUG_PRINT_COMPILED_PATTERN
(
p
, 
s
, 
e
) \

630 i‡(
debug
Ë
	`¥öt_∑πül_compûed_∑âîn
 (
s
, 
e
)

	)

631 
	#DEBUG_PRINT_DOUBLE_STRING
(
w
, 
s1
, 
sz1
, 
s2
, 
sz2
) \

632 i‡(
debug
Ë
	`¥öt_doubÀ_°rög
 (
w
, 
s1
, 
sz1
, 
s2
, 
sz2
)

	)

638 
	$¥öt_Á°m≠
 (
Á°m≠
)

639 *
Á°m≠
;

641 
was_a_ønge
 = 0;

642 
i
 = 0;

644 
i
 < (1 << 
BYTEWIDTH
))

646 i‡(
Á°m≠
[
i
++])

648 
was_a_ønge
 = 0;

649 
	`putch¨
 (
i
 - 1);

650 
i
 < (1 << 
BYTEWIDTH
Ë&& 
Á°m≠
[i])

652 
was_a_ønge
 = 1;

653 
i
++;

655 i‡(
was_a_ønge
)

657 
	`¥ötf
 ("-");

658 
	`putch¨
 (
i
 - 1);

662 
	`putch¨
 ('\n');

663 
	}
}

670 
	$¥öt_∑πül_compûed_∑âîn
 (
°¨t
, 
íd
)

671 *
°¨t
;

672 *
íd
;

674 
m˙t
, 
m˙t2
;

675 *
p1
;

676 *
p
 = 
°¨t
;

677 *
≥nd
 = 
íd
;

679 i‡(
°¨t
 =
NULL
)

681 
	`¥ötf
 ("(null)\n");

686 
p
 < 
≥nd
)

688 
	`¥ötf
 ("%d:\t", 
p
 - 
°¨t
);

690 (
ª_›code_t
Ë*
p
++)

692 
no_›
:

693 
	`¥ötf
 ("/no_op");

696 
exa˘n
:

697 
m˙t
 = *
p
++;

698 
	`¥ötf
 ("/exa˘n/%d", 
m˙t
);

701 
	`putch¨
 ('/');

702 
	`putch¨
 (*
p
++);

704 --
m˙t
);

707 
°¨t_mem‹y
:

708 
m˙t
 = *
p
++;

709 
	`¥ötf
 ("/°¨t_mem‹y/%d/%d", 
m˙t
, *
p
++);

712 
°›_mem‹y
:

713 
m˙t
 = *
p
++;

714 
	`¥ötf
 ("/°›_mem‹y/%d/%d", 
m˙t
, *
p
++);

717 
du∂iˇã
:

718 
	`¥ötf
 ("/du∂iˇã/%d", *
p
++);

721 
™ych¨
:

722 
	`¥ötf
 ("/anychar");

725 
ch¨£t
:

726 
ch¨£t_nŸ
:

728 
c
, 
œ°
 = -100;

729 
ö_ønge
 = 0;

731 
	`¥ötf
 ("/charset [%s",

732 (
ª_›code_t
Ë*(
p
 - 1Ë=
ch¨£t_nŸ
 ? "^" : "");

734 
	`as£π
 (
p
 + *∞< 
≥nd
);

736 
c
 = 0; c < 256; c++)

737 i‡(
c
 / 8 < *
p


738 && (
p
[1 + (
c
/8)] & (1 << (c % 8))))

741 i‡(
œ°
 + 1 =
c
 && ! 
ö_ønge
)

743 
	`putch¨
 ('-');

744 
ö_ønge
 = 1;

747 i‡(
œ°
 + 1 !
c
 && 
ö_ønge
)

749 
	`putch¨
 (
œ°
);

750 
ö_ønge
 = 0;

753 i‡(! 
ö_ønge
)

754 
	`putch¨
 (
c
);

756 
œ°
 = 
c
;

759 i‡(
ö_ønge
)

760 
	`putch¨
 (
œ°
);

762 
	`putch¨
 (']');

764 
p
 += 1 + *p;

768 
beglöe
:

769 
	`¥ötf
 ("/begline");

772 
ídlöe
:

773 
	`¥ötf
 ("/endline");

776 
⁄_Áûuª_jump
:

777 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

778 
	`¥ötf
 ("/⁄_Áûuª_jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

781 
⁄_Áûuª_kìp_°rög_jump
:

782 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

783 
	`¥ötf
 ("/⁄_Áûuª_kìp_°rög_jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

786 
dummy_Áûuª_jump
:

787 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

788 
	`¥ötf
 ("/dummy_Áûuª_jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

791 
push_dummy_Áûuª
:

792 
	`¥ötf
 ("/push_dummy_failure");

795 
maybe_p›_jump
:

796 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

797 
	`¥ötf
 ("/maybe_p›_jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

800 
p›_Áûuª_jump
:

801 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

802 
	`¥ötf
 ("/p›_Áûuª_jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

805 
jump_∑°_Æt
:

806 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

807 
	`¥ötf
 ("/jump_∑°_Æàtÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

810 
jump
:

811 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

812 
	`¥ötf
 ("/jum∞tÿ%d", 
p
 + 
m˙t
 - 
°¨t
);

815 
suc˚ed_n
:

816 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

817 
p1
 = 
p
 + 
m˙t
;

818 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t2
, &
p
);

819 
	`¥ötf
 ("/suc˚ed_¿tÿ%d, %dÅimes", 
p1
 - 
°¨t
, 
m˙t2
);

822 
jump_n
:

823 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

824 
p1
 = 
p
 + 
m˙t
;

825 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t2
, &
p
);

826 
	`¥ötf
 ("/jump_¿tÿ%d, %dÅimes", 
p1
 - 
°¨t
, 
m˙t2
);

829 
£t_numbî_©
:

830 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t
, &
p
);

831 
p1
 = 
p
 + 
m˙t
;

832 
	`exåa˘_numbî_™d_ö¸
 (&
m˙t2
, &
p
);

833 
	`¥ötf
 ("/£t_numbî_©Üoˇti⁄ %dÅÿ%d", 
p1
 - 
°¨t
, 
m˙t2
);

836 
w‹dbound
:

837 
	`¥ötf
 ("/wordbound");

840 
nŸw‹dbound
:

841 
	`¥ötf
 ("/notwordbound");

844 
w‹dbeg
:

845 
	`¥ötf
 ("/wordbeg");

848 
w‹díd
:

849 
	`¥ötf
 ("/wordend");

851 #ifde‡
emacs


852 
bef‹e_dŸ
:

853 
	`¥ötf
 ("/before_dot");

856 
©_dŸ
:

857 
	`¥ötf
 ("/at_dot");

860 
a·î_dŸ
:

861 
	`¥ötf
 ("/after_dot");

864 
sy¡ax•ec
:

865 
	`¥ötf
 ("/syntaxspec");

866 
m˙t
 = *
p
++;

867 
	`¥ötf
 ("/%d", 
m˙t
);

870 
nŸsy¡ax•ec
:

871 
	`¥ötf
 ("/notsyntaxspec");

872 
m˙t
 = *
p
++;

873 
	`¥ötf
 ("/%d", 
m˙t
);

877 
w‹dch¨
:

878 
	`¥ötf
 ("/wordchar");

881 
nŸw‹dch¨
:

882 
	`¥ötf
 ("/notwordchar");

885 
begbuf
:

886 
	`¥ötf
 ("/begbuf");

889 
ídbuf
:

890 
	`¥ötf
 ("/endbuf");

894 
	`¥ötf
 ("?%d", *(
p
-1));

897 
	`putch¨
 ('\n');

900 
	`¥ötf
 ("%d:\ãnd o‡∑âîn.\n", 
p
 - 
°¨t
);

901 
	}
}

905 
	$¥öt_compûed_∑âîn
 (
buÂ
)

906 
ª_∑âîn_buf„r
 *
buÂ
;

908 *
buf„r
 = 
buÂ
->buffer;

910 
	`¥öt_∑πül_compûed_∑âîn
 (
buf„r
, buf„∏+ 
buÂ
->
u£d
);

911 
	`¥ötf
 ("%ld bytes used/%ld bytesállocated.\n",

912 
buÂ
->
u£d
, buÂ->
Æloˇãd
);

914 i‡(
buÂ
->
Á°m≠_accuøã
 && buÂ->
Á°m≠
)

916 
	`¥ötf
 ("fastmap: ");

917 
	`¥öt_Á°m≠
 (
buÂ
->
Á°m≠
);

920 
	`¥ötf
 ("ª_nsub: %d\t", 
buÂ
->
ª_nsub
);

921 
	`¥ötf
 ("ªgs_Æloc: %d\t", 
buÂ
->
ªgs_Æloˇãd
);

922 
	`¥ötf
 ("ˇn_be_nuŒ: %d\t", 
buÂ
->
ˇn_be_nuŒ
);

923 
	`¥ötf
 ("√wlöe_™ch‹: %d\n", 
buÂ
->
√wlöe_™ch‹
);

924 
	`¥ötf
 ("no_sub: %d\t", 
buÂ
->
no_sub
);

925 
	`¥ötf
 ("nŸ_bﬁ: %d\t", 
buÂ
->
nŸ_bﬁ
);

926 
	`¥ötf
 ("nŸ_eﬁ: %d\t", 
buÂ
->
nŸ_eﬁ
);

927 
	`¥ötf
 ("sy¡ax: %lx\n", 
buÂ
->
sy¡ax
);

929 
	}
}

933 
	$¥öt_doubÀ_°rög
 (
whîe
, 
°rög1
, 
size1
, 
°rög2
, 
size2
)

934 c⁄° *
whîe
;

935 c⁄° *
°rög1
;

936 c⁄° *
°rög2
;

937 
size1
;

938 
size2
;

940 
this_ch¨
;

942 i‡(
whîe
 =
NULL
)

943 
	`¥ötf
 ("(null)");

946 i‡(
	`FIRST_STRING_P
 (
whîe
))

948 
this_ch¨
 = 
whîe
 - 
°rög1
;Åhis_ch¨ < 
size1
;Åhis_char++)

949 
	`putch¨
 (
°rög1
[
this_ch¨
]);

951 
whîe
 = 
°rög2
;

954 
this_ch¨
 = 
whîe
 - 
°rög2
;Åhis_ch¨ < 
size2
;Åhis_char++)

955 
	`putch¨
 (
°rög2
[
this_ch¨
]);

957 
	}
}

960 
	$¥ötch¨
 (
c
)

961 
c
;

963 
	`putc
 (
c
, 
°dîr
);

964 
	}
}

968 #unde‡
as£π


969 
	#as£π
(
e
)

	)

971 
	#DEBUG_STATEMENT
(
e
)

	)

972 
	#DEBUG_PRINT1
(
x
)

	)

973 
	#DEBUG_PRINT2
(
x1
, 
x2
)

	)

974 
	#DEBUG_PRINT3
(
x1
, 
x2
, 
x3
)

	)

975 
	#DEBUG_PRINT4
(
x1
, 
x2
, 
x3
, 
x4
)

	)

976 
	#DEBUG_PRINT_COMPILED_PATTERN
(
p
, 
s
, 
e
)

	)

977 
	#DEBUG_PRINT_DOUBLE_STRING
(
w
, 
s1
, 
sz1
, 
s2
, 
sz2
)

	)

986 
ªg_sy¡ax_t
 
	gª_sy¡ax_›ti⁄s
;

996 
ªg_sy¡ax_t


997 
	$ª_£t_sy¡ax
 (
sy¡ax
)

998 
ªg_sy¡ax_t
 
sy¡ax
;

1000 
ªg_sy¡ax_t
 
ªt
 = 
ª_sy¡ax_›ti⁄s
;

1002 
ª_sy¡ax_›ti⁄s
 = 
sy¡ax
;

1003 #ifde‡
DEBUG


1004 i‡(
sy¡ax
 & 
RE_DEBUG
)

1005 
debug
 = 1;

1006 i‡(
debug
)

1007 
debug
 = 0;

1009  
ªt
;

1010 
	}
}

1011 #ifde‡
_LIBC


1012 
	$wók_Æüs
 (
__ª_£t_sy¡ax
, 
ª_£t_sy¡ax
)

1020 c⁄° 
ª_îr‹_msgid
[] =

1022 
	#REG_NOERROR_IDX
 0

	)

1023 
	`gëãxt_no›
 ("Success")

1025 
	#REG_NOMATCH_IDX
 (
REG_NOERROR_IDX
 +  "Suc˚ss")

	)

1026 
	`gëãxt_no›
 ("No match")

1028 
	#REG_BADPAT_IDX
 (
REG_NOMATCH_IDX
 +  "Nÿm©ch")

	)

1029 
	`gëãxt_no›
 ("InvalidÑegularÉxpression")

1031 
	#REG_ECOLLATE_IDX
 (
REG_BADPAT_IDX
 +  "InvÆidÑeguœ∏ex¥essi⁄")

	)

1032 
	`gëãxt_no›
 ("Invalid collation character")

1034 
	#REG_ECTYPE_IDX
 (
REG_ECOLLATE_IDX
 +  "InvÆid cﬁœti⁄ ch¨a˘î")

	)

1035 
	`gëãxt_no›
 ("Invalid character classÇame")

1037 
	#REG_EESCAPE_IDX
 (
REG_ECTYPE_IDX
 +  "InvÆid ch¨a˘î cœs†«me")

	)

1038 
	`gëãxt_no›
 ("Trailing backslash")

1040 
	#REG_ESUBREG_IDX
 (
REG_EESCAPE_IDX
 +  "Tøûög back¶ash")

	)

1041 
	`gëãxt_no›
 ("Invalid backÑeference")

1043 
	#REG_EBRACK_IDX
 (
REG_ESUBREG_IDX
 +  "InvÆid backÑe„ªn˚")

	)

1044 
	`gëãxt_no›
 ("Unmatched [ or [^")

1046 
	#REG_EPAREN_IDX
 (
REG_EBRACK_IDX
 +  "Unm©ched [ o∏[^")

	)

1047 
	`gëãxt_no›
 ("Unmatched ( or \\(")

1049 
	#REG_EBRACE_IDX
 (
REG_EPAREN_IDX
 +  "Unm©ched ( o∏\\(")

	)

1050 
	`gëãxt_no›
 ("Unmatched \\{")

1052 
	#REG_BADBR_IDX
 (
REG_EBRACE_IDX
 +  "Unm©ched \\{")

	)

1053 
	`gëãxt_no›
 ("Invalid content of \\{\\}")

1055 
	#REG_ERANGE_IDX
 (
REG_BADBR_IDX
 +  "InvÆid c⁄ã¡ o‡\\{\\}")

	)

1056 
	`gëãxt_no›
 ("InvalidÑangeÉnd")

1058 
	#REG_ESPACE_IDX
 (
REG_ERANGE_IDX
 +  "InvÆidÑ™gêíd")

	)

1059 
	`gëãxt_no›
 ("MemoryÉxhausted")

1061 
	#REG_BADRPT_IDX
 (
REG_ESPACE_IDX
 +  "Mem‹yÉxhau°ed")

	)

1062 
	`gëãxt_no›
 ("InvalidÖrecedingÑegularÉxpression")

1064 
	#REG_EEND_IDX
 (
REG_BADRPT_IDX
 +  "InvÆidÖª˚dögÑeguœ∏ex¥essi⁄")

	)

1065 
	`gëãxt_no›
 ("PrematureÉnd ofÑegularÉxpression")

1067 
	#REG_ESIZE_IDX
 (
REG_EEND_IDX
 +  "Pªm©uªÉnd o‡ªguœ∏ex¥essi⁄")

	)

1068 
	`gëãxt_no›
 ("RegularÉxpressionÅoo big")

1070 
	#REG_ERPAREN_IDX
 (
REG_ESIZE_IDX
 +  "Reguœ∏ex¥essi⁄Åoÿbig")

	)

1071 
	`gëãxt_no›
 ("Unmatched ) or \\)"),

1072 
	}
};

1074 c⁄° 
size_t
 
	gª_îr‹_msgid_idx
[] =

1076 
REG_NOERROR_IDX
,

1077 
REG_NOMATCH_IDX
,

1078 
REG_BADPAT_IDX
,

1079 
REG_ECOLLATE_IDX
,

1080 
REG_ECTYPE_IDX
,

1081 
REG_EESCAPE_IDX
,

1082 
REG_ESUBREG_IDX
,

1083 
REG_EBRACK_IDX
,

1084 
REG_EPAREN_IDX
,

1085 
REG_EBRACE_IDX
,

1086 
REG_BADBR_IDX
,

1087 
REG_ERANGE_IDX
,

1088 
REG_ESPACE_IDX
,

1089 
REG_BADRPT_IDX
,

1090 
REG_EEND_IDX
,

1091 
REG_ESIZE_IDX
,

1092 
REG_ERPAREN_IDX


1115 
	#MATCH_MAY_ALLOCATE


	)

1119 #ifde‡
__GNUC__


1120 #unde‡
C_ALLOCA


1128 #i‡(
deföed
 
C_ALLOCA
 || deföed 
REGEX_MALLOC
Ë&& deföed 
emacs


1129 #unde‡
MATCH_MAY_ALLOCATE


1141 #i‚de‡
INIT_FAILURE_ALLOC


1142 
	#INIT_FAILURE_ALLOC
 5

	)

1150 #ifde‡
INT_IS_16BIT


1152 #i‡
deföed
 
MATCH_MAY_ALLOCATE


1155 
	gª_max_Áûuªs
 = 4000;

1157 
	gª_max_Áûuªs
 = 2000;

1160 
	uÁû_°ack_ñt


1162 *
	mpoöãr
;

1163 
	möãgî
;

1166 
Áû_°ack_ñt
 
	tÁû_°ack_ñt_t
;

1170 
Áû_°ack_ñt_t
 *
	m°ack
;

1171 
	msize
;

1172 
	mavaû
;

1173 } 
	tÁû_°ack_ty≥
;

1177 #i‡
deföed
 
MATCH_MAY_ALLOCATE


1180 
	gª_max_Áûuªs
 = 20000;

1182 
	gª_max_Áûuªs
 = 2000;

1185 
	uÁû_°ack_ñt


1187 *
	mpoöãr
;

1188 
	möãgî
;

1191 
Áû_°ack_ñt
 
	tÁû_°ack_ñt_t
;

1195 
Áû_°ack_ñt_t
 *
	m°ack
;

1196 
	msize
;

1197 
	mavaû
;

1198 } 
	tÁû_°ack_ty≥
;

1202 
	#FAIL_STACK_EMPTY
(Ë(
Áû_°ack
.
avaû
 =0)

	)

1203 
	#FAIL_STACK_PTR_EMPTY
(Ë(
Áû_°ack_±r
->
avaû
 =0)

	)

1204 
	#FAIL_STACK_FULL
(Ë(
Áû_°ack
.
avaû
 =Áû_°ack.
size
)

	)

1210 #ifde‡
MATCH_MAY_ALLOCATE


1211 
	#INIT_FAIL_STACK
() \

1213 
Áû_°ack
.
°ack
 = (
Áû_°ack_ñt_t
 *) \

1214 
	`REGEX_ALLOCATE_STACK
 (
INIT_FAILURE_ALLOC
 *  (
Áû_°ack_ñt_t
)); \

1216 i‡(
Áû_°ack
.
°ack
 =
NULL
) \

1219 
Áû_°ack
.
size
 = 
INIT_FAILURE_ALLOC
; \

1220 
Áû_°ack
.
avaû
 = 0; \

1221 } 0)

	)

1223 
	#RESET_FAIL_STACK
(Ë
	`REGEX_FREE_STACK
 (
Áû_°ack
.
°ack
)

	)

1225 
	#INIT_FAIL_STACK
() \

1227 
Áû_°ack
.
avaû
 = 0; \

1228 } 0)

	)

1230 
	#RESET_FAIL_STACK
()

	)

1241 
	#DOUBLE_FAIL_STACK
(
Áû_°ack
) \

1242 ((
Áû_°ack
).
size
 > (Ë(
ª_max_Áûuªs
 * 
MAX_FAILURE_ITEMS
) \

1244 : ((
Áû_°ack
).
°ack
 = (
Áû_°ack_ñt_t
 *) \

1245 
	`REGEX_REALLOCATE_STACK
 ((
Áû_°ack
).
°ack
, \

1246 (
Áû_°ack
).
size
 *  (
Áû_°ack_ñt_t
), \

1247 ((
Áû_°ack
).
size
 << 1Ë*  (
Áû_°ack_ñt_t
)), \

1249 (
Áû_°ack
).
°ack
 =
NULL
 \

1251 : ((
Áû_°ack
).
size
 <<= 1, \

1252 1)))

	)

1258 
	#PUSH_PATTERN_OP
(
POINTER
, 
FAIL_STACK
) \

1259 ((
	`FAIL_STACK_FULL
 () \

1260 && !
	`DOUBLE_FAIL_STACK
 (
FAIL_STACK
)) \

1262 : ((
FAIL_STACK
).
°ack
[(FAIL_STACK).
avaû
++].
poöãr
 = 
POINTER
, \

1263 1))

	)

1268 
	#PUSH_FAILURE_POINTER
(
ôem
) \

1269 
Áû_°ack
.
°ack
[Áû_°ack.
avaû
++].
poöãr
 = (*Ë(
ôem
)

	)

1274 
	#PUSH_FAILURE_INT
(
ôem
) \

1275 
Áû_°ack
.
°ack
[Áû_°ack.
avaû
++].
öãgî
 = (
ôem
)

	)

1280 
	#PUSH_FAILURE_ELT
(
ôem
) \

1281 
Áû_°ack
.
°ack
[Áû_°ack.
avaû
++] = (
ôem
)

	)

1285 
	#POP_FAILURE_POINTER
(Ë
Áû_°ack
.
°ack
[--Áû_°ack.
avaû
].
poöãr


	)

1286 
	#POP_FAILURE_INT
(Ë
Áû_°ack
.
°ack
[--Áû_°ack.
avaû
].
öãgî


	)

1287 
	#POP_FAILURE_ELT
(Ë
Áû_°ack
.
°ack
[--Áû_°ack.
avaû
]

	)

1290 #ifde‡
DEBUG


1291 
	#DEBUG_PUSH
 
PUSH_FAILURE_INT


	)

1292 
	#DEBUG_POP
(
ôem_addr
Ë*(ôem_addrË
	`POP_FAILURE_INT
 ()

	)

1294 
	#DEBUG_PUSH
(
ôem
)

	)

1295 
	#DEBUG_POP
(
ôem_addr
)

	)

1308 
	#PUSH_FAILURE_POINT
(
∑âîn_∂a˚
, 
°rög_∂a˚
, 
Áûuª_code
) \

1310 *
de°ö©i⁄
; \

1316 
a˘ive_ªg_t
 
this_ªg
; \

1318 
	`DEBUG_STATEMENT
 (
Áûuª_id
++); \

1319 
	`DEBUG_STATEMENT
 (
nÁûuª_poöts_pushed
++); \

1320 
	`DEBUG_PRINT2
 ("\nPUSH_FAILURE_POINT #%u:\n", 
Áûuª_id
); \

1321 
	`DEBUG_PRINT2
 (" Bef‹êpush,Çexàavaû: %d\n", (
Áû_°ack
).
avaû
);\

1322 
	`DEBUG_PRINT2
 (" size: %d\n", (
Áû_°ack
).
size
);\

1324 
	`DEBUG_PRINT2
 (" slŸ†√eded: %ld\n", 
NUM_FAILURE_ITEMS
); \

1325 
	`DEBUG_PRINT2
 ("ávaûabÀ: %d\n", 
REMAINING_AVAIL_SLOTS
); \

1328 
REMAINING_AVAIL_SLOTS
 < 
NUM_FAILURE_ITEMS
) \

1330 i‡(!
	`DOUBLE_FAIL_STACK
 (
Áû_°ack
)) \

1331  
Áûuª_code
; \

1333 
	`DEBUG_PRINT2
 ("\n Doubled stack; sizeÇow: %d\n", \

1334 (
Áû_°ack
).
size
); \

1335 
	`DEBUG_PRINT2
 (" slŸ†avaûabÀ: %d\n", 
REMAINING_AVAIL_SLOTS
);\

1339 
	`DEBUG_PRINT1
 ("\n"); \

1342 
this_ªg
 = 
lowe°_a˘ive_ªg
;Åhis_ªg <
highe°_a˘ive_ªg
; \

1343 
this_ªg
++) \

1345 
	`DEBUG_PRINT2
 (" PushögÑeg: %lu\n", 
this_ªg
); \

1346 
	`DEBUG_STATEMENT
 (
num_ªgs_pushed
++); \

1348 
	`DEBUG_PRINT2
 (" sèπ: %p\n", 
ªg°¨t
[
this_ªg
]); \

1349 
	`PUSH_FAILURE_POINTER
 (
ªg°¨t
[
this_ªg
]); \

1351 
	`DEBUG_PRINT2
 ("Énd: %p\n", 
ªgíd
[
this_ªg
]); \

1352 
	`PUSH_FAILURE_POINTER
 (
ªgíd
[
this_ªg
]); \

1354 
	`DEBUG_PRINT2
 (" info: %p\n ", \

1355 
ªg_öfo
[
this_ªg
].
w‹d
.
poöãr
); \

1356 
	`DEBUG_PRINT2
 (" match_null=%d", \

1357 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[
this_ªg
])); \

1358 
	`DEBUG_PRINT2
 ("á˘ive=%d", 
	`IS_ACTIVE
 (
ªg_öfo
[
this_ªg
])); \

1359 
	`DEBUG_PRINT2
 (" matched_something=%d", \

1360 
	`MATCHED_SOMETHING
 (
ªg_öfo
[
this_ªg
])); \

1361 
	`DEBUG_PRINT2
 ("Éver_matched=%d", \

1362 
	`EVER_MATCHED_SOMETHING
 (
ªg_öfo
[
this_ªg
])); \

1363 
	`DEBUG_PRINT1
 ("\n"); \

1364 
	`PUSH_FAILURE_ELT
 (
ªg_öfo
[
this_ªg
].
w‹d
); \

1367 
	`DEBUG_PRINT2
 (" PushögÜowá˘ivêªg: %ld\n", 
lowe°_a˘ive_ªg
);\

1368 
	`PUSH_FAILURE_INT
 (
lowe°_a˘ive_ªg
); \

1370 
	`DEBUG_PRINT2
 (" Pushög highá˘ivêªg: %ld\n", 
highe°_a˘ive_ªg
);\

1371 
	`PUSH_FAILURE_INT
 (
highe°_a˘ive_ªg
); \

1373 
	`DEBUG_PRINT2
 (" PushögÖ©ã∫ %p:\n", 
∑âîn_∂a˚
); \

1374 
	`DEBUG_PRINT_COMPILED_PATTERN
 (
buÂ
, 
∑âîn_∂a˚
, 
≥nd
); \

1375 
	`PUSH_FAILURE_POINTER
 (
∑âîn_∂a˚
); \

1377 
	`DEBUG_PRINT2
 (" Pushög såög %p: `", 
°rög_∂a˚
); \

1378 
	`DEBUG_PRINT_DOUBLE_STRING
 (
°rög_∂a˚
, 
°rög1
, 
size1
, 
°rög2
, \

1379 
size2
); \

1380 
	`DEBUG_PRINT1
 ("'\n"); \

1381 
	`PUSH_FAILURE_POINTER
 (
°rög_∂a˚
); \

1383 
	`DEBUG_PRINT2
 (" Pushög faûuª id: %u\n", 
Áûuª_id
); \

1384 
	`DEBUG_PUSH
 (
Áûuª_id
); \

1385 } 0)

	)

1389 
	#NUM_REG_ITEMS
 3

	)

1392 #ifde‡
DEBUG


1393 
	#NUM_NONREG_ITEMS
 5

	)

1395 
	#NUM_NONREG_ITEMS
 4

	)

1402 
	#MAX_FAILURE_ITEMS
 (5 * 
NUM_REG_ITEMS
 + 
NUM_NONREG_ITEMS
)

	)

1405 
	#NUM_FAILURE_ITEMS
 \

1407 ? 0 : 
highe°_a˘ive_ªg
 - 
lowe°_a˘ive_ªg
 + 1) \

1408 * 
NUM_REG_ITEMS
) \

1409 + 
NUM_NONREG_ITEMS
)

	)

1412 
	#REMAINING_AVAIL_SLOTS
 ((
Áû_°ack
).
size
 - (Áû_°ack).
avaû
)

	)

1427 
	#POP_FAILURE_POINT
(
°r
, 
∑t
, 
low_ªg
, 
high_ªg
, 
ªg°¨t
, 
ªgíd
, 
ªg_öfo
)\

1429 
	`DEBUG_STATEMENT
 (
Áûuª_id
;) \

1430 
a˘ive_ªg_t
 
this_ªg
; \

1431 c⁄° *
°rög_ãmp
; \

1433 
	`as£π
 (!
	`FAIL_STACK_EMPTY
 ()); \

1436 
	`DEBUG_PRINT1
 ("POP_FAILURE_POINT:\n"); \

1437 
	`DEBUG_PRINT2
 (" Bef‹êp›,Çexàavaû: %d\n", 
Áû_°ack
.
avaû
); \

1438 
	`DEBUG_PRINT2
 (" size: %d\n", 
Áû_°ack
.
size
); \

1440 
	`as£π
 (
Áû_°ack
.
avaû
 >
NUM_NONREG_ITEMS
); \

1442 
	`DEBUG_POP
 (&
Áûuª_id
); \

1443 
	`DEBUG_PRINT2
 (" P›pög faûuª id: %u\n", 
Áûuª_id
); \

1448 
°rög_ãmp
 = 
	`POP_FAILURE_POINTER
 (); \

1449 i‡(
°rög_ãmp
 !
NULL
) \

1450 
°r
 = (c⁄° *Ë
°rög_ãmp
; \

1452 
	`DEBUG_PRINT2
 (" P›pög såög %p: `", 
°r
); \

1453 
	`DEBUG_PRINT_DOUBLE_STRING
 (
°r
, 
°rög1
, 
size1
, 
°rög2
, 
size2
); \

1454 
	`DEBUG_PRINT1
 ("'\n"); \

1456 
∑t
 = (*Ë
	`POP_FAILURE_POINTER
 (); \

1457 
	`DEBUG_PRINT2
 (" P›pögÖ©ã∫ %p:\n", 
∑t
); \

1458 
	`DEBUG_PRINT_COMPILED_PATTERN
 (
buÂ
, 
∑t
, 
≥nd
); \

1461 
high_ªg
 = (
a˘ive_ªg_t
Ë
	`POP_FAILURE_INT
 (); \

1462 
	`DEBUG_PRINT2
 (" P›pög highá˘ivêªg: %ld\n", 
high_ªg
); \

1464 
low_ªg
 = (
a˘ive_ªg_t
Ë
	`POP_FAILURE_INT
 (); \

1465 
	`DEBUG_PRINT2
 (" P›pögÜowá˘ivêªg: %ld\n", 
low_ªg
); \

1468 
this_ªg
 = 
high_ªg
;Åhis_ªg >
low_ªg
;Åhis_reg--) \

1470 
	`DEBUG_PRINT2
 (" P›pögÑeg: %ld\n", 
this_ªg
); \

1472 
ªg_öfo
[
this_ªg
].
w‹d
 = 
	`POP_FAILURE_ELT
 (); \

1473 
	`DEBUG_PRINT2
 (" info: %p\n", \

1474 
ªg_öfo
[
this_ªg
].
w‹d
.
poöãr
); \

1476 
ªgíd
[
this_ªg
] = (c⁄° *Ë
	`POP_FAILURE_POINTER
 (); \

1477 
	`DEBUG_PRINT2
 ("Énd: %p\n", 
ªgíd
[
this_ªg
]); \

1479 
ªg°¨t
[
this_ªg
] = (c⁄° *Ë
	`POP_FAILURE_POINTER
 (); \

1480 
	`DEBUG_PRINT2
 (" sèπ: %p\n", 
ªg°¨t
[
this_ªg
]); \

1484 
this_ªg
 = 
highe°_a˘ive_ªg
;Åhis_ªg > 
high_ªg
;Åhis_reg--) \

1486 
ªg_öfo
[
this_ªg
].
w‹d
.
öãgî
 = 0; \

1487 
ªgíd
[
this_ªg
] = 0; \

1488 
ªg°¨t
[
this_ªg
] = 0; \

1490 
highe°_a˘ive_ªg
 = 
high_ªg
; \

1493 
£t_ªgs_m©ched_d⁄e
 = 0; \

1494 
	`DEBUG_STATEMENT
 (
nÁûuª_poöts_p›≥d
++); \

1495 }

	)

1515 
Áû_°ack_ñt_t
 
	mw‹d
;

1520 
	#MATCH_NULL_UNSET_VALUE
 3

	)

1521 
	mm©ch_nuŒ_°rög_p
 : 2;

1522 
	mis_a˘ive
 : 1;

1523 
	mm©ched_somëhög
 : 1;

1524 
	mevî_m©ched_somëhög
 : 1;

1525 } 
	mbôs
;

1526 } 
	tªgi°î_öfo_ty≥
;

1528 
	#REG_MATCH_NULL_STRING_P
(
R
Ë((R).
bôs
.
m©ch_nuŒ_°rög_p
)

	)

1529 
	#IS_ACTIVE
(
R
Ë((R).
bôs
.
is_a˘ive
)

	)

1530 
	#MATCHED_SOMETHING
(
R
Ë((R).
bôs
.
m©ched_somëhög
)

	)

1531 
	#EVER_MATCHED_SOMETHING
(
R
Ë((R).
bôs
.
evî_m©ched_somëhög
)

	)

1537 
	#SET_REGS_MATCHED
() \

1540 i‡(!
£t_ªgs_m©ched_d⁄e
) \

1542 
a˘ive_ªg_t
 
r
; \

1543 
£t_ªgs_m©ched_d⁄e
 = 1; \

1544 
r
 = 
lowe°_a˘ive_ªg
;Ñ <
highe°_a˘ive_ªg
;Ñ++) \

1546 
	`MATCHED_SOMETHING
 (
ªg_öfo
[
r
]) \

1547 
	`EVER_MATCHED_SOMETHING
 (
ªg_öfo
[
r
]) \

1552 0)

	)

1555 
	gªg_un£t_dummy
;

1556 
	#REG_UNSET_VALUE
 (&
ªg_un£t_dummy
)

	)

1557 
	#REG_UNSET
(
e
Ë(”Ë=
REG_UNSET_VALUE
)

	)

1561 
ªg_îrcode_t
 
ªgex_compûe
 
_RE_ARGS
 ((c⁄° *
∑âîn
, 
size_t
 
size
,

1562 
ªg_sy¡ax_t
 
sy¡ax
,

1563 
ª_∑âîn_buf„r
 *
buÂ
));

1564 
°‹e_›1
 
_RE_ARGS
 ((
ª_›code_t
 
›
, *
loc
, 
¨g
));

1565 
°‹e_›2
 
_RE_ARGS
 ((
ª_›code_t
 
›
, *
loc
,

1566 
¨g1
, 
¨g2
));

1567 
ö£π_›1
 
_RE_ARGS
 ((
ª_›code_t
 
›
, *
loc
,

1568 
¨g
, *
íd
));

1569 
ö£π_›2
 
_RE_ARGS
 ((
ª_›code_t
 
›
, *
loc
,

1570 
¨g1
, 
¨g2
, *
íd
));

1571 
boﬁón
 
©_beglöe_loc_p
 
_RE_ARGS
 ((c⁄° *
∑âîn
, c⁄° *
p
,

1572 
ªg_sy¡ax_t
 
sy¡ax
));

1573 
boﬁón
 
©_ídlöe_loc_p
 
_RE_ARGS
 ((c⁄° *
p
, c⁄° *
≥nd
,

1574 
ªg_sy¡ax_t
 
sy¡ax
));

1575 
ªg_îrcode_t
 
compûe_ønge
 
_RE_ARGS
 ((c⁄° **
p_±r
,

1576 c⁄° *
≥nd
,

1577 *
å™¶©e
,

1578 
ªg_sy¡ax_t
 
sy¡ax
,

1579 *
b
));

1585 #i‚de‡
PATFETCH


1586 
	#PATFETCH
(
c
) \

1587 dÿ{i‡(
p
 =
≥nd
Ë 
REG_EEND
; \

1588 
c
 = (Ë*
p
++; \

1589 i‡(
å™¶©e
Ë
c
 = ()Åranslate[c]; \

1590 } 0)

	)

1595 
	#PATFETCH_RAW
(
c
) \

1596 dÿ{i‡(
p
 =
≥nd
Ë 
REG_EEND
; \

1597 
c
 = (Ë*
p
++; \

1598 } 0)

	)

1601 
	#PATUNFETCH
 
p
--

	)

1608 #i‚de‡
TRANSLATE


1609 
	#TRANSLATE
(
d
) \

1610 (
å™¶©e
 ? (Ëå™¶©e[(Ë(
d
)] : (d))

	)

1617 
	#INIT_BUF_SIZE
 32

	)

1620 
	#GET_BUFFER_SPACE
(
n
) \

1621 (Ë(
b
 - 
buÂ
->
buf„r
 + (
n
)Ë> buÂ->
Æloˇãd
) \

1622 
	`EXTEND_BUFFER
 ()

	)

1625 
	#BUF_PUSH
(
c
) \

1627 
	`GET_BUFFER_SPACE
 (1); \

1628 *
b
++ = (Ë(
c
); \

1629 } 0)

	)

1633 
	#BUF_PUSH_2
(
c1
, 
c2
) \

1635 
	`GET_BUFFER_SPACE
 (2); \

1636 *
b
++ = (Ë(
c1
); \

1637 *
b
++ = (Ë(
c2
); \

1638 } 0)

	)

1642 
	#BUF_PUSH_3
(
c1
, 
c2
, 
c3
) \

1644 
	`GET_BUFFER_SPACE
 (3); \

1645 *
b
++ = (Ë(
c1
); \

1646 *
b
++ = (Ë(
c2
); \

1647 *
b
++ = (Ë(
c3
); \

1648 } 0)

	)

1653 
	#STORE_JUMP
(
›
, 
loc
, 
to
) \

1654 
	`°‹e_›1
 (
›
, 
loc
, (Ë((
to
Ë- (locË- 3))

	)

1657 
	#STORE_JUMP2
(
›
, 
loc
, 
to
, 
¨g
) \

1658 
	`°‹e_›2
 (
›
, 
loc
, (Ë((
to
Ë- (locË- 3), 
¨g
)

	)

1661 
	#INSERT_JUMP
(
›
, 
loc
, 
to
) \

1662 
	`ö£π_›1
 (
›
, 
loc
, (Ë((
to
Ë- (locË- 3), 
b
)

	)

1665 
	#INSERT_JUMP2
(
›
, 
loc
, 
to
, 
¨g
) \

1666 
	`ö£π_›2
 (
›
, 
loc
, (Ë((
to
Ë- (locË- 3), 
¨g
, 
b
)

	)

1677 #i‡
deföed
 
_MSC_VER
 && !deföed 
_WIN32


1681 
	#MAX_BUF_SIZE
 65500L

	)

1682 
	#REALLOC
(
p
,
s
Ë
	`ªÆloc
 (’), (
size_t
Ë(s))

	)

1684 
	#MAX_BUF_SIZE
 (1L << 16)

	)

1685 
	#REALLOC
(
p
,
s
Ë
	`ªÆloc
 (’), (s))

	)

1692 
	#EXTEND_BUFFER
() \

1694 *
ﬁd_buf„r
 = 
buÂ
->
buf„r
; \

1695 i‡(
buÂ
->
Æloˇãd
 =
MAX_BUF_SIZE
) \

1696  
REG_ESIZE
; \

1697 
buÂ
->
Æloˇãd
 <<= 1; \

1698 i‡(
buÂ
->
Æloˇãd
 > 
MAX_BUF_SIZE
) \

1699 
buÂ
->
Æloˇãd
 = 
MAX_BUF_SIZE
; \

1700 
buÂ
->
buf„r
 = (*Ë
	`REALLOC
 (buÂ->buf„r, buÂ->
Æloˇãd
);\

1701 i‡(
buÂ
->
buf„r
 =
NULL
) \

1702  
REG_ESPACE
; \

1704 i‡(
ﬁd_buf„r
 !
buÂ
->
buf„r
) \

1706 
b
 = (b - 
ﬁd_buf„r
Ë+ 
buÂ
->
buf„r
; \

1707 
begÆt
 = (begÆà- 
ﬁd_buf„r
Ë+ 
buÂ
->
buf„r
; \

1708 i‡(
fixup_Æt_jump
) \

1709 
fixup_Æt_jump
 = (fixup_Æt_jum∞- 
ﬁd_buf„r
Ë+ 
buÂ
->
buf„r
;\

1710 i‡(
œ°°¨t
) \

1711 
œ°°¨t
 = (œ°°¨à- 
ﬁd_buf„r
Ë+ 
buÂ
->
buf„r
; \

1712 i‡(
≥ndög_exa˘
) \

1713 
≥ndög_exa˘
 = (≥ndög_exa˘ - 
ﬁd_buf„r
Ë+ 
buÂ
->
buf„r
; \

1715 } 0)

	)

1721 
	#MAX_REGNUM
 255

	)

1725 
	tªgnum_t
;

1733 
	t∑âîn_off£t_t
;

1737 
∑âîn_off£t_t
 
	mbegÆt_off£t
;

1738 
∑âîn_off£t_t
 
	mfixup_Æt_jump
;

1739 
∑âîn_off£t_t
 
	mö√r_group_off£t
;

1740 
∑âîn_off£t_t
 
	mœ°°¨t_off£t
;

1741 
ªgnum_t
 
	mªgnum
;

1742 } 
	tcompûe_°ack_ñt_t
;

1747 
compûe_°ack_ñt_t
 *
	m°ack
;

1748 
	msize
;

1749 
	mavaû
;

1750 } 
	tcompûe_°ack_ty≥
;

1753 
	#INIT_COMPILE_STACK_SIZE
 32

	)

1755 
	#COMPILE_STACK_EMPTY
 (
compûe_°ack
.
avaû
 =0)

	)

1756 
	#COMPILE_STACK_FULL
 (
compûe_°ack
.
avaû
 =compûe_°ack.
size
)

	)

1759 
	#COMPILE_STACK_TOP
 (
compûe_°ack
.
°ack
[compûe_°ack.
avaû
])

	)

1763 
	#SET_LIST_BIT
(
c
) \

1764 (
b
[((Ë(
c
)Ë/ 
BYTEWIDTH
] \

1765 |1 << (((Ë
c
Ë% 
BYTEWIDTH
))

	)

1769 
	#GET_UNSIGNED_NUMBER
(
num
) \

1770 { i‡(
p
 !
≥nd
) \

1772 
	`PATFETCH
 (
c
); \

1773 
	`ISDIGIT
 (
c
)) \

1775 i‡(
num
 < 0) \

1776 
num
 = 0; \

1777 
num
 =Çum * 10 + 
c
 - '0'; \

1778 i‡(
p
 =
≥nd
) \

1780 
	`PATFETCH
 (
c
); \

1783 }

	)

1785 #i‡
deföed
 
_LIBC
 || 
WIDE_CHAR_SUPPORT


1788 #ifde‡
CHARCLASS_NAME_MAX


1789 
	#CHAR_CLASS_MAX_LENGTH
 
CHARCLASS_NAME_MAX


	)

1793 
	#CHAR_CLASS_MAX_LENGTH
 256

	)

1796 #ifde‡
_LIBC


1797 
	#IS_CHAR_CLASS
(
°rög
Ë
	`__w˘y≥
 (°rög)

	)

1799 
	#IS_CHAR_CLASS
(
°rög
Ë
	`w˘y≥
 (°rög)

	)

1802 
	#CHAR_CLASS_MAX_LENGTH
 6

	)

1804 
	#IS_CHAR_CLASS
(
°rög
) \

1805 (
	`STREQ
 (
°rög
, "alpha") || STREQ (string, "upper") \

1806 || 
	`STREQ
 (
°rög
, "lower") || STREQ (string, "digit") \

1807 || 
	`STREQ
 (
°rög
, "alnum") || STREQ (string, "xdigit") \

1808 || 
	`STREQ
 (
°rög
, "space") || STREQ (string, "print") \

1809 || 
	`STREQ
 (
°rög
, "punct") || STREQ (string, "graph") \

1810 || 
	`STREQ
 (
°rög
, "˙ål"Ë|| STREQ (°rög, "bœnk"))

	)

1813 #i‚de‡
MATCH_MAY_ALLOCATE


1822 
Áû_°ack_ty≥
 
	gÁû_°ack
;

1827 
	gªgs_Æloˇãd_size
;

1829 c⁄° ** 
	gªg°¨t
, ** 
	gªgíd
;

1830 c⁄° ** 
	gﬁd_ªg°¨t
, ** 
	gﬁd_ªgíd
;

1831 c⁄° **
	gbe°_ªg°¨t
, **
	gbe°_ªgíd
;

1832 
ªgi°î_öfo_ty≥
 *
	gªg_öfo
;

1833 c⁄° **
	gªg_dummy
;

1834 
ªgi°î_öfo_ty≥
 *
	gªg_öfo_dummy
;

1840 
	$ªgex_grow_ªgi°îs
 (
num_ªgs
)

1841 
num_ªgs
;

1843 i‡(
num_ªgs
 > 
ªgs_Æloˇãd_size
)

1845 
	`RETALLOC_IF
 (
ªg°¨t
, 
num_ªgs
, const *);

1846 
	`RETALLOC_IF
 (
ªgíd
, 
num_ªgs
, const *);

1847 
	`RETALLOC_IF
 (
ﬁd_ªg°¨t
, 
num_ªgs
, const *);

1848 
	`RETALLOC_IF
 (
ﬁd_ªgíd
, 
num_ªgs
, const *);

1849 
	`RETALLOC_IF
 (
be°_ªg°¨t
, 
num_ªgs
, const *);

1850 
	`RETALLOC_IF
 (
be°_ªgíd
, 
num_ªgs
, const *);

1851 
	`RETALLOC_IF
 (
ªg_öfo
, 
num_ªgs
, 
ªgi°î_öfo_ty≥
);

1852 
	`RETALLOC_IF
 (
ªg_dummy
, 
num_ªgs
, const *);

1853 
	`RETALLOC_IF
 (
ªg_öfo_dummy
, 
num_ªgs
, 
ªgi°î_öfo_ty≥
);

1855 
ªgs_Æloˇãd_size
 = 
num_ªgs
;

1857 
	}
}

1861 
boﬁón
 
group_ö_compûe_°ack
 
_RE_ARGS
 ((
compûe_°ack_ty≥


1862 
compûe_°ack
,

1863 
ªgnum_t
 
ªgnum
));

1884 
	#FREE_STACK_RETURN
(
vÆue
) \

1885  (
	`‰ì
 (
compûe_°ack
.
°ack
), 
vÆue
)

	)

1887 
ªg_îrcode_t


1888 
	$ªgex_compûe
 (
∑âîn
, 
size
, 
sy¡ax
, 
buÂ
)

1889 c⁄° *
∑âîn
;

1890 
size_t
 
size
;

1891 
ªg_sy¡ax_t
 
sy¡ax
;

1892 
ª_∑âîn_buf„r
 *
buÂ
;

1897 
c
, 
c1
;

1900 c⁄° *
p1
;

1903 *
b
;

1906 
compûe_°ack_ty≥
 
compûe_°ack
;

1909 c⁄° *
p
 = 
∑âîn
;

1910 c⁄° *
≥nd
 = 
∑âîn
 + 
size
;

1913 
RE_TRANSLATE_TYPE
 
å™¶©e
 = 
buÂ
->translate;

1919 *
≥ndög_exa˘
 = 0;

1924 *
œ°°¨t
 = 0;

1927 *
begÆt
;

1931 c⁄° *
beg_öãrvÆ
;

1936 *
fixup_Æt_jump
 = 0;

1941 
ªgnum_t
 
ªgnum
 = 0;

1943 #ifde‡
DEBUG


1944 
	`DEBUG_PRINT1
 ("\nCompilingÖattern: ");

1945 i‡(
debug
)

1947 
debug_cou¡
;

1949 
debug_cou¡
 = 0; debug_cou¡ < 
size
; debug_count++)

1950 
	`putch¨
 (
∑âîn
[
debug_cou¡
]);

1951 
	`putch¨
 ('\n');

1956 
compûe_°ack
.
°ack
 = 
	`TALLOC
 (
INIT_COMPILE_STACK_SIZE
, 
compûe_°ack_ñt_t
);

1957 i‡(
compûe_°ack
.
°ack
 =
NULL
)

1958  
REG_ESPACE
;

1960 
compûe_°ack
.
size
 = 
INIT_COMPILE_STACK_SIZE
;

1961 
compûe_°ack
.
avaû
 = 0;

1964 
buÂ
->
sy¡ax
 = syntax;

1965 
buÂ
->
Á°m≠_accuøã
 = 0;

1966 
buÂ
->
nŸ_bﬁ
 = buÂ->
nŸ_eﬁ
 = 0;

1971 
buÂ
->
u£d
 = 0;

1974 
buÂ
->
ª_nsub
 = 0;

1976 #i‡!
deföed
 
emacs
 && !deföed 
SYNTAX_TABLE


1978 
	`öô_sy¡ax_⁄˚
 ();

1981 i‡(
buÂ
->
Æloˇãd
 == 0)

1983 i‡(
buÂ
->
buf„r
)

1987 
	`RETALLOC
 (
buÂ
->
buf„r
, 
INIT_BUF_SIZE
, );

1991 
buÂ
->
buf„r
 = 
	`TALLOC
 (
INIT_BUF_SIZE
, );

1993 i‡(!
buÂ
->
buf„r
Ë
	`FREE_STACK_RETURN
 (
REG_ESPACE
);

1995 
buÂ
->
Æloˇãd
 = 
INIT_BUF_SIZE
;

1998 
begÆt
 = 
b
 = 
buÂ
->
buf„r
;

2001 
p
 !
≥nd
)

2003 
	`PATFETCH
 (
c
);

2005 
c
)

2010 
p
 =
∑âîn
 + 1

2012 || 
sy¡ax
 & 
RE_CONTEXT_INDEP_ANCHORS


2014 || 
	`©_beglöe_loc_p
 (
∑âîn
, 
p
, 
sy¡ax
))

2015 
	`BUF_PUSH
 (
beglöe
);

2017 
n‹mÆ_ch¨
;

2025 
p
 =
≥nd


2027 || 
sy¡ax
 & 
RE_CONTEXT_INDEP_ANCHORS


2029 || 
	`©_ídlöe_loc_p
 (
p
, 
≥nd
, 
sy¡ax
))

2030 
	`BUF_PUSH
 (
ídlöe
);

2032 
n‹mÆ_ch¨
;

2039 i‡((
sy¡ax
 & 
RE_BK_PLUS_QM
)

2040 || (
sy¡ax
 & 
RE_LIMITED_OPS
))

2041 
n‹mÆ_ch¨
;

2042 
h™dÀ_∂us
:

2045 i‡(!
œ°°¨t
)

2047 i‡(
sy¡ax
 & 
RE_CONTEXT_INVALID_OPS
)

2048 
	`FREE_STACK_RETURN
 (
REG_BADRPT
);

2049 i‡(!(
sy¡ax
 & 
RE_CONTEXT_INDEP_OPS
))

2050 
n‹mÆ_ch¨
;

2055 
boﬁón
 
kìp_°rög_p
 = 
Ál£
;

2058 
zîo_times_ok
 = 0, 
m™y_times_ok
 = 0;

2067 
zîo_times_ok
 |
c
 != '+';

2068 
m™y_times_ok
 |
c
 != '?';

2070 i‡(
p
 =
≥nd
)

2073 
	`PATFETCH
 (
c
);

2075 i‡(
c
 == '*'

2076 || (!(
sy¡ax
 & 
RE_BK_PLUS_QM
Ë&& (
c
 == '+' || c == '?')))

2079 i‡(
sy¡ax
 & 
RE_BK_PLUS_QM
 && 
c
 == '\\')

2081 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EESCAPE
);

2083 
	`PATFETCH
 (
c1
);

2084 i‡(!(
c1
 == '+' || c1 == '?'))

2086 
PATUNFETCH
;

2087 
PATUNFETCH
;

2091 
c
 = 
c1
;

2095 
PATUNFETCH
;

2104 i‡(!
œ°°¨t
)

2109 i‡(
m™y_times_ok
)

2120 
	`as£π
 (
p
 - 1 > 
∑âîn
);

2123 
	`GET_BUFFER_SPACE
 (3);

2130 i‡(
	`TRANSLATE
 (*(
p
 - 2)) == TRANSLATE ('.')

2131 && 
zîo_times_ok


2132 && 
p
 < 
≥nd
 && 
	`TRANSLATE
 (*p) == TRANSLATE ('\n')

2133 && !(
sy¡ax
 & 
RE_DOT_NEWLINE
))

2135 
	`STORE_JUMP
 (
jump
, 
b
, 
œ°°¨t
);

2136 
kìp_°rög_p
 = 
åue
;

2140 
	`STORE_JUMP
 (
maybe_p›_jump
, 
b
, 
œ°°¨t
 - 3);

2143 
b
 += 3;

2148 
	`GET_BUFFER_SPACE
 (3);

2149 
	`INSERT_JUMP
 (
kìp_°rög_p
 ? 
⁄_Áûuª_kìp_°rög_jump


2150 : 
⁄_Áûuª_jump
,

2151 
œ°°¨t
, 
b
 + 3);

2152 
≥ndög_exa˘
 = 0;

2153 
b
 += 3;

2155 i‡(!
zîo_times_ok
)

2162 
	`GET_BUFFER_SPACE
 (3);

2163 
	`INSERT_JUMP
 (
dummy_Áûuª_jump
, 
œ°°¨t
,Üaststart + 6);

2164 
b
 += 3;

2171 
œ°°¨t
 = 
b
;

2172 
	`BUF_PUSH
 (
™ych¨
);

2178 
boﬁón
 
had_ch¨_˛ass
 = 
Ál£
;

2180 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EBRACK
);

2184 
	`GET_BUFFER_SPACE
 (34);

2186 
œ°°¨t
 = 
b
;

2190 
	`BUF_PUSH
 (*
p
 ='^' ? 
ch¨£t_nŸ
 : 
ch¨£t
);

2191 i‡(*
p
 == '^')

2192 
p
++;

2195 
p1
 = 
p
;

2198 
	`BUF_PUSH
 ((1 << 
BYTEWIDTH
) / BYTEWIDTH);

2201 
	`mem£t
 (
b
, 0, (1 << 
BYTEWIDTH
) / BYTEWIDTH);

2204 i‡((
ª_›code_t
Ë
b
[-2] =
ch¨£t_nŸ


2205 && (
sy¡ax
 & 
RE_HAT_LISTS_NOT_NEWLINE
))

2206 
	`SET_LIST_BIT
 ('\n');

2211 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EBRACK
);

2213 
	`PATFETCH
 (
c
);

2216 i‡((
sy¡ax
 & 
RE_BACKSLASH_ESCAPE_IN_LISTS
Ë&& 
c
 == '\\')

2218 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EESCAPE
);

2220 
	`PATFETCH
 (
c1
);

2221 
	`SET_LIST_BIT
 (
c1
);

2228 i‡(
c
 =']' && 
p
 !
p1
 + 1)

2233 i‡(
had_ch¨_˛ass
 && 
c
 ='-' && *
p
 != ']')

2234 
	`FREE_STACK_RETURN
 (
REG_ERANGE
);

2240 i‡(
c
 == '-'

2241 && !(
p
 - 2 >
∑âîn
 &&Ö[-2] == '[')

2242 && !(
p
 - 3 >
∑âîn
 &&Ö[-3] == '[' &&Ö[-2] == '^')

2243 && *
p
 != ']')

2245 
ªg_îrcode_t
 
ªt


2246 
	`compûe_ønge
 (&
p
, 
≥nd
, 
å™¶©e
, 
sy¡ax
, 
b
);

2247 i‡(
ªt
 !
REG_NOERROR
Ë
	`FREE_STACK_RETURN
 (ret);

2250 i‡(
p
[0] == '-' &&Ö[1] != ']')

2252 
ªg_îrcode_t
 
ªt
;

2255 
	`PATFETCH
 (
c1
);

2257 
ªt
 = 
	`compûe_ønge
 (&
p
, 
≥nd
, 
å™¶©e
, 
sy¡ax
, 
b
);

2258 i‡(
ªt
 !
REG_NOERROR
Ë
	`FREE_STACK_RETURN
 (ret);

2264 i‡(
sy¡ax
 & 
RE_CHAR_CLASSES
 && 
c
 ='[' && *
p
 == ':')

2266 
°r
[
CHAR_CLASS_MAX_LENGTH
 + 1];

2268 
	`PATFETCH
 (
c
);

2269 
c1
 = 0;

2272 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EBRACK
);

2276 
	`PATFETCH
 (
c
);

2277 i‡((
c
 =':' && *
p
 =']'Ë||Ö =
≥nd
)

2279 i‡(
c1
 < 
CHAR_CLASS_MAX_LENGTH
)

2280 
°r
[
c1
++] = 
c
;

2283 
°r
[0] = '\0';

2285 
°r
[
c1
] = '\0';

2290 i‡(
c
 =':' && *
p
 == ']')

2292 #i‡
deföed
 
_LIBC
 || 
WIDE_CHAR_SUPPORT


2293 
boﬁón
 
is_lowî
 = 
	`STREQ
 (
°r
, "lower");

2294 
boﬁón
 
is_uµî
 = 
	`STREQ
 (
°r
, "upper");

2295 
w˘y≥_t
 
wt
;

2296 
ch
;

2298 
wt
 = 
	`IS_CHAR_CLASS
 (
°r
);

2299 i‡(
wt
 == 0)

2300 
	`FREE_STACK_RETURN
 (
REG_ECTYPE
);

2304 
	`PATFETCH
 (
c
);

2306 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EBRACK
);

2308 
ch
 = 0; ch < 1 << 
BYTEWIDTH
; ++ch)

2310 #ifde‡
_LIBC


2311 i‡(
	`__isw˘y≥
 (
	`__btowc
 (
ch
), 
wt
))

2312 
	`SET_LIST_BIT
 (
ch
);

2314 i‡(
	`isw˘y≥
 (
	`btowc
 (
ch
), 
wt
))

2315 
	`SET_LIST_BIT
 (
ch
);

2318 i‡(
å™¶©e
 && (
is_uµî
 || 
is_lowî
)

2319 && (
	`ISUPPER
 (
ch
Ë|| 
	`ISLOWER
 (ch)))

2320 
	`SET_LIST_BIT
 (
ch
);

2323 
had_ch¨_˛ass
 = 
åue
;

2325 
ch
;

2326 
boﬁón
 
is_Ænum
 = 
	`STREQ
 (
°r
, "alnum");

2327 
boﬁón
 
is_Æpha
 = 
	`STREQ
 (
°r
, "alpha");

2328 
boﬁón
 
is_bœnk
 = 
	`STREQ
 (
°r
, "blank");

2329 
boﬁón
 
is_˙ål
 = 
	`STREQ
 (
°r
, "cntrl");

2330 
boﬁón
 
is_digô
 = 
	`STREQ
 (
°r
, "digit");

2331 
boﬁón
 
is_gøph
 = 
	`STREQ
 (
°r
, "graph");

2332 
boﬁón
 
is_lowî
 = 
	`STREQ
 (
°r
, "lower");

2333 
boﬁón
 
is_¥öt
 = 
	`STREQ
 (
°r
, "print");

2334 
boﬁón
 
is_pun˘
 = 
	`STREQ
 (
°r
, "punct");

2335 
boﬁón
 
is_•a˚
 = 
	`STREQ
 (
°r
, "space");

2336 
boﬁón
 
is_uµî
 = 
	`STREQ
 (
°r
, "upper");

2337 
boﬁón
 
is_xdigô
 = 
	`STREQ
 (
°r
, "xdigit");

2339 i‡(!
	`IS_CHAR_CLASS
 (
°r
))

2340 
	`FREE_STACK_RETURN
 (
REG_ECTYPE
);

2344 
	`PATFETCH
 (
c
);

2346 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EBRACK
);

2348 
ch
 = 0; ch < 1 << 
BYTEWIDTH
; ch++)

2352 i‡–(
is_Ænum
 && 
	`ISALNUM
 (
ch
))

2353 || (
is_Æpha
 && 
	`ISALPHA
 (
ch
))

2354 || (
is_bœnk
 && 
	`ISBLANK
 (
ch
))

2355 || (
is_˙ål
 && 
	`ISCNTRL
 (
ch
)))

2356 
	`SET_LIST_BIT
 (
ch
);

2357 i‡–(
is_digô
 && 
	`ISDIGIT
 (
ch
))

2358 || (
is_gøph
 && 
	`ISGRAPH
 (
ch
))

2359 || (
is_lowî
 && 
	`ISLOWER
 (
ch
))

2360 || (
is_¥öt
 && 
	`ISPRINT
 (
ch
)))

2361 
	`SET_LIST_BIT
 (
ch
);

2362 i‡–(
is_pun˘
 && 
	`ISPUNCT
 (
ch
))

2363 || (
is_•a˚
 && 
	`ISSPACE
 (
ch
))

2364 || (
is_uµî
 && 
	`ISUPPER
 (
ch
))

2365 || (
is_xdigô
 && 
	`ISXDIGIT
 (
ch
)))

2366 
	`SET_LIST_BIT
 (
ch
);

2367 i‡–
å™¶©e
 && (
is_uµî
 || 
is_lowî
)

2368 && (
	`ISUPPER
 (
ch
Ë|| 
	`ISLOWER
 (ch)))

2369 
	`SET_LIST_BIT
 (
ch
);

2371 
had_ch¨_˛ass
 = 
åue
;

2376 
c1
++;

2377 
c1
--)

2378 
PATUNFETCH
;

2379 
	`SET_LIST_BIT
 ('[');

2380 
	`SET_LIST_BIT
 (':');

2381 
had_ch¨_˛ass
 = 
Ál£
;

2386 
had_ch¨_˛ass
 = 
Ál£
;

2387 
	`SET_LIST_BIT
 (
c
);

2393 (Ë
b
[-1] > 0 && b[b[-1] - 1] == 0)

2394 
b
[-1]--;

2395 
b
 += b[-1];

2401 i‡(
sy¡ax
 & 
RE_NO_BK_PARENS
)

2402 
h™dÀ_›í
;

2404 
n‹mÆ_ch¨
;

2408 i‡(
sy¡ax
 & 
RE_NO_BK_PARENS
)

2409 
h™dÀ_˛o£
;

2411 
n‹mÆ_ch¨
;

2415 i‡(
sy¡ax
 & 
RE_NEWLINE_ALT
)

2416 
h™dÀ_Æt
;

2418 
n‹mÆ_ch¨
;

2422 i‡(
sy¡ax
 & 
RE_NO_BK_VBAR
)

2423 
h™dÀ_Æt
;

2425 
n‹mÆ_ch¨
;

2429 i‡(
sy¡ax
 & 
RE_INTERVALS
 && sy¡ax & 
RE_NO_BK_BRACES
)

2430 
h™dÀ_öãrvÆ
;

2432 
n‹mÆ_ch¨
;

2436 i‡(
p
 =
≥nd
Ë
	`FREE_STACK_RETURN
 (
REG_EESCAPE
);

2441 
	`PATFETCH_RAW
 (
c
);

2443 
c
)

2446 i‡(
sy¡ax
 & 
RE_NO_BK_PARENS
)

2447 
n‹mÆ_back¶ash
;

2449 
h™dÀ_›í
:

2450 
buÂ
->
ª_nsub
++;

2451 
ªgnum
++;

2453 i‡(
COMPILE_STACK_FULL
)

2455 
	`RETALLOC
 (
compûe_°ack
.
°ack
, compûe_°ack.
size
 << 1,

2456 
compûe_°ack_ñt_t
);

2457 i‡(
compûe_°ack
.
°ack
 =
NULL
Ë 
REG_ESPACE
;

2459 
compûe_°ack
.
size
 <<= 1;

2466 
COMPILE_STACK_TOP
.
begÆt_off£t
 = 
begÆt
 - 
buÂ
->
buf„r
;

2467 
COMPILE_STACK_TOP
.
fixup_Æt_jump


2468 
fixup_Æt_jump
 ? fixup_Æt_jum∞- 
buÂ
->
buf„r
 + 1 : 0;

2469 
COMPILE_STACK_TOP
.
œ°°¨t_off£t
 = 
b
 - 
buÂ
->
buf„r
;

2470 
COMPILE_STACK_TOP
.
ªgnum
 =Ñegnum;

2476 i‡(
ªgnum
 <
MAX_REGNUM
)

2478 
COMPILE_STACK_TOP
.
ö√r_group_off£t
 = 
b
 - 
buÂ
->
buf„r
 + 2;

2479 
	`BUF_PUSH_3
 (
°¨t_mem‹y
, 
ªgnum
, 0);

2482 
compûe_°ack
.
avaû
++;

2484 
fixup_Æt_jump
 = 0;

2485 
œ°°¨t
 = 0;

2486 
begÆt
 = 
b
;

2490 
≥ndög_exa˘
 = 0;

2495 i‡(
sy¡ax
 & 
RE_NO_BK_PARENS
Ë
n‹mÆ_back¶ash
;

2497 i‡(
COMPILE_STACK_EMPTY
)

2499 i‡(
sy¡ax
 & 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

2500 
n‹mÆ_back¶ash
;

2502 
	`FREE_STACK_RETURN
 (
REG_ERPAREN
);

2505 
h™dÀ_˛o£
:

2506 i‡(
fixup_Æt_jump
)

2511 
	`BUF_PUSH
 (
push_dummy_Áûuª
);

2515 
	`STORE_JUMP
 (
jump_∑°_Æt
, 
fixup_Æt_jump
, 
b
 - 1);

2519 i‡(
COMPILE_STACK_EMPTY
)

2521 i‡(
sy¡ax
 & 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

2522 
n‹mÆ_ch¨
;

2524 
	`FREE_STACK_RETURN
 (
REG_ERPAREN
);

2529 
	`as£π
 (
compûe_°ack
.
avaû
 != 0);

2534 
ªgnum_t
 
this_group_ªgnum
;

2536 
compûe_°ack
.
avaû
--;

2537 
begÆt
 = 
buÂ
->
buf„r
 + 
COMPILE_STACK_TOP
.
begÆt_off£t
;

2538 
fixup_Æt_jump


2539 
COMPILE_STACK_TOP
.
fixup_Æt_jump


2540 ? 
buÂ
->
buf„r
 + 
COMPILE_STACK_TOP
.
fixup_Æt_jump
 - 1

2542 
œ°°¨t
 = 
buÂ
->
buf„r
 + 
COMPILE_STACK_TOP
.
œ°°¨t_off£t
;

2543 
this_group_ªgnum
 = 
COMPILE_STACK_TOP
.
ªgnum
;

2547 
≥ndög_exa˘
 = 0;

2551 i‡(
this_group_ªgnum
 <
MAX_REGNUM
)

2553 *
ö√r_group_loc


2554 
buÂ
->
buf„r
 + 
COMPILE_STACK_TOP
.
ö√r_group_off£t
;

2556 *
ö√r_group_loc
 = 
ªgnum
 - 
this_group_ªgnum
;

2557 
	`BUF_PUSH_3
 (
°›_mem‹y
, 
this_group_ªgnum
,

2558 
ªgnum
 - 
this_group_ªgnum
);

2565 i‡(
sy¡ax
 & 
RE_LIMITED_OPS
 || sy¡ax & 
RE_NO_BK_VBAR
)

2566 
n‹mÆ_back¶ash
;

2567 
h™dÀ_Æt
:

2568 i‡(
sy¡ax
 & 
RE_LIMITED_OPS
)

2569 
n‹mÆ_ch¨
;

2573 
	`GET_BUFFER_SPACE
 (3);

2574 
	`INSERT_JUMP
 (
⁄_Áûuª_jump
, 
begÆt
, 
b
 + 6);

2575 
≥ndög_exa˘
 = 0;

2576 
b
 += 3;

2594 i‡(
fixup_Æt_jump
)

2595 
	`STORE_JUMP
 (
jump_∑°_Æt
, 
fixup_Æt_jump
, 
b
);

2600 
fixup_Æt_jump
 = 
b
;

2601 
	`GET_BUFFER_SPACE
 (3);

2602 
b
 += 3;

2604 
œ°°¨t
 = 0;

2605 
begÆt
 = 
b
;

2611 i‡(!(
sy¡ax
 & 
RE_INTERVALS
)

2614 || ((
sy¡ax
 & 
RE_INTERVALS
Ë&& (sy¡ax & 
RE_NO_BK_BRACES
))

2615 || (
p
 - 2 =
∑âîn
 &&Ö =
≥nd
))

2616 
n‹mÆ_back¶ash
;

2618 
h™dÀ_öãrvÆ
:

2623 
lowî_bound
 = -1, 
uµî_bound
 = -1;

2625 
beg_öãrvÆ
 = 
p
 - 1;

2627 i‡(
p
 =
≥nd
)

2629 i‡(
sy¡ax
 & 
RE_NO_BK_BRACES
)

2630 
un„tch_öãrvÆ
;

2632 
	`FREE_STACK_RETURN
 (
REG_EBRACE
);

2635 
	`GET_UNSIGNED_NUMBER
 (
lowî_bound
);

2637 i‡(
c
 == ',')

2639 
	`GET_UNSIGNED_NUMBER
 (
uµî_bound
);

2640 i‡(
uµî_bound
 < 0Ëuµî_bound = 
RE_DUP_MAX
;

2644 
uµî_bound
 = 
lowî_bound
;

2646 i‡(
lowî_bound
 < 0 || 
uµî_bound
 > 
RE_DUP_MAX


2647 || 
lowî_bound
 > 
uµî_bound
)

2649 i‡(
sy¡ax
 & 
RE_NO_BK_BRACES
)

2650 
un„tch_öãrvÆ
;

2652 
	`FREE_STACK_RETURN
 (
REG_BADBR
);

2655 i‡(!(
sy¡ax
 & 
RE_NO_BK_BRACES
))

2657 i‡(
c
 !'\\'Ë
	`FREE_STACK_RETURN
 (
REG_EBRACE
);

2659 
	`PATFETCH
 (
c
);

2662 i‡(
c
 != '}')

2664 i‡(
sy¡ax
 & 
RE_NO_BK_BRACES
)

2665 
un„tch_öãrvÆ
;

2667 
	`FREE_STACK_RETURN
 (
REG_BADBR
);

2673 i‡(!
œ°°¨t
)

2675 i‡(
sy¡ax
 & 
RE_CONTEXT_INVALID_OPS
)

2676 
	`FREE_STACK_RETURN
 (
REG_BADRPT
);

2677 i‡(
sy¡ax
 & 
RE_CONTEXT_INDEP_OPS
)

2678 
œ°°¨t
 = 
b
;

2680 
un„tch_öãrvÆ
;

2686 i‡(
uµî_bound
 == 0)

2688 
	`GET_BUFFER_SPACE
 (3);

2689 
	`INSERT_JUMP
 (
jump
, 
œ°°¨t
, 
b
 + 3);

2690 
b
 += 3;

2705 
nbyãs
 = 10 + (
uµî_bound
 > 1) * 10;

2707 
	`GET_BUFFER_SPACE
 (
nbyãs
);

2714 
	`INSERT_JUMP2
 (
suc˚ed_n
, 
œ°°¨t
,

2715 
b
 + 5 + (
uµî_bound
 > 1) * 5,

2716 
lowî_bound
);

2717 
b
 += 5;

2723 
	`ö£π_›2
 (
£t_numbî_©
, 
œ°°¨t
, 5, 
lowî_bound
, 
b
);

2724 
b
 += 5;

2726 i‡(
uµî_bound
 > 1)

2734 
	`STORE_JUMP2
 (
jump_n
, 
b
, 
œ°°¨t
 + 5,

2735 
uµî_bound
 - 1);

2736 
b
 += 5;

2752 
	`ö£π_›2
 (
£t_numbî_©
, 
œ°°¨t
, 
b
 -Üaststart,

2753 
uµî_bound
 - 1, 
b
);

2754 
b
 += 5;

2757 
≥ndög_exa˘
 = 0;

2758 
beg_öãrvÆ
 = 
NULL
;

2762 
un„tch_öãrvÆ
:

2764 
	`as£π
 (
beg_öãrvÆ
);

2765 
p
 = 
beg_öãrvÆ
;

2766 
beg_öãrvÆ
 = 
NULL
;

2769 
	`PATFETCH
 (
c
);

2771 i‡(!(
sy¡ax
 & 
RE_NO_BK_BRACES
))

2773 i‡(
p
 > 
∑âîn
 &&Ö[-1] == '\\')

2774 
n‹mÆ_back¶ash
;

2776 
n‹mÆ_ch¨
;

2778 #ifde‡
emacs


2782 
	`BUF_PUSH
 (
©_dŸ
);

2786 
œ°°¨t
 = 
b
;

2787 
	`PATFETCH
 (
c
);

2788 
	`BUF_PUSH_2
 (
sy¡ax•ec
, 
sy¡ax_•ec_code
[
c
]);

2792 
œ°°¨t
 = 
b
;

2793 
	`PATFETCH
 (
c
);

2794 
	`BUF_PUSH_2
 (
nŸsy¡ax•ec
, 
sy¡ax_•ec_code
[
c
]);

2800 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2801 
n‹mÆ_ch¨
;

2802 
œ°°¨t
 = 
b
;

2803 
	`BUF_PUSH
 (
w‹dch¨
);

2808 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2809 
n‹mÆ_ch¨
;

2810 
œ°°¨t
 = 
b
;

2811 
	`BUF_PUSH
 (
nŸw‹dch¨
);

2816 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2817 
n‹mÆ_ch¨
;

2818 
	`BUF_PUSH
 (
w‹dbeg
);

2822 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2823 
n‹mÆ_ch¨
;

2824 
	`BUF_PUSH
 (
w‹díd
);

2828 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2829 
n‹mÆ_ch¨
;

2830 
	`BUF_PUSH
 (
w‹dbound
);

2834 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2835 
n‹mÆ_ch¨
;

2836 
	`BUF_PUSH
 (
nŸw‹dbound
);

2840 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2841 
n‹mÆ_ch¨
;

2842 
	`BUF_PUSH
 (
begbuf
);

2846 i‡(
sy¡ax
 & 
RE_NO_GNU_OPS
)

2847 
n‹mÆ_ch¨
;

2848 
	`BUF_PUSH
 (
ídbuf
);

2853 i‡(
sy¡ax
 & 
RE_NO_BK_REFS
)

2854 
n‹mÆ_ch¨
;

2856 
c1
 = 
c
 - '0';

2858 i‡(
c1
 > 
ªgnum
)

2859 
	`FREE_STACK_RETURN
 (
REG_ESUBREG
);

2862 i‡(
	`group_ö_compûe_°ack
 (
compûe_°ack
, (
ªgnum_t
Ë
c1
))

2863 
n‹mÆ_ch¨
;

2865 
œ°°¨t
 = 
b
;

2866 
	`BUF_PUSH_2
 (
du∂iˇã
, 
c1
);

2872 i‡(
sy¡ax
 & 
RE_BK_PLUS_QM
)

2873 
h™dÀ_∂us
;

2875 
n‹mÆ_back¶ash
;

2878 
n‹mÆ_back¶ash
:

2882 
c
 = 
	`TRANSLATE
 (c);

2883 
n‹mÆ_ch¨
;

2890 
n‹mÆ_ch¨
:

2892 i‡(!
≥ndög_exa˘


2895 || 
≥ndög_exa˘
 + *≥ndög_exa˘ + 1 !
b


2898 || *
≥ndög_exa˘
 =(1 << 
BYTEWIDTH
) - 1

2901 || *
p
 == '*' || *p == '^'

2902 || ((
sy¡ax
 & 
RE_BK_PLUS_QM
)

2903 ? *
p
 == '\\' && (p[1] == '+' ||Ö[1] == '?')

2904 : (*
p
 == '+' || *p == '?'))

2905 || ((
sy¡ax
 & 
RE_INTERVALS
)

2906 && ((
sy¡ax
 & 
RE_NO_BK_BRACES
)

2907 ? *
p
 == '{'

2908 : (
p
[0] == '\\' &&Ö[1] == '{'))))

2912 
œ°°¨t
 = 
b
;

2914 
	`BUF_PUSH_2
 (
exa˘n
, 0);

2915 
≥ndög_exa˘
 = 
b
 - 1;

2918 
	`BUF_PUSH
 (
c
);

2919 (*
≥ndög_exa˘
)++;

2927 i‡(
fixup_Æt_jump
)

2928 
	`STORE_JUMP
 (
jump_∑°_Æt
, 
fixup_Æt_jump
, 
b
);

2930 i‡(!
COMPILE_STACK_EMPTY
)

2931 
	`FREE_STACK_RETURN
 (
REG_EPAREN
);

2935 i‡(
sy¡ax
 & 
RE_NO_POSIX_BACKTRACKING
)

2936 
	`BUF_PUSH
 (
suc˚ed
);

2938 
	`‰ì
 (
compûe_°ack
.
°ack
);

2941 
buÂ
->
u£d
 = 
b
 - buÂ->
buf„r
;

2943 #ifde‡
DEBUG


2944 i‡(
debug
)

2946 
	`DEBUG_PRINT1
 ("\nCompiledÖattern: \n");

2947 
	`¥öt_compûed_∑âîn
 (
buÂ
);

2951 #i‚de‡
MATCH_MAY_ALLOCATE


2956 
num_ªgs
 = 
buÂ
->
ª_nsub
 + 1;

2961 i‡(
Áû_°ack
.
size
 < (2 * 
ª_max_Áûuªs
 * 
MAX_FAILURE_ITEMS
))

2963 
Áû_°ack
.
size
 = (2 * 
ª_max_Áûuªs
 * 
MAX_FAILURE_ITEMS
);

2965 #ifde‡
emacs


2966 i‡(! 
Áû_°ack
.
°ack
)

2967 
Áû_°ack
.
°ack


2968 (
Áû_°ack_ñt_t
 *Ë
	`xmÆloc
 (
Áû_°ack
.
size


2969 *  (
Áû_°ack_ñt_t
));

2971 
Áû_°ack
.
°ack


2972 (
Áû_°ack_ñt_t
 *Ë
	`xªÆloc
 (
Áû_°ack
.
°ack
,

2973 (
Áû_°ack
.
size


2974 *  (
Áû_°ack_ñt_t
)));

2976 i‡(! 
Áû_°ack
.
°ack
)

2977 
Áû_°ack
.
°ack


2978 (
Áû_°ack_ñt_t
 *Ë
	`mÆloc
 (
Áû_°ack
.
size


2979 *  (
Áû_°ack_ñt_t
));

2981 
Áû_°ack
.
°ack


2982 (
Áû_°ack_ñt_t
 *Ë
	`ªÆloc
 (
Áû_°ack
.
°ack
,

2983 (
Áû_°ack
.
size


2984 *  (
Áû_°ack_ñt_t
)));

2988 
	`ªgex_grow_ªgi°îs
 (
num_ªgs
);

2992  
REG_NOERROR
;

2993 
	}
}

3000 
	$°‹e_›1
 (
›
, 
loc
, 
¨g
)

3001 
ª_›code_t
 
›
;

3002 *
loc
;

3003 
¨g
;

3005 *
loc
 = (Ë
›
;

3006 
	`STORE_NUMBER
 (
loc
 + 1, 
¨g
);

3007 
	}
}

3013 
	$°‹e_›2
 (
›
, 
loc
, 
¨g1
, 
¨g2
)

3014 
ª_›code_t
 
›
;

3015 *
loc
;

3016 
¨g1
, 
¨g2
;

3018 *
loc
 = (Ë
›
;

3019 
	`STORE_NUMBER
 (
loc
 + 1, 
¨g1
);

3020 
	`STORE_NUMBER
 (
loc
 + 3, 
¨g2
);

3021 
	}
}

3028 
	$ö£π_›1
 (
›
, 
loc
, 
¨g
, 
íd
)

3029 
ª_›code_t
 
›
;

3030 *
loc
;

3031 
¨g
;

3032 *
íd
;

3034 *
p‰om
 = 
íd
;

3035 *
±o
 = 
íd
 + 3;

3037 
p‰om
 !
loc
)

3038 *--
±o
 = *--
p‰om
;

3040 
	`°‹e_›1
 (
›
, 
loc
, 
¨g
);

3041 
	}
}

3047 
	$ö£π_›2
 (
›
, 
loc
, 
¨g1
, 
¨g2
, 
íd
)

3048 
ª_›code_t
 
›
;

3049 *
loc
;

3050 
¨g1
, 
¨g2
;

3051 *
íd
;

3053 *
p‰om
 = 
íd
;

3054 *
±o
 = 
íd
 + 5;

3056 
p‰om
 !
loc
)

3057 *--
±o
 = *--
p‰om
;

3059 
	`°‹e_›2
 (
›
, 
loc
, 
¨g1
, 
¨g2
);

3060 
	}
}

3067 
boﬁón


3068 
	$©_beglöe_loc_p
 (
∑âîn
, 
p
, 
sy¡ax
)

3069 c⁄° *
∑âîn
, *
p
;

3070 
ªg_sy¡ax_t
 
sy¡ax
;

3072 c⁄° *
¥ev
 = 
p
 - 2;

3073 
boﬁón
 
¥ev_¥ev_back¶ash
 = 
¥ev
 > 
∑âîn
 &&Örev[-1] == '\\';

3077 (*
¥ev
 ='(' && (
sy¡ax
 & 
RE_NO_BK_PARENS
 || 
¥ev_¥ev_back¶ash
))

3079 || (*
¥ev
 ='|' && (
sy¡ax
 & 
RE_NO_BK_VBAR
 || 
¥ev_¥ev_back¶ash
));

3080 
	}
}

3086 
boﬁón


3087 
	$©_ídlöe_loc_p
 (
p
, 
≥nd
, 
sy¡ax
)

3088 c⁄° *
p
, *
≥nd
;

3089 
ªg_sy¡ax_t
 
sy¡ax
;

3091 c⁄° *
√xt
 = 
p
;

3092 
boﬁón
 
√xt_back¶ash
 = *
√xt
 == '\\';

3093 c⁄° *
√xt_√xt
 = 
p
 + 1 < 
≥nd
 ?Ö + 1 : 0;

3097 (
sy¡ax
 & 
RE_NO_BK_PARENS
 ? *
√xt
 == ')'

3098 : 
√xt_back¶ash
 && 
√xt_√xt
 && *next_next == ')')

3100 || (
sy¡ax
 & 
RE_NO_BK_VBAR
 ? *
√xt
 == '|'

3101 : 
√xt_back¶ash
 && 
√xt_√xt
 && *next_next == '|');

3102 
	}
}

3108 
boﬁón


3109 
	$group_ö_compûe_°ack
 (
compûe_°ack
, 
ªgnum
)

3110 
compûe_°ack_ty≥
 
compûe_°ack
;

3111 
ªgnum_t
 
ªgnum
;

3113 
this_ñemít
;

3115 
this_ñemít
 = 
compûe_°ack
.
avaû
 - 1;

3116 
this_ñemít
 >= 0;

3117 
this_ñemít
--)

3118 i‡(
compûe_°ack
.
°ack
[
this_ñemít
].
ªgnum
 ==Ñegnum)

3119  
åue
;

3121  
Ál£
;

3122 
	}
}

3136 
ªg_îrcode_t


3137 
	$compûe_ønge
 (
p_±r
, 
≥nd
, 
å™¶©e
, 
sy¡ax
, 
b
)

3138 c⁄° **
p_±r
, *
≥nd
;

3139 
RE_TRANSLATE_TYPE
 
å™¶©e
;

3140 
ªg_sy¡ax_t
 
sy¡ax
;

3141 *
b
;

3143 
this_ch¨
;

3145 c⁄° *
p
 = *
p_±r
;

3146 
ønge_°¨t
, 
ønge_íd
;

3148 i‡(
p
 =
≥nd
)

3149  
REG_ERANGE
;

3159 
ønge_°¨t
 = ((c⁄° *Ë
p
)[-2];

3160 
ønge_íd
 = ((c⁄° *Ë
p
)[0];

3164 (*
p_±r
)++;

3167 i‡(
ønge_°¨t
 > 
ønge_íd
)

3168  
sy¡ax
 & 
RE_NO_EMPTY_RANGES
 ? 
REG_ERANGE
 : 
REG_NOERROR
;

3174 
this_ch¨
 = 
ønge_°¨t
;Åhis_ch¨ <
ønge_íd
;Åhis_char++)

3176 
	`SET_LIST_BIT
 (
	`TRANSLATE
 (
this_ch¨
));

3179  
REG_NOERROR
;

3180 
	}
}

3196 
	$ª_compûe_Á°m≠
 (
buÂ
)

3197 
ª_∑âîn_buf„r
 *
buÂ
;

3199 
j
, 
k
;

3200 #ifde‡
MATCH_MAY_ALLOCATE


3201 
Áû_°ack_ty≥
 
Áû_°ack
;

3203 #i‚de‡
REGEX_MALLOC


3204 *
de°ö©i⁄
;

3207 *
Á°m≠
 = 
buÂ
->fastmap;

3208 *
∑âîn
 = 
buÂ
->
buf„r
;

3209 *
p
 = 
∑âîn
;

3210 *
≥nd
 = 
∑âîn
 + 
buÂ
->
u£d
;

3212 #ifde‡
REL_ALLOC


3215 
Áû_°ack_ñt_t
 *
Áûuª_°ack_±r
;

3222 
boﬁón
 
∑th_ˇn_be_nuŒ
 = 
åue
;

3225 
boﬁón
 
suc˚ed_n_p
 = 
Ál£
;

3227 
	`as£π
 (
Á°m≠
 !
NULL
 && 
p
 != NULL);

3229 
	`INIT_FAIL_STACK
 ();

3230 
	`mem£t
 (
Á°m≠
, 0, 1 << 
BYTEWIDTH
);

3231 
buÂ
->
Á°m≠_accuøã
 = 1;

3232 
buÂ
->
ˇn_be_nuŒ
 = 0;

3236 i‡(
p
 =
≥nd
 || *∞=
suc˚ed
)

3239 i‡(!
	`FAIL_STACK_EMPTY
 ())

3241 
buÂ
->
ˇn_be_nuŒ
 |
∑th_ˇn_be_nuŒ
;

3244 
∑th_ˇn_be_nuŒ
 = 
åue
;

3246 
p
 = 
Áû_°ack
.
°ack
[--Áû_°ack.
avaû
].
poöãr
;

3255 
	`as£π
 (
p
 < 
≥nd
);

3257 
	`SWITCH_ENUM_CAST
 ((
ª_›code_t
Ë*
p
++))

3265 
du∂iˇã
:

3266 
buÂ
->
ˇn_be_nuŒ
 = 1;

3267 
d⁄e
;

3273 
exa˘n
:

3274 
Á°m≠
[
p
[1]] = 1;

3278 
ch¨£t
:

3279 
j
 = *
p
++ * 
BYTEWIDTH
 - 1; j >= 0; j--)

3280 i‡(
p
[
j
 / 
BYTEWIDTH
] & (1 << (j % BYTEWIDTH)))

3281 
Á°m≠
[
j
] = 1;

3285 
ch¨£t_nŸ
:

3287 
j
 = *
p
 * 
BYTEWIDTH
; j < (1 << BYTEWIDTH); j++)

3288 
Á°m≠
[
j
] = 1;

3290 
j
 = *
p
++ * 
BYTEWIDTH
 - 1; j >= 0; j--)

3291 i‡(!(
p
[
j
 / 
BYTEWIDTH
] & (1 << (j % BYTEWIDTH))))

3292 
Á°m≠
[
j
] = 1;

3296 
w‹dch¨
:

3297 
j
 = 0; j < (1 << 
BYTEWIDTH
); j++)

3298 i‡(
	`SYNTAX
 (
j
Ë=
Sw‹d
)

3299 
Á°m≠
[
j
] = 1;

3303 
nŸw‹dch¨
:

3304 
j
 = 0; j < (1 << 
BYTEWIDTH
); j++)

3305 i‡(
	`SYNTAX
 (
j
Ë!
Sw‹d
)

3306 
Á°m≠
[
j
] = 1;

3310 
™ych¨
:

3312 
Á°m≠_√wlöe
 = 
Á°m≠
['\n'];

3315 
j
 = 0; j < (1 << 
BYTEWIDTH
); j++)

3316 
Á°m≠
[
j
] = 1;

3319 i‡(!(
buÂ
->
sy¡ax
 & 
RE_DOT_NEWLINE
))

3320 
Á°m≠
['\n'] = 
Á°m≠_√wlöe
;

3324 i‡(
buÂ
->
ˇn_be_nuŒ
)

3325 
d⁄e
;

3331 #ifde‡
emacs


3332 
sy¡ax•ec
:

3333 
k
 = *
p
++;

3334 
j
 = 0; j < (1 << 
BYTEWIDTH
); j++)

3335 i‡(
	`SYNTAX
 (
j
Ë=(
sy¡axcode
Ë
k
)

3336 
Á°m≠
[
j
] = 1;

3340 
nŸsy¡ax•ec
:

3341 
k
 = *
p
++;

3342 
j
 = 0; j < (1 << 
BYTEWIDTH
); j++)

3343 i‡(
	`SYNTAX
 (
j
Ë!(
sy¡axcode
Ë
k
)

3344 
Á°m≠
[
j
] = 1;

3352 
bef‹e_dŸ
:

3353 
©_dŸ
:

3354 
a·î_dŸ
:

3359 
no_›
:

3360 
beglöe
:

3361 
ídlöe
:

3362 
begbuf
:

3363 
ídbuf
:

3364 
w‹dbound
:

3365 
nŸw‹dbound
:

3366 
w‹dbeg
:

3367 
w‹díd
:

3368 
push_dummy_Áûuª
:

3372 
jump_n
:

3373 
p›_Áûuª_jump
:

3374 
maybe_p›_jump
:

3375 
jump
:

3376 
jump_∑°_Æt
:

3377 
dummy_Áûuª_jump
:

3378 
	`EXTRACT_NUMBER_AND_INCR
 (
j
, 
p
);

3379 
p
 +
j
;

3380 i‡(
j
 > 0)

3388 i‡((
ª_›code_t
Ë*
p
 !
⁄_Áûuª_jump


3389 && (
ª_›code_t
Ë*
p
 !
suc˚ed_n
)

3392 
p
++;

3393 
	`EXTRACT_NUMBER_AND_INCR
 (
j
, 
p
);

3394 
p
 +
j
;

3397 i‡(!
	`FAIL_STACK_EMPTY
 ()

3398 && 
Áû_°ack
.
°ack
[Áû_°ack.
avaû
 - 1].
poöãr
 =
p
)

3399 
Áû_°ack
.
avaû
--;

3404 
⁄_Áûuª_jump
:

3405 
⁄_Áûuª_kìp_°rög_jump
:

3406 
h™dÀ_⁄_Áûuª_jump
:

3407 
	`EXTRACT_NUMBER_AND_INCR
 (
j
, 
p
);

3416 i‡(
p
 + 
j
 < 
≥nd
)

3418 i‡(!
	`PUSH_PATTERN_OP
 (
p
 + 
j
, 
Áû_°ack
))

3420 
	`RESET_FAIL_STACK
 ();

3425 
buÂ
->
ˇn_be_nuŒ
 = 1;

3427 i‡(
suc˚ed_n_p
)

3429 
	`EXTRACT_NUMBER_AND_INCR
 (
k
, 
p
);

3430 
suc˚ed_n_p
 = 
Ál£
;

3436 
suc˚ed_n
:

3438 
p
 += 2;

3441 
	`EXTRACT_NUMBER_AND_INCR
 (
k
, 
p
);

3442 i‡(
k
 == 0)

3444 
p
 -= 4;

3445 
suc˚ed_n_p
 = 
åue
;

3446 
h™dÀ_⁄_Áûuª_jump
;

3451 
£t_numbî_©
:

3452 
p
 += 4;

3456 
°¨t_mem‹y
:

3457 
°›_mem‹y
:

3458 
p
 += 2;

3463 
	`ab‹t
 ();

3472 
∑th_ˇn_be_nuŒ
 = 
Ál£
;

3473 
p
 = 
≥nd
;

3478 
buÂ
->
ˇn_be_nuŒ
 |
∑th_ˇn_be_nuŒ
;

3480 
d⁄e
:

3481 
	`RESET_FAIL_STACK
 ();

3483 
	}
}

3484 #ifde‡
_LIBC


3485 
	$wók_Æüs
 (
__ª_compûe_Á°m≠
, 
ª_compûe_Á°m≠
)

3502 
	$ª_£t_ªgi°îs
 (
buÂ
, 
ªgs
, 
num_ªgs
, 
°¨ts
, 
íds
)

3503 
ª_∑âîn_buf„r
 *
buÂ
;

3504 
ª_ªgi°îs
 *
ªgs
;

3505 
num_ªgs
;

3506 
ªgoff_t
 *
°¨ts
, *
íds
;

3508 i‡(
num_ªgs
)

3510 
buÂ
->
ªgs_Æloˇãd
 = 
REGS_REALLOCATE
;

3511 
ªgs
->
num_ªgs
 =Çum_regs;

3512 
ªgs
->
°¨t
 = 
°¨ts
;

3513 
ªgs
->
íd
 = 
íds
;

3517 
buÂ
->
ªgs_Æloˇãd
 = 
REGS_UNALLOCATED
;

3518 
ªgs
->
num_ªgs
 = 0;

3519 
ªgs
->
°¨t
 =Ñegs->
íd
 = (
ªgoff_t
 *) 0;

3521 
	}
}

3522 #ifde‡
_LIBC


3523 
	$wók_Æüs
 (
__ª_£t_ªgi°îs
, 
ª_£t_ªgi°îs
)

3532 
	$ª_£¨ch
 (
buÂ
, 
°rög
, 
size
, 
°¨ços
, 
ønge
, 
ªgs
)

3533 
ª_∑âîn_buf„r
 *
buÂ
;

3534 c⁄° *
°rög
;

3535 
size
, 
°¨ços
, 
ønge
;

3536 
ª_ªgi°îs
 *
ªgs
;

3538  
	`ª_£¨ch_2
 (
buÂ
, 
NULL
, 0, 
°rög
, 
size
, 
°¨ços
, 
ønge
,

3539 
ªgs
, 
size
);

3540 
	}
}

3541 #ifde‡
_LIBC


3542 
	$wók_Æüs
 (
__ª_£¨ch
, 
ª_£¨ch
)

3568 
	$ª_£¨ch_2
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
, 
°¨ços
, 
ønge
, 
ªgs
, 
°›
)

3569 
ª_∑âîn_buf„r
 *
buÂ
;

3570 c⁄° *
°rög1
, *
°rög2
;

3571 
size1
, 
size2
;

3572 
°¨ços
;

3573 
ønge
;

3574 
ª_ªgi°îs
 *
ªgs
;

3575 
°›
;

3577 
vÆ
;

3578 *
Á°m≠
 = 
buÂ
->fastmap;

3579 
RE_TRANSLATE_TYPE
 
å™¶©e
 = 
buÂ
->translate;

3580 
tŸÆ_size
 = 
size1
 + 
size2
;

3581 
ídpos
 = 
°¨ços
 + 
ønge
;

3584 i‡(
°¨ços
 < 0 || sèπpo†> 
tŸÆ_size
)

3590 i‡(
ídpos
 < 0)

3591 
ønge
 = 0 - 
°¨ços
;

3592 i‡(
ídpos
 > 
tŸÆ_size
)

3593 
ønge
 = 
tŸÆ_size
 - 
°¨ços
;

3597 i‡(
buÂ
->
u£d
 > 0 && 
ønge
 > 0

3598 && ((
ª_›code_t
Ë
buÂ
->
buf„r
[0] =
begbuf


3600 || ((
ª_›code_t
Ë
buÂ
->
buf„r
[0] =
beglöe


3601 && !
buÂ
->
√wlöe_™ch‹
)))

3603 i‡(
°¨ços
 > 0)

3606 
ønge
 = 1;

3609 #ifde‡
emacs


3612 i‡(
buÂ
->
u£d
 > 0 && (
ª_›code_t
ËbuÂ->
buf„r
[0] =
©_dŸ
 && 
ønge
 > 0)

3614 
ønge
 = 
PT
 - 
°¨ços
;

3615 i‡(
ønge
 <= 0)

3621 i‡(
Á°m≠
 && !
buÂ
->
Á°m≠_accuøã
)

3622 i‡(
	`ª_compûe_Á°m≠
 (
buÂ
) == -2)

3632 i‡(
Á°m≠
 && 
°¨ços
 < 
tŸÆ_size
 && !
buÂ
->
ˇn_be_nuŒ
)

3634 i‡(
ønge
 > 0)

3636 c⁄° *
d
;

3637 
lim
 = 0;

3638 
ú™ge
 = 
ønge
;

3640 i‡(
°¨ços
 < 
size1
 && sèπpo†+ 
ønge
 >= size1)

3641 
lim
 = 
ønge
 - (
size1
 - 
°¨ços
);

3643 
d
 = (
°¨ços
 >
size1
 ? 
°rög2
 - size1 : 
°rög1
) + startpos;

3647 i‡(
å™¶©e
)

3648 
ønge
 > 
lim


3649 && !
Á°m≠
[()

3650 
å™¶©e
[(Ë*
d
++]])

3651 
ønge
--;

3653 
ønge
 > 
lim
 && !
Á°m≠
[(Ë*
d
++])

3654 
ønge
--;

3656 
°¨ços
 +
ú™ge
 - 
ønge
;

3660 
c
 = (
size1
 =0 || 
°¨ços
 >= size1

3661 ? 
°rög2
[
°¨ços
 - 
size1
]

3662 : 
°rög1
[
°¨ços
]);

3664 i‡(!
Á°m≠
[(Ë
	`TRANSLATE
 (
c
)])

3665 
adv™˚
;

3670 i‡(
ønge
 >0 && 
°¨ços
 =
tŸÆ_size
 && 
Á°m≠


3671 && !
buÂ
->
ˇn_be_nuŒ
)

3674 
vÆ
 = 
	`ª_m©ch_2_öã∫Æ
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
,

3675 
°¨ços
, 
ªgs
, 
°›
);

3676 #i‚de‡
REGEX_MALLOC


3677 #ifde‡
C_ALLOCA


3678 
	`Æloˇ
 (0);

3682 i‡(
vÆ
 >= 0)

3683  
°¨ços
;

3685 i‡(
vÆ
 == -2)

3688 
adv™˚
:

3689 i‡(!
ønge
)

3691 i‡(
ønge
 > 0)

3693 
ønge
--;

3694 
°¨ços
++;

3698 
ønge
++;

3699 
°¨ços
--;

3703 
	}
}

3704 #ifde‡
_LIBC


3705 
	$wók_Æüs
 (
__ª_£¨ch_2
, 
ª_£¨ch_2
)

3710 
	#POINTER_TO_OFFSET
(
±r
) \

3711 (
	`FIRST_STRING_P
 (
±r
) \

3712 ? ((
ªgoff_t
Ë((
±r
Ë- 
°rög1
)) \

3713 : ((
ªgoff_t
Ë((
±r
Ë- 
°rög2
 + 
size1
)))

	)

3717 
	#MATCHING_IN_FIRST_STRING
 (
díd
 =
íd_m©ch_1
)

	)

3721 
	#PREFETCH
() \

3722 
d
 =
díd
) \

3725 i‡(
díd
 =
íd_m©ch_2
) \

3726 
Áû
; \

3728 
d
 = 
°rög2
; \

3729 
díd
 = 
íd_m©ch_2
; \

3730 
	}

	)
}

3735 
	#AT_STRINGS_BEG
(
d
Ë((dË=(
size1
 ? 
°rög1
 : 
°rög2
Ë|| !
size2
)

	)

3736 
	#AT_STRINGS_END
(
d
Ë((dË=
íd2
)

	)

3743 
	#WORDCHAR_P
(
d
) \

3744 (
	`SYNTAX
 ((
d
Ë=
íd1
 ? *
°rög2
 \

3745 : (
d
Ë=
°rög2
 - 1 ? *(
íd1
 - 1) : *(d)) \

3746 =
Sw‹d
)

	)

3752 
	#AT_WORD_BOUNDARY
(
d
) \

3753 (
	`AT_STRINGS_BEG
 (
d
Ë|| 
	`AT_STRINGS_END
 (d) \

3754 || 
	`WORDCHAR_P
 (
d
 - 1Ë!WORDCHAR_P (d))

	)

3758 #ifde‡
MATCH_MAY_ALLOCATE


3759 
	#FREE_VAR
(
v¨
Ëi‡(v¨Ë
	`REGEX_FREE
 (v¨); v¨ = 
NULL


	)

3760 
	#FREE_VARIABLES
() \

3762 
	`REGEX_FREE_STACK
 (
Áû_°ack
.
°ack
); \

3763 
	`FREE_VAR
 (
ªg°¨t
); \

3764 
	`FREE_VAR
 (
ªgíd
); \

3765 
	`FREE_VAR
 (
ﬁd_ªg°¨t
); \

3766 
	`FREE_VAR
 (
ﬁd_ªgíd
); \

3767 
	`FREE_VAR
 (
be°_ªg°¨t
); \

3768 
	`FREE_VAR
 (
be°_ªgíd
); \

3769 
	`FREE_VAR
 (
ªg_öfo
); \

3770 
	`FREE_VAR
 (
ªg_dummy
); \

3771 
	`FREE_VAR
 (
ªg_öfo_dummy
); \

3772 } 0)

	)

3774 
	#FREE_VARIABLES
(Ë(()0Ë

	)

3784 
	#NO_HIGHEST_ACTIVE_REG
 (1 << 
BYTEWIDTH
)

	)

3785 
	#NO_LOWEST_ACTIVE_REG
 (
NO_HIGHEST_ACTIVE_REG
 + 1)

	)

3789 #i‚de‡
emacs


3793 
	$ª_m©ch
 (
buÂ
, 
°rög
, 
size
, 
pos
, 
ªgs
)

3794 
ª_∑âîn_buf„r
 *
buÂ
;

3795 c⁄° *
°rög
;

3796 
size
, 
pos
;

3797 
ª_ªgi°îs
 *
ªgs
;

3799 
ªsu…
 = 
	`ª_m©ch_2_öã∫Æ
 (
buÂ
, 
NULL
, 0, 
°rög
, 
size
,

3800 
pos
, 
ªgs
, 
size
);

3801 #i‚de‡
REGEX_MALLOC


3802 #ifde‡
C_ALLOCA


3803 
	`Æloˇ
 (0);

3806  
ªsu…
;

3807 
	}
}

3808 #ifde‡
_LIBC


3809 
	$wók_Æüs
 (
__ª_m©ch
, 
ª_m©ch
)

3813 
boﬁón
 
group_m©ch_nuŒ_°rög_p
 
	`_RE_ARGS
 ((**
p
,

3814 *
íd
,

3815 
ªgi°î_öfo_ty≥
 *
ªg_öfo
));

3816 
boﬁón
 
Æt_m©ch_nuŒ_°rög_p
 
	`_RE_ARGS
 ((*
p
,

3817 *
íd
,

3818 
ªgi°î_öfo_ty≥
 *
ªg_öfo
));

3819 
boﬁón
 
comm⁄_›_m©ch_nuŒ_°rög_p
 
	`_RE_ARGS
 ((**
p
,

3820 *
íd
,

3821 
ªgi°î_öfo_ty≥
 *
ªg_öfo
));

3822 
bcmp_å™¶©e
 
	`_RE_ARGS
 ((c⁄° *
s1
, c⁄° *
s2
,

3823 
Àn
, *
å™¶©e
));

3839 
	$ª_m©ch_2
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
, 
pos
, 
ªgs
, 
°›
)

3840 
ª_∑âîn_buf„r
 *
buÂ
;

3841 c⁄° *
°rög1
, *
°rög2
;

3842 
size1
, 
size2
;

3843 
pos
;

3844 
ª_ªgi°îs
 *
ªgs
;

3845 
°›
;

3847 
ªsu…
 = 
	`ª_m©ch_2_öã∫Æ
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
,

3848 
pos
, 
ªgs
, 
°›
);

3849 #i‚de‡
REGEX_MALLOC


3850 #ifde‡
C_ALLOCA


3851 
	`Æloˇ
 (0);

3854  
ªsu…
;

3855 
	}
}

3856 #ifde‡
_LIBC


3857 
	$wók_Æüs
 (
__ª_m©ch_2
, 
ª_m©ch_2
)

3863 
	$ª_m©ch_2_öã∫Æ
 (
buÂ
, 
°rög1
, 
size1
, 
°rög2
, 
size2
, 
pos
, 
ªgs
, 
°›
)

3864 
ª_∑âîn_buf„r
 *
buÂ
;

3865 c⁄° *
°rög1
, *
°rög2
;

3866 
size1
, 
size2
;

3867 
pos
;

3868 
ª_ªgi°îs
 *
ªgs
;

3869 
°›
;

3872 
m˙t
;

3873 *
p1
;

3876 c⁄° *
íd1
, *
íd2
;

3880 c⁄° *
íd_m©ch_1
, *
íd_m©ch_2
;

3883 c⁄° *
d
, *
díd
;

3886 *
p
 = 
buÂ
->
buf„r
;

3887 *
≥nd
 = 
p
 + 
buÂ
->
u£d
;

3891 *
ju°_∑°_°¨t_mem
 = 0;

3894 
RE_TRANSLATE_TYPE
 
å™¶©e
 = 
buÂ
->translate;

3905 #ifde‡
MATCH_MAY_ALLOCATE


3906 
Áû_°ack_ty≥
 
Áû_°ack
;

3908 #ifde‡
DEBUG


3909 
Áûuª_id
;

3910 
nÁûuª_poöts_pushed
 = 0, 
nÁûuª_poöts_p›≥d
 = 0;

3913 #ifde‡
REL_ALLOC


3916 
Áû_°ack_ñt_t
 *
Áûuª_°ack_±r
;

3922 
size_t
 
num_ªgs
 = 
buÂ
->
ª_nsub
 + 1;

3925 
a˘ive_ªg_t
 
lowe°_a˘ive_ªg
 = 
NO_LOWEST_ACTIVE_REG
;

3926 
a˘ive_ªg_t
 
highe°_a˘ive_ªg
 = 
NO_HIGHEST_ACTIVE_REG
;

3935 #ifde‡
MATCH_MAY_ALLOCATE


3936 c⁄° **
ªg°¨t
, **
ªgíd
;

3944 #ifde‡
MATCH_MAY_ALLOCATE


3945 c⁄° **
ﬁd_ªg°¨t
, **
ﬁd_ªgíd
;

3954 #ifde‡
MATCH_MAY_ALLOCATE


3955 
ªgi°î_öfo_ty≥
 *
ªg_öfo
;

3962 
be°_ªgs_£t
 = 
Ál£
;

3963 #ifde‡
MATCH_MAY_ALLOCATE


3964 c⁄° **
be°_ªg°¨t
, **
be°_ªgíd
;

3975 c⁄° *
m©ch_íd
 = 
NULL
;

3978 
£t_ªgs_m©ched_d⁄e
 = 0;

3981 #ifde‡
MATCH_MAY_ALLOCATE


3982 c⁄° **
ªg_dummy
;

3983 
ªgi°î_öfo_ty≥
 *
ªg_öfo_dummy
;

3986 #ifde‡
DEBUG


3988 
num_ªgs_pushed
 = 0;

3991 
	`DEBUG_PRINT1
 ("\n\nEnteringÑe_match_2.\n");

3993 
	`INIT_FAIL_STACK
 ();

3995 #ifde‡
MATCH_MAY_ALLOCATE


4001 i‡(
buÂ
->
ª_nsub
)

4003 
ªg°¨t
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4004 
ªgíd
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4005 
ﬁd_ªg°¨t
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4006 
ﬁd_ªgíd
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4007 
be°_ªg°¨t
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4008 
be°_ªgíd
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4009 
ªg_öfo
 = 
	`REGEX_TALLOC
 (
num_ªgs
, 
ªgi°î_öfo_ty≥
);

4010 
ªg_dummy
 = 
	`REGEX_TALLOC
 (
num_ªgs
, const *);

4011 
ªg_öfo_dummy
 = 
	`REGEX_TALLOC
 (
num_ªgs
, 
ªgi°î_öfo_ty≥
);

4013 i‡(!(
ªg°¨t
 && 
ªgíd
 && 
ﬁd_ªg°¨t
 && 
ﬁd_ªgíd
 && 
ªg_öfo


4014 && 
be°_ªg°¨t
 && 
be°_ªgíd
 && 
ªg_dummy
 && 
ªg_öfo_dummy
))

4016 
	`FREE_VARIABLES
 ();

4024 
ªg°¨t
 = 
ªgíd
 = 
ﬁd_ªg°¨t
 = 
ﬁd_ªgíd
 = 
be°_ªg°¨t


4025 
be°_ªgíd
 = 
ªg_dummy
 = 
NULL
;

4026 
ªg_öfo
 = 
ªg_öfo_dummy
 = (
ªgi°î_öfo_ty≥
 *Ë
NULL
;

4031 i‡(
pos
 < 0 ||Öo†> 
size1
 + 
size2
)

4033 
	`FREE_VARIABLES
 ();

4040 
m˙t
 = 1; (Ëm˙à< 
num_ªgs
; mcnt++)

4042 
ªg°¨t
[
m˙t
] = 
ªgíd
[mcnt]

4043 
ﬁd_ªg°¨t
[
m˙t
] = 
ﬁd_ªgíd
[m˙t] = 
REG_UNSET_VALUE
;

4045 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[
m˙t
]Ë
MATCH_NULL_UNSET_VALUE
;

4046 
	`IS_ACTIVE
 (
ªg_öfo
[
m˙t
]) = 0;

4047 
	`MATCHED_SOMETHING
 (
ªg_öfo
[
m˙t
]) = 0;

4048 
	`EVER_MATCHED_SOMETHING
 (
ªg_öfo
[
m˙t
]) = 0;

4053 i‡(
size2
 =0 && 
°rög1
 !
NULL
)

4055 
°rög2
 = 
°rög1
;

4056 
size2
 = 
size1
;

4057 
°rög1
 = 0;

4058 
size1
 = 0;

4060 
íd1
 = 
°rög1
 + 
size1
;

4061 
íd2
 = 
°rög2
 + 
size2
;

4064 i‡(
°›
 <
size1
)

4066 
íd_m©ch_1
 = 
°rög1
 + 
°›
;

4067 
íd_m©ch_2
 = 
°rög2
;

4071 
íd_m©ch_1
 = 
íd1
;

4072 
íd_m©ch_2
 = 
°rög2
 + 
°›
 - 
size1
;

4081 i‡(
size1
 > 0 && 
pos
 <= size1)

4083 
d
 = 
°rög1
 + 
pos
;

4084 
díd
 = 
íd_m©ch_1
;

4088 
d
 = 
°rög2
 + 
pos
 - 
size1
;

4089 
díd
 = 
íd_m©ch_2
;

4092 
	`DEBUG_PRINT1
 ("The compiledÖattern is:\n");

4093 
	`DEBUG_PRINT_COMPILED_PATTERN
 (
buÂ
, 
p
, 
≥nd
);

4094 
	`DEBUG_PRINT1
 ("The stringÅo match is: `");

4095 
	`DEBUG_PRINT_DOUBLE_STRING
 (
d
, 
°rög1
, 
size1
, 
°rög2
, 
size2
);

4096 
	`DEBUG_PRINT1
 ("'\n");

4103 #ifde‡
_LIBC


4104 
	`DEBUG_PRINT2
 ("\n%p: ", 
p
);

4106 
	`DEBUG_PRINT2
 ("\n0x%x: ", 
p
);

4109 i‡(
p
 =
≥nd
)

4111 
	`DEBUG_PRINT1
 ("end ofÖattern ... ");

4115 i‡(
d
 !
íd_m©ch_2
)

4119 
boﬁón
 
ßme_°r_p
 = (
	`FIRST_STRING_P
 (
m©ch_íd
)

4120 =
MATCHING_IN_FIRST_STRING
);

4122 
boﬁón
 
be°_m©ch_p
;

4126 i‡(
ßme_°r_p
)

4127 
be°_m©ch_p
 = 
d
 > 
m©ch_íd
;

4129 
be°_m©ch_p
 = !
MATCHING_IN_FIRST_STRING
;

4131 
	`DEBUG_PRINT1
 ("backtracking.\n");

4133 i‡(!
	`FAIL_STACK_EMPTY
 ())

4137 i‡(!
be°_ªgs_£t
 || 
be°_m©ch_p
)

4139 
be°_ªgs_£t
 = 
åue
;

4140 
m©ch_íd
 = 
d
;

4142 
	`DEBUG_PRINT1
 ("\nSAVING matchás best so far.\n");

4144 
m˙t
 = 1; (Ëm˙à< 
num_ªgs
; mcnt++)

4146 
be°_ªg°¨t
[
m˙t
] = 
ªg°¨t
[mcnt];

4147 
be°_ªgíd
[
m˙t
] = 
ªgíd
[mcnt];

4150 
Áû
;

4156 i‡(
be°_ªgs_£t
 && !
be°_m©ch_p
)

4158 
ª°‹e_be°_ªgs
:

4164 
	`DEBUG_PRINT1
 ("Restoring bestÑegisters.\n");

4166 
d
 = 
m©ch_íd
;

4167 
díd
 = ((
d
 >
°rög1
 && d <
íd1
)

4168 ? 
íd_m©ch_1
 : 
íd_m©ch_2
);

4170 
m˙t
 = 1; (Ëm˙à< 
num_ªgs
; mcnt++)

4172 
ªg°¨t
[
m˙t
] = 
be°_ªg°¨t
[mcnt];

4173 
ªgíd
[
m˙t
] = 
be°_ªgíd
[mcnt];

4178 
suc˚ed_œbñ
:

4179 
	`DEBUG_PRINT1
 ("Accepting match.\n");

4182 i‡(
ªgs
 && !
buÂ
->
no_sub
)

4185 i‡(
buÂ
->
ªgs_Æloˇãd
 =
REGS_UNALLOCATED
)

4189 
ªgs
->
num_ªgs
 = 
	`MAX
 (
RE_NREGS
,Çum_regs + 1);

4190 
ªgs
->
°¨t
 = 
	`TALLOC
 (ªgs->
num_ªgs
, 
ªgoff_t
);

4191 
ªgs
->
íd
 = 
	`TALLOC
 (ªgs->
num_ªgs
, 
ªgoff_t
);

4192 i‡(
ªgs
->
°¨t
 =
NULL
 ||Ñegs->
íd
 == NULL)

4194 
	`FREE_VARIABLES
 ();

4197 
buÂ
->
ªgs_Æloˇãd
 = 
REGS_REALLOCATE
;

4199 i‡(
buÂ
->
ªgs_Æloˇãd
 =
REGS_REALLOCATE
)

4203 i‡(
ªgs
->
num_ªgs
 <Çum_regs + 1)

4205 
ªgs
->
num_ªgs
 =Çum_regs + 1;

4206 
	`RETALLOC
 (
ªgs
->
°¨t
,Ñegs->
num_ªgs
, 
ªgoff_t
);

4207 
	`RETALLOC
 (
ªgs
->
íd
,Ñegs->
num_ªgs
, 
ªgoff_t
);

4208 i‡(
ªgs
->
°¨t
 =
NULL
 ||Ñegs->
íd
 == NULL)

4210 
	`FREE_VARIABLES
 ();

4219 
	`as£π
 (
buÂ
->
ªgs_Æloˇãd
 =
REGS_FIXED
);

4225 i‡(
ªgs
->
num_ªgs
 > 0)

4227 
ªgs
->
°¨t
[0] = 
pos
;

4228 
ªgs
->
íd
[0] = (
MATCHING_IN_FIRST_STRING


4229 ? ((
ªgoff_t
Ë(
d
 - 
°rög1
))

4230 : ((
ªgoff_t
Ë(
d
 - 
°rög2
 + 
size1
)));

4235 
m˙t
 = 1; (Ëm˙à< 
	`MIN
 (
num_ªgs
, 
ªgs
->num_regs);

4236 
m˙t
++)

4238 i‡(
	`REG_UNSET
 (
ªg°¨t
[
m˙t
]Ë|| REG_UNSET (
ªgíd
[mcnt]))

4239 
ªgs
->
°¨t
[
m˙t
] =Ñegs->
íd
[mcnt] = -1;

4242 
ªgs
->
°¨t
[
m˙t
]

4243 (
ªgoff_t
Ë
	`POINTER_TO_OFFSET
 (
ªg°¨t
[
m˙t
]);

4244 
ªgs
->
íd
[
m˙t
]

4245 (
ªgoff_t
Ë
	`POINTER_TO_OFFSET
 (
ªgíd
[
m˙t
]);

4254 
m˙t
 = 
num_ªgs
; (Ëm˙à< 
ªgs
->num_regs; mcnt++)

4255 
ªgs
->
°¨t
[
m˙t
] =Ñegs->
íd
[mcnt] = -1;

4258 
	`DEBUG_PRINT4
 ("%u failureÖointsÖushed, %uÖopped (%uÑemain).\n",

4259 
nÁûuª_poöts_pushed
, 
nÁûuª_poöts_p›≥d
,

4260 
nÁûuª_poöts_pushed
 - 
nÁûuª_poöts_p›≥d
);

4261 
	`DEBUG_PRINT2
 ("%uÑegi°î†pushed.\n", 
num_ªgs_pushed
);

4263 
m˙t
 = 
d
 - 
pos
 - (
MATCHING_IN_FIRST_STRING


4264 ? 
°rög1


4265 : 
°rög2
 - 
size1
);

4267 
	`DEBUG_PRINT2
 ("Rëu∫ög %d fromÑe_m©ch_2.\n", 
m˙t
);

4269 
	`FREE_VARIABLES
 ();

4270  
m˙t
;

4274 
	`SWITCH_ENUM_CAST
 ((
ª_›code_t
Ë*
p
++))

4278 
no_›
:

4279 
	`DEBUG_PRINT1
 ("EXECUTINGÇo_op.\n");

4282 
suc˚ed
:

4283 
	`DEBUG_PRINT1
 ("EXECUTING succeed.\n");

4284 
suc˚ed_œbñ
;

4289 
exa˘n
:

4290 
m˙t
 = *
p
++;

4291 
	`DEBUG_PRINT2
 ("EXECUTINGÉxa˘¿%d.\n", 
m˙t
);

4295 i‡(
å™¶©e
)

4299 
	`PREFETCH
 ();

4300 i‡((Ë
å™¶©e
[(Ë*
d
++]

4301 !(Ë*
p
++)

4302 
Áû
;

4304 --
m˙t
);

4310 
	`PREFETCH
 ();

4311 i‡(*
d
++ !(Ë*
p
++Ë
Áû
;

4313 --
m˙t
);

4315 
	`SET_REGS_MATCHED
 ();

4320 
™ych¨
:

4321 
	`DEBUG_PRINT1
 ("EXECUTINGánychar.\n");

4323 
	`PREFETCH
 ();

4325 i‡((!(
buÂ
->
sy¡ax
 & 
RE_DOT_NEWLINE
Ë&& 
	`TRANSLATE
 (*
d
) == '\n')

4326 || (
buÂ
->
sy¡ax
 & 
RE_DOT_NOT_NULL
 && 
	`TRANSLATE
 (*
d
) == '\000'))

4327 
Áû
;

4329 
	`SET_REGS_MATCHED
 ();

4330 
	`DEBUG_PRINT2
 (" M©ched `%d'.\n", *
d
);

4331 
d
++;

4335 
ch¨£t
:

4336 
ch¨£t_nŸ
:

4338 
c
;

4339 
boﬁón
 
nŸ
 = (
ª_›code_t
Ë*(
p
 - 1Ë=
ch¨£t_nŸ
;

4341 
	`DEBUG_PRINT2
 ("EXECUTING ch¨£t%s.\n", 
nŸ
 ? "_not" : "");

4343 
	`PREFETCH
 ();

4344 
c
 = 
	`TRANSLATE
 (*
d
);

4348 i‡(
c
 < (Ë(*
p
 * 
BYTEWIDTH
)

4349 && 
p
[1 + 
c
 / 
BYTEWIDTH
] & (1 << (c % BYTEWIDTH)))

4350 
nŸ
 = !not;

4352 
p
 += 1 + *p;

4354 i‡(!
nŸ
Ë
Áû
;

4356 
	`SET_REGS_MATCHED
 ();

4357 
d
++;

4367 
°¨t_mem‹y
:

4368 
	`DEBUG_PRINT3
 ("EXECUTING sèπ_mem‹y %d (%d):\n", *
p
,Ö[1]);

4371 
p1
 = 
p
;

4373 i‡(
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[*
p
]Ë=
MATCH_NULL_UNSET_VALUE
)

4374 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[*
p
])

4375 
	`group_m©ch_nuŒ_°rög_p
 (&
p1
, 
≥nd
, 
ªg_öfo
);

4382 
ﬁd_ªg°¨t
[*
p
] = 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[*p])

4383 ? 
	`REG_UNSET
 (
ªg°¨t
[*
p
]Ë? 
d
 :Ñegstart[*p]

4384 : 
ªg°¨t
[*
p
];

4385 
	`DEBUG_PRINT2
 (" old_regstart: %d\n",

4386 
	`POINTER_TO_OFFSET
 (
ﬁd_ªg°¨t
[*
p
]));

4388 
ªg°¨t
[*
p
] = 
d
;

4389 
	`DEBUG_PRINT2
 ("Ñeg°¨t: %d\n", 
	`POINTER_TO_OFFSET
 (
ªg°¨t
[*
p
]));

4391 
	`IS_ACTIVE
 (
ªg_öfo
[*
p
]) = 1;

4392 
	`MATCHED_SOMETHING
 (
ªg_öfo
[*
p
]) = 0;

4395 
£t_ªgs_m©ched_d⁄e
 = 0;

4398 
highe°_a˘ive_ªg
 = *
p
;

4402 i‡(
lowe°_a˘ive_ªg
 =
NO_LOWEST_ACTIVE_REG
)

4403 
lowe°_a˘ive_ªg
 = *
p
;

4406 
p
 += 2;

4407 
ju°_∑°_°¨t_mem
 = 
p
;

4415 
°›_mem‹y
:

4416 
	`DEBUG_PRINT3
 ("EXECUTING st›_mem‹y %d (%d):\n", *
p
,Ö[1]);

4423 
ﬁd_ªgíd
[*
p
] = 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[*p])

4424 ? 
	`REG_UNSET
 (
ªgíd
[*
p
]Ë? 
d
 :Ñegend[*p]

4425 : 
ªgíd
[*
p
];

4426 
	`DEBUG_PRINT2
 (" old_regend: %d\n",

4427 
	`POINTER_TO_OFFSET
 (
ﬁd_ªgíd
[*
p
]));

4429 
ªgíd
[*
p
] = 
d
;

4430 
	`DEBUG_PRINT2
 ("Ñegíd: %d\n", 
	`POINTER_TO_OFFSET
 (
ªgíd
[*
p
]));

4433 
	`IS_ACTIVE
 (
ªg_öfo
[*
p
]) = 0;

4436 
£t_ªgs_m©ched_d⁄e
 = 0;

4440 i‡(
lowe°_a˘ive_ªg
 =
highe°_a˘ive_ªg
)

4442 
lowe°_a˘ive_ªg
 = 
NO_LOWEST_ACTIVE_REG
;

4443 
highe°_a˘ive_ªg
 = 
NO_HIGHEST_ACTIVE_REG
;

4450 
r
 = *
p
 - 1;

4451 
r
 > 0 && !
	`IS_ACTIVE
 (
ªg_öfo
[r]))

4452 
r
--;

4461 i‡(
r
 == 0)

4463 
lowe°_a˘ive_ªg
 = 
NO_LOWEST_ACTIVE_REG
;

4464 
highe°_a˘ive_ªg
 = 
NO_HIGHEST_ACTIVE_REG
;

4467 
highe°_a˘ive_ªg
 = 
r
;

4475 i‡((!
	`MATCHED_SOMETHING
 (
ªg_öfo
[*
p
])

4476 || 
ju°_∑°_°¨t_mem
 =
p
 - 1)

4477 && (
p
 + 2Ë< 
≥nd
)

4479 
boﬁón
 
is_a_jump_n
 = 
Ál£
;

4481 
p1
 = 
p
 + 2;

4482 
m˙t
 = 0;

4483 (
ª_›code_t
Ë*
p1
++)

4485 
jump_n
:

4486 
is_a_jump_n
 = 
åue
;

4487 
p›_Áûuª_jump
:

4488 
maybe_p›_jump
:

4489 
jump
:

4490 
dummy_Áûuª_jump
:

4491 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

4492 i‡(
is_a_jump_n
)

4493 
p1
 += 2;

4499 
p1
 +
m˙t
;

4506 i‡(
m˙t
 < 0 && (
ª_›code_t
Ë*
p1
 =
⁄_Áûuª_jump


4507 && (
ª_›code_t
Ë
p1
[3] =
°¨t_mem‹y
 &&Ö1[4] =*
p
)

4519 i‡(
	`EVER_MATCHED_SOMETHING
 (
ªg_öfo
[*
p
]))

4521 
r
;

4523 
	`EVER_MATCHED_SOMETHING
 (
ªg_öfo
[*
p
]) = 0;

4526 
r
 = *
p
;Ñ < () *p + () *(p + 1);

4527 
r
++)

4529 
ªg°¨t
[
r
] = 
ﬁd_ªg°¨t
[r];

4532 i‡(
ﬁd_ªgíd
[
r
] >
ªg°¨t
[r])

4533 
ªgíd
[
r
] = 
ﬁd_ªgíd
[r];

4536 
p1
++;

4537 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

4538 
	`PUSH_FAILURE_POINT
 (
p1
 + 
m˙t
, 
d
, -2);

4540 
Áû
;

4545 
p
 += 2;

4551 
du∂iˇã
:

4553 c⁄° *
d2
, *
díd2
;

4554 
ªgno
 = *
p
++;

4555 
	`DEBUG_PRINT2
 ("EXECUTING du∂iˇã %d.\n", 
ªgno
);

4558 i‡(
	`REG_UNSET
 (
ªg°¨t
[
ªgno
]Ë|| REG_UNSET (
ªgíd
[regno]))

4559 
Áû
;

4562 
d2
 = 
ªg°¨t
[
ªgno
];

4569 
díd2
 = ((
	`FIRST_STRING_P
 (
ªg°¨t
[
ªgno
])

4570 =
	`FIRST_STRING_P
 (
ªgíd
[
ªgno
]))

4571 ? 
ªgíd
[
ªgno
] : 
íd_m©ch_1
);

4576 
d2
 =
díd2
)

4578 i‡(
díd2
 =
íd_m©ch_2
) ;

4579 i‡(
díd2
 =
ªgíd
[
ªgno
]) ;

4582 
d2
 = 
°rög2
;

4583 
díd2
 = 
ªgíd
[
ªgno
];

4586 i‡(
d2
 =
díd2
) ;

4589 
	`PREFETCH
 ();

4592 
m˙t
 = 
díd
 - 
d
;

4596 i‡(
m˙t
 > 
díd2
 - 
d2
)

4597 
m˙t
 = 
díd2
 - 
d2
;

4601 i‡(
å™¶©e


4602 ? 
	`bcmp_å™¶©e
 (
d
, 
d2
, 
m˙t
, 
å™¶©e
)

4603 : 
	`memcmp
 (
d
, 
d2
, 
m˙t
))

4604 
Áû
;

4605 
d
 +
m˙t
, 
d2
 += mcnt;

4608 
	`SET_REGS_MATCHED
 ();

4617 
beglöe
:

4618 
	`DEBUG_PRINT1
 ("EXECUTING begline.\n");

4620 i‡(
	`AT_STRINGS_BEG
 (
d
))

4622 i‡(!
buÂ
->
nŸ_bﬁ
) ;

4624 i‡(
d
[-1] ='\n' && 
buÂ
->
√wlöe_™ch‹
)

4629 
Áû
;

4633 
ídlöe
:

4634 
	`DEBUG_PRINT1
 ("EXECUTINGÉndline.\n");

4636 i‡(
	`AT_STRINGS_END
 (
d
))

4638 i‡(!
buÂ
->
nŸ_eﬁ
) ;

4642 i‡((
d
 =
íd1
 ? *
°rög2
 : *d) == '\n'

4643 && 
buÂ
->
√wlöe_™ch‹
)

4647 
Áû
;

4651 
begbuf
:

4652 
	`DEBUG_PRINT1
 ("EXECUTING begbuf.\n");

4653 i‡(
	`AT_STRINGS_BEG
 (
d
))

4655 
Áû
;

4659 
ídbuf
:

4660 
	`DEBUG_PRINT1
 ("EXECUTINGÉndbuf.\n");

4661 i‡(
	`AT_STRINGS_END
 (
d
))

4663 
Áû
;

4682 
⁄_Áûuª_kìp_°rög_jump
:

4683 
	`DEBUG_PRINT1
 ("EXECUTING on_failure_keep_string_jump");

4685 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

4686 #ifde‡
_LIBC


4687 
	`DEBUG_PRINT3
 (" %d (tÿ%p):\n", 
m˙t
, 
p
 + mcnt);

4689 
	`DEBUG_PRINT3
 (" %d (tÿ0x%x):\n", 
m˙t
, 
p
 + mcnt);

4692 
	`PUSH_FAILURE_POINT
 (
p
 + 
m˙t
, 
NULL
, -2);

4708 
⁄_Áûuª_jump
:

4709 
⁄_Áûuª
:

4710 
	`DEBUG_PRINT1
 ("EXECUTING on_failure_jump");

4712 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

4713 #ifde‡
_LIBC


4714 
	`DEBUG_PRINT3
 (" %d (tÿ%p)", 
m˙t
, 
p
 + mcnt);

4716 
	`DEBUG_PRINT3
 (" %d (tÿ0x%x)", 
m˙t
, 
p
 + mcnt);

4728 
p1
 = 
p
;

4734 
p1
 < 
≥nd
 && (
ª_›code_t
Ë*p1 =
no_›
)

4735 
p1
++;

4737 i‡(
p1
 < 
≥nd
 && (
ª_›code_t
Ë*p1 =
°¨t_mem‹y
)

4743 
highe°_a˘ive_ªg
 = *(
p1
 + 1) + *(p1 + 2);

4744 i‡(
lowe°_a˘ive_ªg
 =
NO_LOWEST_ACTIVE_REG
)

4745 
lowe°_a˘ive_ªg
 = *(
p1
 + 1);

4748 
	`DEBUG_PRINT1
 (":\n");

4749 
	`PUSH_FAILURE_POINT
 (
p
 + 
m˙t
, 
d
, -2);

4755 
maybe_p›_jump
:

4756 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

4757 
	`DEBUG_PRINT2
 ("EXECUTING maybe_p›_jum∞%d.\n", 
m˙t
);

4759 *
p2
 = 
p
;

4780 i‡(
p2
 + 2 < 
≥nd


4781 && ((
ª_›code_t
Ë*
p2
 =
°›_mem‹y


4782 || (
ª_›code_t
Ë*
p2
 =
°¨t_mem‹y
))

4783 
p2
 += 3;

4784 i‡(
p2
 + 6 < 
≥nd


4785 && (
ª_›code_t
Ë*
p2
 =
dummy_Áûuª_jump
)

4786 
p2
 += 6;

4791 
p1
 = 
p
 + 
m˙t
;

4797 i‡(
p2
 =
≥nd
)

4802 
p
[-3] = (Ë
p›_Áûuª_jump
;

4803 
DEBUG_PRINT1


4807 i‡((
ª_›code_t
Ë*
p2
 =
exa˘n


4808 || (
buÂ
->
√wlöe_™ch‹
 && (
ª_›code_t
Ë*
p2
 =
ídlöe
))

4810 
c


4811 *
p2
 =(Ë
ídlöe
 ? '\n' :Ö2[2];

4813 i‡((
ª_›code_t
Ë
p1
[3] =
exa˘n
 &&Ö1[5] !
c
)

4815 
p
[-3] = (Ë
p›_Áûuª_jump
;

4816 
	`DEBUG_PRINT3
 (" %c != %c =>Öop_failure_jump.\n",

4817 
c
, 
p1
[5]);

4820 i‡((
ª_›code_t
Ë
p1
[3] =
ch¨£t


4821 || (
ª_›code_t
Ë
p1
[3] =
ch¨£t_nŸ
)

4823 
nŸ
 = (
ª_›code_t
Ë
p1
[3] =
ch¨£t_nŸ
;

4825 i‡(
c
 < (Ë(
p1
[4] * 
BYTEWIDTH
)

4826 && 
p1
[5 + 
c
 / 
BYTEWIDTH
] & (1 << (c % BYTEWIDTH)))

4827 
nŸ
 = !not;

4831 i‡(!
nŸ
)

4833 
p
[-3] = (Ë
p›_Áûuª_jump
;

4834 
	`DEBUG_PRINT1
 (" No match =>Öop_failure_jump.\n");

4838 i‡((
ª_›code_t
Ë*
p2
 =
ch¨£t
)

4840 #ifde‡
DEBUG


4841 
c


4842 *
p2
 =(Ë
ídlöe
 ? '\n' :Ö2[2];

4846 i‡((
ª_›code_t
Ë
p1
[3] =
exa˘n


4847 && ! ((Ë
p2
[1] * 
BYTEWIDTH
 > (Ë
p1
[5]

4848 && (
p2
[2 + 
p1
[5] / 
BYTEWIDTH
]

4849 & (1 << (
p1
[5] % 
BYTEWIDTH
)))))

4851 i‡((
ª_›code_t
Ë
p1
[3] =
exa˘n


4852 && ! ((Ë
p2
[1] * 
BYTEWIDTH
 > (Ë
p1
[4]

4853 && (
p2
[2 + 
p1
[4] / 
BYTEWIDTH
]

4854 & (1 << (
p1
[4] % 
BYTEWIDTH
)))))

4857 
p
[-3] = (Ë
p›_Áûuª_jump
;

4858 
	`DEBUG_PRINT3
 (" %c != %c =>Öop_failure_jump.\n",

4859 
c
, 
p1
[5]);

4862 i‡((
ª_›code_t
Ë
p1
[3] =
ch¨£t_nŸ
)

4864 
idx
;

4867 
idx
 = 0; idx < (Ë
p2
[1]; idx++)

4868 i‡(! (
p2
[2 + 
idx
] == 0

4869 || (
idx
 < (Ë
p1
[4]

4870 && ((
p2
[2 + 
idx
] & ~ 
p1
[5 + idx]) == 0))))

4873 i‡(
idx
 =
p2
[1])

4875 
p
[-3] = (Ë
p›_Áûuª_jump
;

4876 
	`DEBUG_PRINT1
 (" No match =>Öop_failure_jump.\n");

4879 i‡((
ª_›code_t
Ë
p1
[3] =
ch¨£t
)

4881 
idx
;

4884 
idx
 = 0;

4885 
idx
 < (Ë
p2
[1] && idx < (Ë
p1
[4];

4886 
idx
++)

4887 i‡((
p2
[2 + 
idx
] & 
p1
[5 + idx]) != 0)

4890 i‡(
idx
 =
p2
[1] || idx =
p1
[4])

4892 
p
[-3] = (Ë
p›_Áûuª_jump
;

4893 
	`DEBUG_PRINT1
 (" No match =>Öop_failure_jump.\n");

4898 
p
 -= 2;

4899 i‡((
ª_›code_t
Ë
p
[-1] !
p›_Áûuª_jump
)

4901 
p
[-1] = (Ë
jump
;

4902 
	`DEBUG_PRINT1
 (" Match => jump.\n");

4903 
unc⁄dôi⁄Æ_jump
;

4914 
p›_Áûuª_jump
:

4921 
a˘ive_ªg_t
 
dummy_low_ªg
, 
dummy_high_ªg
;

4922 *
pdummy
;

4923 c⁄° *
sdummy
;

4925 
	`DEBUG_PRINT1
 ("EXECUTINGÖop_failure_jump.\n");

4926 
	`POP_FAILURE_POINT
 (
sdummy
, 
pdummy
,

4927 
dummy_low_ªg
, 
dummy_high_ªg
,

4928 
ªg_dummy
,Ñeg_dummy, 
ªg_öfo_dummy
);

4932 
unc⁄dôi⁄Æ_jump
:

4933 #ifde‡
_LIBC


4934 
	`DEBUG_PRINT2
 ("\n%p: ", 
p
);

4936 
	`DEBUG_PRINT2
 ("\n0x%x: ", 
p
);

4941 
jump
:

4942 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

4943 
	`DEBUG_PRINT2
 ("EXECUTING jum∞%d ", 
m˙t
);

4944 
p
 +
m˙t
;

4945 #ifde‡
_LIBC


4946 
	`DEBUG_PRINT2
 ("—ÿ%p).\n", 
p
);

4948 
	`DEBUG_PRINT2
 ("—ÿ0x%x).\n", 
p
);

4955 
jump_∑°_Æt
:

4956 
	`DEBUG_PRINT1
 ("EXECUTING jump_past_alt.\n");

4957 
unc⁄dôi⁄Æ_jump
;

4965 
dummy_Áûuª_jump
:

4966 
	`DEBUG_PRINT1
 ("EXECUTING dummy_failure_jump.\n");

4969 
	`PUSH_FAILURE_POINT
 (
NULL
, NULL, -2);

4970 
unc⁄dôi⁄Æ_jump
;

4978 
push_dummy_Áûuª
:

4979 
	`DEBUG_PRINT1
 ("EXECUTINGÖush_dummy_failure.\n");

4982 
	`PUSH_FAILURE_POINT
 (
NULL
, NULL, -2);

4987 
suc˚ed_n
:

4988 
	`EXTRACT_NUMBER
 (
m˙t
, 
p
 + 2);

4989 
	`DEBUG_PRINT2
 ("EXECUTING suc˚ed_¿%d.\n", 
m˙t
);

4991 
	`as£π
 (
m˙t
 >= 0);

4993 i‡(
m˙t
 > 0)

4995 
m˙t
--;

4996 
p
 += 2;

4997 
	`STORE_NUMBER_AND_INCR
 (
p
, 
m˙t
);

4998 #ifde‡
_LIBC


4999 
	`DEBUG_PRINT3
 (" Sëtög %∞tÿ%d.\n", 
p
 - 2, 
m˙t
);

5001 
	`DEBUG_PRINT3
 (" Sëtög 0x%xÅÿ%d.\n", 
p
 - 2, 
m˙t
);

5004 i‡(
m˙t
 == 0)

5006 #ifde‡
_LIBC


5007 
	`DEBUG_PRINT2
 (" SëtögÅwÿbyã†‰om %∞tÿno_›.\n", 
p
+2);

5009 
	`DEBUG_PRINT2
 (" SëtögÅwÿbyã†‰om 0x%xÅÿno_›.\n", 
p
+2);

5011 
p
[2] = (Ë
no_›
;

5012 
p
[3] = (Ë
no_›
;

5013 
⁄_Áûuª
;

5017 
jump_n
:

5018 
	`EXTRACT_NUMBER
 (
m˙t
, 
p
 + 2);

5019 
	`DEBUG_PRINT2
 ("EXECUTING jump_¿%d.\n", 
m˙t
);

5022 i‡(
m˙t
)

5024 
m˙t
--;

5025 
	`STORE_NUMBER
 (
p
 + 2, 
m˙t
);

5026 #ifde‡
_LIBC


5027 
	`DEBUG_PRINT3
 (" Sëtög %∞tÿ%d.\n", 
p
 + 2, 
m˙t
);

5029 
	`DEBUG_PRINT3
 (" Sëtög 0x%xÅÿ%d.\n", 
p
 + 2, 
m˙t
);

5031 
unc⁄dôi⁄Æ_jump
;

5035 
p
 += 4;

5038 
£t_numbî_©
:

5040 
	`DEBUG_PRINT1
 ("EXECUTING set_number_at.\n");

5042 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

5043 
p1
 = 
p
 + 
m˙t
;

5044 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p
);

5045 #ifde‡
_LIBC


5046 
	`DEBUG_PRINT3
 (" Sëtög %∞tÿ%d.\n", 
p1
, 
m˙t
);

5048 
	`DEBUG_PRINT3
 (" Sëtög 0x%xÅÿ%d.\n", 
p1
, 
m˙t
);

5050 
	`STORE_NUMBER
 (
p1
, 
m˙t
);

5060 
w‹dbound
:

5061 
	`DEBUG_PRINT1
 ("EXECUTING wordbound.\n");

5062 i‡(
	`AT_WORD_BOUNDARY
 (
d
))

5064 
Áû
;

5066 
nŸw‹dbound
:

5067 
	`DEBUG_PRINT1
 ("EXECUTINGÇotwordbound.\n");

5068 i‡(
	`AT_WORD_BOUNDARY
 (
d
))

5069 
Áû
;

5072 
w‹dbound
:

5074 
boﬁón
 
¥evch¨
, 
thisch¨
;

5076 
	`DEBUG_PRINT1
 ("EXECUTING wordbound.\n");

5077 i‡(
	`AT_STRINGS_BEG
 (
d
Ë|| 
	`AT_STRINGS_END
 (d))

5080 
¥evch¨
 = 
	`WORDCHAR_P
 (
d
 - 1);

5081 
thisch¨
 = 
	`WORDCHAR_P
 (
d
);

5082 i‡(
¥evch¨
 !
thisch¨
)

5084 
Áû
;

5087 
nŸw‹dbound
:

5089 
boﬁón
 
¥evch¨
, 
thisch¨
;

5091 
	`DEBUG_PRINT1
 ("EXECUTINGÇotwordbound.\n");

5092 i‡(
	`AT_STRINGS_BEG
 (
d
Ë|| 
	`AT_STRINGS_END
 (d))

5093 
Áû
;

5095 
¥evch¨
 = 
	`WORDCHAR_P
 (
d
 - 1);

5096 
thisch¨
 = 
	`WORDCHAR_P
 (
d
);

5097 i‡(
¥evch¨
 !
thisch¨
)

5098 
Áû
;

5103 
w‹dbeg
:

5104 
	`DEBUG_PRINT1
 ("EXECUTING wordbeg.\n");

5105 i‡(
	`WORDCHAR_P
 (
d
Ë&& (
	`AT_STRINGS_BEG
 (d) || !WORDCHAR_P (d - 1)))

5107 
Áû
;

5109 
w‹díd
:

5110 
	`DEBUG_PRINT1
 ("EXECUTING wordend.\n");

5111 i‡(!
	`AT_STRINGS_BEG
 (
d
Ë&& 
	`WORDCHAR_P
 (d - 1)

5112 && (!
	`WORDCHAR_P
 (
d
Ë|| 
	`AT_STRINGS_END
 (d)))

5114 
Áû
;

5116 #ifde‡
emacs


5117 
bef‹e_dŸ
:

5118 
	`DEBUG_PRINT1
 ("EXECUTING before_dot.\n");

5119 i‡(
	`PTR_CHAR_POS
 ((*Ë
d
Ë>
poöt
)

5120 
Áû
;

5123 
©_dŸ
:

5124 
	`DEBUG_PRINT1
 ("EXECUTINGát_dot.\n");

5125 i‡(
	`PTR_CHAR_POS
 ((*Ë
d
Ë!
poöt
)

5126 
Áû
;

5129 
a·î_dŸ
:

5130 
	`DEBUG_PRINT1
 ("EXECUTINGáfter_dot.\n");

5131 i‡(
	`PTR_CHAR_POS
 ((*Ë
d
Ë<
poöt
)

5132 
Áû
;

5135 
sy¡ax•ec
:

5136 
	`DEBUG_PRINT2
 ("EXECUTING sy¡ax•e¯%d.\n", 
m˙t
);

5137 
m˙t
 = *
p
++;

5138 
m©chsy¡ax
;

5140 
w‹dch¨
:

5141 
	`DEBUG_PRINT1
 ("EXECUTING Emacs wordchar.\n");

5142 
m˙t
 = (Ë
Sw‹d
;

5143 
m©chsy¡ax
:

5144 
	`PREFETCH
 ();

5146 
d
++;

5147 i‡(
	`SYNTAX
 (
d
[-1]Ë!(
sy¡axcode
Ë
m˙t
)

5148 
Áû
;

5149 
	`SET_REGS_MATCHED
 ();

5152 
nŸsy¡ax•ec
:

5153 
	`DEBUG_PRINT2
 ("EXECUTINGÇŸsy¡ax•e¯%d.\n", 
m˙t
);

5154 
m˙t
 = *
p
++;

5155 
m©chnŸsy¡ax
;

5157 
nŸw‹dch¨
:

5158 
	`DEBUG_PRINT1
 ("EXECUTING EmacsÇotwordchar.\n");

5159 
m˙t
 = (Ë
Sw‹d
;

5160 
m©chnŸsy¡ax
:

5161 
	`PREFETCH
 ();

5163 
d
++;

5164 i‡(
	`SYNTAX
 (
d
[-1]Ë=(
sy¡axcode
Ë
m˙t
)

5165 
Áû
;

5166 
	`SET_REGS_MATCHED
 ();

5170 
w‹dch¨
:

5171 
	`DEBUG_PRINT1
 ("EXECUTINGÇon-Emacs wordchar.\n");

5172 
	`PREFETCH
 ();

5173 i‡(!
	`WORDCHAR_P
 (
d
))

5174 
Áû
;

5175 
	`SET_REGS_MATCHED
 ();

5176 
d
++;

5179 
nŸw‹dch¨
:

5180 
	`DEBUG_PRINT1
 ("EXECUTINGÇon-EmacsÇotwordchar.\n");

5181 
	`PREFETCH
 ();

5182 i‡(
	`WORDCHAR_P
 (
d
))

5183 
Áû
;

5184 
	`SET_REGS_MATCHED
 ();

5185 
d
++;

5190 
	`ab‹t
 ();

5196 
Áû
:

5197 i‡(!
	`FAIL_STACK_EMPTY
 ())

5199 
	`DEBUG_PRINT1
 ("\nFAIL:\n");

5200 
	`POP_FAILURE_POINT
 (
d
, 
p
,

5201 
lowe°_a˘ive_ªg
, 
highe°_a˘ive_ªg
,

5202 
ªg°¨t
, 
ªgíd
, 
ªg_öfo
);

5205 i‡(!
p
)

5206 
Áû
;

5209 
	`as£π
 (
p
 <
≥nd
);

5210 i‡(
p
 < 
≥nd
)

5212 
boﬁón
 
is_a_jump_n
 = 
Ál£
;

5216 (
ª_›code_t
Ë*
p
)

5218 
jump_n
:

5219 
is_a_jump_n
 = 
åue
;

5220 
maybe_p›_jump
:

5221 
p›_Áûuª_jump
:

5222 
jump
:

5223 
p1
 = 
p
 + 1;

5224 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5225 
p1
 +
m˙t
;

5227 i‡((
is_a_jump_n
 && (
ª_›code_t
Ë*
p1
 =
suc˚ed_n
)

5228 || (!
is_a_jump_n


5229 && (
ª_›code_t
Ë*
p1
 =
⁄_Áûuª_jump
))

5230 
Áû
;

5237 i‡(
d
 >
°rög1
 && d <
íd1
)

5238 
díd
 = 
íd_m©ch_1
;

5244 i‡(
be°_ªgs_£t
)

5245 
ª°‹e_be°_ªgs
;

5247 
	`FREE_VARIABLES
 ();

5250 
	}
}

5265 
boﬁón


5266 
	$group_m©ch_nuŒ_°rög_p
 (
p
, 
íd
, 
ªg_öfo
)

5267 **
p
, *
íd
;

5268 
ªgi°î_öfo_ty≥
 *
ªg_öfo
;

5270 
m˙t
;

5272 *
p1
 = *
p
 + 2;

5274 
p1
 < 
íd
)

5280 (
ª_›code_t
Ë*
p1
)

5283 
⁄_Áûuª_jump
:

5284 
p1
++;

5285 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5290 i‡(
m˙t
 >= 0)

5310 (
ª_›code_t
Ë
p1
[
m˙t
-3] =
jump_∑°_Æt
)

5316 i‡(!
	`Æt_m©ch_nuŒ_°rög_p
 (
p1
,Ö1 + 
m˙t
 - 3,

5317 
ªg_öfo
))

5318  
Ál£
;

5322 
p1
 +
m˙t
;

5326 i‡((
ª_›code_t
Ë*
p1
 !
⁄_Áûuª_jump
)

5331 
p1
++;

5332 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5333 i‡((
ª_›code_t
Ë
p1
[
m˙t
-3] !
jump_∑°_Æt
)

5336 
p1
 -= 3;

5344 
	`EXTRACT_NUMBER
 (
m˙t
, 
p1
 - 2);

5346 i‡(!
	`Æt_m©ch_nuŒ_°rög_p
 (
p1
,Ö1 + 
m˙t
, 
ªg_öfo
))

5347  
Ál£
;

5349 
p1
 +
m˙t
;

5354 
°›_mem‹y
:

5355 
	`as£π
 (
p1
[1] =**
p
);

5356 *
p
 = 
p1
 + 2;

5357  
åue
;

5361 i‡(!
	`comm⁄_›_m©ch_nuŒ_°rög_p
 (&
p1
, 
íd
, 
ªg_öfo
))

5362  
Ál£
;

5366  
Ál£
;

5367 
	}
}

5374 
boﬁón


5375 
	$Æt_m©ch_nuŒ_°rög_p
 (
p
, 
íd
, 
ªg_öfo
)

5376 *
p
, *
íd
;

5377 
ªgi°î_öfo_ty≥
 *
ªg_öfo
;

5379 
m˙t
;

5380 *
p1
 = 
p
;

5382 
p1
 < 
íd
)

5387 (
ª_›code_t
Ë*
p1
)

5390 
⁄_Áûuª_jump
:

5391 
p1
++;

5392 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5393 
p1
 +
m˙t
;

5397 i‡(!
	`comm⁄_›_m©ch_nuŒ_°rög_p
 (&
p1
, 
íd
, 
ªg_öfo
))

5398  
Ál£
;

5402  
åue
;

5403 
	}
}

5411 
boﬁón


5412 
	$comm⁄_›_m©ch_nuŒ_°rög_p
 (
p
, 
íd
, 
ªg_öfo
)

5413 **
p
, *
íd
;

5414 
ªgi°î_öfo_ty≥
 *
ªg_öfo
;

5416 
m˙t
;

5417 
boﬁón
 
ªt
;

5418 
ªg_no
;

5419 *
p1
 = *
p
;

5421 (
ª_›code_t
Ë*
p1
++)

5423 
no_›
:

5424 
beglöe
:

5425 
ídlöe
:

5426 
begbuf
:

5427 
ídbuf
:

5428 
w‹dbeg
:

5429 
w‹díd
:

5430 
w‹dbound
:

5431 
nŸw‹dbound
:

5432 #ifde‡
emacs


5433 
bef‹e_dŸ
:

5434 
©_dŸ
:

5435 
a·î_dŸ
:

5439 
°¨t_mem‹y
:

5440 
ªg_no
 = *
p1
;

5441 
	`as£π
 (
ªg_no
 > 0 &&Ñeg_nÿ<
MAX_REGNUM
);

5442 
ªt
 = 
	`group_m©ch_nuŒ_°rög_p
 (&
p1
, 
íd
, 
ªg_öfo
);

5447 i‡(
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[
ªg_no
]Ë=
MATCH_NULL_UNSET_VALUE
)

5448 
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[
ªg_no
]Ë
ªt
;

5450 i‡(!
ªt
)

5451  
Ál£
;

5455 
jump
:

5456 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5457 i‡(
m˙t
 >= 0)

5458 
p1
 +
m˙t
;

5460  
Ál£
;

5463 
suc˚ed_n
:

5465 
p1
 += 2;

5466 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5468 i‡(
m˙t
 == 0)

5470 
p1
 -= 4;

5471 
	`EXTRACT_NUMBER_AND_INCR
 (
m˙t
, 
p1
);

5472 
p1
 +
m˙t
;

5475  
Ál£
;

5478 
du∂iˇã
:

5479 i‡(!
	`REG_MATCH_NULL_STRING_P
 (
ªg_öfo
[*
p1
]))

5480  
Ál£
;

5483 
£t_numbî_©
:

5484 
p1
 += 4;

5488  
Ál£
;

5491 *
p
 = 
p1
;

5492  
åue
;

5493 
	}
}

5500 
	$bcmp_å™¶©e
 (
s1
, 
s2
, 
Àn
, 
å™¶©e
)

5501 c⁄° *
s1
, *
s2
;

5502 
Àn
;

5503 
RE_TRANSLATE_TYPE
 
å™¶©e
;

5505 c⁄° *
p1
 = (c⁄° *Ë
s1
;

5506 c⁄° *
p2
 = (c⁄° *Ë
s2
;

5507 
Àn
)

5509 i‡(
å™¶©e
[*
p1
++] !å™¶©e[*
p2
++])  1;

5510 
Àn
--;

5513 
	}
}

5527 
	$ª_compûe_∑âîn
 (
∑âîn
, 
Àngth
, 
buÂ
)

5528 c⁄° *
∑âîn
;

5529 
size_t
 
Àngth
;

5530 
ª_∑âîn_buf„r
 *
buÂ
;

5532 
ªg_îrcode_t
 
ªt
;

5536 
buÂ
->
ªgs_Æloˇãd
 = 
REGS_UNALLOCATED
;

5541 
buÂ
->
no_sub
 = 0;

5544 
buÂ
->
√wlöe_™ch‹
 = 1;

5546 
ªt
 = 
	`ªgex_compûe
 (
∑âîn
, 
Àngth
, 
ª_sy¡ax_›ti⁄s
, 
buÂ
);

5548 i‡(!
ªt
)

5549  
NULL
;

5550  
	`gëãxt
 (
ª_îr‹_msgid
 + 
ª_îr‹_msgid_idx
[(Ë
ªt
]);

5551 
	}
}

5552 #ifde‡
_LIBC


5553 
	$wók_Æüs
 (
__ª_compûe_∑âîn
, 
ª_compûe_∑âîn
)

5559 #i‡
deföed
 
_REGEX_RE_COMP
 || deföed 
_LIBC


5562 
ª_∑âîn_buf„r
 
ª_comp_buf
;

5565 #ifde‡
_LIBC


5569 
wók_fun˘i⁄


5571 
	$ª_comp
 (
s
)

5572 c⁄° *
s
;

5574 
ªg_îrcode_t
 
ªt
;

5576 i‡(!
s
)

5578 i‡(!
ª_comp_buf
.
buf„r
)

5579  
	`gëãxt
 ("NoÖreviousÑegularÉxpression");

5583 i‡(!
ª_comp_buf
.
buf„r
)

5585 
ª_comp_buf
.
buf„r
 = (*Ë
	`mÆloc
 (200);

5586 i‡(
ª_comp_buf
.
buf„r
 =
NULL
)

5587  (*Ë
	`gëãxt
 (
ª_îr‹_msgid


5588 + 
ª_îr‹_msgid_idx
[(Ë
REG_ESPACE
]);

5589 
ª_comp_buf
.
Æloˇãd
 = 200;

5591 
ª_comp_buf
.
Á°m≠
 = (*Ë
	`mÆloc
 (1 << 
BYTEWIDTH
);

5592 i‡(
ª_comp_buf
.
Á°m≠
 =
NULL
)

5593  (*Ë
	`gëãxt
 (
ª_îr‹_msgid


5594 + 
ª_îr‹_msgid_idx
[(Ë
REG_ESPACE
]);

5601 
ª_comp_buf
.
√wlöe_™ch‹
 = 1;

5603 
ªt
 = 
	`ªgex_compûe
 (
s
, 
	`°æí
 (s), 
ª_sy¡ax_›ti⁄s
, &
ª_comp_buf
);

5605 i‡(!
ªt
)

5606  
NULL
;

5609  (*Ë
	`gëãxt
 (
ª_îr‹_msgid
 + 
ª_îr‹_msgid_idx
[(Ë
ªt
]);

5610 
	}
}

5614 #ifde‡
_LIBC


5615 
	gwók_fun˘i⁄


5617 
	$ª_exec
 (
s
)

5618 c⁄° *
s
;

5620 c⁄° 
Àn
 = 
	`°æí
 (
s
);

5622 0 <
	`ª_£¨ch
 (&
ª_comp_buf
, 
s
, 
Àn
, 0,Üí, (
ª_ªgi°îs
 *) 0);

5623 
	}
}

5629 #i‚de‡
emacs


5667 
	$ªgcomp
 (
¥eg
, 
∑âîn
, 
cÊags
)

5668 
ªgex_t
 *
¥eg
;

5669 c⁄° *
∑âîn
;

5670 
cÊags
;

5672 
ªg_îrcode_t
 
ªt
;

5673 
ªg_sy¡ax_t
 
sy¡ax


5674 (
cÊags
 & 
REG_EXTENDED
) ?

5675 
RE_SYNTAX_POSIX_EXTENDED
 : 
RE_SYNTAX_POSIX_BASIC
;

5678 
¥eg
->
buf„r
 = 0;

5679 
¥eg
->
Æloˇãd
 = 0;

5680 
¥eg
->
u£d
 = 0;

5683 
¥eg
->
Á°m≠
 = (*Ë
	`mÆloc
 (1 << 
BYTEWIDTH
);

5685 i‡(
cÊags
 & 
REG_ICASE
)

5687 
i
;

5689 
¥eg
->
å™¶©e


5690 (
RE_TRANSLATE_TYPE
Ë
	`mÆloc
 (
CHAR_SET_SIZE


5691 *  (*(
RE_TRANSLATE_TYPE
)0));

5692 i‡(
¥eg
->
å™¶©e
 =
NULL
)

5693  (Ë
REG_ESPACE
;

5696 
i
 = 0; i < 
CHAR_SET_SIZE
; i++)

5697 
¥eg
->
å™¶©e
[
i
] = 
	`ISUPPER
 (iË? 
	`TOLOWER
 (i) : i;

5700 
¥eg
->
å™¶©e
 = 
NULL
;

5703 i‡(
cÊags
 & 
REG_NEWLINE
)

5705 
sy¡ax
 &~
RE_DOT_NEWLINE
;

5706 
sy¡ax
 |
RE_HAT_LISTS_NOT_NEWLINE
;

5708 
¥eg
->
√wlöe_™ch‹
 = 1;

5711 
¥eg
->
√wlöe_™ch‹
 = 0;

5713 
¥eg
->
no_sub
 = !!(
cÊags
 & 
REG_NOSUB
);

5717 
ªt
 = 
	`ªgex_compûe
 (
∑âîn
, 
	`°æí
 (∑âîn), 
sy¡ax
, 
¥eg
);

5721 i‡(
ªt
 =
REG_ERPAREN
Ëªà
REG_EPAREN
;

5723 i‡(
ªt
 =
REG_NOERROR
 && 
¥eg
->
Á°m≠
)

5727 i‡(
	`ª_compûe_Á°m≠
 (
¥eg
) == -2)

5731 
	`‰ì
 (
¥eg
->
Á°m≠
);

5732 
¥eg
->
Á°m≠
 = 
NULL
;

5736  (Ë
ªt
;

5737 
	}
}

5738 #ifde‡
_LIBC


5739 
	$wók_Æüs
 (
__ªgcomp
, 
ªgcomp
)

5758 
	$ªgexec
 (
¥eg
, 
°rög
, 
nm©ch
, 
pm©ch
, 
eÊags
)

5759 c⁄° 
ªgex_t
 *
¥eg
;

5760 c⁄° *
°rög
;

5761 
size_t
 
nm©ch
;

5762 
ªgm©ch_t
 
pm©ch
[];

5763 
eÊags
;

5765 
ªt
;

5766 
ª_ªgi°îs
 
ªgs
;

5767 
ªgex_t
 
¥iv©e_¥eg
;

5768 
Àn
 = 
	`°æí
 (
°rög
);

5769 
boﬁón
 
w™t_ªg_öfo
 = !
¥eg
->
no_sub
 && 
nm©ch
 > 0;

5771 
¥iv©e_¥eg
 = *
¥eg
;

5773 
¥iv©e_¥eg
.
nŸ_bﬁ
 = !!(
eÊags
 & 
REG_NOTBOL
);

5774 
¥iv©e_¥eg
.
nŸ_eﬁ
 = !!(
eÊags
 & 
REG_NOTEOL
);

5779 
¥iv©e_¥eg
.
ªgs_Æloˇãd
 = 
REGS_FIXED
;

5781 i‡(
w™t_ªg_öfo
)

5783 
ªgs
.
num_ªgs
 = 
nm©ch
;

5784 
ªgs
.
°¨t
 = 
	`TALLOC
 (
nm©ch
 * 2, 
ªgoff_t
);

5785 i‡(
ªgs
.
°¨t
 =
NULL
)

5786  (Ë
REG_NOMATCH
;

5787 
ªgs
.
íd
 =Ñegs.
°¨t
 + 
nm©ch
;

5791 
ªt
 = 
	`ª_£¨ch
 (&
¥iv©e_¥eg
, 
°rög
, 
Àn
,

5792  0, 
Àn
,

5793 
w™t_ªg_öfo
 ? &
ªgs
 : (
ª_ªgi°îs
 *) 0);

5796 i‡(
w™t_ªg_öfo
)

5798 i‡(
ªt
 >= 0)

5800 
r
;

5802 
r
 = 0;Ñ < 
nm©ch
;Ñ++)

5804 
pm©ch
[
r
].
rm_so
 = 
ªgs
.
°¨t
[r];

5805 
pm©ch
[
r
].
rm_eo
 = 
ªgs
.
íd
[r];

5810 
	`‰ì
 (
ªgs
.
°¨t
);

5814  
ªt
 >0 ? (Ë
REG_NOERROR
 : (Ë
REG_NOMATCH
;

5815 
	}
}

5816 #ifde‡
_LIBC


5817 
	$wók_Æüs
 (
__ªgexec
, 
ªgexec
)

5824 
size_t


5825 
	$ªgîr‹
 (
îr
, 
¥eg
, 
îrbuf
, 
îrbuf_size
)

5826 
îr
;

5827 c⁄° 
ªgex_t
 *
¥eg
;

5828 *
îrbuf
;

5829 
size_t
 
îrbuf_size
;

5831 c⁄° *
msg
;

5832 
size_t
 
msg_size
;

5834 i‡(
îr
 < 0

5835 || 
îr
 >(Ë( (
ª_îr‹_msgid_idx
)

5836 /  (
ª_îr‹_msgid_idx
[0])))

5841 
	`ab‹t
 ();

5843 
msg
 = 
	`gëãxt
 (
ª_îr‹_msgid
 + 
ª_îr‹_msgid_idx
[
îr
]);

5845 
msg_size
 = 
	`°æí
 (
msg
) + 1;

5847 i‡(
îrbuf_size
 != 0)

5849 i‡(
msg_size
 > 
îrbuf_size
)

5851 #i‡
deföed
 
HAVE_MEMPCPY
 || deföed 
_LIBC


5852 *((*Ë
	`__memp˝y
 (
îrbuf
, 
msg
, 
îrbuf_size
 - 1)) = '\0';

5854 
	`mem˝y
 (
îrbuf
, 
msg
, 
îrbuf_size
 - 1);

5855 
îrbuf
[
îrbuf_size
 - 1] = 0;

5859 
	`mem˝y
 (
îrbuf
, 
msg
, 
msg_size
);

5862  
msg_size
;

5863 
	}
}

5864 #ifde‡
_LIBC


5865 
	$wók_Æüs
 (
__ªgîr‹
, 
ªgîr‹
)

5872 
	$ªg‰ì
 (
¥eg
)

5873 
ªgex_t
 *
¥eg
;

5875 i‡(
¥eg
->
buf„r
 !
NULL
)

5876 
	`‰ì
 (
¥eg
->
buf„r
);

5877 
¥eg
->
buf„r
 = 
NULL
;

5879 
¥eg
->
Æloˇãd
 = 0;

5880 
¥eg
->
u£d
 = 0;

5882 i‡(
¥eg
->
Á°m≠
 !
NULL
)

5883 
	`‰ì
 (
¥eg
->
Á°m≠
);

5884 
¥eg
->
Á°m≠
 = 
NULL
;

5885 
¥eg
->
Á°m≠_accuøã
 = 0;

5887 i‡(
¥eg
->
å™¶©e
 !
NULL
)

5888 
	`‰ì
 (
¥eg
->
å™¶©e
);

5889 
¥eg
->
å™¶©e
 = 
NULL
;

5890 
	}
}

5891 #ifde‡
_LIBC


5892 
	$wók_Æüs
 (
__ªg‰ì
, 
ªg‰ì
)

	@common-libs/3rd-party/quagga-lib/src/routemap.c

21 
	~<zebø.h
>

23 
	~"lökli°.h
"

24 
	~"mem‹y.h
"

25 
	~"ve˘‹.h
"

26 
	~"¥efix.h
"

27 
	~"rouãm≠.h
"

28 
	~"comm™d.h
"

29 
	~"vty.h
"

30 
	~"log.h
"

33 
ve˘‹
 
	grouã_m©ch_vec
;

36 
ve˘‹
 
	grouã_£t_vec
;

39 
	srouã_m≠_ruÀ


42 
rouã_m≠_ruÀ_cmd
 *
	mcmd
;

45 *
	mruÀ_°r
;

48 *
	mvÆue
;

51 
rouã_m≠_ruÀ
 *
	m√xt
;

52 
rouã_m≠_ruÀ
 *
	m¥ev
;

56 
	srouã_m≠_li°


58 
rouã_m≠
 *
	mhód
;

59 
rouã_m≠
 *
	mèû
;

61 (*
	madd_hook
) (const *);

62 (*
	mdñëe_hook
) (const *);

63 (*
	mevít_hook
Ë(
	mrouã_m≠_evít_t
, const *);

67 
rouã_m≠_li°
 
	grouã_m≠_ma°î
 = { 
NULL
, NULL, NULL, NULL };

70 
rouã_m≠_ruÀ_dñëe
 (
rouã_m≠_ruÀ_li°
 *,

71 
rouã_m≠_ruÀ
 *);

74 
rouã_m≠_ödex_dñëe
 (
rouã_m≠_ödex
 *, );

78 
rouã_m≠
 *

79 
	$rouã_m≠_√w
 (c⁄° *
«me
)

81 
rouã_m≠
 *
√w
;

83 
√w
 = 
	`XCALLOC
 (
MTYPE_ROUTE_MAP
,  (
rouã_m≠
));

84 
√w
->
«me
 = 
	`XSTRDUP
 (
MTYPE_ROUTE_MAP_NAME
,Çame);

85  
√w
;

86 
	}
}

89 
rouã_m≠
 *

90 
	$rouã_m≠_add
 (c⁄° *
«me
)

92 
rouã_m≠
 *
m≠
;

93 
rouã_m≠_li°
 *
li°
;

95 
m≠
 = 
	`rouã_m≠_√w
 (
«me
);

96 
li°
 = &
rouã_m≠_ma°î
;

98 
m≠
->
√xt
 = 
NULL
;

99 
m≠
->
¥ev
 = 
li°
->
èû
;

100 i‡(
li°
->
èû
)

101 
li°
->
èû
->
√xt
 = 
m≠
;

103 
li°
->
hód
 = 
m≠
;

104 
li°
->
èû
 = 
m≠
;

107 i‡(
rouã_m≠_ma°î
.
add_hook
)

108 (*
rouã_m≠_ma°î
.
add_hook
Ë(
«me
);

110  
m≠
;

111 
	}
}

115 
	$rouã_m≠_dñëe
 (
rouã_m≠
 *
m≠
)

117 
rouã_m≠_li°
 *
li°
;

118 
rouã_m≠_ödex
 *
ödex
;

119 *
«me
;

121 (
ödex
 = 
m≠
->
hód
Ë!
NULL
)

122 
	`rouã_m≠_ödex_dñëe
 (
ödex
, 0);

124 
«me
 = 
m≠
->name;

126 
li°
 = &
rouã_m≠_ma°î
;

128 i‡(
m≠
->
√xt
)

129 
m≠
->
√xt
->
¥ev
 = map->prev;

131 
li°
->
èû
 = 
m≠
->
¥ev
;

133 i‡(
m≠
->
¥ev
)

134 
m≠
->
¥ev
->
√xt
 = map->next;

136 
li°
->
hód
 = 
m≠
->
√xt
;

138 
	`XFREE
 (
MTYPE_ROUTE_MAP
, 
m≠
);

141 i‡(
rouã_m≠_ma°î
.
dñëe_hook
)

142 (*
rouã_m≠_ma°î
.
dñëe_hook
Ë(
«me
);

144 i‡(
«me
)

145 
	`XFREE
 (
MTYPE_ROUTE_MAP_NAME
, 
«me
);

147 
	}
}

150 
rouã_m≠
 *

151 
	$rouã_m≠_lookup_by_«me
 (c⁄° *
«me
)

153 
rouã_m≠
 *
m≠
;

155 
m≠
 = 
rouã_m≠_ma°î
.
hód
; m≠; m≠ = m≠->
√xt
)

156 i‡(
	`°rcmp
 (
m≠
->
«me
,Çame) == 0)

157  
m≠
;

158  
NULL
;

159 
	}
}

163 
rouã_m≠
 *

164 
	$rouã_m≠_gë
 (c⁄° *
«me
)

166 
rouã_m≠
 *
m≠
;

168 
m≠
 = 
	`rouã_m≠_lookup_by_«me
 (
«me
);

169 i‡(
m≠
 =
NULL
)

170 
m≠
 = 
	`rouã_m≠_add
 (
«me
);

171  
m≠
;

172 
	}
}

176 
	$rouã_m≠_ty≥_°r
 (
rouã_m≠_ty≥
 
ty≥
)

178 
ty≥
)

180 
RMAP_PERMIT
:

183 
RMAP_DENY
:

190 
	}
}

193 
	$rouã_m≠_em±y
 (
rouã_m≠
 *
m≠
)

195 i‡(
m≠
->
hód
 =
NULL
 && m≠->
èû
 == NULL)

199 
	}
}

203 
	$vty_show_rouã_m≠_íåy
 (
vty
 *vty, 
rouã_m≠
 *
m≠
)

205 
rouã_m≠_ödex
 *
ödex
;

206 
rouã_m≠_ruÀ
 *
ruÀ
;

209 i‡(
zlog_deÁu…
)

210 
	`vty_out
 (
vty
, "%s:%s", 
zlog_¥Ÿo_«mes
[
zlog_deÁu…
->
¥Ÿocﬁ
],

211 
VTY_NEWLINE
);

213 
ödex
 = 
m≠
->
hód
; index; index = index->
√xt
)

215 
	`vty_out
 (
vty
, "route-map %s, %s, sequence %d%s",

216 
m≠
->
«me
, 
	`rouã_m≠_ty≥_°r
 (
ödex
->
ty≥
),

217 
ödex
->
¥ef
, 
VTY_NEWLINE
);

220 i‡(
ödex
->
des¸ùti⁄
)

221 
	`vty_out
 (
vty
, " Des¸ùti⁄:%† %s%s", 
VTY_NEWLINE
,

222 
ödex
->
des¸ùti⁄
, 
VTY_NEWLINE
);

225 
	`vty_out
 (
vty
, " M©ch cœu£s:%s", 
VTY_NEWLINE
);

226 
ruÀ
 = 
ödex
->
m©ch_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

227 
	`vty_out
 (
vty
, " %s %s%s",

228 
ruÀ
->
cmd
->
°r
,ÑuÀ->
ruÀ_°r
, 
VTY_NEWLINE
);

230 
	`vty_out
 (
vty
, " Së cœu£s:%s", 
VTY_NEWLINE
);

231 
ruÀ
 = 
ödex
->
£t_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

232 
	`vty_out
 (
vty
, " %s %s%s",

233 
ruÀ
->
cmd
->
°r
,ÑuÀ->
ruÀ_°r
, 
VTY_NEWLINE
);

236 
	`vty_out
 (
vty
, " CÆ»˛au£:%s", 
VTY_NEWLINE
);

237 i‡(
ödex
->
√xåm
)

238 
	`vty_out
 (
vty
, " CÆ»%s%s", 
ödex
->
√xåm
, 
VTY_NEWLINE
);

241 
	`vty_out
 (
vty
, " A˘i⁄:%s", 
VTY_NEWLINE
);

242 i‡(
ödex
->
exôpﬁicy
 =
RMAP_GOTO
)

243 
	`vty_out
 (
vty
, " GŸÿ%d%s", 
ödex
->
√xçªf
, 
VTY_NEWLINE
);

244 i‡(
ödex
->
exôpﬁicy
 =
RMAP_NEXT
)

245 
	`vty_out
 (
vty
, " C⁄töuêtÿ√xàíåy%s", 
VTY_NEWLINE
);

246 i‡(
ödex
->
exôpﬁicy
 =
RMAP_EXIT
)

247 
	`vty_out
 (
vty
, " ExôÑouãm≠%s", 
VTY_NEWLINE
);

249 
	}
}

252 
	$vty_show_rouã_m≠
 (
vty
 *vty, c⁄° *
«me
)

254 
rouã_m≠
 *
m≠
;

256 i‡(
«me
)

258 
m≠
 = 
	`rouã_m≠_lookup_by_«me
 (
«me
);

260 i‡(
m≠
)

262 
	`vty_show_rouã_m≠_íåy
 (
vty
, 
m≠
);

263  
CMD_SUCCESS
;

267 
	`vty_out
 (
vty
, "%%rouã-m≠ %†nŸ found%s", 
«me
, 
VTY_NEWLINE
);

268  
CMD_WARNING
;

273 
m≠
 = 
rouã_m≠_ma°î
.
hód
; m≠; m≠ = m≠->
√xt
)

274 
	`vty_show_rouã_m≠_íåy
 (
vty
, 
m≠
);

276  
CMD_SUCCESS
;

277 
	}
}

282 
rouã_m≠_ödex
 *

283 
	$rouã_m≠_ödex_√w
 ()

285 
rouã_m≠_ödex
 *
√w
;

287 
√w
 = 
	`XCALLOC
 (
MTYPE_ROUTE_MAP_INDEX
,  (
rouã_m≠_ödex
));

288 
√w
->
exôpﬁicy
 = 
RMAP_EXIT
;

289  
√w
;

290 
	}
}

294 
	$rouã_m≠_ödex_dñëe
 (
rouã_m≠_ödex
 *
ödex
, 
nŸify
)

296 
rouã_m≠_ruÀ
 *
ruÀ
;

299 (
ruÀ
 = 
ödex
->
m©ch_li°
.
hód
Ë!
NULL
)

300 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
m©ch_li°
, 
ruÀ
);

303 (
ruÀ
 = 
ödex
->
£t_li°
.
hód
Ë!
NULL
)

304 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
£t_li°
, 
ruÀ
);

307 i‡(
ödex
->
√xt
)

308 
ödex
->
√xt
->
¥ev
 = index->prev;

310 
ödex
->
m≠
->
èû
 = index->
¥ev
;

312 i‡(
ödex
->
¥ev
)

313 
ödex
->
¥ev
->
√xt
 = index->next;

315 
ödex
->
m≠
->
hód
 = index->
√xt
;

318 i‡(
ödex
->
√xåm
)

319 
	`XFREE
 (
MTYPE_ROUTE_MAP_NAME
, 
ödex
->
√xåm
);

322 i‡(
rouã_m≠_ma°î
.
evít_hook
 && 
nŸify
)

323 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
RMAP_EVENT_INDEX_DELETED
,

324 
ödex
->
m≠
->
«me
);

326 
	`XFREE
 (
MTYPE_ROUTE_MAP_INDEX
, 
ödex
);

327 
	}
}

330 
rouã_m≠_ödex
 *

331 
	$rouã_m≠_ödex_lookup
 (
rouã_m≠
 *
m≠
, 
rouã_m≠_ty≥
 
ty≥
,

332 
¥ef
)

334 
rouã_m≠_ödex
 *
ödex
;

336 
ödex
 = 
m≠
->
hód
; index; index = index->
√xt
)

337 i‡((
ödex
->
ty≥
 =ty≥ ||Åy≥ =
RMAP_ANY
)

338 && 
ödex
->
¥ef
 ==Öref)

339  
ödex
;

340  
NULL
;

341 
	}
}

344 
rouã_m≠_ödex
 *

345 
	$rouã_m≠_ödex_add
 (
rouã_m≠
 *
m≠
, 
rouã_m≠_ty≥
 
ty≥
,

346 
¥ef
)

348 
rouã_m≠_ödex
 *
ödex
;

349 
rouã_m≠_ödex
 *
poöt
;

352 
ödex
 = 
	`rouã_m≠_ödex_√w
 ();

353 
ödex
->
m≠
 = map;

354 
ödex
->
ty≥
 =Åype;

355 
ödex
->
¥ef
 =Öref;

358 
poöt
 = 
m≠
->
hód
;Öoöt;Öoöàpoöt->
√xt
)

359 i‡(
poöt
->
¥ef
 >=Öref)

362 i‡(
m≠
->
hód
 =
NULL
)

364 
m≠
->
hód
 = m≠->
èû
 = 
ödex
;

366 i‡(
poöt
 =
NULL
)

368 
ödex
->
¥ev
 = 
m≠
->
èû
;

369 
m≠
->
èû
->
√xt
 = 
ödex
;

370 
m≠
->
èû
 = 
ödex
;

372 i‡(
poöt
 =
m≠
->
hód
)

374 
ödex
->
√xt
 = 
m≠
->
hód
;

375 
m≠
->
hód
->
¥ev
 = 
ödex
;

376 
m≠
->
hód
 = 
ödex
;

380 
ödex
->
√xt
 = 
poöt
;

381 
ödex
->
¥ev
 = 
poöt
->prev;

382 i‡(
poöt
->
¥ev
)

383 
poöt
->
¥ev
->
√xt
 = 
ödex
;

384 
poöt
->
¥ev
 = 
ödex
;

388 i‡(
rouã_m≠_ma°î
.
evít_hook
)

389 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
RMAP_EVENT_INDEX_ADDED
,

390 
m≠
->
«me
);

392  
ödex
;

393 
	}
}

396 
rouã_m≠_ödex
 *

397 
	$rouã_m≠_ödex_gë
 (
rouã_m≠
 *
m≠
, 
rouã_m≠_ty≥
 
ty≥
,

398 
¥ef
)

400 
rouã_m≠_ödex
 *
ödex
;

402 
ödex
 = 
	`rouã_m≠_ödex_lookup
 (
m≠
, 
RMAP_ANY
, 
¥ef
);

403 i‡(
ödex
 && index->
ty≥
 !=Åype)

406 
	`rouã_m≠_ödex_dñëe
 (
ödex
, 1);

407 
ödex
 = 
NULL
;

409 i‡(
ödex
 =
NULL
)

410 
ödex
 = 
	`rouã_m≠_ödex_add
 (
m≠
, 
ty≥
, 
¥ef
);

411  
ödex
;

412 
	}
}

415 
rouã_m≠_ruÀ
 *

416 
	$rouã_m≠_ruÀ_√w
 ()

418 
rouã_m≠_ruÀ
 *
√w
;

420 
√w
 = 
	`XCALLOC
 (
MTYPE_ROUTE_MAP_RULE
,  (
rouã_m≠_ruÀ
));

421  
√w
;

422 
	}
}

426 
	$rouã_m≠_ö°Æl_m©ch
 (
rouã_m≠_ruÀ_cmd
 *
cmd
)

428 
	`ve˘‹_£t
 (
rouã_m©ch_vec
, 
cmd
);

429 
	}
}

433 
	$rouã_m≠_ö°Æl_£t
 (
rouã_m≠_ruÀ_cmd
 *
cmd
)

435 
	`ve˘‹_£t
 (
rouã_£t_vec
, 
cmd
);

436 
	}
}

439 
rouã_m≠_ruÀ_cmd
 *

440 
	$rouã_m≠_lookup_m©ch
 (c⁄° *
«me
)

442 
i
;

443 
rouã_m≠_ruÀ_cmd
 *
ruÀ
;

445 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
rouã_m©ch_vec
); i++)

446 i‡((
ruÀ
 = 
	`ve˘‹_¶Ÿ
 (
rouã_m©ch_vec
, 
i
)Ë!
NULL
)

447 i‡(
	`°rcmp
 (
ruÀ
->
°r
, 
«me
) == 0)

448  
ruÀ
;

449  
NULL
;

450 
	}
}

453 
rouã_m≠_ruÀ_cmd
 *

454 
	$rouã_m≠_lookup_£t
 (c⁄° *
«me
)

456 
i
;

457 
rouã_m≠_ruÀ_cmd
 *
ruÀ
;

459 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
rouã_£t_vec
); i++)

460 i‡((
ruÀ
 = 
	`ve˘‹_¶Ÿ
 (
rouã_£t_vec
, 
i
)Ë!
NULL
)

461 i‡(
	`°rcmp
 (
ruÀ
->
°r
, 
«me
) == 0)

462  
ruÀ
;

463  
NULL
;

464 
	}
}

468 
	$rouã_m≠_ruÀ_add
 (
rouã_m≠_ruÀ_li°
 *
li°
,

469 
rouã_m≠_ruÀ
 *
ruÀ
)

471 
ruÀ
->
√xt
 = 
NULL
;

472 
ruÀ
->
¥ev
 = 
li°
->
èû
;

473 i‡(
li°
->
èû
)

474 
li°
->
èû
->
√xt
 = 
ruÀ
;

476 
li°
->
hód
 = 
ruÀ
;

477 
li°
->
èû
 = 
ruÀ
;

478 
	}
}

482 
	$rouã_m≠_ruÀ_dñëe
 (
rouã_m≠_ruÀ_li°
 *
li°
,

483 
rouã_m≠_ruÀ
 *
ruÀ
)

485 i‡(
ruÀ
->
cmd
->
func_‰ì
)

486 (*
ruÀ
->
cmd
->
func_‰ì
Ë‘uÀ->
vÆue
);

488 i‡(
ruÀ
->
ruÀ_°r
)

489 
	`XFREE
 (
MTYPE_ROUTE_MAP_RULE_STR
, 
ruÀ
->
ruÀ_°r
);

491 i‡(
ruÀ
->
√xt
)

492 
ruÀ
->
√xt
->
¥ev
 =Ñule->prev;

494 
li°
->
èû
 = 
ruÀ
->
¥ev
;

495 i‡(
ruÀ
->
¥ev
)

496 
ruÀ
->
¥ev
->
√xt
 =Ñule->next;

498 
li°
->
hód
 = 
ruÀ
->
√xt
;

500 
	`XFREE
 (
MTYPE_ROUTE_MAP_RULE
, 
ruÀ
);

501 
	}
}

505 
	$ruÀcmp
 (c⁄° *
d°
, c⁄° *
§c
)

507 i‡(
d°
 =
NULL
)

509 i‡(
§c
 =
NULL
)

516 i‡(
§c
 =
NULL
)

519  
	`°rcmp
 (
d°
, 
§c
);

522 
	}
}

526 
	$rouã_m≠_add_m©ch
 (
rouã_m≠_ödex
 *
ödex
, c⁄° *
m©ch_«me
,

527 c⁄° *
m©ch_¨g
)

529 
rouã_m≠_ruÀ
 *
ruÀ
;

530 
rouã_m≠_ruÀ
 *
√xt
;

531 
rouã_m≠_ruÀ_cmd
 *
cmd
;

532 *
compûe
;

533 
ª∂a˚d
 = 0;

536 
cmd
 = 
	`rouã_m≠_lookup_m©ch
 (
m©ch_«me
);

537 i‡(
cmd
 =
NULL
)

538  
RMAP_RULE_MISSING
;

541 i‡(
cmd
->
func_compûe
)

543 
compûe
(*
cmd
->
func_compûe
)(
m©ch_¨g
);

544 i‡(
compûe
 =
NULL
)

545  
RMAP_COMPILE_ERROR
;

548 
compûe
 = 
NULL
;

551 
ruÀ
 = 
ödex
->
m©ch_li°
.
hód
;ÑuÀ;ÑuÀ = 
√xt
)

553 
√xt
 = 
ruÀ
->next;

554 i‡(
ruÀ
->
cmd
 == cmd)

556 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
m©ch_li°
, 
ruÀ
);

557 
ª∂a˚d
 = 1;

562 
ruÀ
 = 
	`rouã_m≠_ruÀ_√w
 ();

563 
ruÀ
->
cmd
 = cmd;

564 
ruÀ
->
vÆue
 = 
compûe
;

565 i‡(
m©ch_¨g
)

566 
ruÀ
->
ruÀ_°r
 = 
	`XSTRDUP
 (
MTYPE_ROUTE_MAP_RULE_STR
, 
m©ch_¨g
);

568 
ruÀ
->
ruÀ_°r
 = 
NULL
;

571 
	`rouã_m≠_ruÀ_add
 (&
ödex
->
m©ch_li°
, 
ruÀ
);

574 i‡(
rouã_m≠_ma°î
.
evít_hook
)

575 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
ª∂a˚d
 ?

576 
RMAP_EVENT_MATCH_REPLACED
:

577 
RMAP_EVENT_MATCH_ADDED
,

578 
ödex
->
m≠
->
«me
);

581 
	}
}

585 
	$rouã_m≠_dñëe_m©ch
 (
rouã_m≠_ödex
 *
ödex
, c⁄° *
m©ch_«me
,

586 c⁄° *
m©ch_¨g
)

588 
rouã_m≠_ruÀ
 *
ruÀ
;

589 
rouã_m≠_ruÀ_cmd
 *
cmd
;

591 
cmd
 = 
	`rouã_m≠_lookup_m©ch
 (
m©ch_«me
);

592 i‡(
cmd
 =
NULL
)

595 
ruÀ
 = 
ödex
->
m©ch_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

596 i‡(
ruÀ
->
cmd
 == cmd &&

597 (
	`ruÀcmp
 (
ruÀ
->
ruÀ_°r
, 
m©ch_¨g
Ë=0 || m©ch_¨g =
NULL
))

599 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
m©ch_li°
, 
ruÀ
);

601 i‡(
rouã_m≠_ma°î
.
evít_hook
)

602 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
RMAP_EVENT_MATCH_DELETED
,

603 
ödex
->
m≠
->
«me
);

608 
	}
}

612 
	$rouã_m≠_add_£t
 (
rouã_m≠_ödex
 *
ödex
, c⁄° *
£t_«me
,

613 c⁄° *
£t_¨g
)

615 
rouã_m≠_ruÀ
 *
ruÀ
;

616 
rouã_m≠_ruÀ
 *
√xt
;

617 
rouã_m≠_ruÀ_cmd
 *
cmd
;

618 *
compûe
;

619 
ª∂a˚d
 = 0;

621 
cmd
 = 
	`rouã_m≠_lookup_£t
 (
£t_«me
);

622 i‡(
cmd
 =
NULL
)

623  
RMAP_RULE_MISSING
;

626 i‡(
cmd
->
func_compûe
)

628 
compûe
(*
cmd
->
func_compûe
)(
£t_¨g
);

629 i‡(
compûe
 =
NULL
)

630  
RMAP_COMPILE_ERROR
;

633 
compûe
 = 
NULL
;

638 
ruÀ
 = 
ödex
->
£t_li°
.
hód
;ÑuÀ;ÑuÀ = 
√xt
)

640 
√xt
 = 
ruÀ
->next;

641 i‡(
ruÀ
->
cmd
 == cmd)

643 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
£t_li°
, 
ruÀ
);

644 
ª∂a˚d
 = 1;

649 
ruÀ
 = 
	`rouã_m≠_ruÀ_√w
 ();

650 
ruÀ
->
cmd
 = cmd;

651 
ruÀ
->
vÆue
 = 
compûe
;

652 i‡(
£t_¨g
)

653 
ruÀ
->
ruÀ_°r
 = 
	`XSTRDUP
 (
MTYPE_ROUTE_MAP_RULE_STR
, 
£t_¨g
);

655 
ruÀ
->
ruÀ_°r
 = 
NULL
;

658 
	`rouã_m≠_ruÀ_add
 (&
ödex
->
£t_li°
, 
ruÀ
);

661 i‡(
rouã_m≠_ma°î
.
evít_hook
)

662 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
ª∂a˚d
 ?

663 
RMAP_EVENT_SET_REPLACED
:

664 
RMAP_EVENT_SET_ADDED
,

665 
ödex
->
m≠
->
«me
);

667 
	}
}

671 
	$rouã_m≠_dñëe_£t
 (
rouã_m≠_ödex
 *
ödex
, c⁄° *
£t_«me
,

672 c⁄° *
£t_¨g
)

674 
rouã_m≠_ruÀ
 *
ruÀ
;

675 
rouã_m≠_ruÀ_cmd
 *
cmd
;

677 
cmd
 = 
	`rouã_m≠_lookup_£t
 (
£t_«me
);

678 i‡(
cmd
 =
NULL
)

681 
ruÀ
 = 
ödex
->
£t_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

682 i‡((
ruÀ
->
cmd
 == cmd) &&

683 (
	`ruÀcmp
 (
ruÀ
->
ruÀ_°r
, 
£t_¨g
Ë=0 || së_¨g =
NULL
))

685 
	`rouã_m≠_ruÀ_dñëe
 (&
ödex
->
£t_li°
, 
ruÀ
);

687 i‡(
rouã_m≠_ma°î
.
evít_hook
)

688 (*
rouã_m≠_ma°î
.
evít_hook
Ë(
RMAP_EVENT_SET_DELETED
,

689 
ödex
->
m≠
->
«me
);

694 
	}
}

742 
rouã_m≠_ªsu…_t


743 
	$rouã_m≠_≠∂y_m©ch
 (
rouã_m≠_ruÀ_li°
 *
m©ch_li°
,

744 
¥efix
 *¥efix, 
rouã_m≠_obje˘_t
 
ty≥
,

745 *
obje˘
)

747 
rouã_m≠_ªsu…_t
 
ªt
 = 
RMAP_NOMATCH
;

748 
rouã_m≠_ruÀ
 *
m©ch
;

753 i‡(!
m©ch_li°
->
hód
)

754 
ªt
 = 
RMAP_MATCH
;

757 
m©ch
 = 
m©ch_li°
->
hód
; m©ch; m©ch = m©ch->
√xt
)

763 
ªt
 = (*
m©ch
->
cmd
->
func_≠∂y
Ë(m©ch->
vÆue
, 
¥efix
,

764 
ty≥
, 
obje˘
);

765 i‡(
ªt
 !
RMAP_MATCH
)

766  
ªt
;

769  
ªt
;

770 
	}
}

773 
rouã_m≠_ªsu…_t


774 
	$rouã_m≠_≠∂y
 (
rouã_m≠
 *
m≠
, 
¥efix
 *prefix,

775 
rouã_m≠_obje˘_t
 
ty≥
, *
obje˘
)

777 
ªcursi⁄
 = 0;

778 
ªt
 = 0;

779 
rouã_m≠_ödex
 *
ödex
;

780 
rouã_m≠_ruÀ
 *
£t
;

782 i‡(
ªcursi⁄
 > 
RMAP_RECURSION_LIMIT
)

784 
	`zlog
 (
NULL
, 
LOG_WARNING
,

786 
RMAP_RECURSION_LIMIT
);

787 
ªcursi⁄
 = 0;

788  
RMAP_DENYMATCH
;

791 i‡(
m≠
 =
NULL
)

792  
RMAP_DENYMATCH
;

794 
ödex
 = 
m≠
->
hód
; index; index = index->
√xt
)

797 
ªt
 = 
	`rouã_m≠_≠∂y_m©ch
 (&
ödex
->
m©ch_li°
, 
¥efix
, 
ty≥
, 
obje˘
);

800 i‡(
ªt
 =
RMAP_NOMATCH
)

803 i‡(
ªt
 =
RMAP_MATCH
)

805 i‡(
ödex
->
ty≥
 =
RMAP_PERMIT
)

809 
£t
 = 
ödex
->
£t_li°
.
hód
; së; së = së->
√xt
)

810 
ªt
 = (*
£t
->
cmd
->
func_≠∂y
Ë(£t->
vÆue
, 
¥efix
,

811 
ty≥
, 
obje˘
);

814 i‡(
ödex
->
√xåm
)

816 
rouã_m≠
 *
√xåm
 =

817 
	`rouã_m≠_lookup_by_«me
 (
ödex
->
√xåm
);

819 i‡(
√xåm
)

821 
ªcursi⁄
++;

822 
ªt
 = 
	`rouã_m≠_≠∂y
 (
√xåm
, 
¥efix
, 
ty≥
, 
obje˘
);

823 
ªcursi⁄
--;

827 i‡(
ªt
 =
RMAP_DENYMATCH
)

828  
ªt
;

831 
ödex
->
exôpﬁicy
)

833 
RMAP_EXIT
:

834  
ªt
;

835 
RMAP_NEXT
:

837 
RMAP_GOTO
:

840 
rouã_m≠_ödex
 *
√xt
 = 
ödex
->next;

841 
√xçªf
 = 
ödex
->nextpref;

843 
√xt
 &&Çext->
¥ef
 < 
√xçªf
)

845 
ödex
 = 
√xt
;

846 
√xt
 =Çext->next;

848 i‡(
√xt
 =
NULL
)

851  
ªt
;

856 i‡(
ödex
->
ty≥
 =
RMAP_DENY
)

859  
RMAP_DENYMATCH
;

864  
RMAP_DENYMATCH
;

865 
	}
}

868 
rouã_m≠_add_hook
 ((*
func
) (const *))

870 
rouã_m≠_ma°î
.
add_hook
 = 
func
;

871 
	}
}

874 
rouã_m≠_dñëe_hook
 ((*
func
) (const *))

876 
rouã_m≠_ma°î
.
dñëe_hook
 = 
func
;

877 
	}
}

880 
rouã_m≠_evít_hook
 ((*
func
Ë(
rouã_m≠_evít_t
, const *))

882 
rouã_m≠_ma°î
.
evít_hook
 = 
func
;

883 
	}
}

886 
	$rouã_m≠_öô
 ()

889 
rouã_m©ch_vec
 = 
	`ve˘‹_öô
 (1);

890 
rouã_£t_vec
 = 
	`ve˘‹_öô
 (1);

891 
	}
}

894 
	$rouã_m≠_föish
 ()

896 
	`ve˘‹_‰ì
 (
rouã_m©ch_vec
);

897 
rouã_m©ch_vec
 = 
NULL
;

898 
	`ve˘‹_‰ì
 (
rouã_£t_vec
);

899 
rouã_£t_vec
 = 
NULL
;

900 
	}
}

903 
DEFUN
 (
rouã_m≠
,

904 
rouã_m≠_cmd
,

912 
	g≥rmô
;

913 
	g¥ef
;

914 
rouã_m≠
 *
	gm≠
;

915 
rouã_m≠_ödex
 *
	gödex
;

916 *
	gíd±r
 = 
NULL
;

919 i‡(
°∫cmp
 (
¨gv
[1], "≥rmô", 
°æí
 (argv[1])) == 0)

920 
≥rmô
 = 
RMAP_PERMIT
;

921 i‡(
°∫cmp
 (
¨gv
[1], "díy", 
°æí
 (argv[1])) == 0)

922 
≥rmô
 = 
RMAP_DENY
;

925 
vty_out
 (
vty
, "thêthúd fõld mu° bê[≥rmô|díy]%s", 
VTY_NEWLINE
);

926  
	gCMD_WARNING
;

930 
	g¥ef
 = 
°πoul
 (
¨gv
[2], &
íd±r
, 10);

931 i‡(
	g¥ef
 =
ULONG_MAX
 || *
íd±r
 != '\0')

933 
vty_out
 (
vty
, "the fourth field must beÖositive integer%s",

934 
VTY_NEWLINE
);

935  
	gCMD_WARNING
;

937 i‡(
	g¥ef
 =0 || 
¥ef
 > 65535)

939 
vty_out
 (
vty
, "thêfouπh fõld mu° bê<1-65535>%s", 
VTY_NEWLINE
);

940  
	gCMD_WARNING
;

944 
	gm≠
 = 
rouã_m≠_gë
 (
¨gv
[0]);

945 
	gödex
 = 
rouã_m≠_ödex_gë
 (
m≠
, 
≥rmô
, 
¥ef
);

947 
	gvty
->
	gödex
 = 
ödex
;

948 
	gvty
->
	gnode
 = 
RMAP_NODE
;

949  
	gCMD_SUCCESS
;

952 
DEFUN
 (
no_rouã_m≠_Æl
,

953 
no_rouã_m≠_Æl_cmd
,

955 
NO_STR


959 
rouã_m≠
 *
	gm≠
;

961 
	gm≠
 = 
rouã_m≠_lookup_by_«me
 (
¨gv
[0]);

962 i‡(
	gm≠
 =
NULL
)

964 
vty_out
 (
vty
, "%% CouldÇot findÑoute-map %s%s",

965 
¨gv
[0], 
VTY_NEWLINE
);

966  
	gCMD_WARNING
;

969 
rouã_m≠_dñëe
 (
m≠
);

971  
	gCMD_SUCCESS
;

974 
DEFUN
 (
no_rouã_m≠
,

975 
no_rouã_m≠_cmd
,

977 
NO_STR


984 
	g≥rmô
;

985 
	g¥ef
;

986 
rouã_m≠
 *
	gm≠
;

987 
rouã_m≠_ödex
 *
	gödex
;

988 *
	gíd±r
 = 
NULL
;

991 i‡(
°∫cmp
 (
¨gv
[1], "≥rmô", 
°æí
 (argv[1])) == 0)

992 
≥rmô
 = 
RMAP_PERMIT
;

993 i‡(
°∫cmp
 (
¨gv
[1], "díy", 
°æí
 (argv[1])) == 0)

994 
≥rmô
 = 
RMAP_DENY
;

997 
vty_out
 (
vty
, "thêthúd fõld mu° bê[≥rmô|díy]%s", 
VTY_NEWLINE
);

998  
	gCMD_WARNING
;

1002 
	g¥ef
 = 
°πoul
 (
¨gv
[2], &
íd±r
, 10);

1003 i‡(
	g¥ef
 =
ULONG_MAX
 || *
íd±r
 != '\0')

1005 
vty_out
 (
vty
, "the fourth field must beÖositive integer%s",

1006 
VTY_NEWLINE
);

1007  
	gCMD_WARNING
;

1009 i‡(
	g¥ef
 =0 || 
¥ef
 > 65535)

1011 
vty_out
 (
vty
, "thêfouπh fõld mu° bê<1-65535>%s", 
VTY_NEWLINE
);

1012  
	gCMD_WARNING
;

1016 
	gm≠
 = 
rouã_m≠_lookup_by_«me
 (
¨gv
[0]);

1017 i‡(
	gm≠
 =
NULL
)

1019 
vty_out
 (
vty
, "%% CouldÇot findÑoute-map %s%s",

1020 
¨gv
[0], 
VTY_NEWLINE
);

1021  
	gCMD_WARNING
;

1025 
	gödex
 = 
rouã_m≠_ödex_lookup
 (
m≠
, 
≥rmô
, 
¥ef
);

1026 i‡(
	gödex
 =
NULL
)

1028 
vty_out
 (
vty
, "%% CouldÇot findÑoute-mapÉntry %s %s%s",

1029 
¨gv
[0],árgv[2], 
VTY_NEWLINE
);

1030  
	gCMD_WARNING
;

1034 
rouã_m≠_ödex_dñëe
 (
ödex
, 1);

1037 i‡(
rouã_m≠_em±y
 (
m≠
))

1038 
rouã_m≠_dñëe
 (
m≠
);

1040  
	gCMD_SUCCESS
;

1043 
DEFUN
 (
rm≠_⁄m©ch_√xt
,

1044 
rm≠_⁄m©ch_√xt_cmd
,

1049 
rouã_m≠_ödex
 *
	gödex
;

1051 
	gödex
 = 
vty
->
ödex
;

1053 i‡(
	gödex
)

1054 
	gödex
->
	gexôpﬁicy
 = 
RMAP_NEXT
;

1056  
	gCMD_SUCCESS
;

1059 
DEFUN
 (
no_rm≠_⁄m©ch_√xt
,

1060 
no_rm≠_⁄m©ch_√xt_cmd
,

1062 
NO_STR


1066 
rouã_m≠_ödex
 *
	gödex
;

1068 
	gödex
 = 
vty
->
ödex
;

1070 i‡(
	gödex
)

1071 
	gödex
->
	gexôpﬁicy
 = 
RMAP_EXIT
;

1073  
	gCMD_SUCCESS
;

1076 
DEFUN
 (
rm≠_⁄m©ch_gŸo
,

1077 
rm≠_⁄m©ch_gŸo_cmd
,

1083 
rouã_m≠_ödex
 *
	gödex
 = 
vty
->
ödex
;

1084 
	gd
 = 0;

1086 i‡(
	gödex
)

1088 i‡(
	g¨gc
 =1 && 
¨gv
[0])

1089 
VTY_GET_INTEGER_RANGE
("rouã-m≠ index", 
d
, 
¨gv
[0], 1, 65536);

1091 
	gd
 = 
ödex
->
¥ef
 + 1;

1093 i‡(
	gd
 <
ödex
->
¥ef
)

1096 
vty_out
 (
vty
, "can't jump backwards inÑoute-maps%s",

1097 
VTY_NEWLINE
);

1098  
	gCMD_WARNING
;

1102 
	gödex
->
	gexôpﬁicy
 = 
RMAP_GOTO
;

1103 
	gödex
->
	g√xçªf
 = 
d
;

1106  
	gCMD_SUCCESS
;

1109 
DEFUN
 (
no_rm≠_⁄m©ch_gŸo
,

1110 
no_rm≠_⁄m©ch_gŸo_cmd
,

1112 
NO_STR


1116 
rouã_m≠_ödex
 *
	gödex
;

1118 
	gödex
 = 
vty
->
ödex
;

1120 i‡(
	gödex
)

1121 
	gödex
->
	gexôpﬁicy
 = 
RMAP_EXIT
;

1123  
	gCMD_SUCCESS
;

1127 
ALIAS
 (
rm≠_⁄m©ch_gŸo
,

1128 
rm≠_c⁄töue_cmd
,

1132 
ALIAS
 (
no_rm≠_⁄m©ch_gŸo
,

1133 
no_rm≠_c⁄töue_cmd
,

1135 
NO_STR


1139 
ALIAS
 (
rm≠_⁄m©ch_gŸo
,

1140 
rm≠_c⁄töue_£q_cmd
,

1145 
ALIAS
 (
no_rm≠_⁄m©ch_gŸo
,

1146 
no_rm≠_c⁄töue_£q
,

1148 
NO_STR


1152 
DEFUN
 (
rm≠_show_«me
,

1153 
rm≠_show_«me_cmd
,

1155 
SHOW_STR


1159 c⁄° *
	g«me
 = 
NULL
;

1160 i‡(
	g¨gc
)

1161 
	g«me
 = 
¨gv
[0];

1162  
vty_show_rouã_m≠
 (
vty
, 
«me
);

1165 
ALIAS
 (
rm≠_⁄m©ch_gŸo
,

1166 
rm≠_c⁄töue_ödex_cmd
,

1171 
DEFUN
 (
rm≠_ˇŒ
,

1172 
rm≠_ˇŒ_cmd
,

1177 
rouã_m≠_ödex
 *
	gödex
;

1179 
	gödex
 = 
vty
->
ödex
;

1180 i‡(
	gödex
)

1182 i‡(
	gödex
->
	g√xåm
)

1183 
XFREE
 (
MTYPE_ROUTE_MAP_NAME
, 
ödex
->
√xåm
);

1184 
	gödex
->
	g√xåm
 = 
XSTRDUP
 (
MTYPE_ROUTE_MAP_NAME
, 
¨gv
[0]);

1186  
	gCMD_SUCCESS
;

1189 
DEFUN
 (
no_rm≠_ˇŒ
,

1190 
no_rm≠_ˇŒ_cmd
,

1192 
NO_STR


1195 
rouã_m≠_ödex
 *
	gödex
;

1197 
	gödex
 = 
vty
->
ödex
;

1199 i‡(
	gödex
->
	g√xåm
)

1201 
XFREE
 (
MTYPE_ROUTE_MAP_NAME
, 
ödex
->
√xåm
);

1202 
	gödex
->
	g√xåm
 = 
NULL
;

1205  
	gCMD_SUCCESS
;

1208 
DEFUN
 (
rm≠_des¸ùti⁄
,

1209 
rm≠_des¸ùti⁄_cmd
,

1214 
rouã_m≠_ödex
 *
	gödex
;

1216 
	gödex
 = 
vty
->
ödex
;

1217 i‡(
	gödex
)

1219 i‡(
	gödex
->
	gdes¸ùti⁄
)

1220 
XFREE
 (
MTYPE_TMP
, 
ödex
->
des¸ùti⁄
);

1221 
	gödex
->
	gdes¸ùti⁄
 = 
¨gv_c⁄ˇt
 (
¨gv
, 
¨gc
, 0);

1223  
	gCMD_SUCCESS
;

1226 
DEFUN
 (
no_rm≠_des¸ùti⁄
,

1227 
no_rm≠_des¸ùti⁄_cmd
,

1229 
NO_STR


1232 
rouã_m≠_ödex
 *
	gödex
;

1234 
	gödex
 = 
vty
->
ödex
;

1235 i‡(
	gödex
)

1237 i‡(
	gödex
->
	gdes¸ùti⁄
)

1238 
XFREE
 (
MTYPE_TMP
, 
ödex
->
des¸ùti⁄
);

1239 
	gödex
->
	gdes¸ùti⁄
 = 
NULL
;

1241  
	gCMD_SUCCESS
;

1246 
	$rouã_m≠_c⁄fig_wrôe
 (
vty
 *vty)

1248 
rouã_m≠
 *
m≠
;

1249 
rouã_m≠_ödex
 *
ödex
;

1250 
rouã_m≠_ruÀ
 *
ruÀ
;

1251 
fú°
 = 1;

1252 
wrôe
 = 0;

1254 
m≠
 = 
rouã_m≠_ma°î
.
hód
; m≠; m≠ = m≠->
√xt
)

1255 
ödex
 = 
m≠
->
hód
; index; index = index->
√xt
)

1257 i‡(!
fú°
)

1258 
	`vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

1260 
fú°
 = 0;

1262 
	`vty_out
 (
vty
, "route-map %s %s %d%s",

1263 
m≠
->
«me
,

1264 
	`rouã_m≠_ty≥_°r
 (
ödex
->
ty≥
),

1265 
ödex
->
¥ef
, 
VTY_NEWLINE
);

1267 i‡(
ödex
->
des¸ùti⁄
)

1268 
	`vty_out
 (
vty
, " des¸ùti⁄ %s%s", 
ödex
->
des¸ùti⁄
, 
VTY_NEWLINE
);

1270 
ruÀ
 = 
ödex
->
m©ch_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

1271 
	`vty_out
 (
vty
, " m©ch %†%s%s", 
ruÀ
->
cmd
->
°r
,

1272 
ruÀ
->
ruÀ_°r
 ?Ñule->rule_str : "",

1273 
VTY_NEWLINE
);

1275 
ruÀ
 = 
ödex
->
£t_li°
.
hód
;ÑuÀ;ÑuÀ =ÑuÀ->
√xt
)

1276 
	`vty_out
 (
vty
, " së %†%s%s", 
ruÀ
->
cmd
->
°r
,

1277 
ruÀ
->
ruÀ_°r
 ?Ñule->rule_str : "",

1278 
VTY_NEWLINE
);

1279 i‡(
ödex
->
√xåm
)

1280 
	`vty_out
 (
vty
, " cÆ»%s%s", 
ödex
->
√xåm
, 
VTY_NEWLINE
);

1281 i‡(
ödex
->
exôpﬁicy
 =
RMAP_GOTO
)

1282 
	`vty_out
 (
vty
, " on-m©ch gŸÿ%d%s", 
ödex
->
√xçªf
, 
VTY_NEWLINE
);

1283 i‡(
ödex
->
exôpﬁicy
 =
RMAP_NEXT
)

1284 
	`vty_out
 (
vty
," on-m©chÇext%s", 
VTY_NEWLINE
);

1286 
wrôe
++;

1288  
wrôe
;

1289 
	}
}

1292 
cmd_node
 
	grm≠_node
 =

1294 
RMAP_NODE
,

1301 
	$rouã_m≠_öô_vty
 ()

1304 
	`ö°Æl_node
 (&
rm≠_node
, 
rouã_m≠_c⁄fig_wrôe
);

1307 
	`ö°Æl_deÁu…
 (
RMAP_NODE
);

1308 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
rouã_m≠_cmd
);

1309 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_rouã_m≠_cmd
);

1310 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_rouã_m≠_Æl_cmd
);

1313 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rouã_m≠_cmd
);

1314 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_⁄m©ch_√xt_cmd
);

1315 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
no_rm≠_⁄m©ch_√xt_cmd
);

1316 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_⁄m©ch_gŸo_cmd
);

1317 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
no_rm≠_⁄m©ch_gŸo_cmd
);

1320 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_c⁄töue_cmd
);

1321 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
no_rm≠_c⁄töue_cmd
);

1322 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_c⁄töue_ödex_cmd
);

1325 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_ˇŒ_cmd
);

1326 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
no_rm≠_ˇŒ_cmd
);

1329 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
rm≠_des¸ùti⁄_cmd
);

1330 
	`ö°Æl_ñemít
 (
RMAP_NODE
, &
no_rm≠_des¸ùti⁄_cmd
);

1333 
	`ö°Æl_ñemít
 (
ENABLE_NODE
, &
rm≠_show_«me_cmd
);

1334 
	}
}

	@common-libs/3rd-party/quagga-lib/src/sigevent.c

22 
	~<zebø.h
>

23 
	~<sigevít.h
>

24 
	~<log.h
>

26 #ifde‡
SA_SIGINFO


27 #ifde‡
HAVE_UCONTEXT_H


28 #ifde‡
GNU_LINUX


30 #i‚de‡
__USE_GNU


31 
	#__USE_GNU


	)

34 
	~<uc⁄ãxt.h
>

40 
	squagga_sigevít_ma°î_t


42 
thªad
 *
	mt
;

44 
quagga_sig«l_t
 *
	msig«ls
;

45 
	msigc
;

47 vﬁ©ûê
sig_©omic_t
 
	mˇught
;

48 } 
	gsigma°î
;

54 
	$quagga_sig«l_h™dÀr
 (
signo
)

56 
i
;

57 
quagga_sig«l_t
 *
sig
;

59 
i
 = 0; i < 
sigma°î
.
sigc
; i++)

61 
sig
 = &(
sigma°î
.
sig«ls
[
i
]);

63 i‡(
sig
->
sig«l
 =
signo
)

64 
sig
->
ˇught
 = 1;

67 
sigma°î
.
ˇught
 = 1;

68 
	}
}

72 
	$quagga_sigevít_¥o˚ss
 ()

74 
quagga_sig«l_t
 *
sig
;

75 
i
;

76 #ifde‡
SIGEVENT_BLOCK_SIGNALS


78 
sig£t_t
 
√wmask
, 
ﬁdmask
;

85 
	`sigfûl£t
 (&
√wmask
);

86 
	`sigdñ£t
 (&
√wmask
, 
SIGTRAP
);

87 
	`sigdñ£t
 (&
√wmask
, 
SIGKILL
);

89 i‡–(
	`sig¥ocmask
 (
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
)) < 0)

91 
	`zlog_îr
 ("quagga_signal_timer: couldnt block signals!");

96 i‡(
sigma°î
.
ˇught
 > 0)

98 
sigma°î
.
ˇught
 = 0;

103 
i
 = 0; i < 
sigma°î
.
sigc
; i++)

105 
sig
 = &(
sigma°î
.
sig«ls
[
i
]);

107 i‡(
sig
->
ˇught
 > 0)

109 
sig
->
ˇught
 = 0;

110 
sig
->
	`h™dÀr
 ();

115 #ifde‡
SIGEVENT_BLOCK_SIGNALS


116 i‡–
	`sig¥ocmask
 (
SIG_UNBLOCK
, &
ﬁdmask
, 
NULL
) < 0 );

121 
	}
}

123 #ifde‡
SIGEVENT_SCHEDULE_THREAD


126 
	$quagga_sig«l_timî
 (
thªad
 *
t
)

128 
quagga_sigevít_ma°î_t
 *
sigm
;

129 
quagga_sig«l_t
 *
sig
;

130 
i
;

132 
sigm
 = 
	`THREAD_ARG
 (
t
);

133 
sigm
->
t
 = 
	`thªad_add_timî
 (sigm->t->
ma°î
, 
quagga_sig«l_timî
, &
sigma°î
,

134 
QUAGGA_SIGNAL_TIMER_INTERVAL
);

135  
	`quagga_sigevít_¥o˚ss
 ();

136 
	}
}

142 
	$sig«l_£t
 (
signo
)

144 
ªt
;

145 
siga˘i⁄
 
sig
;

146 
siga˘i⁄
 
osig
;

148 
sig
.
ß_h™dÀr
 = &
quagga_sig«l_h™dÀr
;

149 
	`sigfûl£t
 (&
sig
.
ß_mask
);

150 
sig
.
ß_Êags
 = 0;

151 i‡(
signo
 =
SIGALRM
) {

152 #ifde‡
SA_INTERRUPT


153 
sig
.
ß_Êags
 |
SA_INTERRUPT
;

156 #ifde‡
SA_RESTART


157 
sig
.
ß_Êags
 |
SA_RESTART
;

161 
ªt
 = 
	`siga˘i⁄
 (
signo
, &
sig
, &
osig
);

162 i‡(
ªt
 < 0)

163  
ªt
;

166 
	}
}

168 #ifde‡
SA_SIGINFO


173 
	$¥ogøm_cou¡î
(*
c⁄ãxt
)

175 #ifde‡
HAVE_UCONTEXT_H


176 #ifde‡
GNU_LINUX


177 #ifde‡
REG_EIP


178 i‡(
c⁄ãxt
)

179  (*)(((
uc⁄ãxt_t
 *)
c⁄ãxt
)->
uc_mc⁄ãxt
.
gªgs
[
REG_EIP
]);

183  
NULL
;

184 
	}
}

188 
__©åibuã__
 ((
n‹ëu∫
))

189 
exô_h™dÀr
(
signo


190 #ifde‡
SA_SIGINFO


191 , 
sigöfo_t
 *
sigöfo
, *
c⁄ãxt


195 
zlog_sig«l
(
signo
, "exiting..."

196 #ifde‡
SA_SIGINFO


197 , 
sigöfo
, 
¥ogøm_cou¡î
(
c⁄ãxt
)

200 
_exô
(128+
signo
);

203 
__©åibuã__
 ((
n‹ëu∫
))

204 
c‹e_h™dÀr
(
signo


205 #ifde‡
SA_SIGINFO


206 , 
sigöfo_t
 *
sigöfo
, *
c⁄ãxt


210 
zlog_sig«l
(
signo
, "aborting..."

211 #ifde‡
SA_SIGINFO


212 , 
sigöfo
, 
¥ogøm_cou¡î
(
c⁄ãxt
)

215 
ab‹t
();

219 
	$å≠_deÁu…_sig«ls
()

221 c⁄° 
c‹e_sig«ls
[] = {

222 
SIGQUIT
,

223 
SIGILL
,

224 #ifde‡
SIGEMT


225 
SIGEMT
,

227 
SIGFPE
,

228 
SIGBUS
,

229 
SIGSEGV
,

230 #ifde‡
SIGSYS


231 
SIGSYS
,

233 #ifde‡
SIGXCPU


234 
SIGXCPU
,

236 #ifde‡
SIGXFSZ


237 
SIGXFSZ
,

240 c⁄° 
exô_sig«ls
[] = {

241 
SIGHUP
,

242 
SIGINT
,

243 
SIGALRM
,

244 
SIGTERM
,

245 
SIGUSR1
,

246 
SIGUSR2
,

247 #ifde‡
SIGPOLL


248 
SIGPOLL
,

250 #ifde‡
SIGVTALRM


251 
SIGVTALRM
,

253 #ifde‡
SIGSTKFLT


254 
SIGSTKFLT
,

257 c⁄° 
ign‹e_sig«ls
[] = {

258 
SIGPIPE
,

261 c⁄° *
sigs
;

262 
u_öt
 
nsigs
;

263 (*
h™dÀr
)(
signo


264 #ifde‡
SA_SIGINFO


265 , 
sigöfo_t
 *
öfo
, *
c⁄ãxt


268 } 
sigm≠
[] = {

269 { 
c‹e_sig«ls
, (c‹e_sig«ls)/(c‹e_sig«ls[0]), 
c‹e_h™dÀr
},

270 { 
exô_sig«ls
, ”xô_sig«ls)/”xô_sig«ls[0]), 
exô_h™dÀr
},

271 { 
ign‹e_sig«ls
, (ign‹e_sig«ls)/(ign‹e_sig«ls[0]), 
NULL
},

273 
u_öt
 
i
;

275 
i
 = 0; i < (
sigm≠
)/(sigmap[0]); i++)

277 
u_öt
 
j
;

279 
j
 = 0; j < 
sigm≠
[
i
].
nsigs
; j++)

281 
siga˘i⁄
 
ﬂ˘
;

282 i‡((
	`siga˘i⁄
(
sigm≠
[
i
].
sigs
[
j
],
NULL
,&
ﬂ˘
) == 0) &&

283 (
ﬂ˘
.
ß_h™dÀr
 =
SIG_DFL
))

285 
siga˘i⁄
 
a˘
;

286 
	`sigfûl£t
 (&
a˘
.
ß_mask
);

287 i‡(
sigm≠
[
i
].
h™dÀr
 =
NULL
)

289 
a˘
.
ß_h™dÀr
 = 
SIG_IGN
;

290 
a˘
.
ß_Êags
 = 0;

294 #ifde‡
SA_SIGINFO


296 
a˘
.
ß_siga˘i⁄
 = 
sigm≠
[
i
].
h™dÀr
;

297 
a˘
.
ß_Êags
 = 
SA_SIGINFO
;

299 
a˘
.
ß_h™dÀr
 = 
sigm≠
[
i
].
h™dÀr
;

300 
a˘
.
ß_Êags
 = 0;

303 i‡(
	`siga˘i⁄
(
sigm≠
[
i
].
sigs
[
j
],&
a˘
,
NULL
) < 0)

304 
	`zlog_w¨n
("UnableÅo set signal handler for signal %d: %s",

305 
sigm≠
[
i
].
sigs
[
j
],
	`ß„_°ªº‹
(
î∫o
));

310 
	}
}

313 
	$q_sig«l_öô
 (
thªad_ma°î
 *
m
, 
sigc
,

314 
quagga_sig«l_t
 
sig«ls
[])

317 
i
 = 0;

318 
quagga_sig«l_t
 *
sig
;

322 
	`å≠_deÁu…_sig«ls
();

324 
i
 < 
sigc
)

326 
sig
 = &
sig«ls
[
i
];

327 i‡–
	`sig«l_£t
 (
sig
->
sig«l
) < 0 )

328 
	`exô
 (-1);

329 
i
++;

332 
sigma°î
.
sigc
 = sigc;

333 
sigma°î
.
sig«ls
 = signals;

335 #ifde‡
SIGEVENT_SCHEDULE_THREAD


336 
sigma°î
.
t
 =

337 
	`thªad_add_timî
 (
m
, 
quagga_sig«l_timî
, &
sigma°î
,

338 
QUAGGA_SIGNAL_TIMER_INTERVAL
);

340 
	}
}

	@common-libs/3rd-party/quagga-lib/src/smux.c

22 
	~<zebø.h
>

24 #ifde‡
HAVE_SNMP


25 #ifde‡
HAVE_NETSNMP


26 
	~<√t-¢mp/√t-¢mp-c⁄fig.h
>

27 
	~<√t-¢mp/√t-¢mp-ö˛udes.h
>

29 
	~<a¢1.h
>

30 
	~<¢mp.h
>

31 
	~<¢mp_im∂.h
>

34 
	~"log.h
"

35 
	~"thªad.h
"

36 
	~"lökli°.h
"

37 
	~"comm™d.h
"

38 
	~<lib/vîsi⁄.h
>

39 
	~"mem‹y.h
"

40 
	~"sockuni⁄.h
"

41 
	~"smux.h
"

43 
	#mö
(
A
,
B
Ë((AË< (BË? (AË: (B))

	)

45 
	esmux_evít
 {
	mSMUX_SCHEDULE
, 
	mSMUX_CONNECT
, 
	mSMUX_READ
};

47 
smux_evít
 (smux_event, );

51 
	gsmux_sock
 = -1;

54 
li°
 *
	gåìli°
;

57 
oid
 *
	gsmux_oid
 = 
NULL
;

58 
size_t
 
	gsmux_oid_Àn
;

61 *
	gsmux_∑sswd
 = 
NULL
;

64 
thªad
 *
	gsmux_ªad_thªad
;

67 
thªad
 *
	gsmux_c⁄√˘_thªad
;

70 
	gdebug_smux
 = 0;

73 
	gÁû
 = 0;

76 
cmd_node
 
	gsmux_node
 =

78 
SMUX_NODE
,

83 
thªad_ma°î
 *
	gma°î
;

86 
	$oid_c›y
 (*
de°
, c⁄° *
§c
, 
size_t
 
size
)

88  
	`mem˝y
 (
de°
, 
§c
, 
size
 *  (
oid
));

89 
	}
}

92 
	$oid2ö_addr
 (
oid
 oid[], 
Àn
, 
ö_addr
 *
addr
)

94 
i
;

95 
u_ch¨
 *
≤t
;

97 i‡(
Àn
 == 0)

100 
≤t
 = (
u_ch¨
 *Ë
addr
;

102 
i
 = 0; i < 
Àn
; i++)

103 *
≤t
++ = 
oid
[
i
];

104 
	}
}

107 
	$oid_c›y_addr
 (
oid
 oid[], 
ö_addr
 *
addr
, 
Àn
)

109 
i
;

110 
u_ch¨
 *
≤t
;

112 i‡(
Àn
 == 0)

115 
≤t
 = (
u_ch¨
 *Ë
addr
;

117 
i
 = 0; i < 
Àn
; i++)

118 
oid
[
i
] = *
≤t
++;

119 
	}
}

122 
	$oid_com∑ª
 (
oid
 *
o1
, 
o1_Àn
, oid *
o2
, 
o2_Àn
)

124 
i
;

126 
i
 = 0; i < 
	`mö
 (
o1_Àn
, 
o2_Àn
); i++)

128 i‡(
o1
[
i
] < 
o2
[i])

130 i‡(
o1
[
i
] > 
o2
[i])

133 i‡(
o1_Àn
 < 
o2_Àn
)

135 i‡(
o1_Àn
 > 
o2_Àn
)

139 
	}
}

142 
	$oid_com∑ª_∑π
 (
oid
 *
o1
, 
o1_Àn
, oid *
o2
, 
o2_Àn
)

144 
i
;

146 
i
 = 0; i < 
	`mö
 (
o1_Àn
, 
o2_Àn
); i++)

148 i‡(
o1
[
i
] < 
o2
[i])

150 i‡(
o1
[
i
] > 
o2
[i])

153 i‡(
o1_Àn
 < 
o2_Àn
)

157 
	}
}

160 
	$smux_oid_dump
 (c⁄° *
¥efix
, c⁄° 
oid
 *oid, 
size_t
 
oid_Àn
)

162 
i
;

163 
fú°
 = 1;

164 
buf
[
MAX_OID_LEN
 * 3];

166 
buf
[0] = '\0';

168 
i
 = 0; i < 
oid_Àn
; i++)

170 
	`•rötf
 (
buf
 + 
	`°æí
 (buf), "%s%d", 
fú°
 ? "" : ".", (Ë
oid
[
i
]);

171 
fú°
 = 0;

173 
	`zlog_debug
 ("%s: %s", 
¥efix
, 
buf
);

174 
	}
}

177 
	$smux_sockë
 ()

179 
ªt
;

180 #ifde‡
HAVE_IPV6


181 
addröfo
 
höts
, *
ªs0
, *
ªs
;

182 
gai
;

184 
sockaddr_ö
 
£rv
;

185 
£rvít
 *
•
;

187 
sock
 = 0;

189 #ifde‡
HAVE_IPV6


190 
	`mem£t
(&
höts
, 0, (hints));

191 
höts
.
ai_Ámûy
 = 
PF_UNSPEC
;

192 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

193 
gai
 = 
	`gëaddröfo
(
NULL
, "smux", &
höts
, &
ªs0
);

194 i‡(
gai
 =
EAI_SERVICE
)

196 
£rvbuf
[
NI_MAXSERV
];

197 
	`•rötf
(
£rvbuf
,"%d",
SMUX_PORT_DEFAULT
);

198 
£rvbuf
[ (servbuf) - 1] = '\0';

199 
gai
 = 
	`gëaddröfo
(
NULL
, 
£rvbuf
, &
höts
, &
ªs0
);

201 i‡(
gai
)

203 
	`zlog_w¨n
("CannotÜocateÜoopback service smux");

206 
ªs
=
ªs0
;Ñes;ÑesÙes->
ai_√xt
)

208 i‡(
ªs
->
ai_Ámûy
 !
AF_INET


209 #ifde‡
HAVE_IPV6


210 && 
ªs
->
ai_Ámûy
 !
AF_INET6


215 
sock
 = 
	`sockë
(
ªs
->
ai_Ámûy
,Ñes->
ai_sockty≥
,Ñes->
ai_¥Ÿocﬁ
);

216 i‡(
sock
 < 0)

218 
	`sock›t_ªu£addr
 (
sock
);

219 
	`sock›t_ªu£p‹t
 (
sock
);

220 
ªt
 = 
	`c⁄√˘
 (
sock
, 
ªs
->
ai_addr
,Ñes->
ai_addæí
);

221 i‡(
ªt
 < 0)

223 
	`˛o£
(
sock
);

224 
sock
 = -1;

229 
	`‰ìaddröfo
(
ªs0
);

230 i‡(
sock
 < 0)

231 
	`zlog_w¨n
 ("Can't connectÅo SNMPágent with SMUX");

233 
sock
 = 
	`sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

234 i‡(
sock
 < 0)

236 
	`zlog_w¨n
 ("Can't make socket for SNMP");

240 
	`mem£t
 (&
£rv
, 0,  (
sockaddr_ö
));

241 
£rv
.
sö_Ámûy
 = 
AF_INET
;

242 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


243 
£rv
.
sö_Àn
 =  (
sockaddr_ö
);

246 
•
 = 
	`gë£rvby«me
 ("smux", "tcp");

247 i‡(
•
 !
NULL
)

248 
£rv
.
sö_p‹t
 = 
•
->
s_p‹t
;

250 
£rv
.
sö_p‹t
 = 
	`ht⁄s
 (
SMUX_PORT_DEFAULT
);

252 
£rv
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_LOOPBACK
);

254 
	`sock›t_ªu£addr
 (
sock
);

255 
	`sock›t_ªu£p‹t
 (
sock
);

257 
ªt
 = 
	`c⁄√˘
 (
sock
, (
sockaddr
 *Ë&
£rv
,  (
sockaddr_ö
));

258 i‡(
ªt
 < 0)

260 
	`˛o£
 (
sock
);

261 
smux_sock
 = -1;

262 
	`zlog_w¨n
 ("Can't connectÅo SNMPágent with SMUX");

266  
sock
;

267 
	}
}

270 
	$smux_gëª•_£nd
 (
oid
 
objid
[], 
size_t
 
objid_Àn
, 
ªqid
, 
îr°©
,

271 
îrödex
, 
u_ch¨
 
vÆ_ty≥
, *
¨g
, 
size_t
 
¨g_Àn
)

273 
ªt
;

274 
u_ch¨
 
buf
[
BUFSIZ
];

275 
u_ch¨
 *
±r
, *
h1
, *
h1e
, *
h2
, *
h2e
;

276 
size_t
 
Àn
, 
Àngth
;

278 
±r
 = 
buf
;

279 
Àn
 = 
BUFSIZ
;

280 
Àngth
 = 
Àn
;

282 i‡(
debug_smux
)

284 
	`zlog_debug
 ("SMUX GETRSP send");

285 
	`zlog_debug
 ("SMUX GETRSPÑeqid: %ld", 
ªqid
);

288 
h1
 = 
±r
;

290 
±r
 = 
	`a¢_buûd_£quí˚
 (±r, &
Àn
, (
u_ch¨
Ë
SMUX_GETRSP
, 0);

291 
h1e
 = 
±r
;

293 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

294 (
u_ch¨
Ë(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

295 &
ªqid
,  (reqid));

297 i‡(
debug_smux
)

298 
	`zlog_debug
 ("SMUX GETRSPÉº°©: %ld", 
îr°©
);

300 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

301 (
u_ch¨
Ë(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

302 &
îr°©
,  (errstat));

303 i‡(
debug_smux
)

304 
	`zlog_debug
 ("SMUX GETRSPÉºödex: %ld", 
îrödex
);

306 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

307 (
u_ch¨
Ë(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

308 &
îrödex
,  (errindex));

310 
h2
 = 
±r
;

312 
±r
 = 
	`a¢_buûd_£quí˚
 (±r, &
Àn
,

313 (
u_ch¨
)(
ASN_SEQUENCE
 | 
ASN_CONSTRUCTOR
),

315 
h2e
 = 
±r
;

317 
±r
 = 
	`¢mp_buûd_v¨_›
 (±r, 
objid
, &
objid_Àn
,

318 
vÆ_ty≥
, 
¨g_Àn
, 
¨g
, &
Àn
);

321 
	`a¢_buûd_£quí˚
(
h2
,&
Àngth
,(
u_ch¨
)(
ASN_SEQUENCE
|
ASN_CONSTRUCTOR
),
±r
-
h2e
);

324 
	`a¢_buûd_£quí˚
(
h1
,&
Àngth
,(
u_ch¨
)
SMUX_GETRSP
,
±r
-
h1e
);

326 i‡(
debug_smux
)

327 
	`zlog_debug
 ("SMUX gëª• síd: %td", (
±r
 - 
buf
));

329 
ªt
 = 
	`£nd
 (
smux_sock
, 
buf
, (
±r
 - buf), 0);

330 
	}
}

332 
u_ch¨
 *

333 
	$smux_v¨
 (
u_ch¨
 *
±r
, 
size_t
 
Àn
, 
oid
 
objid
[], size_à*
objid_Àn
,

334 
size_t
 *
v¨_vÆ_Àn
,

335 
u_ch¨
 *
v¨_vÆ_ty≥
,

336 **
v¨_vÆue
)

338 
u_ch¨
 
ty≥
;

339 
u_ch¨
 
vÆ_ty≥
;

340 
size_t
 
vÆ_Àn
;

341 
u_ch¨
 *
vÆ
;

343 i‡(
debug_smux
)

344 
	`zlog_debug
 ("SMUX v¨Ö¨£:Üí %zd", 
Àn
);

347 
±r
 = 
	`a¢_∑r£_hódî
 (±r, &
Àn
, &
ty≥
);

349 i‡(
debug_smux
)

351 
	`zlog_debug
 ("SMUX v¨Ö¨£:Åy≥ %dÜí %zd", 
ty≥
, 
Àn
);

352 
	`zlog_debug
 ("SMUX varÖarse:Åype must be %d",

353 (
ASN_SEQUENCE
 | 
ASN_CONSTRUCTOR
));

357 *
objid_Àn
 = 
MAX_OID_LEN
;

358 
±r
 = 
	`¢mp_∑r£_v¨_›
’å, 
objid
, 
objid_Àn
, &
vÆ_ty≥
,

359 &
vÆ_Àn
, &
vÆ
, &
Àn
);

361 i‡(
v¨_vÆ_Àn
)

362 *
v¨_vÆ_Àn
 = 
vÆ_Àn
;

364 i‡(
v¨_vÆue
)

365 *
v¨_vÆue
 = (*Ë
vÆ
;

367 i‡(
v¨_vÆ_ty≥
)

368 *
v¨_vÆ_ty≥
 = 
vÆ_ty≥
;

371 i‡(
debug_smux
)

372 
	`smux_oid_dump
 ("Reque° OID", 
objid
, *
objid_Àn
);

374 i‡(
debug_smux
)

375 
	`zlog_debug
 ("SMUX vÆ_ty≥: %d", 
vÆ_ty≥
);

378 i‡(
debug_smux
)

379 
vÆ_ty≥
)

381 
ASN_NULL
:

384 
	`zlog_debug
 ("ASN_NULL");

387 
ASN_INTEGER
:

388 
	`zlog_debug
 ("ASN_INTEGER");

390 
ASN_COUNTER
:

391 
ASN_GAUGE
:

392 
ASN_TIMETICKS
:

393 
ASN_UINTEGER
:

394 
	`zlog_debug
 ("ASN_COUNTER");

396 
ASN_COUNTER64
:

397 
	`zlog_debug
 ("ASN_COUNTER64");

399 
ASN_IPADDRESS
:

400 
	`zlog_debug
 ("ASN_IPADDRESS");

402 
ASN_OCTET_STR
:

403 
	`zlog_debug
 ("ASN_OCTET_STR");

405 
ASN_OPAQUE
:

406 
ASN_NSAP
:

407 
ASN_OBJECT_ID
:

408 
	`zlog_debug
 ("ASN_OPAQUE");

410 
SNMP_NOSUCHOBJECT
:

411 
	`zlog_debug
 ("SNMP_NOSUCHOBJECT");

413 
SNMP_NOSUCHINSTANCE
:

414 
	`zlog_debug
 ("SNMP_NOSUCHINSTANCE");

416 
SNMP_ENDOFMIBVIEW
:

417 
	`zlog_debug
 ("SNMP_ENDOFMIBVIEW");

419 
ASN_BIT_STR
:

420 
	`zlog_debug
 ("ASN_BIT_STR");

423 
	`zlog_debug
 ("UnknownÅype");

426  
±r
;

427 
	}
}

434 
	$smux_£t
 (
oid
 *
ªqid
, 
size_t
 *
ªqid_Àn
,

435 
u_ch¨
 
vÆ_ty≥
, *
vÆ
, 
size_t
 
vÆ_Àn
, 
a˘i⁄
)

437 
j
;

438 
subåì
 *subtree;

439 
v¨übÀ
 *
v
;

440 
subªsu…
;

441 
oid
 *
suffix
;

442 
size_t
 
suffix_Àn
;

443 
ªsu…
;

444 
u_ch¨
 *
°©P
 = 
NULL
;

445 
WrôeMëhod
 *
wrôe_mëhod
 = 
NULL
;

446 
li°node
 *
node
, *
¬ode
;

449 
	`ALL_LIST_ELEMENTS
 (
åìli°
, 
node
, 
¬ode
, 
subåì
))

451 
subªsu…
 = 
	`oid_com∑ª_∑π
 (
ªqid
, *
ªqid_Àn
,

452 
subåì
->
«me
, subåì->
«me_Àn
);

455 i‡(
subªsu…
 == 0)

458 
suffix
 = 
ªqid
 + 
subåì
->
«me_Àn
;

459 
suffix_Àn
 = *
ªqid_Àn
 - 
subåì
->
«me_Àn
;

460 
ªsu…
 = 
subªsu…
;

463 
j
 = 0; j < 
subåì
->
v¨übÀs_num
; j++)

465 
v
 = &
subåì
->
v¨übÀs
[
j
];

468 
ªsu…
 = 
	`oid_com∑ª_∑π
 (
suffix
, 
suffix_Àn
,

469 
v
->
«me
, v->
«mñí
);

472 i‡(
ªsu…
 == 0)

474 i‡(
debug_smux
)

475 
	`zlog_debug
 ("SMUX fun˘i⁄ cÆ»ödex i†%d", 
v
->
magic
);

477 
°©P
 = (*
v
->
födV¨
Ë(v, 
suffix
, &
suffix_Àn
, 1,

478 &
vÆ_Àn
, &
wrôe_mëhod
);

480 i‡(
wrôe_mëhod
)

482  (*
wrôe_mëhod
)(
a˘i⁄
, 
vÆ
, 
vÆ_ty≥
, 
vÆ_Àn
,

483 
°©P
, 
suffix
, 
suffix_Àn
, 
v
);

487  
SNMP_ERR_READONLY
;

493 i‡(
ªsu…
 < 0)

494  
SNMP_ERR_NOSUCHNAME
;

498  
SNMP_ERR_NOSUCHNAME
;

499 
	}
}

502 
	$smux_gë
 (
oid
 *
ªqid
, 
size_t
 *
ªqid_Àn
, 
exa˘
,

503 
u_ch¨
 *
vÆ_ty≥
,**
vÆ
, 
size_t
 *
vÆ_Àn
)

505 
j
;

506 
subåì
 *subtree;

507 
v¨übÀ
 *
v
;

508 
subªsu…
;

509 
oid
 *
suffix
;

510 
size_t
 
suffix_Àn
;

511 
ªsu…
;

512 
WrôeMëhod
 *
wrôe_mëhod
=
NULL
;

513 
li°node
 *
node
, *
¬ode
;

516 
	`ALL_LIST_ELEMENTS
 (
åìli°
, 
node
, 
¬ode
,
subåì
))

518 
subªsu…
 = 
	`oid_com∑ª_∑π
 (
ªqid
, *
ªqid_Àn
,

519 
subåì
->
«me
, subåì->
«me_Àn
);

522 i‡(
subªsu…
 == 0)

525 
suffix
 = 
ªqid
 + 
subåì
->
«me_Àn
;

526 
suffix_Àn
 = *
ªqid_Àn
 - 
subåì
->
«me_Àn
;

527 
ªsu…
 = 
subªsu…
;

530 
j
 = 0; j < 
subåì
->
v¨übÀs_num
; j++)

532 
v
 = &
subåì
->
v¨übÀs
[
j
];

535 
ªsu…
 = 
	`oid_com∑ª_∑π
 (
suffix
, 
suffix_Àn
,

536 
v
->
«me
, v->
«mñí
);

539 i‡(
ªsu…
 == 0)

541 i‡(
debug_smux
)

542 
	`zlog_debug
 ("SMUX fun˘i⁄ cÆ»ödex i†%d", 
v
->
magic
);

544 *
vÆ
 = (*
v
->
födV¨
Ë(v, 
suffix
, &
suffix_Àn
, 
exa˘
,

545 
vÆ_Àn
, &
wrôe_mëhod
);

548 i‡(*
vÆ
 =
NULL
)

549  
SNMP_NOSUCHINSTANCE
;

552 *
vÆ_ty≥
 = 
v
->
ty≥
;

559 i‡(
ªsu…
 < 0)

560  
SNMP_ERR_NOSUCHNAME
;

564  
SNMP_ERR_NOSUCHNAME
;

565 
	}
}

568 
	$smux_gë√xt
 (
oid
 *
ªqid
, 
size_t
 *
ªqid_Àn
, 
exa˘
,

569 
u_ch¨
 *
vÆ_ty≥
,**
vÆ
, 
size_t
 *
vÆ_Àn
)

571 
j
;

572 
oid
 
ßve
[
MAX_OID_LEN
];

573 
ßvñí
 = 0;

574 
subåì
 *subtree;

575 
v¨übÀ
 *
v
;

576 
subªsu…
;

577 
oid
 *
suffix
;

578 
size_t
 
suffix_Àn
;

579 
ªsu…
;

580 
WrôeMëhod
 *
wrôe_mëhod
=
NULL
;

581 
li°node
 *
node
, *
¬ode
;

585 
	`oid_c›y
 (
ßve
, 
ªqid
, *
ªqid_Àn
);

586 
ßvñí
 = *
ªqid_Àn
;

589 
	`ALL_LIST_ELEMENTS
 (
åìli°
, 
node
, 
¬ode
, 
subåì
))

591 
subªsu…
 = 
	`oid_com∑ª_∑π
 (
ªqid
, *
ªqid_Àn
,

592 
subåì
->
«me
, subåì->
«me_Àn
);

605 i‡(
subªsu…
 <= 0)

608 
suffix
 = 
ªqid
 + 
subåì
->
«me_Àn
;

609 
suffix_Àn
 = *
ªqid_Àn
 - 
subåì
->
«me_Àn
;

610 i‡(
subªsu…
 < 0)

612 
	`oid_c›y
(
ªqid
, 
subåì
->
«me
, subåì->
«me_Àn
);

613 *
ªqid_Àn
 = 
subåì
->
«me_Àn
;

615 
j
 = 0; j < 
subåì
->
v¨übÀs_num
; j++)

617 
ªsu…
 = 
subªsu…
;

618 
v
 = &
subåì
->
v¨übÀs
[
j
];

621 i‡(
ªsu…
 == 0)

622 
ªsu…
 = 
	`oid_com∑ª_∑π
 (
suffix
, 
suffix_Àn
,

623 
v
->
«me
, v->
«mñí
);

625 i‡(
ªsu…
 <= 0)

627 i‡(
debug_smux
)

628 
	`zlog_debug
 ("SMUX fun˘i⁄ cÆ»ödex i†%d", 
v
->
magic
);

629 if(
ªsu…
<0)

631 
	`oid_c›y
(
suffix
, 
v
->
«me
, v->
«mñí
);

632 
suffix_Àn
 = 
v
->
«mñí
;

634 *
vÆ
 = (*
v
->
födV¨
Ë(v, 
suffix
, &
suffix_Àn
, 
exa˘
,

635 
vÆ_Àn
, &
wrôe_mëhod
);

636 *
ªqid_Àn
 = 
suffix_Àn
 + 
subåì
->
«me_Àn
;

637 i‡(*
vÆ
)

639 *
vÆ_ty≥
 = 
v
->
ty≥
;

646 
	`mem˝y
 (
ªqid
, 
ßve
, 
ßvñí
 * (
oid
));

647 *
ªqid_Àn
 = 
ßvñí
;

649  
SNMP_ERR_NOSUCHNAME
;

650 
	}
}

653 
u_ch¨
 *

654 
	$smux_∑r£_gë_hódî
 (
u_ch¨
 *
±r
, 
size_t
 *
Àn
, *
ªqid
)

656 
u_ch¨
 
ty≥
;

657 
îr°©
;

658 
îrödex
;

661 
±r
 = 
	`a¢_∑r£_öt
 (±r, 
Àn
, &
ty≥
, 
ªqid
,  (*reqid));

663 i‡(
debug_smux
)

664 
	`zlog_debug
 ("SMUX GETÑeqid: %dÜí: %d", (Ë*
ªqid
, (Ë*
Àn
);

667 
±r
 = 
	`a¢_∑r£_öt
 (±r, 
Àn
, &
ty≥
, &
îr°©
,  (errstat));

669 i‡(
debug_smux
)

670 
	`zlog_debug
 ("SMUX GETÉº°© %ldÜí: %zd", 
îr°©
, *
Àn
);

673 
±r
 = 
	`a¢_∑r£_öt
 (±r, 
Àn
, &
ty≥
, &
îrödex
,  (errindex));

675 i‡(
debug_smux
)

676 
	`zlog_debug
 ("SMUX GETÉºödex %ldÜí: %zd", 
îrödex
, *
Àn
);

678  
±r
;

679 
	}
}

682 
	$smux_∑r£_£t
 (
u_ch¨
 *
±r
, 
size_t
 
Àn
, 
a˘i⁄
)

684 
ªqid
;

685 
oid
 oid[
MAX_OID_LEN
];

686 
size_t
 
oid_Àn
;

687 
u_ch¨
 
vÆ_ty≥
;

688 *
vÆ
;

689 
size_t
 
vÆ_Àn
;

690 
ªt
;

692 i‡(
debug_smux
)

693 
	`zlog_debug
 ("SMUX SET(%s) messageÖarse:Üen %zd",

694 (
RESERVE1
 =
a˘i⁄
Ë? "RESERVE1" : ((
FREE
 ==áction) ? "FREE" : "COMMIT"),

695 
Àn
);

698 
±r
 = 
	`smux_∑r£_gë_hódî
 (±r, &
Àn
, &
ªqid
);

701 
±r
 = 
	`smux_v¨
 (±r, 
Àn
, 
oid
, &
oid_Àn
, &
vÆ_Àn
, &
vÆ_ty≥
, &
vÆ
);

703 
ªt
 = 
	`smux_£t
 (
oid
, &
oid_Àn
, 
vÆ_ty≥
, 
vÆ
, 
vÆ_Àn
, 
a˘i⁄
);

704 i‡(
debug_smux
)

705 
	`zlog_debug
 ("SMUX SETÑë %d", 
ªt
);

708 i‡(
RESERVE1
 =
a˘i⁄
)

709 
	`smux_gëª•_£nd
 (
oid
, 
oid_Àn
, 
ªqid
, 
ªt
, 3, 
ASN_NULL
, 
NULL
, 0);

710 
	}
}

713 
	$smux_∑r£_gë
 (
u_ch¨
 *
±r
, 
size_t
 
Àn
, 
exa˘
)

715 
ªqid
;

716 
oid
 oid[
MAX_OID_LEN
];

717 
size_t
 
oid_Àn
;

718 
u_ch¨
 
vÆ_ty≥
;

719 *
vÆ
;

720 
size_t
 
vÆ_Àn
;

721 
ªt
;

723 i‡(
debug_smux
)

724 
	`zlog_debug
 ("SMUX GET mesßgê∑r£:Üí %zd", 
Àn
);

727 
±r
 = 
	`smux_∑r£_gë_hódî
 (±r, &
Àn
, &
ªqid
);

730 
±r
 = 
	`smux_v¨
 (±r, 
Àn
, 
oid
, &
oid_Àn
, 
NULL
, NULL, NULL);

733 i‡(
exa˘
)

734 
ªt
 = 
	`smux_gë
 (
oid
, &
oid_Àn
, 
exa˘
, &
vÆ_ty≥
, &
vÆ
, &
vÆ_Àn
);

736 
ªt
 = 
	`smux_gë√xt
 (
oid
, &
oid_Àn
, 
exa˘
, &
vÆ_ty≥
, &
vÆ
, &
vÆ_Àn
);

739 i‡(
ªt
 == 0)

740 
	`smux_gëª•_£nd
 (
oid
, 
oid_Àn
, 
ªqid
, 0, 0, 
vÆ_ty≥
, 
vÆ
, 
vÆ_Àn
);

742 
	`smux_gëª•_£nd
 (
oid
, 
oid_Àn
, 
ªqid
, 
ªt
, 3, 
ASN_NULL
, 
NULL
, 0);

743 
	}
}

747 
	$smux_∑r£_˛o£
 (
u_ch¨
 *
±r
, 
Àn
)

749 
ªas⁄
 = 0;

751 
Àn
--)

753 
ªas⁄
 = (ªas⁄ << 8Ë| (Ë*
±r
;

754 
±r
++;

756 
	`zlog_öfo
 ("SMUX_CLOSE wôhÑós⁄: %ld", 
ªas⁄
);

757 
	}
}

761 
	$smux_∑r£_º•
 (
u_ch¨
 *
±r
, 
size_t
 
Àn
)

763 
u_ch¨
 
vÆ
;

764 
îr°©
;

766 
±r
 = 
	`a¢_∑r£_öt
 (±r, &
Àn
, &
vÆ
, &
îr°©
,  (errstat));

768 i‡(
debug_smux
)

769 
	`zlog_debug
 ("SMUX_RRSP vÆue: %dÉº°©: %ld", 
vÆ
, 
îr°©
);

770 
	}
}

774 
	$smux_∑r£
 (
u_ch¨
 *
±r
, 
size_t
 
Àn
)

779 
u_ch¨
 
sout_ßve_buff
[
SMUXMAXPKTSIZE
];

780 
sout_ßve_Àn
 = 0;

782 
Àn_öcome
 = 
Àn
;

783 
u_ch¨
 
ty≥
;

784 
u_ch¨
 
rﬁlback
;

786 
rﬁlback
 = 
±r
[2];

788 
¥o˚ss_ª°
:

791 
±r
 = 
	`a¢_∑r£_hódî
 (±r, &
Àn
, &
ty≥
);

793 i‡(
debug_smux
)

794 
	`zlog_debug
 ("SMUX mesßgêª˚ivedÅy≥: %dÑe°Üí: %zd", 
ty≥
, 
Àn
);

796 
ty≥
)

798 
SMUX_OPEN
:

800 
	`zlog_w¨n
 ("SMUX_OPENÑeceived:Ñesetting connection.");

803 
SMUX_RREQ
:

805 
	`zlog_w¨n
 ("SMUX_RREQÑeceived:Ñesetting connection.");

808 
SMUX_SOUT
:

810 i‡(
debug_smux
)

811 
	`zlog_debug
 ("SMUX_SOUT(%s)", 
rﬁlback
 ? "rollback" : "commit");

813 i‡(
sout_ßve_Àn
 > 0)

815 
	`smux_∑r£_£t
 (
sout_ßve_buff
, 
sout_ßve_Àn
, 
rﬁlback
 ? 
FREE
 : 
COMMIT
);

816 
sout_ßve_Àn
 = 0;

819 
	`zlog_w¨n
 ("SMUX_SOUT sout_ßve_Àn=%d - invÆid", (Ë
sout_ßve_Àn
);

821 i‡(
Àn_öcome
 > 3)

833 
±r
++;

834 
Àn
 = 
Àn_öcome
 - 3;

835 
¥o˚ss_ª°
;

838 
SMUX_GETRSP
:

840 
	`zlog_w¨n
 ("SMUX_GETRSPÑeceived:Ñesetting connection.");

843 
SMUX_CLOSE
:

845 i‡(
debug_smux
)

846 
	`zlog_debug
 ("SMUX_CLOSE");

847 
	`smux_∑r£_˛o£
 (
±r
, 
Àn
);

850 
SMUX_RRSP
:

852 i‡(
debug_smux
)

853 
	`zlog_debug
 ("SMUX_RRSP");

854 
	`smux_∑r£_º•
 (
±r
, 
Àn
);

856 
SMUX_GET
:

858 i‡(
debug_smux
)

859 
	`zlog_debug
 ("SMUX_GET");

860 
	`smux_∑r£_gë
 (
±r
, 
Àn
, 1);

862 
SMUX_GETNEXT
:

864 i‡(
debug_smux
)

865 
	`zlog_debug
 ("SMUX_GETNEXT");

866 
	`smux_∑r£_gë
 (
±r
, 
Àn
, 0);

868 
SMUX_SET
:

870 i‡(
debug_smux
)

871 
	`zlog_debug
 ("SMUX_SET");

874 
	`mem˝y
 (
sout_ßve_buff
, 
±r
, 
Àn
);

875 
sout_ßve_Àn
 = 
Àn
;

876 
	`smux_∑r£_£t
 (
±r
, 
Àn
, 
RESERVE1
);

879 
	`zlog_öfo
 ("Unknow¿ty≥: %d", 
ty≥
);

883 
	}
}

887 
	$smux_ªad
 (
thªad
 *
t
)

889 
sock
;

890 
Àn
;

891 
u_ch¨
 
buf
[
SMUXMAXPKTSIZE
];

892 
ªt
;

895 
sock
 = 
	`THREAD_FD
 (
t
);

896 
smux_ªad_thªad
 = 
NULL
;

898 i‡(
debug_smux
)

899 
	`zlog_debug
 ("SMUXÑead start");

902 
Àn
 = 
	`ªcv
 (
sock
, 
buf
, 
SMUXMAXPKTSIZE
, 0);

904 i‡(
Àn
 < 0)

906 
	`zlog_w¨n
 ("C™'àªadáŒ SMUXÖackë: %s", 
	`ß„_°ªº‹
 (
î∫o
));

907 
	`˛o£
 (
sock
);

908 
smux_sock
 = -1;

909 
	`smux_evít
 (
SMUX_CONNECT
, 0);

913 i‡(
Àn
 == 0)

915 
	`zlog_w¨n
 ("SMUX c⁄√˘i⁄ clo£d: %d", 
sock
);

916 
	`˛o£
 (
sock
);

917 
smux_sock
 = -1;

918 
	`smux_evít
 (
SMUX_CONNECT
, 0);

922 i‡(
debug_smux
)

923 
	`zlog_debug
 ("SMUXÑódÜí: %d", 
Àn
);

926 
ªt
 = 
	`smux_∑r£
 (
buf
, 
Àn
);

928 i‡(
ªt
 < 0)

930 
	`˛o£
 (
sock
);

931 
smux_sock
 = -1;

932 
	`smux_evít
 (
SMUX_CONNECT
, 0);

937 
	`smux_evít
 (
SMUX_READ
, 
sock
);

940 
	}
}

943 
	$smux_›í
 (
sock
)

945 
u_ch¨
 
buf
[
BUFSIZ
];

946 
u_ch¨
 *
±r
;

947 
size_t
 
Àn
;

948 
vîsi⁄
;

949 
u_ch¨
 
¥og«me
[] = 
QUAGGA_PROGNAME
 "-" 
QUAGGA_VERSION
;

951 i‡(
debug_smux
)

953 
	`smux_oid_dump
 ("SMUX o≥¿oid", 
smux_oid
, 
smux_oid_Àn
);

954 
	`zlog_debug
 ("SMUX o≥¿¥og«me: %s", 
¥og«me
);

955 
	`zlog_debug
 ("SMUX o≥¿∑ssw‹d: %s", 
smux_∑sswd
);

958 
±r
 = 
buf
;

959 
Àn
 = 
BUFSIZ
;

962 
±r
 = 
	`a¢_buûd_hódî
 (±r, &
Àn
, (
u_ch¨
Ë
SMUX_OPEN
, 0);

965 
vîsi⁄
 = 0;

966 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

967 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

968 &
vîsi⁄
,  (version));

971 
±r
 = 
	`a¢_buûd_objid
 (±r, &
Àn
,

972 (
u_ch¨
)

973 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_OBJECT_ID
),

974 
smux_oid
, 
smux_oid_Àn
);

977 
±r
 = 
	`a¢_buûd_°rög
 (±r, &
Àn
,

978 (
u_ch¨
)

979 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_OCTET_STR
),

980 
¥og«me
, 
	`°æí
 (progname));

983 
±r
 = 
	`a¢_buûd_°rög
 (±r, &
Àn
,

984 (
u_ch¨
)

985 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_OCTET_STR
),

986 (
u_ch¨
 *)
smux_∑sswd
, 
	`°æí
 (smux_passwd));

989 
Àn
 = 
BUFSIZ
;

990 
	`a¢_buûd_hódî
 (
buf
, &
Àn
, (
u_ch¨
Ë
SMUX_OPEN
, (
±r
 - buf) - 2);

992  
	`£nd
 (
sock
, 
buf
, (
±r
 - buf), 0);

993 
	}
}

996 
	$smux_å≠
 (c⁄° 
oid
 *
«me
, 
size_t
 
«mñí
,

997 c⁄° 
oid
 *
öame
, 
size_t
 
öamñí
,

998 c⁄° 
å≠_obje˘
 *
å≠obj
, 
size_t
 
å≠objÀn
,

999 
tick
, 
u_ch¨
 
•å≠
)

1001 
i
;

1002 
u_ch¨
 
buf
[
BUFSIZ
];

1003 
u_ch¨
 *
±r
;

1004 
size_t
 
Àn
, 
Àngth
;

1005 
ö_addr
 
addr
;

1006 
vÆ
;

1007 
u_ch¨
 *
h1
, *
h1e
;

1009 
±r
 = 
buf
;

1010 
Àn
 = 
BUFSIZ
;

1011 
Àngth
 = 
Àn
;

1014 i‡(
smux_sock
 < 0)

1018 
±r
 = 
	`a¢_buûd_hódî
 (±r, &
Àn
, (
u_ch¨
Ë
SMUX_TRAP
, 0);

1021 
±r
 = 
	`a¢_buûd_objid
 (±r, &
Àn
,

1022 (
u_ch¨
)

1023 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_OBJECT_ID
),

1024 
smux_oid
, 
smux_oid_Àn
);

1027 
addr
.
s_addr
 = 0;

1028 
±r
 = 
	`a¢_buûd_°rög
 (±r, &
Àn
,

1029 (
u_ch¨
)

1030 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_IPADDRESS
),

1031 (
u_ch¨
 *)&
addr
,  (addr));

1034 
vÆ
 = 
SNMP_TRAP_ENTERPRISESPECIFIC
;

1035 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

1036 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

1037 (*)&
vÆ
,  (val));

1040 
vÆ
 = 
•å≠
;

1041 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

1042 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

1043 (*)&
vÆ
,  (val));

1046 
vÆ
 = 0;

1047 
±r
 = 
	`a¢_buûd_unsig√d_öt
 (±r, &
Àn
,

1048 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_TIMETICKS
),

1049 &
vÆ
,  (val));

1052 
h1
 = 
±r
;

1053 
±r
 = 
	`a¢_buûd_£quí˚
 (±r, &
Àn
,

1054 (
u_ch¨
Ë(
ASN_SEQUENCE
 | 
ASN_CONSTRUCTOR
),

1059 
h1e
 = 
±r
;

1060 
i
 = 0; i < 
å≠objÀn
; i++)

1062 
ªt
;

1063 
oid
 oid[
MAX_OID_LEN
];

1064 
size_t
 
oid_Àn
;

1065 *
vÆ
;

1066 
size_t
 
vÆ_Àn
;

1067 
u_ch¨
 
vÆ_ty≥
;

1070 i‡(
å≠obj
[
i
].
«mñí
 > 0)

1072 
	`oid_c›y
 (
oid
, 
«me
, 
«mñí
);

1073 
	`oid_c›y
 (
oid
 + 
«mñí
, 
å≠obj
[
i
].
«me
,Årapobj[i].namelen);

1074 
	`oid_c›y
 (
oid
 + 
«mñí
 + 
å≠obj
[
i
].«mñí, 
öame
, 
öamñí
);

1075 
oid_Àn
 = 
«mñí
 + 
å≠obj
[
i
].«mñí + 
öamñí
;

1079 
	`oid_c›y
 (
oid
, 
«me
, 
«mñí
);

1080 
	`oid_c›y
 (
oid
 + 
«mñí
, 
å≠obj
[
i
].
«me
,Årapobj[i].namelen * (-1));

1081 
oid_Àn
 = 
«mñí
 + 
å≠obj
[
i
].namelen * (-1) ;

1084 i‡(
debug_smux
)

1086 
	`smux_oid_dump
 ("Tøp", 
«me
, 
«mñí
);

1087 i‡(
å≠obj
[
i
].
«mñí
 < 0)

1088 
	`smux_oid_dump
 ("Trap",

1089 
å≠obj
[
i
].
«me
, (- 1Ë* (å≠obj[i].
«mñí
));

1092 
	`smux_oid_dump
 ("Tøp", 
å≠obj
[
i
].
«me
, (å≠obj[i].
«mñí
));

1093 
	`smux_oid_dump
 ("Tøp", 
öame
, 
öamñí
);

1095 
	`smux_oid_dump
 ("Tøp", 
oid
, 
oid_Àn
);

1096 
	`zlog_öfo
 ("BUFSIZ: %d // oid_Àn: %lu", 
BUFSIZ
, (
u_l⁄g
)
oid_Àn
);

1099 
ªt
 = 
	`smux_gë
 (
oid
, &
oid_Àn
, 1, &
vÆ_ty≥
, &
vÆ
, &
vÆ_Àn
);

1101 i‡(
debug_smux
)

1102 
	`zlog_debug
 ("smux_gëÑesu… %d", 
ªt
);

1104 i‡(
ªt
 == 0)

1105 
±r
 = 
	`¢mp_buûd_v¨_›
 (±r, 
oid
, &
oid_Àn
,

1106 
vÆ_ty≥
, 
vÆ_Àn
, 
vÆ
, &
Àn
);

1110 
	`a¢_buûd_£quí˚
(
h1
, &
Àngth
,

1111 (
u_ch¨
Ë(
ASN_SEQUENCE
 | 
ASN_CONSTRUCTOR
),

1112 
±r
 - 
h1e
);

1115 
Àn
 = 
BUFSIZ
;

1116 
	`a¢_buûd_hódî
 (
buf
, &
Àn
, (
u_ch¨
Ë
SMUX_TRAP
, (
±r
 - buf) - 2);

1118  
	`£nd
 (
smux_sock
, 
buf
, (
±r
 - buf), 0);

1119 
	}
}

1122 
	$smux_ªgi°î
 (
sock
)

1124 
u_ch¨
 
buf
[
BUFSIZ
];

1125 
u_ch¨
 *
±r
;

1126 
ªt
;

1127 
size_t
 
Àn
;

1128 
¥i‹ôy
;

1129 
›î©i⁄
;

1130 
subåì
 *subtree;

1131 
li°node
 *
node
, *
¬ode
;

1133 
ªt
 = 0;

1135 
	`ALL_LIST_ELEMENTS
 (
åìli°
, 
node
, 
¬ode
, 
subåì
))

1137 
±r
 = 
buf
;

1138 
Àn
 = 
BUFSIZ
;

1141 
±r
 = 
	`a¢_buûd_hódî
 (±r, &
Àn
, (
u_ch¨
Ë
SMUX_RREQ
, 0);

1144 
±r
 = 
	`a¢_buûd_objid
 (±r, &
Àn
,

1145 (
u_ch¨
)

1146 (
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_OBJECT_ID
),

1147 
subåì
->
«me
, subåì->
«me_Àn
);

1150 
¥i‹ôy
 = -1;

1151 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

1152 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

1153 &
¥i‹ôy
,  (priority));

1156 
›î©i⁄
 = 2;

1157 
±r
 = 
	`a¢_buûd_öt
 (±r, &
Àn
,

1158 (
u_ch¨
)(
ASN_UNIVERSAL
 | 
ASN_PRIMITIVE
 | 
ASN_INTEGER
),

1159 &
›î©i⁄
,  (operation));

1161 i‡(
debug_smux
)

1163 
	`smux_oid_dump
 ("SMUXÑegi°î oid", 
subåì
->
«me
, subåì->
«me_Àn
);

1164 
	`zlog_debug
 ("SMUXÑegi°îÖri‹ôy: %ld", 
¥i‹ôy
);

1165 
	`zlog_debug
 ("SMUXÑegi°î o≥øti⁄: %ld", 
›î©i⁄
);

1168 
Àn
 = 
BUFSIZ
;

1169 
	`a¢_buûd_hódî
 (
buf
, &
Àn
, (
u_ch¨
Ë
SMUX_RREQ
, (
±r
 - buf) - 2);

1170 
ªt
 = 
	`£nd
 (
sock
, 
buf
, (
±r
 - buf), 0);

1171 i‡(
ªt
 < 0)

1172  
ªt
;

1174  
ªt
;

1175 
	}
}

1179 
	$smux_c⁄√˘
 (
thªad
 *
t
)

1181 
ªt
;

1183 i‡(
debug_smux
)

1184 
	`zlog_debug
 ("SMUX c⁄√˘Åry %d", 
Áû
 + 1);

1187 
smux_c⁄√˘_thªad
 = 
NULL
;

1190 
smux_sock
 = 
	`smux_sockë
 ();

1191 i‡(
smux_sock
 < 0)

1193 i‡(++
Áû
 < 
SMUX_MAX_FAILURE
)

1194 
	`smux_evít
 (
SMUX_CONNECT
, 0);

1199 
ªt
 = 
	`smux_›í
 (
smux_sock
);

1200 i‡(
ªt
 < 0)

1202 
	`zlog_w¨n
 ("SMUX o≥¿mesßgê£nd faûed: %s", 
	`ß„_°ªº‹
 (
î∫o
));

1203 
	`˛o£
 (
smux_sock
);

1204 
smux_sock
 = -1;

1205 i‡(++
Áû
 < 
SMUX_MAX_FAILURE
)

1206 
	`smux_evít
 (
SMUX_CONNECT
, 0);

1211 
ªt
 = 
	`smux_ªgi°î
 (
smux_sock
);

1212 i‡(
ªt
 < 0)

1214 
	`zlog_w¨n
 ("SMUXÑegi°î mesßgê£nd faûed: %s", 
	`ß„_°ªº‹
 (
î∫o
));

1215 
	`˛o£
 (
smux_sock
);

1216 
smux_sock
 = -1;

1217 i‡(++
Áû
 < 
SMUX_MAX_FAILURE
)

1218 
	`smux_evít
 (
SMUX_CONNECT
, 0);

1223 
	`smux_evít
 (
SMUX_READ
, 
smux_sock
);

1226 
	}
}

1230 
	$smux_°›
 ()

1232 i‡(
smux_ªad_thªad
)

1234 
	`thªad_ˇn˚l
 (
smux_ªad_thªad
);

1235 
smux_ªad_thªad
 = 
NULL
;

1238 i‡(
smux_c⁄√˘_thªad
)

1240 
	`thªad_ˇn˚l
 (
smux_c⁄√˘_thªad
);

1241 
smux_c⁄√˘_thªad
 = 
NULL
;

1244 i‡(
smux_sock
 >= 0)

1246 
	`˛o£
 (
smux_sock
);

1247 
smux_sock
 = -1;

1249 
	}
}

1254 
	$smux_evít
 (
smux_evít
 
evít
, 
sock
)

1256 
evít
)

1258 
SMUX_SCHEDULE
:

1259 
smux_c⁄√˘_thªad
 = 
	`thªad_add_evít
 (
ma°î
, 
smux_c⁄√˘
, 
NULL
, 0);

1261 
SMUX_CONNECT
:

1262 
smux_c⁄√˘_thªad
 = 
	`thªad_add_timî
 (
ma°î
, 
smux_c⁄√˘
, 
NULL
, 10);

1264 
SMUX_READ
:

1265 
smux_ªad_thªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
smux_ªad
, 
NULL
, 
sock
);

1270 
	}
}

1273 
	$smux_°r2oid
 (c⁄° *
°r
, 
oid
 *oid, 
size_t
 *
oid_Àn
)

1275 
Àn
;

1276 
vÆ
;

1278 
Àn
 = 0;

1279 
vÆ
 = 0;

1280 *
oid_Àn
 = 0;

1282 i‡(*
°r
 == '.')

1283 
°r
++;

1284 i‡(*
°r
 == '\0')

1289 i‡(! 
	`isdigô
 (*
°r
))

1292 
	`isdigô
 (*
°r
))

1294 
vÆ
 *= 10;

1295 
vÆ
 +(*
°r
 - '0');

1296 
°r
++;

1299 i‡(*
°r
 == '\0')

1301 i‡(*
°r
 != '.')

1304 
oid
[
Àn
++] = 
vÆ
;

1305 
vÆ
 = 0;

1306 
°r
++;

1309 
oid
[
Àn
++] = 
vÆ
;

1310 *
oid_Àn
 = 
Àn
;

1313 
	}
}

1315 
oid
 *

1316 
	$smux_oid_dup
 (
oid
 *
objid
, 
size_t
 
objid_Àn
)

1318 
oid
 *
√w
;

1320 
√w
 = 
	`XMALLOC
 (
MTYPE_TMP
,  (
oid
Ë* 
objid_Àn
);

1321 
	`oid_c›y
 (
√w
, 
objid
, 
objid_Àn
);

1323  
√w
;

1324 
	}
}

1327 
	$smux_≥î_oid
 (
vty
 *vty, c⁄° *
oid_°r
, c⁄° *
∑sswd_°r
)

1329 
ªt
;

1330 
oid
 oid[
MAX_OID_LEN
];

1331 
size_t
 
oid_Àn
;

1333 
ªt
 = 
	`smux_°r2oid
 (
oid_°r
, 
oid
, &
oid_Àn
);

1334 i‡(
ªt
 != 0)

1336 
	`vty_out
 (
vty
, "obje˘ ID mÆf‹med%s", 
VTY_NEWLINE
);

1337  
CMD_WARNING
;

1340 i‡(
smux_oid
)

1342 
	`‰ì
 (
smux_oid
);

1343 
smux_oid
 = 
NULL
;

1347 i‡(
smux_∑sswd
)

1349 
	`‰ì
 (
smux_∑sswd
);

1350 
smux_∑sswd
 = 
NULL
;

1353 
smux_oid
 = 
	`smux_oid_dup
 (
oid
, 
oid_Àn
);

1354 
smux_oid_Àn
 = 
oid_Àn
;

1356 i‡(
∑sswd_°r
)

1357 
smux_∑sswd
 = 
	`°rdup
 (
∑sswd_°r
);

1359 
smux_∑sswd
 = 
	`°rdup
 ("");

1362 
	}
}

1365 
	$smux_hódî_gíîic
 (
v¨übÀ
 *
v
, 
oid
 *
«me
, 
size_t
 *
Àngth
, 
exa˘
,

1366 
size_t
 *
v¨_Àn
, 
WrôeMëhod
 **
wrôe_mëhod
)

1368 
oid
 
fuŒoid
[
MAX_OID_LEN
];

1369 
ªt
;

1371 
	`oid_c›y
 (
fuŒoid
, 
v
->
«me
, v->
«mñí
);

1372 
fuŒoid
[
v
->
«mñí
] = 0;

1374 
ªt
 = 
	`oid_com∑ª
 (
«me
, *
Àngth
, 
fuŒoid
, 
v
->
«mñí
 + 1);

1377 i‡((
exa˘
 && (
ªt
 != 0)) || (!exact && (ret >= 0)))

1378  
MATCH_FAILED
;

1381 
	`mem˝y
 (
«me
, 
fuŒoid
, (
v
->
«mñí
 + 1Ë*  (
oid
));

1382 *
Àngth
 = 
v
->
«mñí
 + 1;

1384 *
wrôe_mëhod
 = 0;

1385 *
v¨_Àn
 = ();

1387  
MATCH_SUCCEEDED
;

1388 
	}
}

1391 
	$smux_≥î_deÁu…
 ()

1393 i‡(
smux_oid
)

1395 
	`‰ì
 (
smux_oid
);

1396 
smux_oid
 = 
NULL
;

1400 i‡(
smux_∑sswd
)

1402 
	`‰ì
 (
smux_∑sswd
);

1403 
smux_∑sswd
 = 
NULL
;

1406  
CMD_SUCCESS
;

1407 
	}
}

1409 
DEFUN
 (
smux_≥î
,

1410 
smux_≥î_cmd
,

1416 i‡(
smux_≥î_oid
 (
vty
, 
¨gv
[0], 
NULL
) == 0)

1418 
smux_°¨t
();

1419  
	gCMD_SUCCESS
;

1422  
	gCMD_WARNING
;

1425 
DEFUN
 (
smux_≥î_∑ssw‹d
,

1426 
smux_≥î_∑ssw‹d_cmd
,

1433 i‡(
smux_≥î_oid
 (
vty
, 
¨gv
[0],árgv[1]) == 0)

1435 
smux_°¨t
();

1436  
	gCMD_SUCCESS
;

1439  
	gCMD_WARNING
;

1442 
DEFUN
 (
no_smux_≥î
,

1443 
no_smux_≥î_cmd
,

1445 
NO_STR


1449 
smux_°›
();

1450  
smux_≥î_deÁu…
 ();

1453 
ALIAS
 (
no_smux_≥î
,

1454 
no_smux_≥î_oid_cmd
,

1456 
NO_STR


1461 
ALIAS
 (
no_smux_≥î
,

1462 
no_smux_≥î_oid_∑ssw‹d_cmd
,

1464 
NO_STR


1471 
	$c⁄fig_wrôe_smux
 (
vty
 *vty)

1473 
fú°
 = 1;

1474 
i
;

1476 i‡(
smux_oid
)

1478 
	`vty_out
 (
vty
, "smuxÖeer ");

1479 
i
 = 0; i < 
smux_oid_Àn
; i++)

1481 
	`vty_out
 (
vty
, "%s%d", 
fú°
 ? "" : ".", (Ë
smux_oid
[
i
]);

1482 
fú°
 = 0;

1484 
	`vty_out
 (
vty
, " %s%s", 
smux_∑sswd
, 
VTY_NEWLINE
);

1487 
	}
}

1491 
	$smux_ªgi°î_mib
 (c⁄° *
des¸
, 
v¨übÀ
 *
v¨
,

1492 
size_t
 
width
, 
num
,

1493 
oid
 
«me
[], 
size_t
 
«mñí
)

1495 
subåì
 *
åì
;

1497 
åì
 = (
subåì
 *)
	`mÆloc
((subtree));

1498 
	`oid_c›y
 (
åì
->
«me
,Çame, 
«mñí
);

1499 
åì
->
«me_Àn
 = 
«mñí
;

1500 
åì
->
v¨übÀs
 = 
v¨
;

1501 
åì
->
v¨übÀs_num
 = 
num
;

1502 
åì
->
v¨übÀs_width
 = 
width
;

1503 
åì
->
ªgi°îed
 = 0;

1504 
	`li°node_add_s‹t
(
åìli°
, 
åì
);

1505 
	}
}

1509 
	$smux_åì_cmp
(
subåì
 *
åì1
, subåì *
åì2
)

1511  
	`oid_com∑ª
(
åì1
->
«me
,Åªe1->
«me_Àn
,

1512 
åì2
->
«me
,Åªe2->
«me_Àn
);

1513 
	}
}

1517 
	$smux_öô
 (
thªad_ma°î
 *
tm
)

1520 
ma°î
 = 
tm
;

1523 
åìli°
 = 
	`li°_√w
();

1524 
åìli°
->
cmp
 = ((*)(*, *))
smux_åì_cmp
;

1527 
	`ö°Æl_node
 (&
smux_node
, 
c⁄fig_wrôe_smux
);

1529 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
smux_≥î_cmd
);

1530 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
smux_≥î_∑ssw‹d_cmd
);

1531 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_smux_≥î_cmd
);

1532 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_smux_≥î_oid_cmd
);

1533 
	`ö°Æl_ñemít
 (
CONFIG_NODE
, &
no_smux_≥î_oid_∑ssw‹d_cmd
);

1534 
	}
}

1537 
	$smux_°¨t
()

1540 
	`smux_°›
();

1543 
	`smux_evít
 (
SMUX_SCHEDULE
, 0);

1544 
	}
}

	@common-libs/3rd-party/quagga-lib/src/sockopt.c

22 
	~<zebø.h
>

23 
	~"log.h
"

24 
	~"sock›t.h
"

25 
	~"sockuni⁄.h
"

28 
	$£tsock›t_so_ªcvbuf
 (
sock
, 
size
)

30 
ªt
;

32 i‡–(
ªt
 = 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)

33 &
size
,  ())) < 0)

34 
	`zlog_îr
 ("fd %d: can't setsockopt SO_RCVBUFÅo %d: %s",

35 
sock
,
size
,
	`ß„_°ªº‹
(
î∫o
));

37  
ªt
;

38 
	}
}

41 
	$£tsock›t_so_£ndbuf
 (c⁄° 
sock
, 
size
)

43 
ªt
 = 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

44 (*)&
size
,  ());

46 i‡(
ªt
 < 0)

47 
	`zlog_îr
 ("fd %d: can't setsockopt SO_SNDBUFÅo %d: %s",

48 
sock
, 
size
, 
	`ß„_°ªº‹
 (
î∫o
));

50  
ªt
;

51 
	}
}

54 
	$gësock›t_so_£ndbuf
 (c⁄° 
sock
)

56 
u_öt32_t
 
›tvÆ
;

57 
sockÀn_t
 
›éí
 =  (
›tvÆ
);

58 
ªt
 = 
	`gësock›t
 (
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
,

59 (*)&
›tvÆ
, &
›éí
);

60 i‡(
ªt
 < 0)

62 
	`zlog_îr
 ("fd %d: can't getsockopt SO_SNDBUF: %d (%s)",

63 
sock
, 
î∫o
, 
	`ß„_°ªº‹
 (errno));

64  
ªt
;

66  
›tvÆ
;

67 
	}
}

70 
	$gësock›t_cmsg_d©a
 (
msghdr
 *
msgh
, 
Àvñ
, 
ty≥
)

72 
cmsghdr
 *
cmsg
;

73 *
±r
 = 
NULL
;

75 
cmsg
 = 
	`ZCMSG_FIRSTHDR
(
msgh
);

76 
cmsg
 !
NULL
;

77 
cmsg
 = 
	`CMSG_NXTHDR
(
msgh
, cmsg))

78 i‡(
cmsg
->
cmsg_Àvñ
 =
Àvñ
 && cmsg->
cmsg_ty≥
)

79  (
±r
 = 
	`CMSG_DATA
(
cmsg
));

81  
NULL
;

82 
	}
}

84 #ifde‡
HAVE_IPV6


87 
	$£tsock›t_ùv6_pktöfo
 (
sock
, 
vÆ
)

89 
ªt
;

91 #ifde‡
IPV6_RECVPKTINFO


92 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
, &
vÆ
, (val));

93 i‡(
ªt
 < 0)

94 
	`zlog_w¨n
 ("ˇn'à£tsock›àIPV6_RECVPKTINFO : %s", 
	`ß„_°ªº‹
 (
î∫o
));

96 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_PKTINFO
, &
vÆ
, (val));

97 i‡(
ªt
 < 0)

98 
	`zlog_w¨n
 ("ˇn'à£tsock›àIPV6_PKTINFO : %s", 
	`ß„_°ªº‹
 (
î∫o
));

100  
ªt
;

101 
	}
}

105 
	$£tsock›t_ùv6_checksum
 (
sock
, 
vÆ
)

107 
ªt
;

109 #ifde‡
GNU_LINUX


110 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_RAW
, 
IPV6_CHECKSUM
, &
vÆ
, (val));

112 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_CHECKSUM
, &
vÆ
, (val));

114 i‡(
ªt
 < 0)

115 
	`zlog_w¨n
 ("can't setsockopt IPV6_CHECKSUM");

116  
ªt
;

117 
	}
}

121 
	$£tsock›t_ùv6_mu…iˇ°_h›s
 (
sock
, 
vÆ
)

123 
ªt
;

125 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_HOPS
, &
vÆ
, (val));

126 i‡(
ªt
 < 0)

127 
	`zlog_w¨n
 ("can't setsockopt IPV6_MULTICAST_HOPS");

128  
ªt
;

129 
	}
}

133 
	$£tsock›t_ùv6_uniˇ°_h›s
 (
sock
, 
vÆ
)

135 
ªt
;

137 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
, &
vÆ
, (val));

138 i‡(
ªt
 < 0)

139 
	`zlog_w¨n
 ("can't setsockopt IPV6_UNICAST_HOPS");

140  
ªt
;

141 
	}
}

144 
	$£tsock›t_ùv6_h›limô
 (
sock
, 
vÆ
)

146 
ªt
;

148 #ifde‡
IPV6_RECVHOPLIMIT


149 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVHOPLIMIT
, &
vÆ
, (val));

150 i‡(
ªt
 < 0)

151 
	`zlog_w¨n
 ("can't setsockopt IPV6_RECVHOPLIMIT");

153 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_HOPLIMIT
, &
vÆ
, (val));

154 i‡(
ªt
 < 0)

155 
	`zlog_w¨n
 ("can't setsockopt IPV6_HOPLIMIT");

157  
ªt
;

158 
	}
}

162 
	$£tsock›t_ùv6_mu…iˇ°_lo›
 (
sock
, 
vÆ
)

164 
ªt
;

166 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_LOOP
, &
vÆ
,

167  (
vÆ
));

168 i‡(
ªt
 < 0)

169 
	`zlog_w¨n
 ("can't setsockopt IPV6_MULTICAST_LOOP");

170  
ªt
;

171 
	}
}

174 
	$gësock›t_ùv6_ifödex
 (
msghdr
 *
msgh
)

176 
ö6_pktöfo
 *
pktöfo
;

178 
pktöfo
 = 
	`gësock›t_cmsg_d©a
 (
msgh
, 
IPPROTO_IPV6
, 
IPV6_PKTINFO
);

180  
pktöfo
->
ùi6_ifödex
;

181 
	}
}

207 
	$£tsock›t_ùv4_mu…iˇ°
(
sock
,

208 
›äame
,

209 
mˇ°_addr
,

210 
ifödex
)

212 #ifde‡
HAVE_RFC3678


213 
group_ªq
 
gr
;

214 
sockaddr_ö
 *
si
;

215 
ªt
;

216 
	`mem£t
 (&
gr
, 0, (gr));

217 
si
 = (
sockaddr_ö
 *)&
gr
.
gr_group
;

218 
gr
.
gr_öãrÁ˚
 = 
ifödex
;

219 
si
->
sö_Ámûy
 = 
AF_INET
;

220 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


221 
si
->
sö_Àn
 = (
sockaddr_ö
);

223 
si
->
sö_addr
.
s_addr
 = 
mˇ°_addr
;

224 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, (
›äame
 =
IP_ADD_MEMBERSHIP
) ?

225 
MCAST_JOIN_GROUP
 : 
MCAST_LEAVE_GROUP
, (*)&
gr
, (gr));

226 i‡((
ªt
 < 0Ë&& (
›äame
 =
IP_ADD_MEMBERSHIP
Ë&& (
î∫o
 =
EADDRINUSE
))

228 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
MCAST_LEAVE_GROUP
, (*)&
gr
, (gr));

229 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
MCAST_JOIN_GROUP
, (*)&
gr
, (gr));

231  
ªt
;

233 #ñi‡
	`deföed
(
HAVE_STRUCT_IP_MREQN_IMR_IFINDEX
Ë&& !deföed(
__FªeBSD__
)

234 
ù_mªqn
 
mªqn
;

235 
ªt
;

237 
	`as£π
(
›äame
 =
IP_ADD_MEMBERSHIP
 || o±«mê=
IP_DROP_MEMBERSHIP
);

238 
	`mem£t
 (&
mªqn
, 0, (mreqn));

240 
mªqn
.
imr_mu…üddr
.
s_addr
 = 
mˇ°_addr
;

241 
mªqn
.
imr_ifödex
 = 
ifödex
;

243 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
›äame
,

244 (*)&
mªqn
, (mreqn));

245 i‡((
ªt
 < 0Ë&& (
›äame
 =
IP_ADD_MEMBERSHIP
Ë&& (
î∫o
 =
EADDRINUSE
))

248 
buf
[1][
INET_ADDRSTRLEN
];

249 
	`zlog_öfo
("setsockopt_ipv4_multicastáttemptingÅo dropánd "

251 
sock
,

252 
	`öë_¡›
(
AF_INET
, &
mªqn
.
imr_mu…üddr
,

253 
buf
[0], (buf[0])), 
ifödex
);

254 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_DROP_MEMBERSHIP
,

255 (*)&
mªqn
, (mreqn));

256 
ªt
 = 
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
,

257 (*)&
mªqn
, (mreqn));

259  
ªt
;

266 #ñi‡
	`deföed
(
HAVE_BSD_STRUCT_IP_MREQ_HACK
)

269 
ö_addr
 
m
;

270 
ù_mªq
 
mªq
;

271 
ªt
;

273 
	`as£π
(
›äame
 =
IP_ADD_MEMBERSHIP
 || o±«mê=
IP_DROP_MEMBERSHIP
);

275 
m
.
s_addr
 = 
	`ht⁄l
(
ifödex
);

277 
	`mem£t
 (&
mªq
, 0, (mreq));

278 
mªq
.
imr_mu…üddr
.
s_addr
 = 
mˇ°_addr
;

279 
mªq
.
imr_öãrÁ˚
 = 
m
;

281 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
›äame
, (*)&
mªq
, (mreq));

282 i‡((
ªt
 < 0Ë&& (
›äame
 =
IP_ADD_MEMBERSHIP
Ë&& (
î∫o
 =
EADDRINUSE
))

285 
buf
[1][
INET_ADDRSTRLEN
];

286 
	`zlog_öfo
("setsockopt_ipv4_multicastáttemptingÅo dropánd "

288 
sock
,

289 
	`öë_¡›
(
AF_INET
, &
mªq
.
imr_mu…üddr
,

290 
buf
[0], (buf[0])), 
ifödex
);

291 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_DROP_MEMBERSHIP
,

292 (*)&
mªq
, (mreq));

293 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
,

294 (*)&
mªq
, (mreq));

296  
ªt
;

302 
	}
}

308 
	$£tsock›t_ùv4_mu…iˇ°_if
(
sock
,

309 
ifödex
)

312 #ifde‡
HAVE_STRUCT_IP_MREQN_IMR_IFINDEX


313 
ù_mªqn
 
mªqn
;

314 
	`mem£t
 (&
mªqn
, 0, (mreqn));

316 
mªqn
.
imr_ifödex
 = 
ifödex
;

317  
	`£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (*)&
mªqn
, (mreqn));

323 #ñi‡
	`deföed
(
HAVE_BSD_STRUCT_IP_MREQ_HACK
)

324 
ö_addr
 
m
;

326 
m
.
s_addr
 = 
	`ht⁄l
(
ifödex
);

328  
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (*)&
m
, (m));

332 
	}
}

335 
	$£tsock›t_ùv4_ifödex
 (
sock
, 
vÆ
)

337 
ªt
;

339 #i‡
	`deföed
 (
IP_PKTINFO
)

340 i‡((
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_PKTINFO
, &
vÆ
,  (val))) < 0)

341 
	`zlog_w¨n
 ("Can't set IP_PKTINFO option for fd %dÅo %d: %s",

342 
sock
,
vÆ
,
	`ß„_°ªº‹
(
î∫o
));

343 #ñi‡
	`deföed
 (
IP_RECVIF
)

344 i‡((
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_RECVIF
, &
vÆ
,  (val))) < 0)

345 
	`zlog_w¨n
 ("Can't set IP_RECVIF option for fd %dÅo %d: %s",

346 
sock
,
vÆ
,
	`ß„_°ªº‹
(
î∫o
));

352 
ªt
 = -1;

354  
ªt
;

355 
	}
}

358 
	$£tsock›t_ùv4_tos
(
sock
, 
tos
)

360 
ªt
;

362 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_TOS
, &
tos
,  (tos));

363 i‡(
ªt
 < 0)

364 
	`zlog_w¨n
 ("Can't set IP_TOS option for fd %dÅo %#x: %s",

365 
sock
, 
tos
, 
	`ß„_°ªº‹
(
î∫o
));

366  
ªt
;

367 
	}
}

371 
	$£tsock›t_ifödex
 (
af
, 
sock
, 
vÆ
)

373 
ªt
 = -1;

375 
af
)

377 
AF_INET
:

378 
ªt
 = 
	`£tsock›t_ùv4_ifödex
 (
sock
, 
vÆ
);

380 #ifde‡
HAVE_IPV6


381 
AF_INET6
:

382 
ªt
 = 
	`£tsock›t_ùv6_pktöfo
 (
sock
, 
vÆ
);

386 
	`zlog_w¨n
 ("£tsock›t_ifödex: unknow¿addªs†Ámûy %d", 
af
);

388  
ªt
;

389 
	}
}

399 
	$gësock›t_ùv4_ifödex
 (
msghdr
 *
msgh
)

402 
ifödex
 = -1;

404 #i‡
	`deföed
(
IP_PKTINFO
)

406 
ö_pktöfo
 *
pktöfo
;

408 
pktöfo
 =

409 (
ö_pktöfo
 *)
	`gësock›t_cmsg_d©a
 (
msgh
, 
IPPROTO_IP
, 
IP_PKTINFO
);

411 
ifödex
 = 
pktöfo
->
ùi_ifödex
;

413 #ñi‡
	`deföed
(
IP_RECVIF
)

417 #i‚de‡
SUNOS_5


419 
sockaddr_dl
 *
sdl
;

422 *
ifödex_p
;

425 #i‚de‡
SUNOS_5


427 
sdl
 =

428 (
sockaddr_dl
 *)
	`gësock›t_cmsg_d©a
 (
msgh
, 
IPPROTO_IP
, 
IP_RECVIF
);

429 i‡(
sdl
 !
NULL
)

430 
ifödex
 = 
sdl
->
sdl_ödex
;

432 
ifödex
 = 0;

439 
ifödex_p
 = (
uöt_t
 *)
	`gësock›t_cmsg_d©a
 (
msgh
, 
IPPROTO_IP
, 
IP_RECVIF
);

440 i‡(
ifödex_p
 !
NULL
)

441 
ifödex
 = *
ifödex_p
;

443 
ifödex
 = 0;

455 
ifödex
 = 0;

459  
ifödex
;

460 
	}
}

464 
	$gësock›t_ifödex
 (
af
, 
msghdr
 *
msgh
)

466 
af
)

468 
AF_INET
:

469  (
	`gësock›t_ùv4_ifödex
 (
msgh
));

471 #ifde‡
HAVE_IPV6


472 
AF_INET6
:

473  (
	`gësock›t_ùv6_ifödex
 (
msgh
));

477 
	`zlog_w¨n
 ("gësock›t_ifödex: unknow¿addªs†Ámûy %d", 
af
);

480 
	}
}

484 
	$sock›t_ùhdrö˛_swab_htosys
 (
ù
 *
ùh
)

489 #i‚de‡
HAVE_IP_HDRINCL_BSD_ORDER


490 
ùh
->
ù_Àn
 = 
	`ht⁄s
(iph->ip_len);

491 
ùh
->
ù_off
 = 
	`ht⁄s
(iph->ip_off);

494 
ùh
->
ù_id
 = 
	`ht⁄s
(iph->ip_id);

495 
	}
}

498 
	$sock›t_ùhdrö˛_swab_sy°oh
 (
ù
 *
ùh
)

500 #i‚de‡
HAVE_IP_HDRINCL_BSD_ORDER


501 
ùh
->
ù_Àn
 = 
	`¡ohs
(iph->ip_len);

502 
ùh
->
ù_off
 = 
	`¡ohs
(iph->ip_off);

505 
ùh
->
ù_id
 = 
	`¡ohs
(iph->ip_id);

506 
	}
}

509 
	$sock›t_t˝_sig«tuª
 (
sock
, 
sockuni⁄
 *
su
, c⁄° *
∑ssw‹d
)

511 #i‡
	`deföed
(
HAVE_TCP_MD5_LINUX24
Ë&& deföed(
GNU_LINUX
)

516 
	#TCP_MD5_AUTH
 13

	)

517 
	#TCP_MD5_AUTH_ADD
 1

	)

518 
	#TCP_MD5_AUTH_DEL
 2

	)

519 
	st˝_rfc2385_cmd
 {

520 
u_öt8_t
 
comm™d
;

521 
u_öt32_t
 
addªss
;

522 
u_öt8_t
 
keyÀn
;

523 *
key
;

524 } 
cmd
;

525 
ö_addr
 *
addr
 = &
su
->
sö
.
sö_addr
;

527 
cmd
.
comm™d
 = (
∑ssw‹d
 !
NULL
 ? 
TCP_MD5_AUTH_ADD
 : 
TCP_MD5_AUTH_DEL
);

528 
cmd
.
addªss
 = 
addr
->
s_addr
;

529 
cmd
.
keyÀn
 = (
∑ssw‹d
 !
NULL
 ? 
	`°æí
 (password) : 0);

530 
cmd
.
key
 = 
∑ssw‹d
;

532  
	`£tsock›t
 (
sock
, 
IPPROTO_TCP
, 
TCP_MD5_AUTH
, &
cmd
,  cmd);

534 #ñi‡
HAVE_DECL_TCP_MD5SIG


535 
ªt
;

536 #i‚de‡
GNU_LINUX


541 
md5sig
 = 
∑ssw‹d
 && *password ? 1 : 0;

543 
keyÀn
 = 
∑ssw‹d
 ? 
	`°æí
 (password) : 0;

544 
t˝_md5sig
 
md5sig
;

545 
sockuni⁄
 *
su2
, *
susock
;

550 i‡(!(
susock
 = 
	`sockuni⁄_gësock«me
 (
sock
)))

553 i‡(
susock
->
ß
.
ß_Ámûy
 =
su
->sa.sa_family)

554 
su2
 = 
su
;

558 
su2
 = 
susock
;

560 i‡(
su2
->
ß
.
ß_Ámûy
 =
AF_INET
)

562 
	`sockuni⁄_‰ì
 (
susock
);

566 #ifde‡
HAVE_IPV6


574 i‡(
su2
->
ß
.
ß_Ámûy
 =
AF_INET6


575 && 
su
->
ß
.
ß_Ámûy
 =
AF_INET
)

577 
su2
->
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

579 
	`mem£t
 (&
su2
->
sö6
.
sö6_addr
, 0,  (
ö6_addr
));

580 
su2
->
sö6
.
sö6_addr
.
s6_addr32
[2] = 
	`ht⁄l
(0xffff);

581 
	`mem˝y
 (&
su2
->
sö6
.
sö6_addr
.
s6_addr32
[3], &
su
->
sö
.
sö_addr
, 4);

586 
	`mem£t
 (&
md5sig
, 0,  (md5sig));

587 
	`mem˝y
 (&
md5sig
.
t˝m_addr
, 
su2
,  (*su2));

588 
md5sig
.
t˝m_keyÀn
 = 
keyÀn
;

589 i‡(
keyÀn
)

590 
	`mem˝y
 (
md5sig
.
t˝m_key
, 
∑ssw‹d
, 
keyÀn
);

591 
	`sockuni⁄_‰ì
 (
susock
);

593 i‡((
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_TCP
, 
TCP_MD5SIG
, &
md5sig
,  md5sig)) < 0)

597 i‡(
ENOENT
 =
î∫o
)

598 
ªt
 = 0;

600 
	`zlog_îr
 ("sockopt_tcp_signature: setsockopt(%d): %s",

601 
sock
, 
	`ß„_°ªº‹
(
î∫o
));

603  
ªt
;

607 
	}
}

	@common-libs/3rd-party/quagga-lib/src/sockunion.c

22 
	~<zebø.h
>

24 
	~"¥efix.h
"

25 
	~"vty.h
"

26 
	~"sockuni⁄.h
"

27 
	~"mem‹y.h
"

28 
	~"°r.h
"

29 
	~"log.h
"

31 #i‚de‡
HAVE_INET_ATON


33 
	$öë_©⁄
 (c⁄° *
˝
, 
ö_addr
 *
öaddr
)

35 
dŸs
 = 0;

36 
u_l⁄g
 
addr
 = 0;

37 
u_l⁄g
 
vÆ
 = 0, 
ba£
 = 10;

41 
c
 = *
˝
;

43 
c
)

47 
vÆ
 = (vÆ * 
ba£
Ë+ (
c
 - '0');

50 i‡(++
dŸs
 > 3)

53 i‡(
vÆ
 > 255)

55 
addr
 =ádd∏<< 8 | 
vÆ
;

56 
vÆ
 = 0;

61 } *
˝
++) ;

63 i‡(
dŸs
 < 3)

64 
addr
 <<8 * (3 - 
dŸs
);

65 i‡(
öaddr
)

66 
öaddr
->
s_addr
 = 
	`ht⁄l
 (
addr
);

68 
	}
}

72 #i‚de‡
HAVE_INET_PTON


74 
	$öë_±⁄
 (
Ámûy
, c⁄° *
°Ωå
, *
addΩå
)

76 i‡(
Ámûy
 =
AF_INET
)

78 
ö_addr
 
ö_vÆ
;

80 i‡(
	`öë_©⁄
 (
°Ωå
, &
ö_vÆ
))

82 
	`mem˝y
 (
addΩå
, &
ö_vÆ
,  (
ö_addr
));

87 
î∫o
 = 
EAFNOSUPPORT
;

89 
	}
}

92 #i‚de‡
HAVE_INET_NTOP


94 
	$öë_¡›
 (
Ámûy
, c⁄° *
addΩå
, *
°Ωå
, 
size_t
 
Àn
)

96 *
p
 = (*Ë
addΩå
;

98 i‡(
Ámûy
 =
AF_INET
)

100 
ãmp
[
INET_ADDRSTRLEN
];

102 
	`¢¥ötf
(
ãmp
, —emp), "%d.%d.%d.%d", 
p
[0],Ö[1],Ö[2],Ö[3]);

104 i‡(
	`°æí
(
ãmp
Ë>
Àn
)

106 
î∫o
 = 
ENOSPC
;

107  
NULL
;

109 
	`°r˝y
(
°Ωå
, 
ãmp
);

110  
°Ωå
;

113 
î∫o
 = 
EAFNOSUPPORT
;

114  
NULL
;

115 
	}
}

119 
	$öë_sut›
 (
sockuni⁄
 *
su
, *
°r
)

121 
su
->
ß
.
ß_Ámûy
)

123 
AF_INET
:

124 
	`öë_¡›
 (
AF_INET
, &
su
->
sö
.
sö_addr
, 
°r
, 
INET_ADDRSTRLEN
);

126 #ifde‡
HAVE_IPV6


127 
AF_INET6
:

128 
	`öë_¡›
 (
AF_INET6
, &
su
->
sö6
.
sö6_addr
, 
°r
, 
INET6_ADDRSTRLEN
);

132  
°r
;

133 
	}
}

136 
	$°r2sockuni⁄
 (c⁄° *
°r
, 
sockuni⁄
 *
su
)

138 
ªt
;

140 
	`mem£t
 (
su
, 0,  (
sockuni⁄
));

142 
ªt
 = 
	`öë_±⁄
 (
AF_INET
, 
°r
, &
su
->
sö
.
sö_addr
);

143 i‡(
ªt
 > 0)

145 
su
->
sö
.
sö_Ámûy
 = 
AF_INET
;

146 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


147 
su
->
sö
.
sö_Àn
 = (
sockaddr_ö
);

151 #ifde‡
HAVE_IPV6


152 
ªt
 = 
	`öë_±⁄
 (
AF_INET6
, 
°r
, &
su
->
sö6
.
sö6_addr
);

153 i‡(
ªt
 > 0)

155 
su
->
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

156 #ifde‡
SIN6_LEN


157 
su
->
sö6
.
sö6_Àn
 = (
sockaddr_ö6
);

163 
	}
}

166 
	$sockuni⁄2°r
 (
sockuni⁄
 *
su
, *
buf
, 
size_t
 
Àn
)

168 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET
)

169  
	`öë_¡›
 (
AF_INET
, &
su
->
sö
.
sö_addr
, 
buf
, 
Àn
);

170 #ifde‡
HAVE_IPV6


171 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET6
)

172  
	`öë_¡›
 (
AF_INET6
, &
su
->
sö6
.
sö6_addr
, 
buf
, 
Àn
);

174  
NULL
;

175 
	}
}

177 
sockuni⁄
 *

178 
	$sockuni⁄_°r2su
 (c⁄° *
°r
)

180 
ªt
;

181 
sockuni⁄
 *
su
;

183 
su
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (
sockuni⁄
));

185 
ªt
 = 
	`öë_±⁄
 (
AF_INET
, 
°r
, &
su
->
sö
.
sö_addr
);

186 i‡(
ªt
 > 0)

188 
su
->
sö
.
sö_Ámûy
 = 
AF_INET
;

189 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


190 
su
->
sö
.
sö_Àn
 = (
sockaddr_ö
);

192  
su
;

194 #ifde‡
HAVE_IPV6


195 
ªt
 = 
	`öë_±⁄
 (
AF_INET6
, 
°r
, &
su
->
sö6
.
sö6_addr
);

196 i‡(
ªt
 > 0)

198 
su
->
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

199 #ifde‡
SIN6_LEN


200 
su
->
sö6
.
sö6_Àn
 = (
sockaddr_ö6
);

202  
su
;

206 
	`XFREE
 (
MTYPE_SOCKUNION
, 
su
);

207  
NULL
;

208 
	}
}

211 
	$sockuni⁄_su2°r
 (
sockuni⁄
 *
su
)

213 
°r
[
SU_ADDRSTRLEN
];

215 
su
->
ß
.
ß_Ámûy
)

217 
AF_INET
:

218 
	`öë_¡›
 (
AF_INET
, &
su
->
sö
.
sö_addr
, 
°r
,  (str));

220 #ifde‡
HAVE_IPV6


221 
AF_INET6
:

222 
	`öë_¡›
 (
AF_INET6
, &
su
->
sö6
.
sö6_addr
, 
°r
,  (str));

226  
	`XSTRDUP
 (
MTYPE_TMP
, 
°r
);

227 
	}
}

231 
	$sockuni⁄_n‹mÆi£_m≠≥d
 (
sockuni⁄
 *
su
)

233 
sockaddr_ö
 
sö
;

235 #ifde‡
HAVE_IPV6


236 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET6


237 && 
	`IN6_IS_ADDR_V4MAPPED
 (&
su
->
sö6
.
sö6_addr
))

239 
	`mem£t
 (&
sö
, 0,  (
sockaddr_ö
));

240 
sö
.
sö_Ámûy
 = 
AF_INET
;

241 
sö
.
sö_p‹t
 = 
su
->
sö6
.
sö6_p‹t
;

242 
	`mem˝y
 (&
sö
.
sö_addr
, ((*)&
su
->
sö6
.
sö6_addr
) + 12, 4);

243 
	`mem˝y
 (
su
, &
sö
,  (
sockaddr_ö
));

246 
	}
}

250 
	$sockuni⁄_sockë
 (
sockuni⁄
 *
su
)

252 
sock
;

254 
sock
 = 
	`sockë
 (
su
->
ß
.
ß_Ámûy
, 
SOCK_STREAM
, 0);

255 i‡(
sock
 < 0)

257 
	`zlog
 (
NULL
, 
LOG_WARNING
, "C™'àmakêsockë : %s", 
	`ß„_°ªº‹
 (
î∫o
));

261  
sock
;

262 
	}
}

266 
	$sockuni⁄_ac˚±
 (
sock
, 
sockuni⁄
 *
su
)

268 
sockÀn_t
 
Àn
;

269 
˛õ¡_sock
;

271 
Àn
 =  (
sockuni⁄
);

272 
˛õ¡_sock
 = 
	`ac˚±
 (
sock
, (
sockaddr
 *Ë
su
, &
Àn
);

274 
	`sockuni⁄_n‹mÆi£_m≠≥d
 (
su
);

275  
˛õ¡_sock
;

276 
	}
}

280 
	$sockuni⁄_sizeof
 (
sockuni⁄
 *
su
)

282 
ªt
;

284 
ªt
 = 0;

285 
su
->
ß
.
ß_Ámûy
)

287 
AF_INET
:

288 
ªt
 =  (
sockaddr_ö
);

290 #ifde‡
HAVE_IPV6


291 
AF_INET6
:

292 
ªt
 =  (
sockaddr_ö6
);

296  
ªt
;

297 
	}
}

301 
	$sockuni⁄_log
 (
sockuni⁄
 *
su
)

303 
buf
[
SU_ADDRSTRLEN
];

305 
su
->
ß
.
ß_Ámûy
)

307 
AF_INET
:

308 
	`¢¥ötf
 (
buf
, 
SU_ADDRSTRLEN
, "%s", 
	`öë_¡ﬂ
 (
su
->
sö
.
sö_addr
));

310 #ifde‡
HAVE_IPV6


311 
AF_INET6
:

312 
	`¢¥ötf
 (
buf
, 
SU_ADDRSTRLEN
, "%s",

313 
	`öë_¡›
 (
AF_INET6
, &(
su
->
sö6
.
sö6_addr
), 
buf
, 
SU_ADDRSTRLEN
));

317 
	`¢¥ötf
 (
buf
, 
SU_ADDRSTRLEN
, "af_unknow¿%d ", 
su
->
ß
.
ß_Ámûy
);

320  (
	`XSTRDUP
 (
MTYPE_TMP
, 
buf
));

321 
	}
}

327 
c⁄√˘_ªsu…


328 
	$sockuni⁄_c⁄√˘
 (
fd
, 
sockuni⁄
 *
≥îsu
, 
p‹t
,

329 
ifödex
)

331 
ªt
;

332 
vÆ
;

333 
sockuni⁄
 
su
;

335 
	`mem˝y
 (&
su
, 
≥îsu
,  (
sockuni⁄
));

337 
su
.
ß
.
ß_Ámûy
)

339 
AF_INET
:

340 
su
.
sö
.
sö_p‹t
 = 
p‹t
;

342 #ifde‡
HAVE_IPV6


343 
AF_INET6
:

344 
su
.
sö6
.
sö6_p‹t
 = 
p‹t
;

345 #ifde‡
KAME


346 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
su
.
sö6
.
sö6_addr
Ë&& 
ifödex
)

348 #ifde‡
HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID


350 #ifde‡
MUSICA


351 
su
.
sö6
.
sö6_sc›e_id
 = 
ifödex
;

354 #i‚de‡
MUSICA


355 
	`SET_IN6_LINKLOCAL_IFINDEX
 (
su
.
sö6
.
sö6_addr
, 
ifödex
);

364 
vÆ
 = 
	`f˙é
 (
fd
, 
F_GETFL
, 0);

365 
	`f˙é
 (
fd
, 
F_SETFL
, 
vÆ
|
O_NONBLOCK
);

368 
ªt
 = 
	`c⁄√˘
 (
fd
, (
sockaddr
 *Ë&
su
, 
	`sockuni⁄_sizeof
 (&su));

371 i‡(
ªt
 == 0)

373 
	`f˙é
 (
fd
, 
F_SETFL
, 
vÆ
);

374  
c⁄√˘_suc˚ss
;

378 i‡(
ªt
 < 0)

380 i‡(
î∫o
 !
EINPROGRESS
)

382 
	`zlog_öfo
 ("can't connectÅo %s fd %d : %s",

383 
	`sockuni⁄_log
 (&
su
), 
fd
, 
	`ß„_°ªº‹
 (
î∫o
));

384  
c⁄√˘_îr‹
;

388 
	`f˙é
 (
fd
, 
F_SETFL
, 
vÆ
);

390  
c⁄√˘_ö_¥ogªss
;

391 
	}
}

395 
	$sockuni⁄_°ªam_sockë
 (
sockuni⁄
 *
su
)

397 
sock
;

399 i‡(
su
->
ß
.
ß_Ámûy
 == 0)

400 
su
->
ß
.
ß_Ámûy
 = 
AF_INET_UNION
;

402 
sock
 = 
	`sockë
 (
su
->
ß
.
ß_Ámûy
, 
SOCK_STREAM
, 0);

404 i‡(
sock
 < 0)

405 
	`zlog
 (
NULL
, 
LOG_WARNING
, "can't make socket sockunion_stream_socket");

407  
sock
;

408 
	}
}

412 
	$sockuni⁄_böd
 (
sock
, 
sockuni⁄
 *
su
, 
p‹t
,

413 
sockuni⁄
 *
su_addr
)

415 
size
 = 0;

416 
ªt
;

418 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET
)

420 
size
 =  (
sockaddr_ö
);

421 
su
->
sö
.
sö_p‹t
 = 
	`ht⁄s
 (
p‹t
);

422 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


423 
su
->
sö
.
sö_Àn
 = 
size
;

425 i‡(
su_addr
 =
NULL
)

426 
su
->
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_ANY
);

428 #ifde‡
HAVE_IPV6


429 i‡(
su
->
ß
.
ß_Ámûy
 =
AF_INET6
)

431 
size
 =  (
sockaddr_ö6
);

432 
su
->
sö6
.
sö6_p‹t
 = 
	`ht⁄s
 (
p‹t
);

433 #ifde‡
SIN6_LEN


434 
su
->
sö6
.
sö6_Àn
 = 
size
;

436 i‡(
su_addr
 =
NULL
)

438 #i‡
	`deföed
(
LINUX_IPV6
Ë|| deföed(
NRL
)

439 
	`mem£t
 (&
su
->
sö6
.
sö6_addr
, 0,  (
ö6_addr
));

441 
su
->
sö6
.
sö6_addr
 = 
ö6addr_™y
;

448 
ªt
 = 
	`böd
 (
sock
, (
sockaddr
 *)
su
, 
size
);

449 i‡(
ªt
 < 0)

450 
	`zlog
 (
NULL
, 
LOG_WARNING
, "ˇn'àböd sockë : %s", 
	`ß„_°ªº‹
 (
î∫o
));

452  
ªt
;

453 
	}
}

456 
	$sock›t_ªu£addr
 (
sock
)

458 
ªt
;

459 
⁄
 = 1;

461 
ªt
 = 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

462 (*Ë&
⁄
,  (on));

463 i‡(
ªt
 < 0)

465 
	`zlog
 (
NULL
, 
LOG_WARNING
, "ˇn'à£àsock›àSO_REUSEADDRÅÿsockë %d", 
sock
);

469 
	}
}

471 #ifde‡
SO_REUSEPORT


473 
	$sock›t_ªu£p‹t
 (
sock
)

475 
ªt
;

476 
⁄
 = 1;

478 
ªt
 = 
	`£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_REUSEPORT
,

479 (*Ë&
⁄
,  (on));

480 i‡(
ªt
 < 0)

482 
	`zlog
 (
NULL
, 
LOG_WARNING
, "ˇn'à£àsock›àSO_REUSEPORTÅÿsockë %d", 
sock
);

486 
	}
}

489 
	$sock›t_ªu£p‹t
 (
sock
)

492 
	}
}

496 
	$sock›t_âl
 (
Ámûy
, 
sock
, 
âl
)

498 
ªt
;

500 #ifde‡
IP_TTL


501 i‡(
Ámûy
 =
AF_INET
)

503 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_TTL
,

504 (*Ë&
âl
,  ());

505 i‡(
ªt
 < 0)

507 
	`zlog
 (
NULL
, 
LOG_WARNING
, "ˇn'à£àsock›àIP_TTL %dÅÿsockë %d", 
âl
, 
sock
);

513 #ifde‡
HAVE_IPV6


514 i‡(
Ámûy
 =
AF_INET6
)

516 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_UNICAST_HOPS
,

517 (*Ë&
âl
,  ());

518 i‡(
ªt
 < 0)

520 
	`zlog
 (
NULL
, 
LOG_WARNING
, "can't set sockopt IPV6_UNICAST_HOPS %dÅo socket %d",

521 
âl
, 
sock
);

528 
	}
}

531 
	$sock›t_c‹k
 (
sock
, 
⁄off
)

533 #ifde‡
TCP_CORK


534  
	`£tsock›t
 (
sock
, 
IPPROTO_TCP
, 
TCP_CORK
, &
⁄off
, (onoff));

538 
	}
}

541 
	$sock›t_möâl
 (
Ámûy
, 
sock
, 
möâl
)

543 #ifde‡
IP_MINTTL


544 i‡(
Ámûy
 =
AF_INET
)

546 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IP
, 
IP_MINTTL
, &
möâl
, (minttl));

547 i‡(
ªt
 < 0)

548 
	`zlog
 (
NULL
, 
LOG_WARNING
,

550 
möâl
, 
sock
, 
	`ß„_°ªº‹
 (
î∫o
));

551  
ªt
;

554 #ifde‡
IPV6_MINHOPCNT


555 i‡(
Ámûy
 =
AF_INET6
)

557 
ªt
 = 
	`£tsock›t
 (
sock
, 
IPPROTO_IPV6
, 
IPV6_MINHOPCNT
, &
möâl
, (minttl));

558 i‡(
ªt
 < 0)

559 
	`zlog
 (
NULL
, 
LOG_WARNING
,

561 
möâl
, 
sock
, 
	`ß„_°ªº‹
 (
î∫o
));

562  
ªt
;

566 
î∫o
 = 
EOPNOTSUPP
;

568 
	}
}

572 
	$sockuni⁄_ßme
 (
sockuni⁄
 *
su1
, sockuni⁄ *
su2
)

574 
ªt
 = 0;

576 i‡(
su1
->
ß
.
ß_Ámûy
 !
su2
->sa.sa_family)

579 
su1
->
ß
.
ß_Ámûy
)

581 
AF_INET
:

582 
ªt
 = 
	`memcmp
 (&
su1
->
sö
.
sö_addr
, &
su2
->sin.sin_addr,

583  (
ö_addr
));

585 #ifde‡
HAVE_IPV6


586 
AF_INET6
:

587 
ªt
 = 
	`memcmp
 (&
su1
->
sö6
.
sö6_addr
, &
su2
->sin6.sin6_addr,

588  (
ö6_addr
));

592 i‡(
ªt
 == 0)

596 
	}
}

599 
sockuni⁄
 *

600 
	$sockuni⁄_gësock«me
 (
fd
)

602 
ªt
;

603 
sockÀn_t
 
Àn
;

606 
sockaddr
 
ß
;

607 
sockaddr_ö
 
sö
;

608 #ifde‡
HAVE_IPV6


609 
sockaddr_ö6
 
sö6
;

611 
tmp_buf„r
[128];

612 } 
«me
;

613 
sockuni⁄
 *
su
;

615 
	`mem£t
 (&
«me
, 0, Çame);

616 
Àn
 =  
«me
;

618 
ªt
 = 
	`gësock«me
 (
fd
, (
sockaddr
 *)&
«me
, &
Àn
);

619 i‡(
ªt
 < 0)

621 
	`zlog_w¨n
 ("Can't getÜocaláddressándÖort by getsockname: %s",

622 
	`ß„_°ªº‹
 (
î∫o
));

623  
NULL
;

626 i‡(
«me
.
ß
.
ß_Ámûy
 =
AF_INET
)

628 
su
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (
sockuni⁄
));

629 
	`mem˝y
 (
su
, &
«me
,  (
sockaddr_ö
));

630  
su
;

632 #ifde‡
HAVE_IPV6


633 i‡(
«me
.
ß
.
ß_Ámûy
 =
AF_INET6
)

635 
su
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (
sockuni⁄
));

636 
	`mem˝y
 (
su
, &
«me
,  (
sockaddr_ö6
));

637 
	`sockuni⁄_n‹mÆi£_m≠≥d
 (
su
);

638  
su
;

641  
NULL
;

642 
	}
}

645 
sockuni⁄
 *

646 
	$sockuni⁄_gë≥î«me
 (
fd
)

648 
ªt
;

649 
sockÀn_t
 
Àn
;

652 
sockaddr
 
ß
;

653 
sockaddr_ö
 
sö
;

654 #ifde‡
HAVE_IPV6


655 
sockaddr_ö6
 
sö6
;

657 
tmp_buf„r
[128];

658 } 
«me
;

659 
sockuni⁄
 *
su
;

661 
	`mem£t
 (&
«me
, 0, Çame);

662 
Àn
 =  
«me
;

663 
ªt
 = 
	`gë≥î«me
 (
fd
, (
sockaddr
 *)&
«me
, &
Àn
);

664 i‡(
ªt
 < 0)

666 
	`zlog
 (
NULL
, 
LOG_WARNING
, "Can't getÑemoteáddressándÖort: %s",

667 
	`ß„_°ªº‹
 (
î∫o
));

668  
NULL
;

671 i‡(
«me
.
ß
.
ß_Ámûy
 =
AF_INET
)

673 
su
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (
sockuni⁄
));

674 
	`mem˝y
 (
su
, &
«me
,  (
sockaddr_ö
));

675  
su
;

677 #ifde‡
HAVE_IPV6


678 i‡(
«me
.
ß
.
ß_Ámûy
 =
AF_INET6
)

680 
su
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (
sockuni⁄
));

681 
	`mem˝y
 (
su
, &
«me
,  (
sockaddr_ö6
));

682 
	`sockuni⁄_n‹mÆi£_m≠≥d
 (
su
);

683  
su
;

686  
NULL
;

687 
	}
}

690 
__©åibuã__
 ((
unu£d
))

691 
	$sockuni⁄_¥öt
 (
sockuni⁄
 *
su
)

693 i‡(
su
 =
NULL
)

696 
su
->
ß
.
ß_Ámûy
)

698 
AF_INET
:

699 
	`¥ötf
 ("%s\n", 
	`öë_¡ﬂ
 (
su
->
sö
.
sö_addr
));

701 #ifde‡
HAVE_IPV6


702 
AF_INET6
:

704 
buf
 [
SU_ADDRSTRLEN
];

706 
	`¥ötf
 ("%s\n", 
	`öë_¡›
 (
AF_INET6
, &(
su
->
sö6
.
sö6_addr
),

707 
buf
,  (buf)));

712 #ifde‡
AF_LINK


713 
AF_LINK
:

715 
sockaddr_dl
 *
sdl
;

717 
sdl
 = (
sockaddr_dl
 *)&(
su
->
ß
);

718 
	`¥ötf
 ("lök#%d\n", 
sdl
->
sdl_ödex
);

723 
	`¥ötf
 ("af_unknow¿%d\n", 
su
->
ß
.
ß_Ámûy
);

726 
	}
}

728 #ifde‡
HAVE_IPV6


730 
	$ö6addr_cmp
 (
ö6_addr
 *
addr1
, ö6_add∏*
addr2
)

732 
i
;

733 
u_ch¨
 *
p1
, *
p2
;

735 
p1
 = (
u_ch¨
 *)
addr1
;

736 
p2
 = (
u_ch¨
 *)
addr2
;

738 
i
 = 0; i <  (
ö6_addr
); i++)

740 i‡(
p1
[
i
] > 
p2
[i])

742 i‡(
p1
[
i
] < 
p2
[i])

746 
	}
}

750 
	$sockuni⁄_cmp
 (
sockuni⁄
 *
su1
, sockuni⁄ *
su2
)

752 i‡(
su1
->
ß
.
ß_Ámûy
 > 
su2
->sa.sa_family)

754 i‡(
su1
->
ß
.
ß_Ámûy
 < 
su2
->sa.sa_family)

757 i‡(
su1
->
ß
.
ß_Ámûy
 =
AF_INET
)

759 i‡(
	`¡ohl
 (
su1
->
sö
.
sö_addr
.
s_addr
Ë=¡oh»(
su2
->sin.sin_addr.s_addr))

761 i‡(
	`¡ohl
 (
su1
->
sö
.
sö_addr
.
s_addr
Ë>Çtoh»(
su2
->sin.sin_addr.s_addr))

766 #ifde‡
HAVE_IPV6


767 i‡(
su1
->
ß
.
ß_Ámûy
 =
AF_INET6
)

768  
	`ö6addr_cmp
 (&
su1
->
sö6
.
sö6_addr
, &
su2
->sin6.sin6_addr);

771 
	}
}

774 
sockuni⁄
 *

775 
	$sockuni⁄_dup
 (
sockuni⁄
 *
su
)

777 
sockuni⁄
 *
dup
 = 
	`XCALLOC
 (
MTYPE_SOCKUNION
,  (sockunion));

778 
	`mem˝y
 (
dup
, 
su
,  (
sockuni⁄
));

779  
dup
;

780 
	}
}

783 
	$sockuni⁄_‰ì
 (
sockuni⁄
 *
su
)

785 
	`XFREE
 (
MTYPE_SOCKUNION
, 
su
);

786 
	}
}

	@common-libs/3rd-party/quagga-lib/src/str.c

20 
	~<zebø.h
>

22 #i‚de‡
HAVE_SNPRINTF


28 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

30 
va_li°
 
¨gs
;

32 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

34  
	`v•rötf
 (
°r
, 
f‹m©
, 
¨gs
);

35 
	}
}

38 #i‚de‡
HAVE_STRLCPY


47 
size_t


48 
	$°æ˝y
(*
d
, c⁄° *
s
, 
size_t
 
bufsize
)

50 
size_t
 
Àn
 = 
	`°æí
(
s
);

51 
size_t
 
ªt
 = 
Àn
;

52 i‡(
bufsize
 > 0) {

53 i‡(
Àn
 >
bufsize
)

54 
Àn
 = 
bufsize
-1;

55 
	`mem˝y
(
d
, 
s
, 
Àn
);

56 
d
[
Àn
] = 0;

58  
ªt
;

59 
	}
}

62 #i‚de‡
HAVE_STRLCAT


70 
size_t


71 
	$°æˇt
(*
d
, c⁄° *
s
, 
size_t
 
bufsize
)

73 
size_t
 
Àn1
 = 
	`°æí
(
d
);

74 
size_t
 
Àn2
 = 
	`°æí
(
s
);

75 
size_t
 
ªt
 = 
Àn1
 + 
Àn2
;

77 i‡(
Àn1
 < 
bufsize
 - 1) {

78 i‡(
Àn2
 >
bufsize
 - 
Àn1
)

79 
Àn2
 = 
bufsize
 - 
Àn1
 - 1;

80 
	`mem˝y
(
d
+
Àn1
, 
s
, 
Àn2
);

81 
d
[
Àn1
+
Àn2
] = 0;

83  
ªt
;

84 
	}
}

87 #i‚de‡
HAVE_STRNLEN


88 
size_t


89 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
)

91 c⁄° *
p
;

92  (
p
 = (c⁄° *)
	`memchr
(
s
, '\0', 
maxÀn
)Ë? (
size_t
)(p-s) : maxlen;

93 
	}
}

96 #i‚de‡
HAVE_STRNDUP


98 
	$°∫dup
 (c⁄° *
s
, 
size_t
 
maxÀn
)

100 
size_t
 
Àn
 = 
	`°∫Àn
 (
s
, 
maxÀn
);

101 *
√w
 = (*Ë
	`mÆloc
 (
Àn
 + 1);

103 i‡(
√w
 =
NULL
)

104  
NULL
;

106 
√w
[
Àn
] = '\0';

107  (*Ë
	`mem˝y
 (
√w
, 
s
, 
Àn
);

108 
	}
}

	@common-libs/3rd-party/quagga-lib/src/stream.c

23 
	~<°ddef.h
>

24 
	~<zebø.h
>

26 
	~"°ªam.h
"

27 
	~"mem‹y.h
"

28 
	~"√tw‹k.h
"

29 
	~"¥efix.h
"

30 
	~"log.h
"

33 
	#GETP_VALID
(
S
,
G
) \

34 ((
G
Ë<(
S
)->
ídp
)

	)

35 
	#PUT_AT_VALID
(
S
,
G
Ë
	`GETP_VALID
(S,G)

	)

36 
	#ENDP_VALID
(
S
,
E
) \

37 ((
E
Ë<(
S
)->
size
)

	)

54 
	#STREAM_WARN_OFFSETS
(
S
) \

55 
	`zlog_w¨n
 ("&(struct stream): %p, size: %lu,Éndp: %lu, getp: %lu\n", \

56 (
S
), \

57 (Ë(
S
)->
size
, \

58 (Ë(
S
)->
gëp
, \

59 (Ë(
S
)->
ídp
)\

60 

	)

61 
	#STREAM_VERIFY_SANE
(
S
) \

63 i‡–!(
	`GETP_VALID
(
S
, (S)->
gëp
)Ë&& 
	`ENDP_VALID
(S, (S)->
ídp
) ) \

64 
	`STREAM_WARN_OFFSETS
(
S
); \

65 
	`as£π
 ( 
	`GETP_VALID
(
S
, (S)->
gëp
) ); \

66 
	`as£π
 ( 
	`ENDP_VALID
(
S
, (S)->
ídp
) ); \

67 } 0)

	)

69 
	#STREAM_BOUND_WARN
(
S
, 
WHAT
) \

71 
	`zlog_w¨n
 ("%s: Aâem±Åÿ%†ouào‡bounds", 
__func__
, (
WHAT
)); \

72 
	`STREAM_WARN_OFFSETS
(
S
); \

73 
	`as£π
 (0); \

74 } 0)

	)

77 
	#CHECK_SIZE
(
S
, 
Z
) \

79 i‡(((
S
)->
ídp
 + (
Z
)Ë> (S)->
size
) \

81 
	`zlog_w¨n
 ("CHECK_SIZE:ÅruncatingÑequested size %lu\n", \

82 (Ë(
Z
)); \

83 
	`STREAM_WARN_OFFSETS
(
S
); \

84 (
Z
Ë(
S
)->
size
 - (S)->
ídp
; \

86 } 0);

	)

89 
°ªam
 *

90 
	$°ªam_√w
 (
size_t
 
size
)

92 
°ªam
 *
s
;

94 
	`as£π
 (
size
 > 0);

96 i‡(
size
 == 0)

98 
	`zlog_w¨n
 ("stream_new(): called with 0 size!");

99  
NULL
;

102 
s
 = 
	`XCALLOC
 (
MTYPE_STREAM
,  (
°ªam
));

104 i‡(
s
 =
NULL
)

105  
s
;

107 i‡–(
s
->
d©a
 = 
	`XMALLOC
 (
MTYPE_STREAM_DATA
, 
size
)Ë=
NULL
)

109 
	`XFREE
 (
MTYPE_STREAM
, 
s
);

110  
NULL
;

113 
s
->
size
 = size;

114  
s
;

115 
	}
}

119 
	$°ªam_‰ì
 (
°ªam
 *
s
)

121 i‡(!
s
)

124 
	`XFREE
 (
MTYPE_STREAM_DATA
, 
s
->
d©a
);

125 
	`XFREE
 (
MTYPE_STREAM
, 
s
);

126 
	}
}

128 
°ªam
 *

129 
	$°ªam_c›y
 (
°ªam
 *
√w
, °ªam *
§c
)

131 
	`STREAM_VERIFY_SANE
 (
§c
);

133 
	`as£π
 (
√w
 !
NULL
);

134 
	`as£π
 (
	`STREAM_SIZE
(
√w
Ë>
§c
->
ídp
);

136 
√w
->
ídp
 = 
§c
->endp;

137 
√w
->
gëp
 = 
§c
->getp;

139 
	`mem˝y
 (
√w
->
d©a
, 
§c
->d©a, src->
ídp
);

141  
√w
;

142 
	}
}

144 
°ªam
 *

145 
	$°ªam_dup
 (
°ªam
 *
s
)

147 
°ªam
 *
√w
;

149 
	`STREAM_VERIFY_SANE
 (
s
);

151 i‡–(
√w
 = 
	`°ªam_√w
 (
s
->
ídp
)Ë=
NULL
)

152  
NULL
;

154  (
	`°ªam_c›y
 (
√w
, 
s
));

155 
	}
}

157 
size_t


158 
	$°ªam_ªsize
 (
°ªam
 *
s
, 
size_t
 
√wsize
)

160 
u_ch¨
 *
√wd©a
;

161 
	`STREAM_VERIFY_SANE
 (
s
);

163 
√wd©a
 = 
	`XREALLOC
 (
MTYPE_STREAM_DATA
, 
s
->
d©a
, 
√wsize
);

165 i‡(
√wd©a
 =
NULL
)

166  
s
->
size
;

168 
s
->
d©a
 = 
√wd©a
;

169 
s
->
size
 = 
√wsize
;

171 i‡(
s
->
ídp
 > s->
size
)

172 
s
->
ídp
 = s->
size
;

173 i‡(
s
->
gëp
 > s->
ídp
)

174 
s
->
gëp
 = s->
ídp
;

176 
	`STREAM_VERIFY_SANE
 (
s
);

178  
s
->
size
;

179 
	}
}

181 
size_t


182 
	$°ªam_gë_gëp
 (
°ªam
 *
s
)

184 
	`STREAM_VERIFY_SANE
(
s
);

185  
s
->
gëp
;

186 
	}
}

188 
size_t


189 
	$°ªam_gë_ídp
 (
°ªam
 *
s
)

191 
	`STREAM_VERIFY_SANE
(
s
);

192  
s
->
ídp
;

193 
	}
}

195 
size_t


196 
	$°ªam_gë_size
 (
°ªam
 *
s
)

198 
	`STREAM_VERIFY_SANE
(
s
);

199  
s
->
size
;

200 
	}
}

204 
	$°ªam_£t_gëp
 (
°ªam
 *
s
, 
size_t
 
pos
)

206 
	`STREAM_VERIFY_SANE
(
s
);

208 i‡(!
	`GETP_VALID
 (
s
, 
pos
))

210 
	`STREAM_BOUND_WARN
 (
s
, "set getp");

211 
pos
 = 
s
->
ídp
;

214 
s
->
gëp
 = 
pos
;

215 
	}
}

219 
	$°ªam_f‹w¨d_gëp
 (
°ªam
 *
s
, 
size_t
 
size
)

221 
	`STREAM_VERIFY_SANE
(
s
);

223 i‡(!
	`GETP_VALID
 (
s
, s->
gëp
 + 
size
))

225 
	`STREAM_BOUND_WARN
 (
s
, "seek getp");

229 
s
->
gëp
 +
size
;

230 
	}
}

233 
	$°ªam_f‹w¨d_ídp
 (
°ªam
 *
s
, 
size_t
 
size
)

235 
	`STREAM_VERIFY_SANE
(
s
);

237 i‡(!
	`ENDP_VALID
 (
s
, s->
ídp
 + 
size
))

239 
	`STREAM_BOUND_WARN
 (
s
, "seekÉndp");

243 
s
->
ídp
 +
size
;

244 
	}
}

248 
	$°ªam_gë
 (*
d°
, 
°ªam
 *
s
, 
size_t
 
size
)

250 
	`STREAM_VERIFY_SANE
(
s
);

252 i‡(
	`STREAM_READABLE
(
s
Ë< 
size
)

254 
	`STREAM_BOUND_WARN
 (
s
, "get");

258 
	`mem˝y
 (
d°
, 
s
->
d©a
 + s->
gëp
, 
size
);

259 
s
->
gëp
 +
size
;

260 
	}
}

263 
u_ch¨


264 
	$°ªam_gëc
 (
°ªam
 *
s
)

266 
u_ch¨
 
c
;

268 
	`STREAM_VERIFY_SANE
 (
s
);

270 i‡(
	`STREAM_READABLE
(
s
Ë<  (
u_ch¨
))

272 
	`STREAM_BOUND_WARN
 (
s
, "get char");

275 
c
 = 
s
->
d©a
[s->
gëp
++];

277  
c
;

278 
	}
}

281 
u_ch¨


282 
	$°ªam_gëc_‰om
 (
°ªam
 *
s
, 
size_t
 
‰om
)

284 
u_ch¨
 
c
;

286 
	`STREAM_VERIFY_SANE
(
s
);

288 i‡(!
	`GETP_VALID
 (
s
, 
‰om
 +  (
u_ch¨
)))

290 
	`STREAM_BOUND_WARN
 (
s
, "get char");

294 
c
 = 
s
->
d©a
[
‰om
];

296  
c
;

297 
	}
}

300 
u_öt16_t


301 
	$°ªam_gëw
 (
°ªam
 *
s
)

303 
u_öt16_t
 
w
;

305 
	`STREAM_VERIFY_SANE
 (
s
);

307 i‡(
	`STREAM_READABLE
 (
s
Ë<  (
u_öt16_t
))

309 
	`STREAM_BOUND_WARN
 (
s
, "get ");

313 
w
 = 
s
->
d©a
[s->
gëp
++] << 8;

314 
w
 |
s
->
d©a
[s->
gëp
++];

316  
w
;

317 
	}
}

320 
u_öt16_t


321 
	$°ªam_gëw_‰om
 (
°ªam
 *
s
, 
size_t
 
‰om
)

323 
u_öt16_t
 
w
;

325 
	`STREAM_VERIFY_SANE
(
s
);

327 i‡(!
	`GETP_VALID
 (
s
, 
‰om
 +  (
u_öt16_t
)))

329 
	`STREAM_BOUND_WARN
 (
s
, "get ");

333 
w
 = 
s
->
d©a
[
‰om
++] << 8;

334 
w
 |
s
->
d©a
[
‰om
];

336  
w
;

337 
	}
}

340 
u_öt32_t


341 
	$°ªam_gël_‰om
 (
°ªam
 *
s
, 
size_t
 
‰om
)

343 
u_öt32_t
 
l
;

345 
	`STREAM_VERIFY_SANE
(
s
);

347 i‡(!
	`GETP_VALID
 (
s
, 
‰om
 +  (
u_öt32_t
)))

349 
	`STREAM_BOUND_WARN
 (
s
, "getÜong");

353 
l
 = 
s
->
d©a
[
‰om
++] << 24;

354 
l
 |
s
->
d©a
[
‰om
++] << 16;

355 
l
 |
s
->
d©a
[
‰om
++] << 8;

356 
l
 |
s
->
d©a
[
‰om
];

358  
l
;

359 
	}
}

361 
u_öt32_t


362 
	$°ªam_gël
 (
°ªam
 *
s
)

364 
u_öt32_t
 
l
;

366 
	`STREAM_VERIFY_SANE
(
s
);

368 i‡(
	`STREAM_READABLE
 (
s
Ë<  (
u_öt32_t
))

370 
	`STREAM_BOUND_WARN
 (
s
, "getÜong");

374 
l
 = 
s
->
d©a
[s->
gëp
++] << 24;

375 
l
 |
s
->
d©a
[s->
gëp
++] << 16;

376 
l
 |
s
->
d©a
[s->
gëp
++] << 8;

377 
l
 |
s
->
d©a
[s->
gëp
++];

379  
l
;

380 
	}
}

383 
uöt64_t


384 
	$°ªam_gëq_‰om
 (
°ªam
 *
s
, 
size_t
 
‰om
)

386 
uöt64_t
 
q
;

388 
	`STREAM_VERIFY_SANE
(
s
);

390 i‡(!
	`GETP_VALID
 (
s
, 
‰om
 +  (
uöt64_t
)))

392 
	`STREAM_BOUND_WARN
 (
s
, "get quad");

396 
q
 = ((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 56;

397 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 48;

398 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 40;

399 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 32;

400 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 24;

401 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 16;

402 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]) << 8;

403 
q
 |((
uöt64_t
Ë
s
->
d©a
[
‰om
++]);

405  
q
;

406 
	}
}

408 
uöt64_t


409 
	$°ªam_gëq
 (
°ªam
 *
s
)

411 
uöt64_t
 
q
;

413 
	`STREAM_VERIFY_SANE
(
s
);

415 i‡(
	`STREAM_READABLE
 (
s
Ë<  (
uöt64_t
))

417 
	`STREAM_BOUND_WARN
 (
s
, "get quad");

421 
q
 = ((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 56;

422 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 48;

423 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 40;

424 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 32;

425 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 24;

426 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 16;

427 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]) << 8;

428 
q
 |((
uöt64_t
Ë
s
->
d©a
[s->
gëp
++]);

430  
q
;

431 
	}
}

434 
u_öt32_t


435 
	$°ªam_gë_ùv4
 (
°ªam
 *
s
)

437 
u_öt32_t
 
l
;

439 
	`STREAM_VERIFY_SANE
(
s
);

441 i‡(
	`STREAM_READABLE
 (
s
Ë< (
u_öt32_t
))

443 
	`STREAM_BOUND_WARN
 (
s
, "get ipv4");

447 
	`mem˝y
 (&
l
, 
s
->
d©a
 + s->
gëp
, (
u_öt32_t
));

448 
s
->
gëp
 +(
u_öt32_t
);

450  
l
;

451 
	}
}

461 
	$°ªam_put
 (
°ªam
 *
s
, c⁄° *
§c
, 
size_t
 
size
)

465 
	`CHECK_SIZE
(
s
, 
size
);

467 
	`STREAM_VERIFY_SANE
(
s
);

469 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
size
)

471 
	`STREAM_BOUND_WARN
 (
s
, "put");

475 i‡(
§c
)

476 
	`mem˝y
 (
s
->
d©a
 + s->
ídp
, 
§c
, 
size
);

478 
	`mem£t
 (
s
->
d©a
 + s->
ídp
, 0, 
size
);

480 
s
->
ídp
 +
size
;

481 
	}
}

485 
	$°ªam_putc
 (
°ªam
 *
s
, 
u_ch¨
 
c
)

487 
	`STREAM_VERIFY_SANE
(
s
);

489 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< (
u_ch¨
))

491 
	`STREAM_BOUND_WARN
 (
s
, "put");

495 
s
->
d©a
[s->
ídp
++] = 
c
;

496   (
u_ch¨
);

497 
	}
}

501 
	$°ªam_putw
 (
°ªam
 *
s
, 
u_öt16_t
 
w
)

503 
	`STREAM_VERIFY_SANE
 (
s
);

505 i‡(
	`STREAM_WRITEABLE
 (
s
Ë<  (
u_öt16_t
))

507 
	`STREAM_BOUND_WARN
 (
s
, "put");

511 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
w
 >> 8);

512 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
Ë
w
;

515 
	}
}

519 
	$°ªam_pué
 (
°ªam
 *
s
, 
u_öt32_t
 
l
)

521 
	`STREAM_VERIFY_SANE
 (
s
);

523 i‡(
	`STREAM_WRITEABLE
 (
s
Ë<  (
u_öt32_t
))

525 
	`STREAM_BOUND_WARN
 (
s
, "put");

529 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
l
 >> 24);

530 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
l
 >> 16);

531 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
l
 >> 8);

532 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)
l
;

535 
	}
}

539 
	$°ªam_putq
 (
°ªam
 *
s
, 
uöt64_t
 
q
)

541 
	`STREAM_VERIFY_SANE
 (
s
);

543 i‡(
	`STREAM_WRITEABLE
 (
s
Ë<  (
uöt64_t
))

545 
	`STREAM_BOUND_WARN
 (
s
, "put quad");

549 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 56);

550 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 48);

551 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 40);

552 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 32);

553 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 24);

554 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 16);

555 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)(
q
 >> 8);

556 
s
->
d©a
[s->
ídp
++] = (
u_ch¨
)
q
;

559 
	}
}

562 
	$°ªam_putc_©
 (
°ªam
 *
s
, 
size_t
 
puç
, 
u_ch¨
 
c
)

564 
	`STREAM_VERIFY_SANE
(
s
);

566 i‡(!
	`PUT_AT_VALID
 (
s
, 
puç
 +  (
u_ch¨
)))

568 
	`STREAM_BOUND_WARN
 (
s
, "put");

572 
s
->
d©a
[
puç
] = 
c
;

575 
	}
}

578 
	$°ªam_putw_©
 (
°ªam
 *
s
, 
size_t
 
puç
, 
u_öt16_t
 
w
)

580 
	`STREAM_VERIFY_SANE
(
s
);

582 i‡(!
	`PUT_AT_VALID
 (
s
, 
puç
 +  (
u_öt16_t
)))

584 
	`STREAM_BOUND_WARN
 (
s
, "put");

588 
s
->
d©a
[
puç
] = (
u_ch¨
)(
w
 >> 8);

589 
s
->
d©a
[
puç
 + 1] = (
u_ch¨
Ë
w
;

592 
	}
}

595 
	$°ªam_pué_©
 (
°ªam
 *
s
, 
size_t
 
puç
, 
u_öt32_t
 
l
)

597 
	`STREAM_VERIFY_SANE
(
s
);

599 i‡(!
	`PUT_AT_VALID
 (
s
, 
puç
 +  (
u_öt32_t
)))

601 
	`STREAM_BOUND_WARN
 (
s
, "put");

604 
s
->
d©a
[
puç
] = (
u_ch¨
)(
l
 >> 24);

605 
s
->
d©a
[
puç
 + 1] = (
u_ch¨
)(
l
 >> 16);

606 
s
->
d©a
[
puç
 + 2] = (
u_ch¨
)(
l
 >> 8);

607 
s
->
d©a
[
puç
 + 3] = (
u_ch¨
)
l
;

610 
	}
}

613 
	$°ªam_putq_©
 (
°ªam
 *
s
, 
size_t
 
puç
, 
uöt64_t
 
q
)

615 
	`STREAM_VERIFY_SANE
(
s
);

617 i‡(!
	`PUT_AT_VALID
 (
s
, 
puç
 +  (
uöt64_t
)))

619 
	`STREAM_BOUND_WARN
 (
s
, "put");

622 
s
->
d©a
[
puç
] = (
u_ch¨
)(
q
 >> 56);

623 
s
->
d©a
[
puç
 + 1] = (
u_ch¨
)(
q
 >> 48);

624 
s
->
d©a
[
puç
 + 2] = (
u_ch¨
)(
q
 >> 40);

625 
s
->
d©a
[
puç
 + 3] = (
u_ch¨
)(
q
 >> 32);

626 
s
->
d©a
[
puç
 + 4] = (
u_ch¨
)(
q
 >> 24);

627 
s
->
d©a
[
puç
 + 5] = (
u_ch¨
)(
q
 >> 16);

628 
s
->
d©a
[
puç
 + 6] = (
u_ch¨
)(
q
 >> 8);

629 
s
->
d©a
[
puç
 + 7] = (
u_ch¨
)
q
;

632 
	}
}

636 
	$°ªam_put_ùv4
 (
°ªam
 *
s
, 
u_öt32_t
 
l
)

638 
	`STREAM_VERIFY_SANE
(
s
);

640 i‡(
	`STREAM_WRITEABLE
 (
s
Ë<  (
u_öt32_t
))

642 
	`STREAM_BOUND_WARN
 (
s
, "put");

645 
	`mem˝y
 (
s
->
d©a
 + s->
ídp
, &
l
,  (
u_öt32_t
));

646 
s
->
ídp
 + (
u_öt32_t
);

648   (
u_öt32_t
);

649 
	}
}

653 
	$°ªam_put_ö_addr
 (
°ªam
 *
s
, 
ö_addr
 *
addr
)

655 
	`STREAM_VERIFY_SANE
(
s
);

657 i‡(
	`STREAM_WRITEABLE
 (
s
Ë<  (
u_öt32_t
))

659 
	`STREAM_BOUND_WARN
 (
s
, "put");

663 
	`mem˝y
 (
s
->
d©a
 + s->
ídp
, 
addr
,  (
u_öt32_t
));

664 
s
->
ídp
 + (
u_öt32_t
);

666   (
u_öt32_t
);

667 
	}
}

671 
	$°ªam_put_¥efix
 (
°ªam
 *
s
, 
¥efix
 *
p
)

673 
size_t
 
psize
;

675 
	`STREAM_VERIFY_SANE
(
s
);

677 
psize
 = 
	`PSIZE
 (
p
->
¥efixÀn
);

679 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
psize
)

681 
	`STREAM_BOUND_WARN
 (
s
, "put");

685 
	`°ªam_putc
 (
s
, 
p
->
¥efixÀn
);

686 
	`mem˝y
 (
s
->
d©a
 + s->
ídp
, &
p
->
u
.
¥efix
, 
psize
);

687 
s
->
ídp
 +
psize
;

689  
psize
;

690 
	}
}

694 
	$°ªam_ªad
 (
°ªam
 *
s
, 
fd
, 
size_t
 
size
)

696 
nbyãs
;

698 
	`STREAM_VERIFY_SANE
(
s
);

700 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
size
)

702 
	`STREAM_BOUND_WARN
 (
s
, "put");

706 
nbyãs
 = 
	`ªadn
 (
fd
, 
s
->
d©a
 + s->
ídp
, 
size
);

708 i‡(
nbyãs
 > 0)

709 
s
->
ídp
 +
nbyãs
;

711  
nbyãs
;

712 
	}
}

716 
	$°ªam_ªad_unblock
 (
°ªam
 *
s
, 
fd
, 
size_t
 
size
)

718 
nbyãs
;

719 
vÆ
;

721 
	`STREAM_VERIFY_SANE
(
s
);

723 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
size
)

725 
	`STREAM_BOUND_WARN
 (
s
, "put");

729 
vÆ
 = 
	`f˙é
 (
fd
, 
F_GETFL
, 0);

730 
	`f˙é
 (
fd
, 
F_SETFL
, 
vÆ
|
O_NONBLOCK
);

731 
nbyãs
 = 
	`ªad
 (
fd
, 
s
->
d©a
 + s->
ídp
, 
size
);

732 
	`f˙é
 (
fd
, 
F_SETFL
, 
vÆ
);

734 i‡(
nbyãs
 > 0)

735 
s
->
ídp
 +
nbyãs
;

737  
nbyãs
;

738 
	}
}

740 
ssize_t


741 
	$°ªam_ªad_åy
(
°ªam
 *
s
, 
fd
, 
size_t
 
size
)

743 
ssize_t
 
nbyãs
;

745 
	`STREAM_VERIFY_SANE
(
s
);

747 i‡(
	`STREAM_WRITEABLE
(
s
Ë< 
size
)

749 
	`STREAM_BOUND_WARN
 (
s
, "put");

755 i‡((
nbyãs
 = 
	`ªad
(
fd
, 
s
->
d©a
 + s->
ídp
, 
size
)) >= 0)

757 
s
->
ídp
 +
nbyãs
;

758  
nbyãs
;

761 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

763 
	`zlog_w¨n
("%s:Ñód faûed o¿fd %d: %s", 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

765 
	}
}

770 
ssize_t


771 
	$°ªam_ªcv‰om
 (
°ªam
 *
s
, 
fd
, 
size_t
 
size
, 
Êags
,

772 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

774 
ssize_t
 
nbyãs
;

776 
	`STREAM_VERIFY_SANE
(
s
);

778 i‡(
	`STREAM_WRITEABLE
(
s
Ë< 
size
)

780 
	`STREAM_BOUND_WARN
 (
s
, "put");

786 i‡((
nbyãs
 = 
	`ªcv‰om
 (
fd
, 
s
->
d©a
 + s->
ídp
, 
size
,

787 
Êags
, 
‰om
, 
‰omÀn
)) >= 0)

789 
s
->
ídp
 +
nbyãs
;

790  
nbyãs
;

793 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

795 
	`zlog_w¨n
("%s:Ñód faûed o¿fd %d: %s", 
__func__
, 
fd
, 
	`ß„_°ªº‹
(
î∫o
));

797 
	}
}

804 
ssize_t


805 
	$°ªam_ªcvmsg
 (
°ªam
 *
s
, 
fd
, 
msghdr
 *
msgh
, 
Êags
,

806 
size_t
 
size
)

808 
nbyãs
;

809 
iovec
 *
iov
;

811 
	`STREAM_VERIFY_SANE
(
s
);

812 
	`as£π
 (
msgh
->
msg_iovÀn
 > 0);

814 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
size
)

816 
	`STREAM_BOUND_WARN
 (
s
, "put");

822 
iov
 = &(
msgh
->
msg_iov
[0]);

823 
iov
->
iov_ba£
 = (
s
->
d©a
 + s->
ídp
);

824 
iov
->
iov_Àn
 = 
size
;

826 
nbyãs
 = 
	`ªcvmsg
 (
fd
, 
msgh
, 
Êags
);

828 i‡(
nbyãs
 > 0)

829 
s
->
ídp
 +
nbyãs
;

831  
nbyãs
;

832 
	}
}

835 
size_t


836 
	$°ªam_wrôe
 (
°ªam
 *
s
, c⁄° *
±r
, 
size_t
 
size
)

839 
	`CHECK_SIZE
(
s
, 
size
);

841 
	`STREAM_VERIFY_SANE
(
s
);

843 i‡(
	`STREAM_WRITEABLE
 (
s
Ë< 
size
)

845 
	`STREAM_BOUND_WARN
 (
s
, "put");

849 
	`mem˝y
 (
s
->
d©a
 + s->
ídp
, 
±r
, 
size
);

850 
s
->
ídp
 +
size
;

852  
size
;

853 
	}
}

860 
u_ch¨
 *

861 
	$°ªam_≤t
 (
°ªam
 *
s
)

863 
	`STREAM_VERIFY_SANE
(
s
);

864  
s
->
d©a
 + s->
gëp
;

865 
	}
}

869 
	$°ªam_em±y
 (
°ªam
 *
s
)

871 
	`STREAM_VERIFY_SANE
(
s
);

873  (
s
->
ídp
 == 0);

874 
	}
}

878 
	$°ªam_ª£t
 (
°ªam
 *
s
)

880 
	`STREAM_VERIFY_SANE
 (
s
);

882 
s
->
gëp
 = s->
ídp
 = 0;

883 
	}
}

887 
	$°ªam_Êush
 (
°ªam
 *
s
, 
fd
)

889 
nbyãs
;

891 
	`STREAM_VERIFY_SANE
(
s
);

893 
nbyãs
 = 
	`wrôe
 (
fd
, 
s
->
d©a
 + s->
gëp
, s->
ídp
 - s->getp);

895  
nbyãs
;

896 
	}
}

900 
°ªam_fifo
 *

901 
	$°ªam_fifo_√w
 ()

903 
°ªam_fifo
 *
√w
;

905 
√w
 = 
	`XCALLOC
 (
MTYPE_STREAM_FIFO
,  (
°ªam_fifo
));

906  
√w
;

907 
	}
}

911 
	$°ªam_fifo_push
 (
°ªam_fifo
 *
fifo
, 
°ªam
 *
s
)

913 i‡(
fifo
->
èû
)

914 
fifo
->
èû
->
√xt
 = 
s
;

916 
fifo
->
hód
 = 
s
;

918 
fifo
->
èû
 = 
s
;

920 
fifo
->
cou¡
++;

921 
	}
}

924 
°ªam
 *

925 
	$°ªam_fifo_p›
 (
°ªam_fifo
 *
fifo
)

927 
°ªam
 *
s
;

929 
s
 = 
fifo
->
hód
;

931 i‡(
s
)

933 
fifo
->
hód
 = 
s
->
√xt
;

935 i‡(
fifo
->
hód
 =
NULL
)

936 
fifo
->
èû
 = 
NULL
;

939 
fifo
->
cou¡
--;

941  
s
;

942 
	}
}

945 
°ªam
 *

946 
	$°ªam_fifo_hód
 (
°ªam_fifo
 *
fifo
)

948  
fifo
->
hód
;

949 
	}
}

952 
	$°ªam_fifo_˛ón
 (
°ªam_fifo
 *
fifo
)

954 
°ªam
 *
s
;

955 
°ªam
 *
√xt
;

957 
s
 = 
fifo
->
hód
; s; s = 
√xt
)

959 
√xt
 = 
s
->next;

960 
	`°ªam_‰ì
 (
s
);

962 
fifo
->
hód
 = fifo->
èû
 = 
NULL
;

963 
fifo
->
cou¡
 = 0;

964 
	}
}

967 
	$°ªam_fifo_‰ì
 (
°ªam_fifo
 *
fifo
)

969 
	`°ªam_fifo_˛ón
 (
fifo
);

970 
	`XFREE
 (
MTYPE_STREAM_FIFO
, 
fifo
);

971 
	}
}

	@common-libs/3rd-party/quagga-lib/src/table.c

23 
	~<zebø.h
>

25 
	~"¥efix.h
"

26 
	~"èbÀ.h
"

27 
	~"mem‹y.h
"

28 
	~"sockuni⁄.h
"

30 
rouã_node_dñëe
 (
rouã_node
 *);

31 
rouã_èbÀ_‰ì
 (
rouã_èbÀ
 *);

33 
rouã_èbÀ
 *

34 
	$rouã_èbÀ_öô
 ()

36 
rouã_èbÀ
 *
π
;

38 
π
 = 
	`XCALLOC
 (
MTYPE_ROUTE_TABLE
,  (
rouã_èbÀ
));

39  
π
;

40 
	}
}

43 
	$rouã_èbÀ_föish
 (
rouã_èbÀ
 *
π
)

45 
	`rouã_èbÀ_‰ì
 (
π
);

46 
	}
}

49 
rouã_node
 *

50 
	$rouã_node_√w
 ()

52 
rouã_node
 *
node
;

53 
node
 = 
	`XCALLOC
 (
MTYPE_ROUTE_NODE
,  (
rouã_node
));

54  
node
;

55 
	}
}

58 
rouã_node
 *

59 
	$rouã_node_£t
 (
rouã_èbÀ
 *
èbÀ
, 
¥efix
 *prefix)

61 
rouã_node
 *
node
;

63 
node
 = 
	`rouã_node_√w
 ();

65 
	`¥efix_c›y
 (&
node
->
p
, 
¥efix
);

66 
node
->
èbÀ
 =Åable;

68  
node
;

69 
	}
}

73 
	$rouã_node_‰ì
 (
rouã_node
 *
node
)

75 
	`XFREE
 (
MTYPE_ROUTE_NODE
, 
node
);

76 
	}
}

80 
	$rouã_èbÀ_‰ì
 (
rouã_èbÀ
 *
π
)

82 
rouã_node
 *
tmp_node
;

83 
rouã_node
 *
node
;

85 i‡(
π
 =
NULL
)

88 
node
 = 
π
->
t›
;

90 
node
)

92 i‡(
node
->
l_À·
)

94 
node
 =Çode->
l_À·
;

98 i‡(
node
->
l_right
)

100 
node
 =Çode->
l_right
;

104 
tmp_node
 = 
node
;

105 
node
 =Çode->
∑ª¡
;

107 i‡(
node
 !
NULL
)

109 i‡(
node
->
l_À·
 =
tmp_node
)

110 
node
->
l_À·
 = 
NULL
;

112 
node
->
l_right
 = 
NULL
;

114 
	`rouã_node_‰ì
 (
tmp_node
);

118 
	`rouã_node_‰ì
 (
tmp_node
);

123 
	`XFREE
 (
MTYPE_ROUTE_TABLE
, 
π
);

125 
	}
}

128 c⁄° 
u_ch¨
 
	gmaskbô
[] =

135 
	$rouã_comm⁄
 (
¥efix
 *
n
, ¥efix *
p
, ¥efix *
√w
)

137 
i
;

138 
u_ch¨
 
diff
;

139 
u_ch¨
 
mask
;

141 
u_ch¨
 *
≈
 = (u_ch¨ *)&
n
->
u
.
¥efix
;

142 
u_ch¨
 *
µ
 = (u_ch¨ *)&
p
->
u
.
¥efix
;

143 
u_ch¨
 *
√wp
 = (u_ch¨ *)&
√w
->
u
.
¥efix
;

145 
i
 = 0; i < 
p
->
¥efixÀn
 / 8; i++)

147 i‡(
≈
[
i
] =
µ
[i])

148 
√wp
[
i
] = 
≈
[i];

153 
√w
->
¥efixÀn
 = 
i
 * 8;

155 i‡(
√w
->
¥efixÀn
 !
p
->prefixlen)

157 
diff
 = 
≈
[
i
] ^ 
µ
[i];

158 
mask
 = 0x80;

159 
√w
->
¥efixÀn
 < 
p
->¥efixÀ¿&& !(
mask
 & 
diff
))

161 
mask
 >>= 1;

162 
√w
->
¥efixÀn
++;

164 
√wp
[
i
] = 
≈
[i] & 
maskbô
[
√w
->
¥efixÀn
 % 8];

166 
	}
}

169 
	$£t_lök
 (
rouã_node
 *
node
, rouã_nodê*
√w
)

171 
bô
 = 
	`¥efix_bô
 (&
√w
->
p
.
u
.
¥efix
, 
node
->p.
¥efixÀn
);

173 
node
->
lök
[
bô
] = 
√w
;

174 
√w
->
∑ª¡
 = 
node
;

175 
	}
}

178 
rouã_node
 *

179 
	$rouã_lock_node
 (
rouã_node
 *
node
)

181 
node
->
lock
++;

182  
node
;

183 
	}
}

187 
	$rouã_u∆ock_node
 (
rouã_node
 *
node
)

189 
node
->
lock
--;

191 i‡(
node
->
lock
 == 0)

192 
	`rouã_node_dñëe
 (
node
);

193 
	}
}

196 
rouã_node
 *

197 
	$rouã_node_m©ch
 (c⁄° 
rouã_èbÀ
 *
èbÀ
, c⁄° 
¥efix
 *
p
)

199 
rouã_node
 *
node
;

200 
rouã_node
 *
m©ched
;

202 
m©ched
 = 
NULL
;

203 
node
 = 
èbÀ
->
t›
;

207 
node
 &&Çode->
p
.
¥efixÀn
 <=Ö->prefixlen &&

208 
	`¥efix_m©ch
 (&
node
->
p
,Ö))

210 i‡(
node
->
öfo
)

211 
m©ched
 = 
node
;

213 i‡(
node
->
p
.
¥efixÀn
 ==Ö->prefixlen)

216 
node
 =Çode->
lök
[
	`¥efix_bô
(&
p
->
u
.
¥efix
,Çode->p.
¥efixÀn
)];

220 i‡(
m©ched
)

221  
	`rouã_lock_node
 (
m©ched
);

223  
NULL
;

224 
	}
}

226 
rouã_node
 *

227 
	$rouã_node_m©ch_ùv4
 (c⁄° 
rouã_èbÀ
 *
èbÀ
,

228 c⁄° 
ö_addr
 *
addr
)

230 
¥efix_ùv4
 
p
;

232 
	`mem£t
 (&
p
, 0,  (
¥efix_ùv4
));

233 
p
.
Ámûy
 = 
AF_INET
;

234 
p
.
¥efixÀn
 = 
IPV4_MAX_PREFIXLEN
;

235 
p
.
¥efix
 = *
addr
;

237  
	`rouã_node_m©ch
 (
èbÀ
, (
¥efix
 *Ë&
p
);

238 
	}
}

240 #ifde‡
HAVE_IPV6


241 
rouã_node
 *

242 
	$rouã_node_m©ch_ùv6
 (c⁄° 
rouã_èbÀ
 *
èbÀ
,

243 c⁄° 
ö6_addr
 *
addr
)

245 
¥efix_ùv6
 
p
;

247 
	`mem£t
 (&
p
, 0,  (
¥efix_ùv6
));

248 
p
.
Ámûy
 = 
AF_INET6
;

249 
p
.
¥efixÀn
 = 
IPV6_MAX_PREFIXLEN
;

250 
p
.
¥efix
 = *
addr
;

252  
	`rouã_node_m©ch
 (
èbÀ
, (
¥efix
 *Ë&
p
);

253 
	}
}

257 
rouã_node
 *

258 
	$rouã_node_lookup
 (
rouã_èbÀ
 *
èbÀ
, 
¥efix
 *
p
)

260 
rouã_node
 *
node
;

262 
node
 = 
èbÀ
->
t›
;

264 
node
 &&Çode->
p
.
¥efixÀn
 <=Ö->prefixlen &&

265 
	`¥efix_m©ch
 (&
node
->
p
,Ö))

267 i‡(
node
->
p
.
¥efixÀn
 ==Ö->prefixlen)

268  
node
->
öfo
 ? 
	`rouã_lock_node
 (nodeË: 
NULL
;

270 
node
 =Çode->
lök
[
	`¥efix_bô
(&
p
->
u
.
¥efix
,Çode->p.
¥efixÀn
)];

273  
NULL
;

274 
	}
}

277 
rouã_node
 *

278 
	$rouã_node_gë
 (
rouã_èbÀ
 *
èbÀ
, 
¥efix
 *
p
)

280 
rouã_node
 *
√w
;

281 
rouã_node
 *
node
;

282 
rouã_node
 *
m©ch
;

284 
m©ch
 = 
NULL
;

285 
node
 = 
èbÀ
->
t›
;

286 
node
 &&Çode->
p
.
¥efixÀn
 <=Ö->prefixlen &&

287 
	`¥efix_m©ch
 (&
node
->
p
,Ö))

289 i‡(
node
->
p
.
¥efixÀn
 ==Ö->prefixlen)

290  
	`rouã_lock_node
 (
node
);

292 
m©ch
 = 
node
;

293 
node
 =Çode->
lök
[
	`¥efix_bô
(&
p
->
u
.
¥efix
,Çode->p.
¥efixÀn
)];

296 i‡(
node
 =
NULL
)

298 
√w
 = 
	`rouã_node_£t
 (
èbÀ
, 
p
);

299 i‡(
m©ch
)

300 
	`£t_lök
 (
m©ch
, 
√w
);

302 
èbÀ
->
t›
 = 
√w
;

306 
√w
 = 
	`rouã_node_√w
 ();

307 
	`rouã_comm⁄
 (&
node
->
p
,Ö, &
√w
->p);

308 
√w
->
p
.
Ámûy
 =Ö->family;

309 
√w
->
èbÀ
 =Åable;

310 
	`£t_lök
 (
√w
, 
node
);

312 i‡(
m©ch
)

313 
	`£t_lök
 (
m©ch
, 
√w
);

315 
èbÀ
->
t›
 = 
√w
;

317 i‡(
√w
->
p
.
¥efixÀn
 !=Ö->prefixlen)

319 
m©ch
 = 
√w
;

320 
√w
 = 
	`rouã_node_£t
 (
èbÀ
, 
p
);

321 
	`£t_lök
 (
m©ch
, 
√w
);

324 
	`rouã_lock_node
 (
√w
);

326  
√w
;

327 
	}
}

331 
	$rouã_node_dñëe
 (
rouã_node
 *
node
)

333 
rouã_node
 *
chûd
;

334 
rouã_node
 *
∑ª¡
;

336 
	`as£π
 (
node
->
lock
 == 0);

337 
	`as£π
 (
node
->
öfo
 =
NULL
);

339 i‡(
node
->
l_À·
 &&Çode->
l_right
)

342 i‡(
node
->
l_À·
)

343 
chûd
 = 
node
->
l_À·
;

345 
chûd
 = 
node
->
l_right
;

347 
∑ª¡
 = 
node
->parent;

349 i‡(
chûd
)

350 
chûd
->
∑ª¡
 =Öarent;

352 i‡(
∑ª¡
)

354 i‡(
∑ª¡
->
l_À·
 =
node
)

355 
∑ª¡
->
l_À·
 = 
chûd
;

357 
∑ª¡
->
l_right
 = 
chûd
;

360 
node
->
èbÀ
->
t›
 = 
chûd
;

362 
	`rouã_node_‰ì
 (
node
);

365 i‡(
∑ª¡
 &&Ö¨ít->
lock
 == 0)

366 
	`rouã_node_dñëe
 (
∑ª¡
);

367 
	}
}

371 
rouã_node
 *

372 
	$rouã_t›
 (
rouã_èbÀ
 *
èbÀ
)

375 i‡(
èbÀ
->
t›
 =
NULL
)

376  
NULL
;

379 
	`rouã_lock_node
 (
èbÀ
->
t›
);

380  
èbÀ
->
t›
;

381 
	}
}

384 
rouã_node
 *

385 
	$rouã_√xt
 (
rouã_node
 *
node
)

387 
rouã_node
 *
√xt
;

388 
rouã_node
 *
°¨t
;

393 i‡(
node
->
l_À·
)

395 
√xt
 = 
node
->
l_À·
;

396 
	`rouã_lock_node
 (
√xt
);

397 
	`rouã_u∆ock_node
 (
node
);

398  
√xt
;

400 i‡(
node
->
l_right
)

402 
√xt
 = 
node
->
l_right
;

403 
	`rouã_lock_node
 (
√xt
);

404 
	`rouã_u∆ock_node
 (
node
);

405  
√xt
;

408 
°¨t
 = 
node
;

409 
node
->
∑ª¡
)

411 i‡(
node
->
∑ª¡
->
l_À·
 =nodê&&Çode->∑ª¡->
l_right
)

413 
√xt
 = 
node
->
∑ª¡
->
l_right
;

414 
	`rouã_lock_node
 (
√xt
);

415 
	`rouã_u∆ock_node
 (
°¨t
);

416  
√xt
;

418 
node
 =Çode->
∑ª¡
;

420 
	`rouã_u∆ock_node
 (
°¨t
);

421  
NULL
;

422 
	}
}

425 
rouã_node
 *

426 
	$rouã_√xt_u¡û
 (
rouã_node
 *
node
, rouã_nodê*
limô
)

428 
rouã_node
 *
√xt
;

429 
rouã_node
 *
°¨t
;

434 i‡(
node
->
l_À·
)

436 
√xt
 = 
node
->
l_À·
;

437 
	`rouã_lock_node
 (
√xt
);

438 
	`rouã_u∆ock_node
 (
node
);

439  
√xt
;

441 i‡(
node
->
l_right
)

443 
√xt
 = 
node
->
l_right
;

444 
	`rouã_lock_node
 (
√xt
);

445 
	`rouã_u∆ock_node
 (
node
);

446  
√xt
;

449 
°¨t
 = 
node
;

450 
node
->
∑ª¡
 &&Çodê!
limô
)

452 i‡(
node
->
∑ª¡
->
l_À·
 =nodê&&Çode->∑ª¡->
l_right
)

454 
√xt
 = 
node
->
∑ª¡
->
l_right
;

455 
	`rouã_lock_node
 (
√xt
);

456 
	`rouã_u∆ock_node
 (
°¨t
);

457  
√xt
;

459 
node
 =Çode->
∑ª¡
;

461 
	`rouã_u∆ock_node
 (
°¨t
);

462  
NULL
;

463 
	}
}

	@common-libs/3rd-party/quagga-lib/src/thread.c

24 
	~<zebø.h
>

26 
	~"thªad.h
"

27 
	~"mem‹y.h
"

28 
	~"log.h
"

29 
	~"hash.h
"

30 
	~"comm™d.h
"

31 
	~"sigevít.h
"

34 
timevÆ
 
	gª˚¡_time
;

35 
timevÆ
 
	gœ°_ª˚¡_time
;

37 
timevÆ
 
	gªœtive_time
;

38 
timevÆ
 
	gªœtive_time_ba£
;

40 
	gtimîs_öôed
;

42 
hash
 *
	g˝u_ªc‹d
 = 
NULL
;

45 
	#TIMER_SECOND_MICRO
 1000000L

	)

49 
timevÆ


50 
	$timevÆ_adju°
 (
timevÆ
 
a
)

52 
a
.
tv_u£c
 >
TIMER_SECOND_MICRO
)

54 
a
.
tv_u£c
 -
TIMER_SECOND_MICRO
;

55 
a
.
tv_£c
++;

58 
a
.
tv_u£c
 < 0)

60 
a
.
tv_u£c
 +
TIMER_SECOND_MICRO
;

61 
a
.
tv_£c
--;

64 i‡(
a
.
tv_£c
 < 0)

66 
a
.
tv_£c
 =á.
tv_u£c
 = 0;

68  
a
;

69 
	}
}

71 
timevÆ


72 
	$timevÆ_subåa˘
 (
timevÆ
 
a
, timevÆ 
b
)

74 
timevÆ
 
ªt
;

76 
ªt
.
tv_u£c
 = 
a
.tv_u£¯- 
b
.tv_usec;

77 
ªt
.
tv_£c
 = 
a
.tv_£¯- 
b
.tv_sec;

79  
	`timevÆ_adju°
 (
ªt
);

80 
	}
}

83 
	$timevÆ_cmp
 (
timevÆ
 
a
, timevÆ 
b
)

85  (
a
.
tv_£c
 =
b
.tv_sec

86 ? 
a
.
tv_u£c
 - 
b
.tv_u£¯:á.
tv_£c
 - b.tv_sec);

87 
	}
}

90 
	$timevÆ_ñ≠£d
 (
timevÆ
 
a
, timevÆ 
b
)

92  (((
a
.
tv_£c
 - 
b
.tv_£cË* 
TIMER_SECOND_MICRO
)

93 + (
a
.
tv_u£c
 - 
b
.tv_usec));

94 
	}
}

96 #i‚de‡
HAVE_CLOCK_MONOTONIC


98 
	$quagga_gëtimeofday_ªœtive_adju°
 ()

100 
timevÆ
 
diff
;

101 i‡(
	`timevÆ_cmp
 (
ª˚¡_time
, 
œ°_ª˚¡_time
) < 0)

103 
ªœtive_time
.
tv_£c
++;

104 
ªœtive_time
.
tv_u£c
 = 0;

108 
diff
 = 
	`timevÆ_subåa˘
 (
ª˚¡_time
, 
œ°_ª˚¡_time
);

109 
ªœtive_time
.
tv_£c
 +
diff
.tv_sec;

110 
ªœtive_time
.
tv_u£c
 +
diff
.tv_usec;

111 
ªœtive_time
 = 
	`timevÆ_adju°
 (relative_time);

113 
œ°_ª˚¡_time
 = 
ª˚¡_time
;

114 
	}
}

119 
	$quagga_gëtimeofday
 (
timevÆ
 *
tv
)

121 
ªt
;

123 
	`as£π
 (
tv
);

125 i‡(!(
ªt
 = 
	`gëtimeofday
 (&
ª˚¡_time
, 
NULL
)))

128 i‡(!
timîs_öôed
)

130 
ªœtive_time_ba£
 = 
œ°_ª˚¡_time
 = 
ª˚¡_time
;

131 
timîs_öôed
 = 1;

134 i‡(
tv
 !&
ª˚¡_time
)

135 *
tv
 = 
ª˚¡_time
;

138  
ªt
;

139 
	}
}

142 
	$quagga_gë_ªœtive
 (
timevÆ
 *
tv
)

144 
ªt
;

146 #ifde‡
HAVE_CLOCK_MONOTONIC


148 
time•ec
 
ç
;

149 i‡(!(
ªt
 = 
	`˛ock_gëtime
 (
CLOCK_MONOTONIC
, &
ç
)))

151 
ªœtive_time
.
tv_£c
 = 
ç
.tv_sec;

152 
ªœtive_time
.
tv_u£c
 = 
ç
.
tv_n£c
 / 1000;

156 i‡(!(
ªt
 = 
	`quagga_gëtimeofday
 (&
ª˚¡_time
)))

157 
	`quagga_gëtimeofday_ªœtive_adju°
();

160 i‡(
tv
)

161 *
tv
 = 
ªœtive_time
;

163  
ªt
;

164 
	}
}

170 
	$quagga_ªÆ_°abûi£d
 (
timevÆ
 *
tv
)

172 *
tv
 = 
ªœtive_time_ba£
;

173 
tv
->
tv_£c
 +
ªœtive_time
.tv_sec;

174 
tv
->
tv_u£c
 +
ªœtive_time
.tv_usec;

175 *
tv
 = 
	`timevÆ_adju°
 (*tv);

176 
	}
}

182 
	$quagga_gëtime
 (
quagga_˛kid
 
˛kid
, 
timevÆ
 *
tv
)

184 
˛kid
)

186 
QUAGGA_CLK_REALTIME
:

187  
	`quagga_gëtimeofday
 (
tv
);

188 
QUAGGA_CLK_MONOTONIC
:

189  
	`quagga_gë_ªœtive
 (
tv
);

190 
QUAGGA_CLK_REALTIME_STABILISED
:

191 
	`quagga_ªÆ_°abûi£d
 (
tv
);

194 
î∫o
 = 
EINVAL
;

197 
	}
}

202 
time_t


203 
	$quagga_time
 (
time_t
 *
t
)

205 
timevÆ
 
tv
;

206 
	`quagga_ªÆ_°abûi£d
 (&
tv
);

207 i‡(
t
)

208 *
t
 = 
tv
.
tv_£c
;

209  
tv
.
tv_£c
;

210 
	}
}

213 
timevÆ


214 
	$ª˚¡_ªœtive_time
 ()

216  
ªœtive_time
;

217 
	}
}

220 
	$˝u_ªc‹d_hash_key
 (
˝u_thªad_hi°‹y
 *
a
)

222  (
uöçå_t
Ë
a
->
func
;

223 
	}
}

226 
	$˝u_ªc‹d_hash_cmp
 (c⁄° 
˝u_thªad_hi°‹y
 *
a
,

227 c⁄° 
˝u_thªad_hi°‹y
 *
b
)

229  
a
->
func
 =
b
->func;

230 
	}
}

233 
	$˝u_ªc‹d_hash_Æloc
 (
˝u_thªad_hi°‹y
 *
a
)

235 
˝u_thªad_hi°‹y
 *
√w
;

236 
√w
 = 
	`XCALLOC
 (
MTYPE_THREAD_STATS
,  (
˝u_thªad_hi°‹y
));

237 
√w
->
func
 = 
a
->func;

238 
√w
->
fun˙ame
 = 
	`XSTRDUP
(
MTYPE_THREAD_FUNCNAME
, 
a
->funcname);

239  
√w
;

240 
	}
}

243 
	$˝u_ªc‹d_hash_‰ì
 (*
a
)

245 
˝u_thªad_hi°‹y
 *
hi°
 = 
a
;

247 
	`XFREE
 (
MTYPE_THREAD_FUNCNAME
, 
hi°
->
fun˙ame
);

248 
	`XFREE
 (
MTYPE_THREAD_STATS
, 
hi°
);

249 
	}
}

251 
ölöe
 

252 
	$vty_out_˝u_thªad_hi°‹y
(
vty
* vty,

253 
˝u_thªad_hi°‹y
 *
a
)

255 #ifde‡
HAVE_RUSAGE


256 
	`vty_out
(
vty
, "%7ld.%03ld %9d %8ld %9ld %8ld %9ld",

257 
a
->
˝u
.
tŸÆ
/1000,á->˝u.tŸÆ%1000,á->
tŸÆ_ˇŒs
,

258 
a
->
˝u
.
tŸÆ
/a->
tŸÆ_ˇŒs
,á->˝u.
max
,

259 
a
->
ªÆ
.
tŸÆ
/a->
tŸÆ_ˇŒs
,á->ªÆ.
max
);

261 
	`vty_out
(
vty
, "%7ld.%03ld %9d %8ld %9ld",

262 
a
->
ªÆ
.
tŸÆ
/1000,á->ªÆ.tŸÆ%1000,á->
tŸÆ_ˇŒs
,

263 
a
->
ªÆ
.
tŸÆ
/a->
tŸÆ_ˇŒs
,á->ªÆ.
max
);

265 
	`vty_out
(
vty
, " %c%c%c%c%c%c %s%s",

266 
a
->
ty≥s
 & (1 << 
THREAD_READ
) ? 'R':' ',

267 
a
->
ty≥s
 & (1 << 
THREAD_WRITE
) ? 'W':' ',

268 
a
->
ty≥s
 & (1 << 
THREAD_TIMER
) ? 'T':' ',

269 
a
->
ty≥s
 & (1 << 
THREAD_EVENT
) ? 'E':' ',

270 
a
->
ty≥s
 & (1 << 
THREAD_EXECUTE
) ? 'X':' ',

271 
a
->
ty≥s
 & (1 << 
THREAD_BACKGROUND
) ? 'B' : ' ',

272 
a
->
fun˙ame
, 
VTY_NEWLINE
);

273 
	}
}

276 
	$˝u_ªc‹d_hash_¥öt
(
hash_backë
 *
buckë
,

277 *
¨gs
[])

279 
˝u_thªad_hi°‹y
 *
tŸÆs
 = 
¨gs
[0];

280 
vty
 *vty = 
¨gs
[1];

281 
thªad_ty≥
 *
fûãr
 = 
¨gs
[2];

282 
˝u_thªad_hi°‹y
 *
a
 = 
buckë
->
d©a
;

284 
a
 = 
buckë
->
d©a
;

285 i‡–!(
a
->
ty≥s
 & *
fûãr
) )

287 
	`vty_out_˝u_thªad_hi°‹y
(
vty
,
a
);

288 
tŸÆs
->
tŸÆ_ˇŒs
 +
a
->total_calls;

289 
tŸÆs
->
ªÆ
.
tŸÆ
 +
a
->real.total;

290 i‡(
tŸÆs
->
ªÆ
.
max
 < 
a
->real.max)

291 
tŸÆs
->
ªÆ
.
max
 = 
a
->real.max;

292 #ifde‡
HAVE_RUSAGE


293 
tŸÆs
->
˝u
.
tŸÆ
 +
a
->cpu.total;

294 i‡(
tŸÆs
->
˝u
.
max
 < 
a
->cpu.max)

295 
tŸÆs
->
˝u
.
max
 = 
a
->cpu.max;

297 
	}
}

300 
	$˝u_ªc‹d_¥öt
(
vty
 *vty, 
thªad_ty≥
 
fûãr
)

302 
˝u_thªad_hi°‹y
 
tmp
;

303 *
¨gs
[3] = {&
tmp
, 
vty
, &
fûãr
};

305 
	`mem£t
(&
tmp
, 0, Åmp);

306 
tmp
.
fun˙ame
 = (*)"TOTAL";

307 
tmp
.
ty≥s
 = 
fûãr
;

309 #ifde‡
HAVE_RUSAGE


310 
	`vty_out
(
vty
, "%21s %18s %18s%s",

311 "", "CPU (u£r+sy°em):", "Ró»(wÆl-˛ock):", 
VTY_NEWLINE
);

313 
	`vty_out
(
vty
, "Runtime(ms) Invoked Avg uSec Max uSecs");

314 #ifde‡
HAVE_RUSAGE


315 
	`vty_out
(
vty
, " Avg uSec Max uSecs");

317 
	`vty_out
(
vty
, " Ty≥ Thªad%s", 
VTY_NEWLINE
);

318 
	`hash_ôî©e
(
˝u_ªc‹d
,

319 ((*)(
hash_backë
*,*))
˝u_ªc‹d_hash_¥öt
,

320 
¨gs
);

322 i‡(
tmp
.
tŸÆ_ˇŒs
 > 0)

323 
	`vty_out_˝u_thªad_hi°‹y
(
vty
, &
tmp
);

324 
	}
}

326 
DEFUN
(
show_thªad_˝u
,

327 
show_thªad_˝u_cmd
,

329 
SHOW_STR


334 
	gi
 = 0;

335 
thªad_ty≥
 
	gfûãr
 = (thread_type) -1U;

337 i‡(
	g¨gc
 > 0)

339 
	gfûãr
 = 0;

340 
	g¨gv
[0][
i
] != '\0')

342  
¨gv
[0][
i
] )

346 
fûãr
 |(1 << 
THREAD_READ
);

350 
fûãr
 |(1 << 
THREAD_WRITE
);

354 
fûãr
 |(1 << 
THREAD_TIMER
);

358 
fûãr
 |(1 << 
THREAD_EVENT
);

362 
fûãr
 |(1 << 
THREAD_EXECUTE
);

366 
fûãr
 |(1 << 
THREAD_BACKGROUND
);

371 ++
	gi
;

373 i‡(
	gfûãr
 == 0)

375 
vty_out
(
vty
, "Invalid filter \"%s\" specified,"

377 
¨gv
[0], 
VTY_NEWLINE
);

378  
	gCMD_WARNING
;

382 
˝u_ªc‹d_¥öt
(
vty
, 
fûãr
);

383  
	gCMD_SUCCESS
;

387 
	$˝u_ªc‹d_hash_˛ór
 (
hash_backë
 *
buckë
,

388 *
¨gs
)

390 
thªad_ty≥
 *
fûãr
 = 
¨gs
;

391 
˝u_thªad_hi°‹y
 *
a
 = 
buckë
->
d©a
;

393 
a
 = 
buckë
->
d©a
;

394 i‡–!(
a
->
ty≥s
 & *
fûãr
) )

397 
	`hash_ªÀa£
 (
˝u_ªc‹d
, 
buckë
->
d©a
);

398 
	}
}

401 
	$˝u_ªc‹d_˛ór
 (
thªad_ty≥
 
fûãr
)

403 
thªad_ty≥
 *
tmp
 = &
fûãr
;

404 
	`hash_ôî©e
 (
˝u_ªc‹d
,

405 ((*Ë(
hash_backë
*,*)Ë
˝u_ªc‹d_hash_˛ór
,

406 
tmp
);

407 
	}
}

409 
DEFUN
(
˛ór_thªad_˝u
,

410 
˛ór_thªad_˝u_cmd
,

417 
	gi
 = 0;

418 
thªad_ty≥
 
	gfûãr
 = (thread_type) -1U;

420 i‡(
	g¨gc
 > 0)

422 
	gfûãr
 = 0;

423 
	g¨gv
[0][
i
] != '\0')

425  
¨gv
[0][
i
] )

429 
fûãr
 |(1 << 
THREAD_READ
);

433 
fûãr
 |(1 << 
THREAD_WRITE
);

437 
fûãr
 |(1 << 
THREAD_TIMER
);

441 
fûãr
 |(1 << 
THREAD_EVENT
);

445 
fûãr
 |(1 << 
THREAD_EXECUTE
);

449 
fûãr
 |(1 << 
THREAD_BACKGROUND
);

454 ++
	gi
;

456 i‡(
	gfûãr
 == 0)

458 
vty_out
(
vty
, "Invalid filter \"%s\" specified,"

460 
¨gv
[0], 
VTY_NEWLINE
);

461  
	gCMD_WARNING
;

465 
˝u_ªc‹d_˛ór
 (
fûãr
);

466  
	gCMD_SUCCESS
;

471 
	$thªad_li°_debug
 (
thªad_li°
 *
li°
)

473 
	`¥ötf
 ("count [%d] head [%p]Åail [%p]\n",

474 
li°
->
cou¡
,Üi°->
hód
,Üi°->
èû
);

475 
	}
}

478 
__©åibuã__
 ((
unu£d
))

479 
	$thªad_ma°î_debug
 (
thªad_ma°î
 *
m
)

481 
	`¥ötf
 ("-----------\n");

482 
	`¥ötf
 ("readlist : ");

483 
	`thªad_li°_debug
 (&
m
->
ªad
);

484 
	`¥ötf
 ("writelist : ");

485 
	`thªad_li°_debug
 (&
m
->
wrôe
);

486 
	`¥ötf
 ("timerlist : ");

487 
	`thªad_li°_debug
 (&
m
->
timî
);

488 
	`¥ötf
 ("eventlist : ");

489 
	`thªad_li°_debug
 (&
m
->
evít
);

490 
	`¥ötf
 ("unuselist : ");

491 
	`thªad_li°_debug
 (&
m
->
unu£
);

492 
	`¥ötf
 ("bgndlist : ");

493 
	`thªad_li°_debug
 (&
m
->
background
);

494 
	`¥ötf
 ("tŸÆáŒoc: [%ld]\n", 
m
->
Æloc
);

495 
	`¥ötf
 ("-----------\n");

496 
	}
}

499 
thªad_ma°î
 *

500 
	$thªad_ma°î_¸óã
 ()

502 i‡(
˝u_ªc‹d
 =
NULL
)

503 
˝u_ªc‹d


504 
	`hash_¸óã_size
 (1011, ((*Ë(*))
˝u_ªc‹d_hash_key
,

505 ((*Ë(c⁄° *, c⁄° *))
˝u_ªc‹d_hash_cmp
);

507  (
thªad_ma°î
 *Ë
	`XCALLOC
 (
MTYPE_THREAD_MASTER
,

508  (
thªad_ma°î
));

509 
	}
}

513 
	$thªad_li°_add
 (
thªad_li°
 *
li°
, 
thªad
 *thread)

515 
thªad
->
√xt
 = 
NULL
;

516 
thªad
->
¥ev
 = 
li°
->
èû
;

517 i‡(
li°
->
èû
)

518 
li°
->
èû
->
√xt
 = 
thªad
;

520 
li°
->
hód
 = 
thªad
;

521 
li°
->
èû
 = 
thªad
;

522 
li°
->
cou¡
++;

523 
	}
}

527 
	$thªad_li°_add_bef‹e
 (
thªad_li°
 *
li°
,

528 
thªad
 *
poöt
,

529 
thªad
 *thread)

531 
thªad
->
√xt
 = 
poöt
;

532 
thªad
->
¥ev
 = 
poöt
->prev;

533 i‡(
poöt
->
¥ev
)

534 
poöt
->
¥ev
->
√xt
 = 
thªad
;

536 
li°
->
hód
 = 
thªad
;

537 
poöt
->
¥ev
 = 
thªad
;

538 
li°
->
cou¡
++;

539 
	}
}

542 
thªad
 *

543 
	$thªad_li°_dñëe
 (
thªad_li°
 *
li°
, 
thªad
 *thread)

545 i‡(
thªad
->
√xt
)

546 
thªad
->
√xt
->
¥ev
 =Åhread->prev;

548 
li°
->
èû
 = 
thªad
->
¥ev
;

549 i‡(
thªad
->
¥ev
)

550 
thªad
->
¥ev
->
√xt
 =Åhread->next;

552 
li°
->
hód
 = 
thªad
->
√xt
;

553 
thªad
->
√xt
 =Åhªad->
¥ev
 = 
NULL
;

554 
li°
->
cou¡
--;

555  
thªad
;

556 
	}
}

560 
	$thªad_add_unu£
 (
thªad_ma°î
 *
m
, 
thªad
 *thread)

562 
	`as£π
 (
m
 !
NULL
 && 
thªad
 != NULL);

563 
	`as£π
 (
thªad
->
√xt
 =
NULL
);

564 
	`as£π
 (
thªad
->
¥ev
 =
NULL
);

565 
	`as£π
 (
thªad
->
ty≥
 =
THREAD_UNUSED
);

566 
	`thªad_li°_add
 (&
m
->
unu£
, 
thªad
);

568 
	}
}

572 
	$thªad_li°_‰ì
 (
thªad_ma°î
 *
m
, 
thªad_li°
 *
li°
)

574 
thªad
 *
t
;

575 
thªad
 *
√xt
;

577 
t
 = 
li°
->
hód
;Å;Å = 
√xt
)

579 
√xt
 = 
t
->next;

580 i‡(
t
->
fun˙ame
)

581 
	`XFREE
 (
MTYPE_THREAD_FUNCNAME
, 
t
->
fun˙ame
);

582 
	`XFREE
 (
MTYPE_THREAD
, 
t
);

583 
li°
->
cou¡
--;

584 
m
->
Æloc
--;

586 
	}
}

590 
	$thªad_ma°î_‰ì
 (
thªad_ma°î
 *
m
)

592 
	`thªad_li°_‰ì
 (
m
, &m->
ªad
);

593 
	`thªad_li°_‰ì
 (
m
, &m->
wrôe
);

594 
	`thªad_li°_‰ì
 (
m
, &m->
timî
);

595 
	`thªad_li°_‰ì
 (
m
, &m->
evít
);

596 
	`thªad_li°_‰ì
 (
m
, &m->
ªady
);

597 
	`thªad_li°_‰ì
 (
m
, &m->
unu£
);

598 
	`thªad_li°_‰ì
 (
m
, &m->
background
);

600 
	`XFREE
 (
MTYPE_THREAD_MASTER
, 
m
);

602 i‡(
˝u_ªc‹d
)

604 
	`hash_˛ón
 (
˝u_ªc‹d
, 
˝u_ªc‹d_hash_‰ì
);

605 
	`hash_‰ì
 (
˝u_ªc‹d
);

606 
˝u_ªc‹d
 = 
NULL
;

608 
	}
}

611 
ölöe
 

612 
	$thªad_em±y
 (
thªad_li°
 *
li°
)

614  
li°
->
hód
 ? 0 : 1;

615 
	}
}

618 
thªad
 *

619 
	$thªad_åim_hód
 (
thªad_li°
 *
li°
)

621 i‡(!
	`thªad_em±y
 (
li°
))

622  
	`thªad_li°_dñëe
 (
li°
,Üi°->
hód
);

623  
NULL
;

624 
	}
}

628 
	$thªad_timî_ªmaö_£c⁄d
 (
thªad
 *thread)

630 
	`quagga_gë_ªœtive
 (
NULL
);

632 i‡(
thªad
->
u
.
ßnds
.
tv_£c
 - 
ªœtive_time
.tv_sec > 0)

633  
thªad
->
u
.
ßnds
.
tv_£c
 - 
ªœtive_time
.tv_sec;

636 
	}
}

640 
	$°rù_fun˙ame
 (c⁄° *
fun˙ame
)

642 
buff
[100];

643 
tmp
, *
ªt
, *
e
, *
b
 = 
buff
;

645 
	`°∫˝y
(
buff
, 
fun˙ame
, (buff));

646 
buff
[ (buff) -1] = '\0';

647 
e
 = 
buff
 +
	`°æí
(buff) -1;

651 *
b
 == ' ' || *b == '(')

652 ++
b
;

653 *
e
 == ' ' || *e == ')')

654 --
e
;

655 
e
++;

657 
tmp
 = *
e
;

658 *
e
 = '\0';

659 
ªt
 = 
	`XSTRDUP
 (
MTYPE_THREAD_FUNCNAME
, 
b
);

660 *
e
 = 
tmp
;

662  
ªt
;

663 
	}
}

666 
thªad
 *

667 
thªad_gë
 (
thªad_ma°î
 *
m
, 
u_ch¨
 
ty≥
,

668 (*
func
Ë(
thªad
 *), *
¨g
, c⁄° * 
fun˙ame
)

670 
thªad
 *thread;

672 i‡(!
	`thªad_em±y
 (&
m
->
unu£
))

674 
thªad
 = 
	`thªad_åim_hód
 (&
m
->
unu£
);

675 i‡(
thªad
->
fun˙ame
)

676 
	`XFREE
(
MTYPE_THREAD_FUNCNAME
, 
thªad
->
fun˙ame
);

680 
thªad
 = 
	`XCALLOC
 (
MTYPE_THREAD
,  (thread));

681 
m
->
Æloc
++;

683 
thªad
->
ty≥
 =Åype;

684 
thªad
->
add_ty≥
 = 
ty≥
;

685 
thªad
->
ma°î
 = 
m
;

686 
thªad
->
func
 = func;

687 
thªad
->
¨g
 =árg;

689 
thªad
->
fun˙ame
 = 
	`°rù_fun˙ame
(funcname);

691  
thªad
;

692 
	}
}

695 
thªad
 *

696 
fun˙ame_thªad_add_ªad
 (
thªad_ma°î
 *
m
,

697 (*
func
Ë(
thªad
 *), *
¨g
, 
fd
, c⁄° * 
fun˙ame
)

699 
thªad
 *thread;

701 
	`as£π
 (
m
 !
NULL
);

703 i‡(
	`FD_ISSET
 (
fd
, &
m
->
ªadfd
))

705 
	`zlog
 (
NULL
, 
LOG_WARNING
, "Thîêi†ÆªadyÑód fd [%d]", 
fd
);

706  
NULL
;

709 
thªad
 = 
	`thªad_gë
 (
m
, 
THREAD_READ
, 
func
, 
¨g
, 
fun˙ame
);

710 
	`FD_SET
 (
fd
, &
m
->
ªadfd
);

711 
thªad
->
u
.
fd
 = fd;

712 
	`thªad_li°_add
 (&
m
->
ªad
, 
thªad
);

714  
thªad
;

715 
	}
}

718 
thªad
 *

719 
fun˙ame_thªad_add_wrôe
 (
thªad_ma°î
 *
m
,

720 (*
func
Ë(
thªad
 *), *
¨g
, 
fd
, c⁄° * 
fun˙ame
)

722 
thªad
 *thread;

724 
	`as£π
 (
m
 !
NULL
);

726 i‡(
	`FD_ISSET
 (
fd
, &
m
->
wrôefd
))

728 
	`zlog
 (
NULL
, 
LOG_WARNING
, "Thîêi†Æªady wrôêfd [%d]", 
fd
);

729  
NULL
;

732 
thªad
 = 
	`thªad_gë
 (
m
, 
THREAD_WRITE
, 
func
, 
¨g
, 
fun˙ame
);

733 
	`FD_SET
 (
fd
, &
m
->
wrôefd
);

734 
thªad
->
u
.
fd
 = fd;

735 
	`thªad_li°_add
 (&
m
->
wrôe
, 
thªad
);

737  
thªad
;

738 
	}
}

740 
thªad
 *

741 
fun˙ame_thªad_add_timî_timevÆ
 (
thªad_ma°î
 *
m
,

742 (*
func
Ë(
thªad
 *),

743 
ty≥
,

744 *
¨g
,

745 
timevÆ
 *
time_ªœtive
,

746 c⁄° * 
fun˙ame
)

748 
thªad
 *thread;

749 
thªad_li°
 *
li°
;

750 
timevÆ
 
Æ¨m_time
;

751 
thªad
 *
â
;

753 
	`as£π
 (
m
 !
NULL
);

755 
	`as£π
 (
ty≥
 =
THREAD_TIMER
 ||Åy≥ =
THREAD_BACKGROUND
);

756 
	`as£π
 (
time_ªœtive
);

758 
li°
 = ((
ty≥
 =
THREAD_TIMER
Ë? &
m
->
timî
 : &m->
background
);

759 
thªad
 = 
	`thªad_gë
 (
m
, 
ty≥
, 
func
, 
¨g
, 
fun˙ame
);

762 
	`quagga_gë_ªœtive
 (
NULL
);

763 
Æ¨m_time
.
tv_£c
 = 
ªœtive_time
.tv_£¯+ 
time_ªœtive
->tv_sec;

764 
Æ¨m_time
.
tv_u£c
 = 
ªœtive_time
.tv_u£¯+ 
time_ªœtive
->tv_usec;

765 
thªad
->
u
.
ßnds
 = 
	`timevÆ_adju°
(
Æ¨m_time
);

768 
â
 = 
li°
->
hód
;Åt;Åàâ->
√xt
)

769 i‡(
	`timevÆ_cmp
 (
thªad
->
u
.
ßnds
, 
â
->u.sands) <= 0)

772 i‡(
â
)

773 
	`thªad_li°_add_bef‹e
 (
li°
, 
â
, 
thªad
);

775 
	`thªad_li°_add
 (
li°
, 
thªad
);

777  
thªad
;

778 
	}
}

782 
thªad
 *

783 
fun˙ame_thªad_add_timî
 (
thªad_ma°î
 *
m
,

784 (*
func
Ë(
thªad
 *),

785 *
¨g
, 
timî
, c⁄° * 
fun˙ame
)

787 
timevÆ
 
åñ
;

789 
	`as£π
 (
m
 !
NULL
);

791 
åñ
.
tv_£c
 = 
timî
;

792 
åñ
.
tv_u£c
 = 0;

794  
	`fun˙ame_thªad_add_timî_timevÆ
 (
m
, 
func
, 
THREAD_TIMER
, 
¨g
,

795 &
åñ
, 
fun˙ame
);

796 
	}
}

799 
thªad
 *

800 
fun˙ame_thªad_add_timî_m£c
 (
thªad_ma°î
 *
m
,

801 (*
func
Ë(
thªad
 *),

802 *
¨g
, 
timî
, c⁄° * 
fun˙ame
)

804 
timevÆ
 
åñ
;

806 
	`as£π
 (
m
 !
NULL
);

808 
åñ
.
tv_£c
 = 
timî
 / 1000;

809 
åñ
.
tv_u£c
 = 1000*(
timî
 % 1000);

811  
	`fun˙ame_thªad_add_timî_timevÆ
 (
m
, 
func
, 
THREAD_TIMER
,

812 
¨g
, &
åñ
, 
fun˙ame
);

813 
	}
}

816 
thªad
 *

817 
fun˙ame_thªad_add_background
 (
thªad_ma°î
 *
m
,

818 (*
func
Ë(
thªad
 *),

819 *
¨g
, 
dñay
,

820 c⁄° *
fun˙ame
)

822 
timevÆ
 
åñ
;

824 
	`as£π
 (
m
 !
NULL
);

826 i‡(
dñay
)

828 
åñ
.
tv_£c
 = 
dñay
 / 1000;

829 
åñ
.
tv_u£c
 = 1000*(
dñay
 % 1000);

833 
åñ
.
tv_£c
 = 0;

834 
åñ
.
tv_u£c
 = 0;

837  
	`fun˙ame_thªad_add_timî_timevÆ
 (
m
, 
func
, 
THREAD_BACKGROUND
,

838 
¨g
, &
åñ
, 
fun˙ame
);

839 
	}
}

842 
thªad
 *

843 
fun˙ame_thªad_add_evít
 (
thªad_ma°î
 *
m
,

844 (*
func
Ë(
thªad
 *), *
¨g
, 
vÆ
, c⁄° * 
fun˙ame
)

846 
thªad
 *thread;

848 
	`as£π
 (
m
 !
NULL
);

850 
thªad
 = 
	`thªad_gë
 (
m
, 
THREAD_EVENT
, 
func
, 
¨g
, 
fun˙ame
);

851 
thªad
->
u
.
vÆ
 = val;

852 
	`thªad_li°_add
 (&
m
->
evít
, 
thªad
);

854  
thªad
;

855 
	}
}

859 
	$thªad_ˇn˚l
 (
thªad
 *thread)

861 
thªad_li°
 *
li°
;

863 
thªad
->
ty≥
)

865 
THREAD_READ
:

866 
	`as£π
 (
	`FD_ISSET
 (
thªad
->
u
.
fd
, &thªad->
ma°î
->
ªadfd
));

867 
	`FD_CLR
 (
thªad
->
u
.
fd
, &thªad->
ma°î
->
ªadfd
);

868 
li°
 = &
thªad
->
ma°î
->
ªad
;

870 
THREAD_WRITE
:

871 
	`as£π
 (
	`FD_ISSET
 (
thªad
->
u
.
fd
, &thªad->
ma°î
->
wrôefd
));

872 
	`FD_CLR
 (
thªad
->
u
.
fd
, &thªad->
ma°î
->
wrôefd
);

873 
li°
 = &
thªad
->
ma°î
->
wrôe
;

875 
THREAD_TIMER
:

876 
li°
 = &
thªad
->
ma°î
->
timî
;

878 
THREAD_EVENT
:

879 
li°
 = &
thªad
->
ma°î
->
evít
;

881 
THREAD_READY
:

882 
li°
 = &
thªad
->
ma°î
->
ªady
;

884 
THREAD_BACKGROUND
:

885 
li°
 = &
thªad
->
ma°î
->
background
;

891 
	`thªad_li°_dñëe
 (
li°
, 
thªad
);

892 
thªad
->
ty≥
 = 
THREAD_UNUSED
;

893 
	`thªad_add_unu£
 (
thªad
->
ma°î
,Åhread);

894 
	}
}

898 
	$thªad_ˇn˚l_evít
 (
thªad_ma°î
 *
m
, *
¨g
)

900 
ªt
 = 0;

901 
thªad
 *thread;

903 
thªad
 = 
m
->
evít
.
hód
;

904 
thªad
)

906 
thªad
 *
t
;

908 
t
 = 
thªad
;

909 
thªad
 = 
t
->
√xt
;

911 i‡(
t
->
¨g
 ==árg)

913 
ªt
++;

914 
	`thªad_li°_dñëe
 (&
m
->
evít
, 
t
);

915 
t
->
ty≥
 = 
THREAD_UNUSED
;

916 
	`thªad_add_unu£
 (
m
, 
t
);

919  
ªt
;

920 
	}
}

922 
timevÆ
 *

923 
	$thªad_timî_waô
 (
thªad_li°
 *
éi°
, 
timevÆ
 *
timî_vÆ
)

925 i‡(!
	`thªad_em±y
 (
éi°
))

927 *
timî_vÆ
 = 
	`timevÆ_subåa˘
 (
éi°
->
hód
->
u
.
ßnds
, 
ªœtive_time
);

928  
timî_vÆ
;

930  
NULL
;

931 
	}
}

933 
thªad
 *

934 
	$thªad_run
 (
thªad_ma°î
 *
m
, 
thªad
 *thread,

935 
thªad
 *
„tch
)

937 *
„tch
 = *
thªad
;

938 
thªad
->
ty≥
 = 
THREAD_UNUSED
;

939 
thªad
->
fun˙ame
 = 
NULL
;

940 
	`thªad_add_unu£
 (
m
, 
thªad
);

941  
„tch
;

942 
	}
}

945 
	$thªad_¥o˚ss_fd
 (
thªad_li°
 *
li°
, 
fd_£t
 *
fd£t
, fd_£à*
mfd£t
)

947 
thªad
 *thread;

948 
thªad
 *
√xt
;

949 
ªady
 = 0;

951 
	`as£π
 (
li°
);

953 
thªad
 = 
li°
->
hód
;Åhªad;Åhªad = 
√xt
)

955 
√xt
 = 
thªad
->next;

957 i‡(
	`FD_ISSET
 (
	`THREAD_FD
 (
thªad
), 
fd£t
))

959 
	`as£π
 (
	`FD_ISSET
 (
	`THREAD_FD
 (
thªad
), 
mfd£t
));

960 
	`FD_CLR
(
	`THREAD_FD
 (
thªad
), 
mfd£t
);

961 
	`thªad_li°_dñëe
 (
li°
, 
thªad
);

962 
	`thªad_li°_add
 (&
thªad
->
ma°î
->
ªady
,Åhread);

963 
thªad
->
ty≥
 = 
THREAD_READY
;

964 
ªady
++;

967  
ªady
;

968 
	}
}

972 
	$thªad_timî_¥o˚ss
 (
thªad_li°
 *
li°
, 
timevÆ
 *
timíow
)

974 
thªad
 *thread;

975 
ªady
 = 0;

977 
thªad
 = 
li°
->
hód
;Åhªad;Åhªad =Åhªad->
√xt
)

979 i‡(
	`timevÆ_cmp
 (*
timíow
, 
thªad
->
u
.
ßnds
) < 0)

980  
ªady
;

981 
	`thªad_li°_dñëe
 (
li°
, 
thªad
);

982 
thªad
->
ty≥
 = 
THREAD_READY
;

983 
	`thªad_li°_add
 (&
thªad
->
ma°î
->
ªady
,Åhread);

984 
ªady
++;

986  
ªady
;

987 
	}
}

991 
	$thªad_¥o˚ss
 (
thªad_li°
 *
li°
)

993 
thªad
 *thread;

994 
ªady
 = 0;

996 
thªad
 = 
li°
->
hód
;Åhªad;Åhªad =Åhªad->
√xt
)

998 
	`thªad_li°_dñëe
 (
li°
, 
thªad
);

999 
thªad
->
ty≥
 = 
THREAD_READY
;

1000 
	`thªad_li°_add
 (&
thªad
->
ma°î
->
ªady
,Åhread);

1001 
ªady
++;

1003  
ªady
;

1004 
	}
}

1008 
thªad
 *

1009 
	$thªad_„tch
 (
thªad_ma°î
 *
m
, 
thªad
 *
„tch
)

1011 
thªad
 *thread;

1012 
fd_£t
 
ªadfd
;

1013 
fd_£t
 
wrôefd
;

1014 
fd_£t
 
ex˚±fd
;

1015 
timevÆ
 
timî_vÆ
 = { .
tv_£c
 = 0, .
tv_u£c
 = 0 };

1016 
timevÆ
 
timî_vÆ_bg
;

1017 
timevÆ
 *
timî_waô
 = &
timî_vÆ
;

1018 
timevÆ
 *
timî_waô_bg
;

1022 
num
 = 0;

1025 
	`quagga_sigevít_¥o˚ss
 ();

1030 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1031  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1039 
	`thªad_¥o˚ss
 (&
m
->
evít
);

1042 
ªadfd
 = 
m
->readfd;

1043 
wrôefd
 = 
m
->writefd;

1044 
ex˚±fd
 = 
m
->exceptfd;

1047 i‡(
m
->
ªady
.
cou¡
 == 0)

1049 
	`quagga_gë_ªœtive
 (
NULL
);

1050 
timî_waô
 = 
	`thªad_timî_waô
 (&
m
->
timî
, &
timî_vÆ
);

1051 
timî_waô_bg
 = 
	`thªad_timî_waô
 (&
m
->
background
, &
timî_vÆ_bg
);

1053 i‡(
timî_waô_bg
 &&

1054 (!
timî_waô
 || (
	`timevÆ_cmp
 (*timî_waô, *
timî_waô_bg
) > 0)))

1055 
timî_waô
 = 
timî_waô_bg
;

1058 
num
 = 
	`£À˘
 (
FD_SETSIZE
, &
ªadfd
, &
wrôefd
, &
ex˚±fd
, 
timî_waô
);

1061 i‡(
num
 < 0)

1063 i‡(
î∫o
 =
EINTR
)

1065 
	`zlog_w¨n
 ("£À˘(Ëîr‹: %s", 
	`ß„_°ªº‹
 (
î∫o
));

1066  
NULL
;

1072 
	`quagga_gë_ªœtive
 (
NULL
);

1073 
	`thªad_timî_¥o˚ss
 (&
m
->
timî
, &
ªœtive_time
);

1076 i‡(
num
 > 0)

1079 
	`thªad_¥o˚ss_fd
 (&
m
->
ªad
, &
ªadfd
, &m->readfd);

1081 
	`thªad_¥o˚ss_fd
 (&
m
->
wrôe
, &
wrôefd
, &m->writefd);

1089 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1090  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1094 
	`thªad_timî_¥o˚ss
 (&
m
->
background
, &
ªœtive_time
);

1096 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1097  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1099 
	}
}

1102 
thªad
 *

1103 
	$thªad_„tch_n⁄block
 (
thªad_ma°î
 *
m
, 
thªad
 *
„tch
)

1105 
thªad
 *thread;

1106 
fd_£t
 
ªadfd
;

1107 
fd_£t
 
wrôefd
;

1108 
fd_£t
 
ex˚±fd
;

1109 
timevÆ
 
timî_vÆ
 = { .
tv_£c
 = 0, .
tv_u£c
 = 0 };

1110 
timevÆ
 
timî_vÆ_bg
;

1111 
timevÆ
 *
timî_waô
 = &
timî_vÆ
;

1112 
timevÆ
 *
timî_waô_bg
;

1116 
num
 = 0;

1119 
	`quagga_sigevít_¥o˚ss
 ();

1124 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1125  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1133 
	`thªad_¥o˚ss
 (&
m
->
evít
);

1136 
ªadfd
 = 
m
->readfd;

1137 
wrôefd
 = 
m
->writefd;

1138 
ex˚±fd
 = 
m
->exceptfd;

1141 i‡(
m
->
ªady
.
cou¡
 == 0)

1143 
	`quagga_gë_ªœtive
 (
NULL
);

1144 
timî_waô
 = 
	`thªad_timî_waô
 (&
m
->
timî
, &
timî_vÆ
);

1145 
timî_waô_bg
 = 
	`thªad_timî_waô
 (&
m
->
background
, &
timî_vÆ_bg
);

1147 i‡(
timî_waô_bg
 &&

1148 (!
timî_waô
 || (
	`timevÆ_cmp
 (*timî_waô, *
timî_waô_bg
) > 0)))

1149 
timî_waô
 = 
timî_waô_bg
;

1152 
num
 = 
	`£À˘
 (
FD_SETSIZE
, &
ªadfd
, &
wrôefd
, &
ex˚±fd
, 
timî_waô
);

1155 i‡(
num
 < 0)

1157 i‡(
î∫o
 =
EINTR
)

1158  (
	`quagga_sigevít_¥o˚ss
 ());

1160 
	`zlog_w¨n
 ("£À˘(Ëîr‹: %s", 
	`ß„_°ªº‹
 (
î∫o
));

1161  
NULL
;

1167 
	`quagga_gë_ªœtive
 (
NULL
);

1168 
	`thªad_timî_¥o˚ss
 (&
m
->
timî
, &
ªœtive_time
);

1171 i‡(
num
 > 0)

1174 
	`thªad_¥o˚ss_fd
 (&
m
->
ªad
, &
ªadfd
, &m->readfd);

1176 
	`thªad_¥o˚ss_fd
 (&
m
->
wrôe
, &
wrôefd
, &m->writefd);

1184 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1185  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1189 
	`thªad_timî_¥o˚ss
 (&
m
->
background
, &
ªœtive_time
);

1191 i‡((
thªad
 = 
	`thªad_åim_hód
 (&
m
->
ªady
)Ë!
NULL
)

1192  
	`thªad_run
 (
m
, 
thªad
, 
„tch
);

1194 
	}
}

1198 
	$thªad_c⁄sumed_time
 (
RUSAGE_T
 *
now
, RUSAGE_T *
°¨t
, *
˝utime
)

1200 #ifde‡
HAVE_RUSAGE


1202 *
˝utime
 = 
	`timevÆ_ñ≠£d
 (
now
->
˝u
.
ru_utime
, 
°¨t
->cpu.ru_utime) +

1203 
	`timevÆ_ñ≠£d
 (
now
->
˝u
.
ru_°ime
, 
°¨t
->cpu.ru_stime);

1205 *
˝utime
 = 0;

1207  
	`timevÆ_ñ≠£d
 (
now
->
ªÆ
, 
°¨t
->real);

1208 
	}
}

1220 
	$thªad_should_yõld
 (
thªad
 *thread)

1222 
	`quagga_gë_ªœtive
 (
NULL
);

1223  (
	`timevÆ_ñ≠£d
(
ªœtive_time
, 
thªad
->
ru
.
ªÆ
) >

1224 
THREAD_YIELD_TIME_SLOT
);

1225 
	}
}

1228 
	$thªad_gërußge
 (
RUSAGE_T
 *
r
)

1230 
	`quagga_gë_ªœtive
 (
NULL
);

1231 #ifde‡
HAVE_RUSAGE


1232 
	`gërußge
(
RUSAGE_SELF
, &(
r
->
˝u
));

1234 
r
->
ªÆ
 = 
ªœtive_time
;

1236 #ifde‡
HAVE_CLOCK_MONOTONIC


1241 
	`quagga_gëtimeofday
(&
ª˚¡_time
);

1243 
	}
}

1249 
	$thªad_ˇŒ
 (
thªad
 *thread)

1251 
ªÆtime
, 
˝utime
;

1252 
RUSAGE_T
 
ru
;

1260 i‡(!
thªad
->
hi°
)

1262 
˝u_thªad_hi°‹y
 
tmp
;

1264 
tmp
.
func
 = 
thªad
->func;

1265 
tmp
.
fun˙ame
 = 
thªad
->funcname;

1267 
thªad
->
hi°
 = 
	`hash_gë
 (
˝u_ªc‹d
, &
tmp
,

1268 (* (*Ë(*))
˝u_ªc‹d_hash_Æloc
);

1271 
	`GETRUSAGE
 (&
thªad
->
ru
);

1273 (*
thªad
->
func
) (thread);

1275 
	`GETRUSAGE
 (&
ru
);

1277 
ªÆtime
 = 
	`thªad_c⁄sumed_time
 (&
ru
, &
thªad
->ru, &
˝utime
);

1278 
thªad
->
hi°
->
ªÆ
.
tŸÆ
 +
ªÆtime
;

1279 i‡(
thªad
->
hi°
->
ªÆ
.
max
 < 
ªÆtime
)

1280 
thªad
->
hi°
->
ªÆ
.
max
 = 
ªÆtime
;

1281 #ifde‡
HAVE_RUSAGE


1282 
thªad
->
hi°
->
˝u
.
tŸÆ
 +
˝utime
;

1283 i‡(
thªad
->
hi°
->
˝u
.
max
 < 
˝utime
)

1284 
thªad
->
hi°
->
˝u
.
max
 = 
˝utime
;

1287 ++(
thªad
->
hi°
->
tŸÆ_ˇŒs
);

1288 
thªad
->
hi°
->
ty≥s
 |(1 <<Åhªad->
add_ty≥
);

1290 #ifde‡
CONSUMED_TIME_CHECK


1291 i‡(
ªÆtime
 > 
CONSUMED_TIME_CHECK
)

1298 
	`zlog_w¨n
 ("SLOW THREAD:Åask %s (%lx)Ñan for %lums (cpuÅime %lums)",

1299 
thªad
->
fun˙ame
,

1300 (Ë
thªad
->
func
,

1301 
ªÆtime
/1000, 
˝utime
/1000);

1305 
	`XFREE
 (
MTYPE_THREAD_FUNCNAME
, 
thªad
->
fun˙ame
);

1306 
	}
}

1309 
thªad
 *

1310 
fun˙ame_thªad_execuã
 (
thªad_ma°î
 *
m
,

1311 (*
func
)(
thªad
 *),

1312 *
¨g
,

1313 
vÆ
,

1314 c⁄° * 
fun˙ame
)

1316 
thªad
 
dummy
;

1318 
	`mem£t
 (&
dummy
, 0,  (
thªad
));

1320 
dummy
.
ty≥
 = 
THREAD_EVENT
;

1321 
dummy
.
add_ty≥
 = 
THREAD_EXECUTE
;

1322 
dummy
.
ma°î
 = 
NULL
;

1323 
dummy
.
func
 = func;

1324 
dummy
.
¨g
 =árg;

1325 
dummy
.
u
.
vÆ
 = val;

1326 
dummy
.
fun˙ame
 = 
	`°rù_fun˙ame
 (funcname);

1327 
	`thªad_ˇŒ
 (&
dummy
);

1329 
	`XFREE
 (
MTYPE_THREAD_FUNCNAME
, 
dummy
.
fun˙ame
);

1331  
NULL
;

1332 
	}
}

	@common-libs/3rd-party/quagga-lib/src/vector.c

22 
	~<zebø.h
>

24 
	~"ve˘‹.h
"

25 
	~"mem‹y.h
"

28 
ve˘‹


29 
	$ve˘‹_öô
 (
size
)

31 
ve˘‹
 
v
 = 
	`XCALLOC
 (
MTYPE_VECTOR
,  (
_ve˘‹
));

34 i‡(
size
 == 0)

35 
size
 = 1;

37 
v
->
Ælo˚d
 = 
size
;

38 
v
->
a˘ive
 = 0;

39 
v
->
ödex
 = 
	`XCALLOC
 (
MTYPE_VECTOR_INDEX
,  (*Ë* 
size
);

40  
v
;

41 
	}
}

44 
	$ve˘‹_⁄ly_wøµî_‰ì
 (
ve˘‹
 
v
)

46 
	`XFREE
 (
MTYPE_VECTOR
, 
v
);

47 
	}
}

50 
	$ve˘‹_⁄ly_ödex_‰ì
 (*
ödex
)

52 
	`XFREE
 (
MTYPE_VECTOR_INDEX
, 
ödex
);

53 
	}
}

56 
	$ve˘‹_‰ì
 (
ve˘‹
 
v
)

58 
	`XFREE
 (
MTYPE_VECTOR_INDEX
, 
v
->
ödex
);

59 
	`XFREE
 (
MTYPE_VECTOR
, 
v
);

60 
	}
}

62 
ve˘‹


63 
	$ve˘‹_c›y
 (
ve˘‹
 
v
)

65 
size
;

66 
ve˘‹
 
√w
 = 
	`XCALLOC
 (
MTYPE_VECTOR
,  (
_ve˘‹
));

68 
√w
->
a˘ive
 = 
v
->active;

69 
√w
->
Ælo˚d
 = 
v
->alloced;

71 
size
 =  (*Ë* (
v
->
Ælo˚d
);

72 
√w
->
ödex
 = 
	`XCALLOC
 (
MTYPE_VECTOR_INDEX
, 
size
);

73 
	`mem˝y
 (
√w
->
ödex
, 
v
->ödex, 
size
);

75  
√w
;

76 
	}
}

80 
	$ve˘‹_ísuª
 (
ve˘‹
 
v
, 
num
)

82 i‡(
v
->
Ælo˚d
 > 
num
)

85 
v
->
ödex
 = 
	`XREALLOC
 (
MTYPE_VECTOR_INDEX
,

86 
v
->
ödex
,  (*Ë* (v->
Ælo˚d
 * 2));

87 
	`mem£t
 (&
v
->
ödex
[v->
Ælo˚d
], 0,  (*) * v->alloced);

88 
v
->
Ælo˚d
 *= 2;

90 i‡(
v
->
Ælo˚d
 <
num
)

91 
	`ve˘‹_ísuª
 (
v
, 
num
);

92 
	}
}

98 
	$ve˘‹_em±y_¶Ÿ
 (
ve˘‹
 
v
)

100 
i
;

102 i‡(
v
->
a˘ive
 == 0)

105 
i
 = 0; i < 
v
->
a˘ive
; i++)

106 i‡(
v
->
ödex
[
i
] == 0)

107  
i
;

109  
i
;

110 
	}
}

114 
	$ve˘‹_£t
 (
ve˘‹
 
v
, *
vÆ
)

116 
i
;

118 
i
 = 
	`ve˘‹_em±y_¶Ÿ
 (
v
);

119 
	`ve˘‹_ísuª
 (
v
, 
i
);

121 
v
->
ödex
[
i
] = 
vÆ
;

123 i‡(
v
->
a˘ive
 <
i
)

124 
v
->
a˘ive
 = 
i
 + 1;

126  
i
;

127 
	}
}

131 
	$ve˘‹_£t_ödex
 (
ve˘‹
 
v
, 
i
, *
vÆ
)

133 
	`ve˘‹_ísuª
 (
v
, 
i
);

135 
v
->
ödex
[
i
] = 
vÆ
;

137 i‡(
v
->
a˘ive
 <
i
)

138 
v
->
a˘ive
 = 
i
 + 1;

140  
i
;

141 
	}
}

145 
	$ve˘‹_lookup
 (
ve˘‹
 
v
, 
i
)

147 i‡(
i
 >
v
->
a˘ive
)

148  
NULL
;

149  
v
->
ödex
[
i
];

150 
	}
}

154 
	$ve˘‹_lookup_ísuª
 (
ve˘‹
 
v
, 
i
)

156 
	`ve˘‹_ísuª
 (
v
, 
i
);

157  
v
->
ödex
[
i
];

158 
	}
}

162 
	$ve˘‹_un£t
 (
ve˘‹
 
v
, 
i
)

164 i‡(
i
 >
v
->
Ælo˚d
)

167 
v
->
ödex
[
i
] = 
NULL
;

169 i‡(
i
 + 1 =
v
->
a˘ive
)

171 
v
->
a˘ive
--;

172 
i
 && 
v
->
ödex
[--i] =
NULL
 && v->
a˘ive
--)

175 
	}
}

179 
	$ve˘‹_cou¡
 (
ve˘‹
 
v
)

181 
i
;

182 
cou¡
 = 0;

184 
i
 = 0; i < 
v
->
a˘ive
; i++)

185 i‡(
v
->
ödex
[
i
] !
NULL
)

186 
cou¡
++;

188  
cou¡
;

189 
	}
}

	@common-libs/3rd-party/quagga-lib/src/vty.c

23 
	~<zebø.h
>

25 
	~"lökli°.h
"

26 
	~"thªad.h
"

27 
	~"buf„r.h
"

28 
	~<vîsi⁄.h
>

29 
	~"comm™d.h
"

30 
	~"sockuni⁄.h
"

31 
	~"mem‹y.h
"

32 
	~"°r.h
"

33 
	~"log.h
"

34 
	~"¥efix.h
"

35 
	~"fûãr.h
"

36 
	~"vty.h
"

37 
	~"¥ivs.h
"

38 
	~"√tw‹k.h
"

40 
	~<¨∑/ã ë.h
>

41 
	#C_NBAPI_PORT
 7001

	)

44 
	eevít


46 
	mVTY_SERV
,

47 
	mVTY_READ
,

48 
	mVTY_WRITE
,

49 
	mVTY_TIMEOUT_RESET
,

50 #ifde‡
VTYSH


51 
	mVTYSH_SERV
,

52 
	mVTYSH_READ
,

53 
	mVTYSH_WRITE


55 
	mNBAPI_SERV


58 
vty_evít
 (
evít
, , 
vty
 *);

61 
ho°
 host;

64 
ve˘‹
 
	gvtyvec
;

67 
	gvty_timeout_vÆ
 = 
VTY_TIMEOUT_DEFAULT
;

70 *
	gvty_ac˚s¶i°_«me
 = 
NULL
;

73 *
	gvty_ùv6_ac˚s¶i°_«me
 = 
NULL
;

76 
ve˘‹
 
	gVvty_£rv_thªad
;

79 *
	gvty_cwd
 = 
NULL
;

82 
	gvty_c⁄fig
;

85 
	gno_∑ssw‹d_check
 = 1;

88 c⁄° 
u_ch¨
 
	gª°ri˘ed_mode_deÁu…
 = 0;

89 
u_ch¨
 
	gª°ri˘ed_mode
 = 0;

92 
	göãgøã_deÁu…
[] = 
SYSCONFDIR
 
INTEGRATE_DEFAULT_CONFIG
;

95 
	$£t_n⁄blockög
(
fd
)

97 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

98 i‡(
Êags
 != -1) {

99 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) != -1) {

102  
î∫o
;

105  
î∫o
;

107 
	}
}

113 
	$vty_out
 (
vty
 *vty, c⁄° *
f‹m©
, ...)

115 
va_li°
 
¨gs
;

116 
Àn
 = 0;

117 
size
 = 1024;

118 
buf
[1024];

119 *
p
 = 
NULL
;

121 i‡(
	`vty_shñl
 (
vty
))

123 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

124 
	`v¥ötf
 (
f‹m©
, 
¨gs
);

125 
	`va_íd
 (
¨gs
);

130 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

131 
Àn
 = 
	`v¢¥ötf
 (
buf
,  buf, 
f‹m©
, 
¨gs
);

132 
	`va_íd
 (
¨gs
);

135 i‡(
Àn
 < 0 ||Üí >
size
)

139 i‡(
Àn
 > -1)

140 
size
 = 
Àn
 + 1;

142 
size
 = size * 2;

144 
p
 = 
	`XREALLOC
 (
MTYPE_VTY_OUT_BUF
,Ö, 
size
);

145 i‡(! 
p
)

148 
	`va_°¨t
 (
¨gs
, 
f‹m©
);

149 
Àn
 = 
	`v¢¥ötf
 (
p
, 
size
, 
f‹m©
, 
¨gs
);

150 
	`va_íd
 (
¨gs
);

152 i‡(
Àn
 > -1 &&Üí < 
size
)

158 i‡(! 
p
)

159 
p
 = 
buf
;

162 
	`buf„r_put
 (
vty
->
obuf
, (
u_ch¨
 *Ë
p
, 
Àn
);

165 i‡(
p
 !
buf
)

166 
	`XFREE
 (
MTYPE_VTY_OUT_BUF
, 
p
);

169  
Àn
;

170 
	}
}

173 
	$vty_log_out
 (
vty
 *vty, c⁄° *
Àvñ
, c⁄° *
¥Ÿo_°r
,

174 c⁄° *
f‹m©
, 
time°amp_c⁄åﬁ
 *
˘l
, 
va_li°
 
va
)

176 
ªt
;

177 
Àn
;

178 
buf
[1024];

180 i‡(!
˘l
->
Æªady_ªndîed
)

182 
˘l
->
Àn
 = 
	`quagga_time°amp
(˘l->
¥ecisi⁄
, cé->
buf
, (ctl->buf));

183 
˘l
->
Æªady_ªndîed
 = 1;

185 i‡(
˘l
->
Àn
+1 >(
buf
))

187 
	`mem˝y
(
buf
, 
˘l
->buf, 
Àn
 = ctl->len);

188 
buf
[
Àn
++] = ' ';

189 
buf
[
Àn
] = '\0';

191 i‡(
Àvñ
)

192 
ªt
 = 
	`¢¥ötf
(
buf
+
Àn
, (buf)-Àn, "%s: %s: ", 
Àvñ
, 
¥Ÿo_°r
);

194 
ªt
 = 
	`¢¥ötf
(
buf
+
Àn
, (buf)-Àn, "%s: ", 
¥Ÿo_°r
);

195 i‡((
ªt
 < 0Ë|| ((
size_t
)(
Àn
 +ªtË>(
buf
)))

198 i‡(((
ªt
 = 
	`v¢¥ötf
(
buf
+
Àn
, (buf)-Àn, 
f‹m©
, 
va
)) < 0) ||

199 ((
size_t
)((
Àn
 +
ªt
)+2Ë> (
buf
)))

202 
buf
[
Àn
++] = '\r';

203 
buf
[
Àn
++] = '\n';

205 i‡(
	`wrôe
(
vty
->
fd
, 
buf
, 
Àn
) < 0)

207 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

212 
vty
->
m⁄ô‹
 = 0;

213 
	`zlog_w¨n
("%s: write failedÅo vty client fd %d, closing: %s",

214 
__func__
, 
vty
->
fd
, 
	`ß„_°ªº‹
(
î∫o
));

215 
	`buf„r_ª£t
(
vty
->
obuf
);

218 
vty
->
°©us
 = 
VTY_CLOSE
;

219 
	`shutdown
(
vty
->
fd
, 
SHUT_RDWR
);

223 
	}
}

227 
	$vty_time_¥öt
 (
vty
 *vty, 
¸
)

229 
buf
 [25];

231 i‡(
	`quagga_time°amp
(0, 
buf
, (buf)) == 0)

233 
	`zlog
 (
NULL
, 
LOG_INFO
, "quagga_timestampÉrror");

236 i‡(
¸
)

237 
	`vty_out
 (
vty
, "%s\n", 
buf
);

239 
	`vty_out
 (
vty
, "%†", 
buf
);

242 
	}
}

246 
	$vty_hñlo
 (
vty
 *vty)

248 i‡(
ho°
.
mŸdfûe
)

250 
FILE
 *
f
;

251 
buf
[4096];

253 
f
 = 
	`f›í
 (
ho°
.
mŸdfûe
, "r");

254 i‡(
f
)

256 
	`fgës
 (
buf
,  (buf), 
f
))

258 *
s
;

260 
s
 = 
buf
 + 
	`°æí
 (buf); (†> bufË&& 
	`is•a˚
 (()*(s - 1));

261 
s
--);

262 *
s
 = '\0';

263 
	`vty_out
 (
vty
, "%s%s", 
buf
, 
VTY_NEWLINE
);

265 
	`f˛o£
 (
f
);

268 
	`vty_out
 (
vty
, "MOTD fûênŸ found%s", 
VTY_NEWLINE
);

270 i‡(
ho°
.
mŸd
)

271 
	`vty_out
 (
vty
, "%s", 
ho°
.
mŸd
);

272 
	}
}

276 
	$vty_¥om±
 (
vty
 *vty)

278 
ut¢ame
 
«mes
;

279 c⁄° *
ho°«me
;

281 i‡(
vty
->
ty≥
 =
VTY_TERM
)

283 
ho°«me
 = 
ho°
.
«me
;

284 i‡(!
ho°«me
)

286 
	`u«me
 (&
«mes
);

287 
ho°«me
 = 
«mes
.
nodíame
;

289 
	`vty_out
 (
vty
, 
	`cmd_¥om±
 (vty->
node
), 
ho°«me
);

291 
	}
}

295 
	$vty_wûl_echo
 (
vty
 *vty)

297 
cmd
[] = { 
IAC
, 
WILL
, 
TELOPT_ECHO
, '\0' };

298 
	`vty_out
 (
vty
, "%s", 
cmd
);

299 
	}
}

303 
	$vty_wûl_suµªss_go_ahód
 (
vty
 *vty)

305 
cmd
[] = { 
IAC
, 
WILL
, 
TELOPT_SGA
, '\0' };

306 
	`vty_out
 (
vty
, "%s", 
cmd
);

307 
	}
}

311 
	$vty_d⁄t_löemode
 (
vty
 *vty)

313 
cmd
[] = { 
IAC
, 
DONT
, 
TELOPT_LINEMODE
, '\0' };

314 
	`vty_out
 (
vty
, "%s", 
cmd
);

315 
	}
}

319 
	$vty_do_wödow_size
 (
vty
 *vty)

321 
cmd
[] = { 
IAC
, 
DO
, 
TELOPT_NAWS
, '\0' };

322 
	`vty_out
 (
vty
, "%s", 
cmd
);

323 
	}
}

328 
	$vty_d⁄t_lÊow_ahód
 (
vty
 *vty)

330 
cmd
[] = { 
IAC
, 
DONT
, 
TELOPT_LFLOW
, '\0' };

331 
	`vty_out
 (
vty
, "%s", 
cmd
);

332 
	}
}

336 
vty
 *

337 
	$vty_√w
 ()

339 
vty
 *
√w
 = 
	`XCALLOC
 (
MTYPE_VTY
,  (vty));

341 
√w
->
obuf
 = 
	`buf„r_√w
(0);

342 
√w
->
buf
 = 
	`XCALLOC
 (
MTYPE_VTY
, 
VTY_BUFSIZ
);

343 
√w
->
max
 = 
VTY_BUFSIZ
;

345  
√w
;

346 
	}
}

350 
	$vty_auth
 (
vty
 *vty, *
buf
)

352 *
∑sswd
 = 
NULL
;

353 
node_ty≥
 
√xt_node
 = 0;

354 
Áû
;

355 *
	`¸y±
 (const *, const *);

357 
vty
->
node
)

359 
AUTH_NODE
:

360 i‡(
ho°
.
í¸y±
)

361 
∑sswd
 = 
ho°
.
∑ssw‹d_í¸y±
;

363 
∑sswd
 = 
ho°
.
∑ssw‹d
;

364 i‡(
ho°
.
adv™˚d
)

365 
√xt_node
 = 
ho°
.
íabÀ
 ? 
VIEW_NODE
 : 
ENABLE_NODE
;

367 
√xt_node
 = 
VIEW_NODE
;

369 
AUTH_ENABLE_NODE
:

370 i‡(
ho°
.
í¸y±
)

371 
∑sswd
 = 
ho°
.
íabÀ_í¸y±
;

373 
∑sswd
 = 
ho°
.
íabÀ
;

374 
√xt_node
 = 
ENABLE_NODE
;

378 i‡(
∑sswd
)

380 i‡(
ho°
.
í¸y±
)

381 
Áû
 = 
	`°rcmp
 (
	`¸y±
(
buf
, 
∑sswd
),Öasswd);

383 
Áû
 = 
	`°rcmp
 (
buf
, 
∑sswd
);

386 
Áû
 = 1;

388 i‡(! 
Áû
)

390 
vty
->
Áû
 = 0;

391 
vty
->
node
 = 
√xt_node
;

395 
vty
->
Áû
++;

396 i‡(
vty
->
Áû
 >= 3)

398 i‡(
vty
->
node
 =
AUTH_NODE
)

400 
	`vty_out
 (
vty
, "%% BadÖassw‹ds,Åoÿm™y faûuªs!%s", 
VTY_NEWLINE
);

401 
vty
->
°©us
 = 
VTY_CLOSE
;

406 
vty
->
Áû
 = 0;

407 
	`vty_out
 (
vty
, "%% BadÉ«bÀÖassw‹ds,Åoÿm™y faûuªs!%s", 
VTY_NEWLINE
);

408 
vty
->
node
 = 
ª°ri˘ed_mode
 ? 
RESTRICTED_NODE
 : 
VIEW_NODE
;

412 
	}
}

416 
	$vty_comm™d
 (
vty
 *vty, *
buf
)

418 
ªt
;

419 
ve˘‹
 
vlöe
;

420 c⁄° *
¥Ÿocﬁ«me
;

423 
vlöe
 = 
	`cmd_make_°rvec
 (
buf
);

425 i‡(
vlöe
 =
NULL
)

426  
CMD_SUCCESS
;

428 #ifde‡
CONSUMED_TIME_CHECK


430 
RUSAGE_T
 
bef‹e
;

431 
RUSAGE_T
 
a·î
;

432 
ªÆtime
, 
˝utime
;

434 
	`GETRUSAGE
(&
bef‹e
);

437 
ªt
 = 
	`cmd_execuã_comm™d
 (
vlöe
, 
vty
, 
NULL
, 0);

440 i‡(
zlog_deÁu…
)

441 
¥Ÿocﬁ«me
 = 
zlog_¥Ÿo_«mes
[
zlog_deÁu…
->
¥Ÿocﬁ
];

443 
¥Ÿocﬁ«me
 = 
zlog_¥Ÿo_«mes
[
ZLOG_NONE
];

445 #ifde‡
CONSUMED_TIME_CHECK


446 
	`GETRUSAGE
(&
a·î
);

447 i‡((
ªÆtime
 = 
	`thªad_c⁄sumed_time
(&
a·î
, &
bef‹e
, &
˝utime
)) >

448 
CONSUMED_TIME_CHECK
)

450 
	`zlog_w¨n
("SLOW COMMAND: commandÅook %lums (cpuÅime %lums): %s",

451 
ªÆtime
/1000, 
˝utime
/1000, 
buf
);

455 i‡(
ªt
 !
CMD_SUCCESS
)

456 
ªt
)

458 
CMD_WARNING
:

459 i‡(
vty
->
ty≥
 =
VTY_FILE
)

460 
	`vty_out
 (
vty
, "W¨nög...%s", 
VTY_NEWLINE
);

462 
CMD_ERR_AMBIGUOUS
:

463 
	`vty_out
 (
vty
, "%% Ambiguou†comm™d.%s", 
VTY_NEWLINE
);

465 
CMD_ERR_NO_MATCH
:

466 
	`vty_out
 (
vty
, "%% [%s] Unknow¿comm™d: %s%s", 
¥Ÿocﬁ«me
, 
buf
, 
VTY_NEWLINE
);

468 
CMD_ERR_INCOMPLETE
:

469 
	`vty_out
 (
vty
, "%% Comm™d incom∂ëe.%s", 
VTY_NEWLINE
);

472 
	`cmd_‰ì_°rvec
 (
vlöe
);

474  
ªt
;

475 
	}
}

477 c⁄° 
	gã ë_backw¨d_ch¨
 = 0x08;

478 c⁄° 
	gã ë_•a˚_ch¨
 = ' ';

482 
	$vty_wrôe
 (
vty
 *vty, c⁄° *
buf
, 
size_t
 
nbyãs
)

484 i‡((
vty
->
node
 =
AUTH_NODE
Ë|| (vty->nodê=
AUTH_ENABLE_NODE
))

488 
	`buf„r_put
 (
vty
->
obuf
, 
buf
, 
nbyãs
);

489 
	}
}

493 
	$vty_ísuª
 (
vty
 *vty, 
Àngth
)

495 i‡(
vty
->
max
 <
Àngth
)

497 
vty
->
max
 *= 2;

498 
vty
->
buf
 = 
	`XREALLOC
 (
MTYPE_VTY
, vty->buf, vty->
max
);

500 
	}
}

504 
	$vty_£lf_ö£π
 (
vty
 *vty, 
c
)

506 
i
;

507 
Àngth
;

509 
	`vty_ísuª
 (
vty
, vty->
Àngth
 + 1);

510 
Àngth
 = 
vty
->Àngth - vty->
˝
;

511 
	`memmove
 (&
vty
->
buf
[vty->
˝
 + 1], &vty->buf[vty->˝], 
Àngth
);

512 
vty
->
buf
[vty->
˝
] = 
c
;

514 
	`vty_wrôe
 (
vty
, &vty->
buf
[vty->
˝
], 
Àngth
 + 1);

515 
i
 = 0; i < 
Àngth
; i++)

516 
	`vty_wrôe
 (
vty
, &
ã ë_backw¨d_ch¨
, 1);

518 
vty
->
˝
++;

519 
vty
->
Àngth
++;

520 
	}
}

524 
	$vty_£lf_ö£π_ovîwrôe
 (
vty
 *vty, 
c
)

526 
	`vty_ísuª
 (
vty
, vty->
Àngth
 + 1);

527 
vty
->
buf
[vty->
˝
++] = 
c
;

529 i‡(
vty
->
˝
 > vty->
Àngth
)

530 
vty
->
Àngth
++;

532 i‡((
vty
->
node
 =
AUTH_NODE
Ë|| (vty->nodê=
AUTH_ENABLE_NODE
))

535 
	`vty_wrôe
 (
vty
, &
c
, 1);

536 
	}
}

540 
	$vty_ö£π_w‹d_ovîwrôe
 (
vty
 *vty, *
°r
)

542 
Àn
 = 
	`°æí
 (
°r
);

543 
	`vty_wrôe
 (
vty
, 
°r
, 
Àn
);

544 
	`°r˝y
 (&
vty
->
buf
[vty->
˝
], 
°r
);

545 
vty
->
˝
 +
Àn
;

546 
vty
->
Àngth
 = vty->
˝
;

547 
	}
}

551 
	$vty_f‹w¨d_ch¨
 (
vty
 *vty)

553 i‡(
vty
->
˝
 < vty->
Àngth
)

555 
	`vty_wrôe
 (
vty
, &vty->
buf
[vty->
˝
], 1);

556 
vty
->
˝
++;

558 
	}
}

562 
	$vty_backw¨d_ch¨
 (
vty
 *vty)

564 i‡(
vty
->
˝
 > 0)

566 
vty
->
˝
--;

567 
	`vty_wrôe
 (
vty
, &
ã ë_backw¨d_ch¨
, 1);

569 
	}
}

573 
	$vty_begönög_of_löe
 (
vty
 *vty)

575 
vty
->
˝
)

576 
	`vty_backw¨d_ch¨
 (
vty
);

577 
	}
}

581 
	$vty_íd_of_löe
 (
vty
 *vty)

583 
vty
->
˝
 < vty->
Àngth
)

584 
	`vty_f‹w¨d_ch¨
 (
vty
);

585 
	}
}

587 
vty_kûl_löe_‰om_begönög
 (
vty
 *);

588 
vty_ªdøw_löe
 (
vty
 *);

593 
	$vty_hi°‹y_¥öt
 (
vty
 *vty)

595 
Àngth
;

597 
	`vty_kûl_löe_‰om_begönög
 (
vty
);

600 
Àngth
 = 
	`°æí
 (
vty
->
hi°
[vty->
hp
]);

601 
	`mem˝y
 (
vty
->
buf
, vty->
hi°
[vty->
hp
], 
Àngth
);

602 
vty
->
˝
 = vty->
Àngth
 =Üength;

605 
	`vty_ªdøw_löe
 (
vty
);

606 
	}
}

610 
	$vty_√xt_löe
 (
vty
 *vty)

612 
åy_ödex
;

614 i‡(
vty
->
hp
 =vty->
hödex
)

618 
åy_ödex
 = 
vty
->
hp
;

619 i‡(
åy_ödex
 =(
VTY_MAXHIST
 - 1))

620 
åy_ödex
 = 0;

622 
åy_ödex
++;

625 i‡(
vty
->
hi°
[
åy_ödex
] =
NULL
)

628 
vty
->
hp
 = 
åy_ödex
;

630 
	`vty_hi°‹y_¥öt
 (
vty
);

631 
	}
}

635 
	$vty_¥evious_löe
 (
vty
 *vty)

637 
åy_ödex
;

639 
åy_ödex
 = 
vty
->
hp
;

640 i‡(
åy_ödex
 == 0)

641 
åy_ödex
 = 
VTY_MAXHIST
 - 1;

643 
åy_ödex
--;

645 i‡(
vty
->
hi°
[
åy_ödex
] =
NULL
)

648 
vty
->
hp
 = 
åy_ödex
;

650 
	`vty_hi°‹y_¥öt
 (
vty
);

651 
	}
}

655 
	$vty_ªdøw_löe
 (
vty
 *vty)

657 
	`vty_wrôe
 (
vty
, vty->
buf
, vty->
Àngth
);

658 
vty
->
˝
 = vty->
Àngth
;

659 
	}
}

663 
	$vty_f‹w¨d_w‹d
 (
vty
 *vty)

665 
vty
->
˝
 !vty->
Àngth
 && vty->
buf
[vty->cp] != ' ')

666 
	`vty_f‹w¨d_ch¨
 (
vty
);

668 
vty
->
˝
 !vty->
Àngth
 && vty->
buf
[vty->cp] == ' ')

669 
	`vty_f‹w¨d_ch¨
 (
vty
);

670 
	}
}

674 
	$vty_backw¨d_puª_w‹d
 (
vty
 *vty)

676 
vty
->
˝
 > 0 && vty->
buf
[vty->cp - 1] != ' ')

677 
	`vty_backw¨d_ch¨
 (
vty
);

678 
	}
}

682 
	$vty_backw¨d_w‹d
 (
vty
 *vty)

684 
vty
->
˝
 > 0 && vty->
buf
[vty->cp - 1] == ' ')

685 
	`vty_backw¨d_ch¨
 (
vty
);

687 
vty
->
˝
 > 0 && vty->
buf
[vty->cp - 1] != ' ')

688 
	`vty_backw¨d_ch¨
 (
vty
);

689 
	}
}

694 
	$vty_down_Àvñ
 (
vty
 *vty)

696 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

697 (*
c⁄fig_exô_cmd
.
func
)(
NULL
, 
vty
, 0, NULL);

698 
	`vty_¥om±
 (
vty
);

699 
vty
->
˝
 = 0;

700 
	}
}

704 
	$vty_íd_c⁄fig
 (
vty
 *vty)

706 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

708 
vty
->
node
)

710 
VIEW_NODE
:

711 
ENABLE_NODE
:

712 
RESTRICTED_NODE
:

715 
CONFIG_NODE
:

716 
INTERFACE_NODE
:

717 
ZEBRA_NODE
:

718 
RIP_NODE
:

719 
RIPNG_NODE
:

720 
BGP_NODE
:

721 
BGP_VPNV4_NODE
:

722 
BGP_IPV4_NODE
:

723 
BGP_IPV4M_NODE
:

724 
BGP_IPV6_NODE
:

725 
BGP_IPV6M_NODE
:

726 
RMAP_NODE
:

727 
OSPF_NODE
:

728 
OSPF6_NODE
:

729 
ISIS_NODE
:

730 
KEYCHAIN_NODE
:

731 
KEYCHAIN_KEY_NODE
:

732 
MASC_NODE
:

733 
VTY_NODE
:

734 
KULVISOR_NODE
:

735 
	`vty_c⁄fig_u∆ock
 (
vty
);

736 
vty
->
node
 = 
ENABLE_NODE
;

743 
	`vty_¥om±
 (
vty
);

744 
vty
->
˝
 = 0;

745 
	}
}

749 
	$vty_dñëe_ch¨
 (
vty
 *vty)

751 
i
;

752 
size
;

754 i‡(
vty
->
Àngth
 == 0)

756 
	`vty_down_Àvñ
 (
vty
);

760 i‡(
vty
->
˝
 =vty->
Àngth
)

763 
size
 = 
vty
->
Àngth
 - vty->
˝
;

765 
vty
->
Àngth
--;

766 
	`memmove
 (&
vty
->
buf
[vty->
˝
], &vty->buf[vty->˝ + 1], 
size
 - 1);

767 
vty
->
buf
[vty->
Àngth
] = '\0';

769 i‡(
vty
->
node
 =
AUTH_NODE
 || vty->nodê=
AUTH_ENABLE_NODE
)

772 
	`vty_wrôe
 (
vty
, &vty->
buf
[vty->
˝
], 
size
 - 1);

773 
	`vty_wrôe
 (
vty
, &
ã ë_•a˚_ch¨
, 1);

775 
i
 = 0; i < 
size
; i++)

776 
	`vty_wrôe
 (
vty
, &
ã ë_backw¨d_ch¨
, 1);

777 
	}
}

781 
	$vty_dñëe_backw¨d_ch¨
 (
vty
 *vty)

783 i‡(
vty
->
˝
 == 0)

786 
	`vty_backw¨d_ch¨
 (
vty
);

787 
	`vty_dñëe_ch¨
 (
vty
);

788 
	}
}

792 
	$vty_kûl_löe
 (
vty
 *vty)

794 
i
;

795 
size
;

797 
size
 = 
vty
->
Àngth
 - vty->
˝
;

799 i‡(
size
 == 0)

802 
i
 = 0; i < 
size
; i++)

803 
	`vty_wrôe
 (
vty
, &
ã ë_•a˚_ch¨
, 1);

804 
i
 = 0; i < 
size
; i++)

805 
	`vty_wrôe
 (
vty
, &
ã ë_backw¨d_ch¨
, 1);

807 
	`mem£t
 (&
vty
->
buf
[vty->
˝
], 0, 
size
);

808 
vty
->
Àngth
 = vty->
˝
;

809 
	}
}

813 
	$vty_kûl_löe_‰om_begönög
 (
vty
 *vty)

815 
	`vty_begönög_of_löe
 (
vty
);

816 
	`vty_kûl_löe
 (
vty
);

817 
	}
}

821 
	$vty_f‹w¨d_kûl_w‹d
 (
vty
 *vty)

823 
vty
->
˝
 !vty->
Àngth
 && vty->
buf
[vty->cp] == ' ')

824 
	`vty_dñëe_ch¨
 (
vty
);

825 
vty
->
˝
 !vty->
Àngth
 && vty->
buf
[vty->cp] != ' ')

826 
	`vty_dñëe_ch¨
 (
vty
);

827 
	}
}

831 
	$vty_backw¨d_kûl_w‹d
 (
vty
 *vty)

833 
vty
->
˝
 > 0 && vty->
buf
[vty->cp - 1] == ' ')

834 
	`vty_dñëe_backw¨d_ch¨
 (
vty
);

835 
vty
->
˝
 > 0 && vty->
buf
[vty->cp - 1] != ' ')

836 
	`vty_dñëe_backw¨d_ch¨
 (
vty
);

837 
	}
}

841 
	$vty_å™•o£_ch¨s
 (
vty
 *vty)

843 
c1
, 
c2
;

847 i‡(
vty
->
Àngth
 < 2 || vty->
˝
 < 1)

851 i‡(
vty
->
˝
 =vty->
Àngth
)

853 
c1
 = 
vty
->
buf
[vty->
˝
 - 1];

854 
c2
 = 
vty
->
buf
[vty->
˝
 - 2];

856 
	`vty_backw¨d_ch¨
 (
vty
);

857 
	`vty_backw¨d_ch¨
 (
vty
);

858 
	`vty_£lf_ö£π_ovîwrôe
 (
vty
, 
c1
);

859 
	`vty_£lf_ö£π_ovîwrôe
 (
vty
, 
c2
);

863 
c1
 = 
vty
->
buf
[vty->
˝
];

864 
c2
 = 
vty
->
buf
[vty->
˝
 - 1];

866 
	`vty_backw¨d_ch¨
 (
vty
);

867 
	`vty_£lf_ö£π_ovîwrôe
 (
vty
, 
c1
);

868 
	`vty_£lf_ö£π_ovîwrôe
 (
vty
, 
c2
);

870 
	}
}

874 
	$vty_com∂ëe_comm™d
 (
vty
 *vty)

876 
i
;

877 
ªt
;

878 **
m©ched
 = 
NULL
;

879 
ve˘‹
 
vlöe
;

881 i‡(
vty
->
node
 =
AUTH_NODE
 || vty->nodê=
AUTH_ENABLE_NODE
)

884 
vlöe
 = 
	`cmd_make_°rvec
 (
vty
->
buf
);

885 i‡(
vlöe
 =
NULL
)

889 i‡(
	`is•a˚
 ((Ë
vty
->
buf
[vty->
Àngth
 - 1]))

890 
	`ve˘‹_£t
 (
vlöe
, '\0');

892 
m©ched
 = 
	`cmd_com∂ëe_comm™d
 (
vlöe
, 
vty
, &
ªt
);

894 
	`cmd_‰ì_°rvec
 (
vlöe
);

896 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

897 
ªt
)

899 
CMD_ERR_AMBIGUOUS
:

900 
	`vty_out
 (
vty
, "%% Ambiguou†comm™d.%s", 
VTY_NEWLINE
);

901 
	`vty_¥om±
 (
vty
);

902 
	`vty_ªdøw_löe
 (
vty
);

904 
CMD_ERR_NO_MATCH
:

906 
	`vty_¥om±
 (
vty
);

907 
	`vty_ªdøw_löe
 (
vty
);

909 
CMD_COMPLETE_FULL_MATCH
:

910 
	`vty_¥om±
 (
vty
);

911 
	`vty_ªdøw_löe
 (
vty
);

912 
	`vty_backw¨d_puª_w‹d
 (
vty
);

913 
	`vty_ö£π_w‹d_ovîwrôe
 (
vty
, 
m©ched
[0]);

914 
	`vty_£lf_ö£π
 (
vty
, ' ');

915 
	`XFREE
 (
MTYPE_TMP
, 
m©ched
[0]);

917 
CMD_COMPLETE_MATCH
:

918 
	`vty_¥om±
 (
vty
);

919 
	`vty_ªdøw_löe
 (
vty
);

920 
	`vty_backw¨d_puª_w‹d
 (
vty
);

921 
	`vty_ö£π_w‹d_ovîwrôe
 (
vty
, 
m©ched
[0]);

922 
	`XFREE
 (
MTYPE_TMP
, 
m©ched
[0]);

923 
	`ve˘‹_⁄ly_ödex_‰ì
 (
m©ched
);

926 
CMD_COMPLETE_LIST_MATCH
:

927 
i
 = 0; 
m©ched
[i] !
NULL
; i++)

929 i‡(
i
 != 0 && ((i % 6) == 0))

930 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

931 
	`vty_out
 (
vty
, "%-10†", 
m©ched
[
i
]);

932 
	`XFREE
 (
MTYPE_TMP
, 
m©ched
[
i
]);

934 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

936 
	`vty_¥om±
 (
vty
);

937 
	`vty_ªdøw_löe
 (
vty
);

939 
CMD_ERR_NOTHING_TODO
:

940 
	`vty_¥om±
 (
vty
);

941 
	`vty_ªdøw_löe
 (
vty
);

946 i‡(
m©ched
)

947 
	`ve˘‹_⁄ly_ödex_‰ì
 (
m©ched
);

948 
	}
}

951 
	$vty_des¸ibe_fﬁd
 (
vty
 *vty, 
cmd_width
,

952 
desc_width
, 
desc
 *desc)

954 *
buf
;

955 c⁄° *
cmd
, *
p
;

956 
pos
;

958 
cmd
 = 
desc
->cmd[0] == '.' ? desc->cmd + 1 : desc->cmd;

960 i‡(
desc_width
 <= 0)

962 
	`vty_out
 (
vty
, " %-*† %s%s", 
cmd_width
, 
cmd
, 
desc
->
°r
, 
VTY_NEWLINE
);

966 
buf
 = 
	`XCALLOC
 (
MTYPE_TMP
, 
	`°æí
 (
desc
->
°r
) + 1);

968 
p
 = 
desc
->
°r
; 
	`°æí
 (pË> 
desc_width
;Ö +
pos
 + 1)

970 
pos
 = 
desc_width
;Öos > 0;Öos--)

971 i‡(*(
p
 + 
pos
) == ' ')

974 i‡(
pos
 == 0)

977 
	`°∫˝y
 (
buf
, 
p
, 
pos
);

978 
buf
[
pos
] = '\0';

979 
	`vty_out
 (
vty
, " %-*† %s%s", 
cmd_width
, 
cmd
, 
buf
, 
VTY_NEWLINE
);

981 
cmd
 = "";

984 
	`vty_out
 (
vty
, " %-*† %s%s", 
cmd_width
, 
cmd
, 
p
, 
VTY_NEWLINE
);

986 
	`XFREE
 (
MTYPE_TMP
, 
buf
);

987 
	}
}

991 
	$vty_des¸ibe_comm™d
 (
vty
 *vty)

993 
ªt
;

994 
ve˘‹
 
vlöe
;

995 
ve˘‹
 
des¸ibe
;

996 
i
, 
width
, 
desc_width
;

997 
desc
 *desc, *
desc_¸
 = 
NULL
;

999 
vlöe
 = 
	`cmd_make_°rvec
 (
vty
->
buf
);

1002 i‡(
vlöe
 =
NULL
)

1004 
vlöe
 = 
	`ve˘‹_öô
 (1);

1005 
	`ve˘‹_£t
 (
vlöe
, '\0');

1008 i‡(
	`is•a˚
 ((Ë
vty
->
buf
[vty->
Àngth
 - 1]))

1009 
	`ve˘‹_£t
 (
vlöe
, '\0');

1011 
des¸ibe
 = 
	`cmd_des¸ibe_comm™d
 (
vlöe
, 
vty
, &
ªt
);

1013 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1016 
ªt
)

1018 
CMD_ERR_AMBIGUOUS
:

1019 
	`vty_out
 (
vty
, "%% Ambiguou†comm™d.%s", 
VTY_NEWLINE
);

1020 
out
;

1022 
CMD_ERR_NO_MATCH
:

1023 
	`vty_out
 (
vty
, "%% Thîêi†nÿm©ched comm™d.%s", 
VTY_NEWLINE
);

1024 
out
;

1029 
width
 = 0;

1030 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
des¸ibe
); i++)

1031 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
des¸ibe
, 
i
)Ë!
NULL
)

1033 
Àn
;

1035 i‡(
desc
->
cmd
[0] == '\0')

1038 
Àn
 = 
	`°æí
 (
desc
->
cmd
);

1039 i‡(
desc
->
cmd
[0] == '.')

1040 
Àn
--;

1042 i‡(
width
 < 
Àn
)

1043 
width
 = 
Àn
;

1047 
desc_width
 = 
vty
->
width
 - (width + 6);

1050 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
des¸ibe
); i++)

1051 i‡((
desc
 = 
	`ve˘‹_¶Ÿ
 (
des¸ibe
, 
i
)Ë!
NULL
)

1053 i‡(
desc
->
cmd
[0] == '\0')

1056 i‡(
	`°rcmp
 (
desc
->
cmd
, 
comm™d_¸
) == 0)

1058 
desc_¸
 = 
desc
;

1062 i‡(!
desc
->
°r
)

1063 
	`vty_out
 (
vty
, " %-s%s",

1064 
desc
->
cmd
[0] == '.' ? desc->cmd + 1 : desc->cmd,

1065 
VTY_NEWLINE
);

1066 i‡(
desc_width
 >
	`°æí
 (
desc
->
°r
))

1067 
	`vty_out
 (
vty
, " %-*† %s%s", 
width
,

1068 
desc
->
cmd
[0] == '.' ? desc->cmd + 1 : desc->cmd,

1069 
desc
->
°r
, 
VTY_NEWLINE
);

1071 
	`vty_des¸ibe_fﬁd
 (
vty
, 
width
, 
desc_width
, 
desc
);

1074 
	`vty_out
 (
vty
, " %-*†%s%s", 
width


1075 
desc
->
cmd
[0] == '.' ? desc->cmd + 1 : desc->cmd,

1076 
desc
->
°r
 ? desc->°∏: "", 
VTY_NEWLINE
);

1080 i‡((
desc
 = 
desc_¸
))

1082 i‡(!
desc
->
°r
)

1083 
	`vty_out
 (
vty
, " %-s%s",

1084 
desc
->
cmd
[0] == '.' ? desc->cmd + 1 : desc->cmd,

1085 
VTY_NEWLINE
);

1086 i‡(
desc_width
 >
	`°æí
 (
desc
->
°r
))

1087 
	`vty_out
 (
vty
, " %-*† %s%s", 
width
,

1088 
desc
->
cmd
[0] == '.' ? desc->cmd + 1 : desc->cmd,

1089 
desc
->
°r
, 
VTY_NEWLINE
);

1091 
	`vty_des¸ibe_fﬁd
 (
vty
, 
width
, 
desc_width
, 
desc
);

1094 
out
:

1095 
	`cmd_‰ì_°rvec
 (
vlöe
);

1096 i‡(
des¸ibe
)

1097 
	`ve˘‹_‰ì
 (
des¸ibe
);

1099 
	`vty_¥om±
 (
vty
);

1100 
	`vty_ªdøw_löe
 (
vty
);

1101 
	}
}

1104 
	$vty_˛ór_buf
 (
vty
 *vty)

1106 
	`mem£t
 (
vty
->
buf
, 0, vty->
max
);

1107 
	}
}

1111 
	$vty_°›_öput
 (
vty
 *vty)

1113 
vty
->
˝
 = vty->
Àngth
 = 0;

1114 
	`vty_˛ór_buf
 (
vty
);

1115 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1117 
vty
->
node
)

1119 
VIEW_NODE
:

1120 
ENABLE_NODE
:

1121 
RESTRICTED_NODE
:

1124 
CONFIG_NODE
:

1125 
INTERFACE_NODE
:

1126 
ZEBRA_NODE
:

1127 
RIP_NODE
:

1128 
RIPNG_NODE
:

1129 
BGP_NODE
:

1130 
RMAP_NODE
:

1131 
OSPF_NODE
:

1132 
OSPF6_NODE
:

1133 
ISIS_NODE
:

1134 
KEYCHAIN_NODE
:

1135 
KEYCHAIN_KEY_NODE
:

1136 
MASC_NODE
:

1137 
VTY_NODE
:

1138 
KULVISOR_NODE
:

1139 
	`vty_c⁄fig_u∆ock
 (
vty
);

1140 
vty
->
node
 = 
ENABLE_NODE
;

1146 
	`vty_¥om±
 (
vty
);

1149 
vty
->
hp
 = vty->
hödex
;

1150 
	}
}

1154 
	$vty_hi°_add
 (
vty
 *vty)

1156 
ödex
;

1158 i‡(
vty
->
Àngth
 == 0)

1161 
ödex
 = 
vty
->
hödex
 ? vty->hödex - 1 : 
VTY_MAXHIST
 - 1;

1164 i‡(
vty
->
hi°
[
ödex
])

1165 i‡(
	`°rcmp
 (
vty
->
buf
, vty->
hi°
[
ödex
]) == 0)

1167 
vty
->
hp
 = vty->
hödex
;

1172 i‡(
vty
->
hi°
[vty->
hödex
])

1173 
	`XFREE
 (
MTYPE_VTY_HIST
, 
vty
->
hi°
[vty->
hödex
]);

1174 
vty
->
hi°
[vty->
hödex
] = 
	`XSTRDUP
 (
MTYPE_VTY_HIST
, vty->
buf
);

1177 
vty
->
hödex
++;

1178 i‡(
vty
->
hödex
 =
VTY_MAXHIST
)

1179 
vty
->
hödex
 = 0;

1181 
vty
->
hp
 = vty->
hödex
;

1182 
	}
}

1188 
	$vty_ã ë_›ti⁄
 (
vty
 *vty, *
buf
, 
nbyãs
)

1190 #ifde‡
TELNET_OPTION_DEBUG


1191 
i
;

1193 
i
 = 0; i < 
nbyãs
; i++)

1195 
buf
[
i
])

1197 
IAC
:

1198 
	`vty_out
 (
vty
, "IAC ");

1200 
WILL
:

1201 
	`vty_out
 (
vty
, "WILL ");

1203 
WONT
:

1204 
	`vty_out
 (
vty
, "WONT ");

1206 
DO
:

1207 
	`vty_out
 (
vty
, "DO ");

1209 
DONT
:

1210 
	`vty_out
 (
vty
, "DONT ");

1212 
SB
:

1213 
	`vty_out
 (
vty
, "SB ");

1215 
SE
:

1216 
	`vty_out
 (
vty
, "SE ");

1218 
TELOPT_ECHO
:

1219 
	`vty_out
 (
vty
, "TELOPT_ECHO %s", 
VTY_NEWLINE
);

1221 
TELOPT_SGA
:

1222 
	`vty_out
 (
vty
, "TELOPT_SGA %s", 
VTY_NEWLINE
);

1224 
TELOPT_NAWS
:

1225 
	`vty_out
 (
vty
, "TELOPT_NAWS %s", 
VTY_NEWLINE
);

1228 
	`vty_out
 (
vty
, "%x ", 
buf
[
i
]);

1232 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1236 
buf
[0])

1238 
SB
:

1239 
vty
->
sb_Àn
 = 0;

1240 
vty
->
üc_sb_ö_¥ogªss
 = 1;

1243 
SE
:

1245 i‡(!
vty
->
üc_sb_ö_¥ogªss
)

1248 i‡((
vty
->
sb_Àn
 =0Ë|| (vty->
sb_buf
[0] == '\0'))

1250 
vty
->
üc_sb_ö_¥ogªss
 = 0;

1253 
vty
->
sb_buf
[0])

1255 
TELOPT_NAWS
:

1256 i‡(
vty
->
sb_Àn
 !
TELNET_NAWS_SB_LEN
)

1257 
	`zlog_w¨n
("RFC 1073 violation detected:Åelnet NAWS option "

1259 
TELNET_NAWS_SB_LEN
, (
u_l⁄g
)
vty
->
sb_Àn
);

1260 i‡((
vty
->
sb_buf
Ë< 
TELNET_NAWS_SB_LEN
)

1261 
	`zlog_îr
("Bug detected: sizeof(vty->sb_buf) %lu < %d, "

1263 (
u_l⁄g
)(
vty
->
sb_buf
), 
TELNET_NAWS_SB_LEN
);

1266 
vty
->
width
 = ((vty->
sb_buf
[1] << 8)|vty->sb_buf[2]);

1267 
vty
->
height
 = ((vty->
sb_buf
[3] << 8)|vty->sb_buf[4]);

1268 #ifde‡
TELNET_OPTION_DEBUG


1269 
	`vty_out
(
vty
, "TELNET NAWS window sizeÇegotiation completed: "

1271 
vty
->
width
, vty->
height
, 
VTY_NEWLINE
);

1276 
vty
->
üc_sb_ö_¥ogªss
 = 0;

1284 
	}
}

1288 
	$vty_execuã
 (
vty
 *vty)

1290 
ªt
;

1292 
ªt
 = 
CMD_SUCCESS
;

1294 
vty
->
node
)

1296 
AUTH_NODE
:

1297 
AUTH_ENABLE_NODE
:

1298 
	`vty_auth
 (
vty
, vty->
buf
);

1301 
ªt
 = 
	`vty_comm™d
 (
vty
, vty->
buf
);

1302 i‡(
vty
->
ty≥
 =
VTY_TERM
)

1303 
	`vty_hi°_add
 (
vty
);

1308 
vty
->
˝
 = vty->
Àngth
 = 0;

1309 
	`vty_˛ór_buf
 (
vty
);

1311 i‡(
vty
->
°©us
 !
VTY_CLOSE
 )

1312 
	`vty_¥om±
 (
vty
);

1314  
ªt
;

1315 
	}
}

1317 
	#CONTROL
(
X
Ë((XË- '@')

	)

1318 
	#VTY_NORMAL
 0

	)

1319 
	#VTY_PRE_ESCAPE
 1

	)

1320 
	#VTY_ESCAPE
 2

	)

1324 
	$vty_esˇ≥_m≠
 (
c
, 
vty
 *vty)

1326 
c
)

1329 
	`vty_¥evious_löe
 (
vty
);

1332 
	`vty_√xt_löe
 (
vty
);

1335 
	`vty_f‹w¨d_ch¨
 (
vty
);

1338 
	`vty_backw¨d_ch¨
 (
vty
);

1345 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1346 
	}
}

1350 
	$vty_buf„r_ª£t
 (
vty
 *vty)

1352 
	`buf„r_ª£t
 (
vty
->
obuf
);

1353 
	`vty_¥om±
 (
vty
);

1354 
	`vty_ªdøw_löe
 (
vty
);

1355 
	}
}

1359 
	$vty_ªad
 (
thªad
 *thread)

1361 
i
;

1362 
nbyãs
;

1363 
buf
[
VTY_READ_BUFSIZ
];

1365 
vty_sock
 = 
	`THREAD_FD
 (
thªad
);

1366 
vty
 *vty = 
	`THREAD_ARG
 (
thªad
);

1367 
vty
->
t_ªad
 = 
NULL
;

1370 i‡((
nbyãs
 = 
	`ªad
 (
vty
->
fd
, 
buf
, 
VTY_READ_BUFSIZ
)) <= 0)

1372 i‡(
nbyãs
 < 0)

1374 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

1376 
	`vty_evít
 (
VTY_READ
, 
vty_sock
, 
vty
);

1379 
vty
->
m⁄ô‹
 = 0;

1380 
	`zlog_w¨n
("%s:ÑeadÉrror on vty client fd %d, closing: %s",

1381 
__func__
, 
vty
->
fd
, 
	`ß„_°ªº‹
(
î∫o
));

1383 
	`buf„r_ª£t
(
vty
->
obuf
);

1384 
vty
->
°©us
 = 
VTY_CLOSE
;

1387 
i
 = 0; i < 
nbyãs
; i++)

1389 i‡(
buf
[
i
] =
IAC
)

1391 i‡(!
vty
->
üc
)

1393 
vty
->
üc
 = 1;

1398 
vty
->
üc
 = 0;

1402 i‡(
vty
->
üc_sb_ö_¥ogªss
 && !vty->
üc
)

1404 i‡(
vty
->
sb_Àn
 < (vty->
sb_buf
))

1405 
vty
->
sb_buf
[vty->
sb_Àn
] = 
buf
[
i
];

1406 
vty
->
sb_Àn
++;

1410 i‡(
vty
->
üc
)

1413 
ªt
 = 0;

1414 
ªt
 = 
	`vty_ã ë_›ti⁄
 (
vty
, 
buf
 + 
i
, 
nbyãs
 - i);

1415 
vty
->
üc
 = 0;

1416 
i
 +
ªt
;

1421 i‡(
vty
->
°©us
 =
VTY_MORE
)

1423 
buf
[
i
])

1425 
	`CONTROL
('C'):

1428 
	`vty_buf„r_ª£t
 (
vty
);

1433 
vty
->
°©us
 = 
VTY_MORELINE
;

1443 i‡(
vty
->
esˇ≥
 =
VTY_ESCAPE
)

1445 
	`vty_esˇ≥_m≠
 (
buf
[
i
], 
vty
);

1450 i‡(
vty
->
esˇ≥
 =
VTY_PRE_ESCAPE
)

1452 
buf
[
i
])

1455 
vty
->
esˇ≥
 = 
VTY_ESCAPE
;

1458 
	`vty_backw¨d_w‹d
 (
vty
);

1459 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1462 
	`vty_f‹w¨d_w‹d
 (
vty
);

1463 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1466 
	`vty_f‹w¨d_kûl_w‹d
 (
vty
);

1467 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1469 
	`CONTROL
('H'):

1471 
	`vty_backw¨d_kûl_w‹d
 (
vty
);

1472 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1475 
vty
->
esˇ≥
 = 
VTY_NORMAL
;

1481 
buf
[
i
])

1483 
	`CONTROL
('A'):

1484 
	`vty_begönög_of_löe
 (
vty
);

1486 
	`CONTROL
('B'):

1487 
	`vty_backw¨d_ch¨
 (
vty
);

1489 
	`CONTROL
('C'):

1490 
	`vty_°›_öput
 (
vty
);

1492 
	`CONTROL
('D'):

1493 
	`vty_dñëe_ch¨
 (
vty
);

1495 
	`CONTROL
('E'):

1496 
	`vty_íd_of_löe
 (
vty
);

1498 
	`CONTROL
('F'):

1499 
	`vty_f‹w¨d_ch¨
 (
vty
);

1501 
	`CONTROL
('H'):

1503 
	`vty_dñëe_backw¨d_ch¨
 (
vty
);

1505 
	`CONTROL
('K'):

1506 
	`vty_kûl_löe
 (
vty
);

1508 
	`CONTROL
('N'):

1509 
	`vty_√xt_löe
 (
vty
);

1511 
	`CONTROL
('P'):

1512 
	`vty_¥evious_löe
 (
vty
);

1514 
	`CONTROL
('T'):

1515 
	`vty_å™•o£_ch¨s
 (
vty
);

1517 
	`CONTROL
('U'):

1518 
	`vty_kûl_löe_‰om_begönög
 (
vty
);

1520 
	`CONTROL
('W'):

1521 
	`vty_backw¨d_kûl_w‹d
 (
vty
);

1523 
	`CONTROL
('Z'):

1524 
	`vty_íd_c⁄fig
 (
vty
);

1528 
	`vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

1529 
	`vty_execuã
 (
vty
);

1532 
	`vty_com∂ëe_comm™d
 (
vty
);

1535 i‡(
vty
->
node
 =
AUTH_NODE
 || vty->nodê=
AUTH_ENABLE_NODE
)

1536 
	`vty_£lf_ö£π
 (
vty
, 
buf
[
i
]);

1538 
	`vty_des¸ibe_comm™d
 (
vty
);

1541 i‡(
i
 + 1 < 
nbyãs
 && 
buf
[i + 1] == '[')

1543 
vty
->
esˇ≥
 = 
VTY_ESCAPE
;

1544 
i
++;

1547 
vty
->
esˇ≥
 = 
VTY_PRE_ESCAPE
;

1550 i‡(
buf
[
i
] > 31 && buf[i] < 127)

1551 
	`vty_£lf_ö£π
 (
vty
, 
buf
[
i
]);

1557 i‡(
vty
->
°©us
 =
VTY_CLOSE
)

1558 
	`vty_˛o£
 (
vty
);

1561 
	`vty_evít
 (
VTY_WRITE
, 
vty_sock
, 
vty
);

1562 
	`vty_evít
 (
VTY_READ
, 
vty_sock
, 
vty
);

1565 
	}
}

1569 
	$vty_Êush
 (
thªad
 *thread)

1571 
îa£
;

1572 
buf„r_°©us_t
 
Êushrc
;

1573 
vty_sock
 = 
	`THREAD_FD
 (
thªad
);

1574 
vty
 *vty = 
	`THREAD_ARG
 (
thªad
);

1576 
vty
->
t_wrôe
 = 
NULL
;

1579 i‡((
vty
->
löes
 =0Ë&& vty->
t_ªad
)

1581 
	`thªad_ˇn˚l
 (
vty
->
t_ªad
);

1582 
vty
->
t_ªad
 = 
NULL
;

1586 
îa£
 = ((
vty
->
°©us
 =
VTY_MORE
 || vty->°©u†=
VTY_MORELINE
));

1589 i‡((
vty
->
löes
 =0Ë|| (vty->
width
 == 0))

1590 
Êushrc
 = 
	`buf„r_Êush_avaûabÀ
(
vty
->
obuf
, vty->
fd
);

1591 i‡(
vty
->
°©us
 =
VTY_MORELINE
)

1592 
Êushrc
 = 
	`buf„r_Êush_wödow
(
vty
->
obuf
, vty->
fd
, vty->
width
,

1593 1, 
îa£
, 0);

1595 
Êushrc
 = 
	`buf„r_Êush_wödow
(
vty
->
obuf
, vty->
fd
, vty->
width
,

1596 
vty
->
löes
 >= 0 ? vty->lines :

1597 
vty
->
height
,

1598 
îa£
, 0);

1599 
Êushrc
)

1601 
BUFFER_ERROR
:

1602 
vty
->
m⁄ô‹
 = 0;

1603 
	`zlog_w¨n
("buffer_flush failed on vty client fd %d, closing",

1604 
vty
->
fd
);

1605 
	`buf„r_ª£t
(
vty
->
obuf
);

1606 
	`vty_˛o£
(
vty
);

1608 
BUFFER_EMPTY
:

1609 i‡(
vty
->
°©us
 =
VTY_CLOSE
)

1610 
	`vty_˛o£
 (
vty
);

1613 
vty
->
°©us
 = 
VTY_NORMAL
;

1614 i‡(
vty
->
löes
 == 0)

1615 
	`vty_evít
 (
VTY_READ
, 
vty_sock
, 
vty
);

1618 
BUFFER_PENDING
:

1620 
vty
->
°©us
 = 
VTY_MORE
;

1621 i‡(
vty
->
löes
 == 0)

1622 
	`vty_evít
 (
VTY_WRITE
, 
vty_sock
, 
vty
);

1627 
	}
}

1630 
vty
 *

1631 
	$vty_¸óã
 (
vty_sock
, 
sockuni⁄
 *
su
, 
is_vty
)

1633 
vty
 *vty;

1636 
vty
 = 
	`vty_√w
 ();

1637 
vty
->
fd
 = 
vty_sock
;

1638 i‡(
is_vty
)

1639 
vty
->
ty≥
 = 
VTY_TERM
;

1641 
vty
->
ty≥
 = 
VTY_NBAPI
;

1642 
vty
->
addªss
 = 
	`sockuni⁄_su2°r
 (
su
);

1643 i‡(
no_∑ssw‹d_check
)

1645 i‡(
ª°ri˘ed_mode
)

1646 
vty
->
node
 = 
RESTRICTED_NODE
;

1647 i‡(
ho°
.
adv™˚d
)

1648 
vty
->
node
 = 
ENABLE_NODE
;

1650 
vty
->
node
 = 
VIEW_NODE
;

1653 
vty
->
node
 = 
AUTH_NODE
;

1654 
vty
->
Áû
 = 0;

1655 
vty
->
˝
 = 0;

1656 
	`vty_˛ór_buf
 (
vty
);

1657 
vty
->
Àngth
 = 0;

1658 
	`mem£t
 (
vty
->
hi°
, 0,  (vty->hist));

1659 
vty
->
hp
 = 0;

1660 
vty
->
hödex
 = 0;

1661 
	`ve˘‹_£t_ödex
 (
vtyvec
, 
vty_sock
, 
vty
);

1662 
vty
->
°©us
 = 
VTY_NORMAL
;

1663 
vty
->
v_timeout
 = 
vty_timeout_vÆ
;

1664 i‡(
ho°
.
löes
 >= 0)

1665 
vty
->
löes
 = 
ho°
.lines;

1667 
vty
->
löes
 = -1;

1668 
vty
->
üc
 = 0;

1669 
vty
->
üc_sb_ö_¥ogªss
 = 0;

1670 
vty
->
sb_Àn
 = 0;

1672 i‡(! 
no_∑ssw‹d_check
)

1675 i‡(
ho°
.
∑ssw‹d
 =
NULL
 && ho°.
∑ssw‹d_í¸y±
 == NULL)

1677 
	`vty_out
 (
vty
, "VtyÖassw‹d i†nŸ së.%s", 
VTY_NEWLINE
);

1678 
vty
->
°©us
 = 
VTY_CLOSE
;

1679 
	`vty_˛o£
 (
vty
);

1680  
NULL
;

1685 
	`vty_hñlo
 (
vty
);

1686 i‡(! 
no_∑ssw‹d_check
)

1687 
	`vty_out
 (
vty
, "%sU£∏Ac˚s†Vîifiˇti⁄%s%s", 
VTY_NEWLINE
, VTY_NEWLINE, VTY_NEWLINE);

1690 
	`vty_wûl_echo
 (
vty
);

1691 
	`vty_wûl_suµªss_go_ahód
 (
vty
);

1693 
	`vty_d⁄t_löemode
 (
vty
);

1694 
	`vty_do_wödow_size
 (
vty
);

1697 
	`vty_¥om±
 (
vty
);

1700 
	`vty_evít
 (
VTY_WRITE
, 
vty_sock
, 
vty
);

1701 
	`vty_evít
 (
VTY_READ
, 
vty_sock
, 
vty
);

1703  
vty
;

1704 
	}
}

1708 
	$nb≠i_ac˚±
 (
thªad
 *thread)

1710 
vty_sock
;

1711 
vty
 *vty;

1712 
sockuni⁄
 
su
;

1713 
ªt
;

1714 
⁄
;

1715 
ac˚±_sock
;

1716 
¥efix
 *
p
 = 
NULL
;

1717 
ac˚ss_li°
 *
a˛
 = 
NULL
;

1718 *
buÂ
;

1720 
ac˚±_sock
 = 
	`THREAD_FD
 (
thªad
);

1723 
	`vty_evít
 (
NBAPI_SERV
, 
ac˚±_sock
, 
NULL
);

1725 
	`mem£t
 (&
su
, 0,  (
sockuni⁄
));

1728 
vty_sock
 = 
	`sockuni⁄_ac˚±
 (
ac˚±_sock
, &
su
);

1729 i‡(
vty_sock
 < 0)

1731 
	`zlog_w¨n
 ("ˇn'àac˚± vty sockë : %s", 
	`ß„_°ªº‹
 (
î∫o
));

1734 
	`£t_n⁄blockög
(
vty_sock
);

1736 
p
 = 
	`sockuni⁄2ho°¥efix
 (&
su
);

1739 i‡(
p
->
Ámûy
 =
AF_INET
 && 
vty_ac˚s¶i°_«me
)

1741 i‡((
a˛
 = 
	`ac˚ss_li°_lookup
 (
AFI_IP
, 
vty_ac˚s¶i°_«me
)) &&

1742 (
	`ac˚ss_li°_≠∂y
 (
a˛
, 
p
Ë=
FILTER_DENY
))

1744 *
buf
;

1745 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connectionÑefused from %s",

1746 (
buf
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1747 
	`‰ì
 (
buf
);

1748 
	`˛o£
 (
vty_sock
);

1751 
	`vty_evít
 (
NBAPI_SERV
, 
ac˚±_sock
, 
NULL
);

1753 
	`¥efix_‰ì
 (
p
);

1759 #ifde‡
HAVE_IPV6


1761 i‡(
p
->
Ámûy
 =
AF_INET6
 && 
vty_ùv6_ac˚s¶i°_«me
)

1763 i‡((
a˛
 = 
	`ac˚ss_li°_lookup
 (
AFI_IP6
, 
vty_ùv6_ac˚s¶i°_«me
)) &&

1764 (
	`ac˚ss_li°_≠∂y
 (
a˛
, 
p
Ë=
FILTER_DENY
))

1766 *
buf
;

1767 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connectionÑefused from %s",

1768 (
buf
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1769 
	`‰ì
 (
buf
);

1770 
	`˛o£
 (
vty_sock
);

1773 
	`vty_evít
 (
NBAPI_SERV
, 
ac˚±_sock
, 
NULL
);

1775 
	`¥efix_‰ì
 (
p
);

1782 
	`¥efix_‰ì
 (
p
);

1784 
⁄
 = 1;

1785 
ªt
 = 
	`£tsock›t
 (
vty_sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

1786 (*Ë&
⁄
,  (on));

1787 i‡(
ªt
 < 0)

1788 
	`zlog
 (
NULL
, 
LOG_INFO
, "can't set sockoptÅo vty_sock : %s",

1789 
	`ß„_°ªº‹
 (
î∫o
));

1791 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connection from %s",

1792 (
buÂ
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1793 i‡(
buÂ
)

1794 
	`XFREE
 (
MTYPE_TMP
, 
buÂ
);

1796 
vty
 = 
	`vty_¸óã
 (
vty_sock
, &
su
, 0);

1799 
	}
}

1803 
	$vty_ac˚±
 (
thªad
 *thread)

1805 
vty_sock
;

1806 
vty
 *vty;

1807 
sockuni⁄
 
su
;

1808 
ªt
;

1809 
⁄
;

1810 
ac˚±_sock
;

1811 
¥efix
 *
p
 = 
NULL
;

1812 
ac˚ss_li°
 *
a˛
 = 
NULL
;

1813 *
buÂ
;

1815 
ac˚±_sock
 = 
	`THREAD_FD
 (
thªad
);

1818 
	`vty_evít
 (
VTY_SERV
, 
ac˚±_sock
, 
NULL
);

1820 
	`mem£t
 (&
su
, 0,  (
sockuni⁄
));

1823 
vty_sock
 = 
	`sockuni⁄_ac˚±
 (
ac˚±_sock
, &
su
);

1824 i‡(
vty_sock
 < 0)

1826 
	`zlog_w¨n
 ("ˇn'àac˚± vty sockë : %s", 
	`ß„_°ªº‹
 (
î∫o
));

1829 
	`£t_n⁄blockög
(
vty_sock
);

1831 
p
 = 
	`sockuni⁄2ho°¥efix
 (&
su
);

1834 i‡(
p
->
Ámûy
 =
AF_INET
 && 
vty_ac˚s¶i°_«me
)

1836 i‡((
a˛
 = 
	`ac˚ss_li°_lookup
 (
AFI_IP
, 
vty_ac˚s¶i°_«me
)) &&

1837 (
	`ac˚ss_li°_≠∂y
 (
a˛
, 
p
Ë=
FILTER_DENY
))

1839 *
buf
;

1840 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connectionÑefused from %s",

1841 (
buf
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1842 
	`‰ì
 (
buf
);

1843 
	`˛o£
 (
vty_sock
);

1846 
	`vty_evít
 (
VTY_SERV
, 
ac˚±_sock
, 
NULL
);

1848 
	`¥efix_‰ì
 (
p
);

1854 #ifde‡
HAVE_IPV6


1856 i‡(
p
->
Ámûy
 =
AF_INET6
 && 
vty_ùv6_ac˚s¶i°_«me
)

1858 i‡((
a˛
 = 
	`ac˚ss_li°_lookup
 (
AFI_IP6
, 
vty_ùv6_ac˚s¶i°_«me
)) &&

1859 (
	`ac˚ss_li°_≠∂y
 (
a˛
, 
p
Ë=
FILTER_DENY
))

1861 *
buf
;

1862 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connectionÑefused from %s",

1863 (
buf
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1864 
	`‰ì
 (
buf
);

1865 
	`˛o£
 (
vty_sock
);

1868 
	`vty_evít
 (
VTY_SERV
, 
ac˚±_sock
, 
NULL
);

1870 
	`¥efix_‰ì
 (
p
);

1877 
	`¥efix_‰ì
 (
p
);

1879 
⁄
 = 1;

1880 
ªt
 = 
	`£tsock›t
 (
vty_sock
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

1881 (*Ë&
⁄
,  (on));

1882 i‡(
ªt
 < 0)

1883 
	`zlog
 (
NULL
, 
LOG_INFO
, "can't set sockoptÅo vty_sock : %s",

1884 
	`ß„_°ªº‹
 (
î∫o
));

1886 
	`zlog
 (
NULL
, 
LOG_INFO
, "Vty connection from %s",

1887 (
buÂ
 = 
	`sockuni⁄_su2°r
 (&
su
)));

1888 i‡(
buÂ
)

1889 
	`XFREE
 (
MTYPE_TMP
, 
buÂ
);

1891 
vty
 = 
	`vty_¸óã
 (
vty_sock
, &
su
, 1);

1894 
	}
}

1896 #i‡
deföed
(
HAVE_IPV6
Ë&& !deföed(
NRL
)

1898 
	$vty_£rv_sock_addröfo
 (c⁄° *
ho°«me
, 
p‹t
)

1900 
ªt
;

1901 
addröfo
 
ªq
;

1902 
addröfo
 *
aöfo
;

1903 
addröfo
 *
aöfo_ßve
;

1904 
sock
;

1905 
p‹t_°r
[
BUFSIZ
];

1907 
	`mem£t
 (&
ªq
, 0,  (
addröfo
));

1908 
ªq
.
ai_Êags
 = 
AI_PASSIVE
;

1909 
ªq
.
ai_Ámûy
 = 
AF_UNSPEC
;

1910 
ªq
.
ai_sockty≥
 = 
SOCK_STREAM
;

1911 
	`•rötf
 (
p‹t_°r
, "%d", 
p‹t
);

1912 
p‹t_°r
[ (port_str) - 1] = '\0';

1914 
ªt
 = 
	`gëaddröfo
 (
ho°«me
, 
p‹t_°r
, &
ªq
, &
aöfo
);

1916 i‡(
ªt
 != 0)

1918 
	`Ârötf
 (
°dîr
, "gëaddröfÿÁûed: %s\n", 
	`gai_°ªº‹
 (
ªt
));

1919 
	`exô
 (1);

1922 
aöfo_ßve
 = 
aöfo
;

1926 i‡(
aöfo
->
ai_Ámûy
 !
AF_INET


1927 #ifde‡
HAVE_IPV6


1928 && 
aöfo
->
ai_Ámûy
 !
AF_INET6


1933 
sock
 = 
	`sockë
 (
aöfo
->
ai_Ámûy
,áöfo->
ai_sockty≥
,áöfo->
ai_¥Ÿocﬁ
);

1934 i‡(
sock
 < 0)

1937 
	`sock›t_ªu£addr
 (
sock
);

1938 
	`sock›t_ªu£p‹t
 (
sock
);

1940 
ªt
 = 
	`böd
 (
sock
, 
aöfo
->
ai_addr
,áöfo->
ai_addæí
);

1941 i‡(
ªt
 < 0)

1943 
	`˛o£
 (
sock
);

1947 
ªt
 = 
	`li°í
 (
sock
, 3);

1948 i‡(
ªt
 < 0)

1950 
	`˛o£
 (
sock
);

1954 
	`vty_evít
 (
VTY_SERV
, 
sock
, 
NULL
);

1956 (
aöfo
 =áöfo->
ai_√xt
Ë!
NULL
);

1958 
	`‰ìaddröfo
 (
aöfo_ßve
);

1959 
	}
}

1964 
	$vty_£rv_sock_Ámûy
 (c⁄° * 
addr
, 
p‹t
, 
Ámûy
, 
is_vty
)

1966 
ªt
;

1967 
sockuni⁄
 
su
;

1968 
ac˚±_sock
;

1969 * 
«ddr
=
NULL
;

1971 
	`mem£t
 (&
su
, 0,  (
sockuni⁄
));

1972 
su
.
ß
.
ß_Ámûy
 = 
Ámûy
;

1973 if(
addr
)

1974 
Ámûy
)

1976 
AF_INET
:

1977 
«ddr
=&
su
.
sö
.
sö_addr
;

1978 #ifde‡
HAVE_IPV6


1979 
AF_INET6
:

1980 
«ddr
=&
su
.
sö6
.
sö6_addr
;

1984 if(
«ddr
)

1985 
	`öë_±⁄
(
Ámûy
,
addr
,
«ddr
))

1988 
	`zlog_îr
("badáddªs†%s",
addr
);

1989 
«ddr
=
NULL
;

1992 
	`zlog_îr
("îr‹Åøn¶©ögáddªs†%s: %s",
addr
,
	`ß„_°ªº‹
(
î∫o
));

1993 
«ddr
=
NULL
;

1997 
ac˚±_sock
 = 
	`sockuni⁄_°ªam_sockë
 (&
su
);

1998 i‡(
ac˚±_sock
 < 0)

2002 
	`sock›t_ªu£addr
 (
ac˚±_sock
);

2003 
	`sock›t_ªu£p‹t
 (
ac˚±_sock
);

2006 
ªt
 = 
	`sockuni⁄_böd
 (
ac˚±_sock
, &
su
, 
p‹t
, 
«ddr
);

2007 i‡(
ªt
 < 0)

2009 
	`zlog_w¨n
("can't bind socket");

2010 
	`˛o£
 (
ac˚±_sock
);

2015 
ªt
 = 
	`li°í
 (
ac˚±_sock
, 3);

2016 i‡(
ªt
 < 0)

2018 
	`zlog
 (
NULL
, 
LOG_WARNING
, "can'tÜisten socket");

2019 
	`˛o£
 (
ac˚±_sock
);

2024 i‡(
is_vty
)

2025 
	`vty_evít
 (
VTY_SERV
, 
ac˚±_sock
, 
NULL
);

2027 
	`vty_evít
 (
NBAPI_SERV
, 
ac˚±_sock
, 
NULL
);

2028 
	}
}

2030 #ifde‡
VTYSH


2032 
	~<sys/un.h
>

2036 
	$vty_£rv_un
 (c⁄° *
∑th
)

2038 
ªt
;

2039 
sock
, 
Àn
;

2040 
sockaddr_un
 
£rv
;

2041 
mode_t
 
ﬁd_mask
;

2042 
z¥ivs_ids_t
 
ids
;

2045 
	`u∆ök
 (
∑th
);

2048 
ﬁd_mask
 = 
	`umask
 (0007);

2051 
sock
 = 
	`sockë
 (
AF_UNIX
, 
SOCK_STREAM
, 0);

2052 i‡(
sock
 < 0)

2054 
	`zlog_îr
("C™nŸ cª©êunix såóm sockë: %s", 
	`ß„_°ªº‹
(
î∫o
));

2059 
	`mem£t
 (&
£rv
, 0,  (
sockaddr_un
));

2060 
£rv
.
sun_Ámûy
 = 
AF_UNIX
;

2061 
	`°∫˝y
 (
£rv
.
sun_∑th
, 
∑th
, 
	`°æí
 (path));

2062 #ifde‡
HAVE_STRUCT_SOCKADDR_UN_SUN_LEN


2063 
Àn
 = 
£rv
.
sun_Àn
 = 
	`SUN_LEN
(&serv);

2065 
Àn
 =  (
£rv
.
sun_Ámûy
Ë+ 
	`°æí
 (£rv.
sun_∑th
);

2068 
ªt
 = 
	`böd
 (
sock
, (
sockaddr
 *Ë&
£rv
, 
Àn
);

2069 i‡(
ªt
 < 0)

2071 
	`zlog_îr
("C™nŸ bödÖ©h %s: %s", 
∑th
, 
	`ß„_°ªº‹
(
î∫o
));

2072 
	`˛o£
 (
sock
);

2076 
ªt
 = 
	`li°í
 (
sock
, 5);

2077 i‡(
ªt
 < 0)

2079 
	`zlog_îr
("li°í(fd %dËÁûed: %s", 
sock
, 
	`ß„_°ªº‹
(
î∫o
));

2080 
	`˛o£
 (
sock
);

2084 
	`umask
 (
ﬁd_mask
);

2086 
	`z¥ivs_gë_ids
(&
ids
);

2088 i‡(
ids
.
gid_vty
 > 0)

2091 i‡–
	`chown
 (
∑th
, -1, 
ids
.
gid_vty
) )

2093 
	`zlog_îr
 ("vty_serv_un: could chown socket, %s",

2094 
	`ß„_°ªº‹
 (
î∫o
) );

2098 
	`vty_evít
 (
VTYSH_SERV
, 
sock
, 
NULL
);

2099 
	}
}

2104 
	$vtysh_ac˚±
 (
thªad
 *thread)

2106 
ac˚±_sock
;

2107 
sock
;

2108 
˛õ¡_Àn
;

2109 
sockaddr_un
 
˛õ¡
;

2110 
vty
 *vty;

2112 
ac˚±_sock
 = 
	`THREAD_FD
 (
thªad
);

2114 
	`vty_evít
 (
VTYSH_SERV
, 
ac˚±_sock
, 
NULL
);

2116 
	`mem£t
 (&
˛õ¡
, 0,  (
sockaddr_un
));

2117 
˛õ¡_Àn
 =  (
sockaddr_un
);

2119 
sock
 = 
	`ac˚±
 (
ac˚±_sock
, (
sockaddr
 *Ë&
˛õ¡
,

2120 (
sockÀn_t
 *Ë&
˛õ¡_Àn
);

2122 i‡(
sock
 < 0)

2124 
	`zlog_w¨n
 ("ˇn'àac˚± vty sockë : %s", 
	`ß„_°ªº‹
 (
î∫o
));

2128 i‡(
	`£t_n⁄blockög
(
sock
) < 0)

2130 
	`zlog_w¨n
 ("vtysh_accept: couldÇot set vty socket %dÅoÇon-blocking,"

2131 " %s, closög", 
sock
, 
	`ß„_°ªº‹
 (
î∫o
));

2132 
	`˛o£
 (
sock
);

2136 #ifde‡
VTYSH_DEBUG


2137 
	`¥ötf
 ("VTY shelláccept\n");

2140 
vty
 = 
	`vty_√w
 ();

2141 
vty
->
fd
 = 
sock
;

2142 
vty
->
ty≥
 = 
VTY_SHELL_SERV
;

2143 
vty
->
node
 = 
VIEW_NODE
;

2145 
	`vty_evít
 (
VTYSH_READ
, 
sock
, 
vty
);

2148 
	}
}

2151 
	$vtysh_Êush
(
vty
 *vty)

2153 
	`buf„r_Êush_avaûabÀ
(
vty
->
obuf
, vty->
fd
))

2155 
BUFFER_PENDING
:

2156 
	`vty_evít
(
VTYSH_WRITE
, 
vty
->
fd
, vty);

2158 
BUFFER_ERROR
:

2159 
vty
->
m⁄ô‹
 = 0;

2160 
	`zlog_w¨n
("%s: wrôêîr‹Åÿfd %d, closög", 
__func__
, 
vty
->
fd
);

2161 
	`buf„r_ª£t
(
vty
->
obuf
);

2162 
	`vty_˛o£
(
vty
);

2165 
BUFFER_EMPTY
:

2169 
	}
}

2172 
	$vtysh_ªad
 (
thªad
 *thread)

2174 
ªt
;

2175 
sock
;

2176 
nbyãs
;

2177 
vty
 *vty;

2178 
buf
[
VTY_READ_BUFSIZ
];

2179 *
p
;

2180 
u_ch¨
 
hódî
[4] = {0, 0, 0, 0};

2182 
sock
 = 
	`THREAD_FD
 (
thªad
);

2183 
vty
 = 
	`THREAD_ARG
 (
thªad
);

2184 
vty
->
t_ªad
 = 
NULL
;

2186 i‡((
nbyãs
 = 
	`ªad
 (
sock
, 
buf
, 
VTY_READ_BUFSIZ
)) <= 0)

2188 i‡(
nbyãs
 < 0)

2190 i‡(
	`ERRNO_IO_RETRY
(
î∫o
))

2192 
	`vty_evít
 (
VTYSH_READ
, 
sock
, 
vty
);

2195 
vty
->
m⁄ô‹
 = 0;

2196 
	`zlog_w¨n
("%s:Ñead failed on vtysh client fd %d, closing: %s",

2197 
__func__
, 
sock
, 
	`ß„_°ªº‹
(
î∫o
));

2199 
	`buf„r_ª£t
(
vty
->
obuf
);

2200 
	`vty_˛o£
 (
vty
);

2201 #ifde‡
VTYSH_DEBUG


2202 
	`¥ötf
 ("close vtysh\n");

2207 #ifde‡
VTYSH_DEBUG


2208 
	`¥ötf
 ("löe: %.*s\n", 
nbyãs
, 
buf
);

2211 
p
 = 
buf
;Ö < buf+
nbyãs
;Ö++)

2213 
	`vty_ísuª
(
vty
, vty->
Àngth
+1);

2214 
vty
->
buf
[vty->
Àngth
++] = *
p
;

2215 i‡(*
p
 == '\0')

2218 
ªt
 = 
	`vty_execuã
 (
vty
);

2223 #ifde‡
VTYSH_DEBUG


2224 
	`¥ötf
 ("ªsu…: %d\n", 
ªt
);

2225 
	`¥ötf
 ("vtyshÇode: %d\n", 
vty
->
node
);

2228 
hódî
[3] = 
ªt
;

2229 
	`buf„r_put
(
vty
->
obuf
, 
hódî
, 4);

2231 i‡(!
vty
->
t_wrôe
 && (
	`vtysh_Êush
(vty) < 0))

2237 
	`vty_evít
 (
VTYSH_READ
, 
sock
, 
vty
);

2240 
	}
}

2243 
	$vtysh_wrôe
 (
thªad
 *thread)

2245 
vty
 *vty = 
	`THREAD_ARG
 (
thªad
);

2247 
vty
->
t_wrôe
 = 
NULL
;

2248 
	`vtysh_Êush
(
vty
);

2250 
	}
}

2256 
	$vty_£rv_sock
 (c⁄° *
addr
, 
p‹t
, c⁄° *
∑th
, 
is_vty
)

2259 i‡(
p‹t
)

2262 #ifde‡
HAVE_IPV6


2263 #ifde‡
NRL


2264 
	`vty_£rv_sock_Ámûy
 (
addr
, 
p‹t
, 
AF_INET
, 
is_vty
);

2265 
	`vty_£rv_sock_Ámûy
 (
addr
, 
p‹t
, 
AF_INET6
, 
is_vty
);

2267 
	`vty_£rv_sock_addröfo
 (
addr
, 
p‹t
);

2270 
	`vty_£rv_sock_Ámûy
 (
addr
,
p‹t
, 
AF_INET
, 
is_vty
);

2274 #ifde‡
VTYSH


2275 
	`vty_£rv_un
 (
∑th
);

2277 
	}
}

2284 
	$vty_˛o£
 (
vty
 *vty)

2286 
i
;

2289 i‡(
vty
->
t_ªad
)

2290 
	`thªad_ˇn˚l
 (
vty
->
t_ªad
);

2291 i‡(
vty
->
t_wrôe
)

2292 
	`thªad_ˇn˚l
 (
vty
->
t_wrôe
);

2293 i‡(
vty
->
t_timeout
)

2294 
	`thªad_ˇn˚l
 (
vty
->
t_timeout
);

2297 
	`buf„r_Êush_Æl
 (
vty
->
obuf
, vty->
fd
);

2300 
	`buf„r_‰ì
 (
vty
->
obuf
);

2303 
i
 = 0; i < 
VTY_MAXHIST
; i++)

2304 i‡(
vty
->
hi°
[
i
])

2305 
	`XFREE
 (
MTYPE_VTY_HIST
, 
vty
->
hi°
[
i
]);

2308 
	`ve˘‹_un£t
 (
vtyvec
, 
vty
->
fd
);

2311 i‡(
vty
->
fd
 > 0)

2312 
	`˛o£
 (
vty
->
fd
);

2314 i‡(
vty
->
addªss
)

2315 
	`XFREE
 (
MTYPE_TMP
, 
vty
->
addªss
);

2316 i‡(
vty
->
buf
)

2317 
	`XFREE
 (
MTYPE_VTY
, 
vty
->
buf
);

2320 
	`vty_c⁄fig_u∆ock
 (
vty
);

2323 
	`XFREE
 (
MTYPE_VTY
, 
vty
);

2324 
	}
}

2328 
	$vty_timeout
 (
thªad
 *thread)

2330 
vty
 *vty;

2332 
vty
 = 
	`THREAD_ARG
 (
thªad
);

2333 
vty
->
t_timeout
 = 
NULL
;

2334 
vty
->
v_timeout
 = 0;

2337 
	`buf„r_ª£t
 (
vty
->
obuf
);

2338 
	`vty_out
 (
vty
, "%sVty c⁄√˘i⁄ i†timed out.%s", 
VTY_NEWLINE
, VTY_NEWLINE);

2341 
vty
->
°©us
 = 
VTY_CLOSE
;

2342 
	`vty_˛o£
 (
vty
);

2345 
	}
}

2349 
	$vty_ªad_fûe
 (
FILE
 *
c⁄Â
, 
≠∂y_node_m©ch
, 
≠∂y_node
)

2351 
ªt
;

2352 
vty
 *vty;

2354 
vty
 = 
	`vty_√w
 ();

2355 
vty
->
fd
 = 0;

2356 
vty
->
ty≥
 = 
VTY_TERM
;

2357 
vty
->
node
 = 
CONFIG_NODE
;

2358 
vty
->
≠∂y_node_m©ch
 =ápply_node_match;

2359 
vty
->
≠∂y_node
 =ápply_node;

2362 
ªt
 = 
	`c⁄fig_‰om_fûe
 (
vty
, 
c⁄Â
);

2364 i‡–!((
ªt
 =
CMD_SUCCESS
Ë|| (ªà=
CMD_ERR_NOTHING_TODO
)) )

2366 
ªt
)

2368 
CMD_ERR_AMBIGUOUS
:

2369 
	`Ârötf
 (
°dîr
, "Ambiguous command.\n");

2371 
CMD_ERR_NO_MATCH
:

2372 
	`Ârötf
 (
°dîr
, "There isÇo such command.\n");

2375 
	`Ârötf
 (
°dîr
, "Error occured duringÑeading belowÜine.\n%s\n",

2376 
vty
->
buf
);

2377 
	`vty_˛o£
 (
vty
);

2382 
	`vty_˛o£
 (
vty
);

2383 
	}
}

2386 
FILE
 *

2387 
	$vty_u£_backup_c⁄fig
 (*
fuŒ∑th
)

2389 *
fuŒ∑th_ßv
, *
fuŒ∑th_tmp
;

2390 
FILE
 *
ªt
 = 
NULL
;

2391 
°©
 
buf
;

2392 
tmp
, 
ßv
;

2393 
c
;

2394 
buf„r
[512];

2396 
fuŒ∑th_ßv
 = 
	`mÆloc
 (
	`°æí
 (
fuŒ∑th
Ë+ såÀ¿(
CONF_BACKUP_EXT
) + 1);

2397 
	`°r˝y
 (
fuŒ∑th_ßv
, 
fuŒ∑th
);

2398 
	`°rˇt
 (
fuŒ∑th_ßv
, 
CONF_BACKUP_EXT
);

2399 i‡(
	`°©
 (
fuŒ∑th_ßv
, &
buf
) == -1)

2401 
	`‰ì
 (
fuŒ∑th_ßv
);

2402  
NULL
;

2405 
fuŒ∑th_tmp
 = 
	`mÆloc
 (
	`°æí
 (
fuŒ∑th
) + 8);

2406 
	`•rötf
 (
fuŒ∑th_tmp
, "%s.XXXXXX", 
fuŒ∑th
);

2409 
tmp
 = 
	`mk°emp
 (
fuŒ∑th_tmp
);

2410 i‡(
tmp
 < 0)

2412 
	`‰ì
 (
fuŒ∑th_ßv
);

2413 
	`‰ì
 (
fuŒ∑th_tmp
);

2414  
NULL
;

2417 
ßv
 = 
	`›í
 (
fuŒ∑th_ßv
, 
O_RDONLY
);

2418 i‡(
ßv
 < 0)

2420 
	`u∆ök
 (
fuŒ∑th_tmp
);

2421 
	`‰ì
 (
fuŒ∑th_ßv
);

2422 
	`‰ì
 (
fuŒ∑th_tmp
);

2423  
NULL
;

2426 (
c
 = 
	`ªad
 (
ßv
, 
buf„r
, 512)) > 0)

2427 
	`wrôe
 (
tmp
, 
buf„r
, 
c
);

2429 
	`˛o£
 (
ßv
);

2430 
	`˛o£
 (
tmp
);

2432 i‡(
	`chmod
(
fuŒ∑th_tmp
, 
CONFIGFILE_MASK
) != 0)

2434 
	`u∆ök
 (
fuŒ∑th_tmp
);

2435 
	`‰ì
 (
fuŒ∑th_ßv
);

2436 
	`‰ì
 (
fuŒ∑th_tmp
);

2437  
NULL
;

2440 i‡(
	`lök
 (
fuŒ∑th_tmp
, 
fuŒ∑th
) == 0)

2441 
ªt
 = 
	`f›í
 (
fuŒ∑th
, "r");

2443 
	`u∆ök
 (
fuŒ∑th_tmp
);

2445 
	`‰ì
 (
fuŒ∑th_ßv
);

2446 
	`‰ì
 (
fuŒ∑th_tmp
);

2447  
ªt
;

2448 
	}
}

2452 
	$vty_ªad_c⁄fig
 (*
c⁄fig_fûe
,

2453 *
c⁄fig_deÁu…_dú
,

2454 
m©ch_node
, 
≠∂y_node
)

2456 
cwd
[
MAXPATHLEN
];

2457 
FILE
 *
c⁄Â
 = 
NULL
;

2458 *
fuŒ∑th
;

2459 *
tmp
 = 
NULL
;

2462 i‡(
c⁄fig_fûe
 !
NULL
)

2464 i‡(! 
	`IS_DIRECTORY_SEP
 (
c⁄fig_fûe
[0]))

2466 
	`gëcwd
 (
cwd
, 
MAXPATHLEN
);

2467 
tmp
 = 
	`XMALLOC
 (
MTYPE_TMP
,

2468 
	`°æí
 (
cwd
Ë+ såÀ¿(
c⁄fig_fûe
) + 2);

2469 
	`•rötf
 (
tmp
, "%s/%s", 
cwd
, 
c⁄fig_fûe
);

2470 
fuŒ∑th
 = 
tmp
;

2473 
fuŒ∑th
 = 
c⁄fig_fûe
;

2475 
c⁄Â
 = 
	`f›í
 (
fuŒ∑th
, "r");

2477 i‡(
c⁄Â
 =
NULL
)

2479 
	`Ârötf
 (
°dîr
, "%s: failedÅo open configuration file %s: %s\n",

2480 
__func__
, 
fuŒ∑th
, 
	`ß„_°ªº‹
 (
î∫o
));

2482 
c⁄Â
 = 
	`vty_u£_backup_c⁄fig
 (
fuŒ∑th
);

2483 i‡(
c⁄Â
)

2484 
	`Ârötf
 (
°dîr
, "WARNING: using backup configuration file!\n");

2487 
	`Ârötf
 (
°dîr
, "can't open configuration file [%s]\n",

2488 
c⁄fig_fûe
);

2489 
	`exô
(1);

2495 #ifde‡
VTYSH


2496 
ªt
;

2497 
°©
 
c⁄f_°©
;

2513 i‡–
	`°r°r
(
c⁄fig_deÁu…_dú
, "vtysh"Ë=
NULL
)

2515 
ªt
 = 
	`°©
 (
öãgøã_deÁu…
, &
c⁄f_°©
);

2516 i‡(
ªt
 >= 0)

2521 
c⁄Â
 = 
	`f›í
 (
c⁄fig_deÁu…_dú
, "r");

2522 i‡(
c⁄Â
 =
NULL
)

2524 
	`Ârötf
 (
°dîr
, "%s: failedÅo open configuration file %s: %s\n",

2525 
__func__
, 
c⁄fig_deÁu…_dú
, 
	`ß„_°ªº‹
 (
î∫o
));

2527 
c⁄Â
 = 
	`vty_u£_backup_c⁄fig
 (
c⁄fig_deÁu…_dú
);

2528 i‡(
c⁄Â
)

2530 
	`Ârötf
 (
°dîr
, "WARNING: using backup configuration file!\n");

2531 
fuŒ∑th
 = 
c⁄fig_deÁu…_dú
;

2535 
	`Ârötf
 (
°dîr
, "can't open configuration file [%s]\n",

2536 
c⁄fig_deÁu…_dú
);

2537 
	`exô
 (1);

2541 
fuŒ∑th
 = 
c⁄fig_deÁu…_dú
;

2544 
	`vty_ªad_fûe
 (
c⁄Â
, 
m©ch_node
, 
≠∂y_node
);

2546 
	`f˛o£
 (
c⁄Â
);

2548 
	`ho°_c⁄fig_£t
 (
fuŒ∑th
);

2550 i‡(
tmp
)

2551 
	`XFREE
 (
MTYPE_TMP
, 
fuŒ∑th
);

2552 
	}
}

2556 
	$vty_log
 (c⁄° *
Àvñ
, c⁄° *
¥Ÿo_°r
,

2557 c⁄° *
f‹m©
, 
time°amp_c⁄åﬁ
 *
˘l
, 
va_li°
 
va
)

2559 
i
;

2560 
vty
 *vty;

2562 i‡(!
vtyvec
)

2565 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
vtyvec
); i++)

2566 i‡((
vty
 = 
	`ve˘‹_¶Ÿ
 (
vtyvec
, 
i
)Ë!
NULL
)

2567 i‡(
vty
->
m⁄ô‹
)

2569 
va_li°
 
ac
;

2570 
	`va_c›y
(
ac
, 
va
);

2571 
	`vty_log_out
 (
vty
, 
Àvñ
, 
¥Ÿo_°r
, 
f‹m©
, 
˘l
, 
ac
);

2572 
	`va_íd
(
ac
);

2574 
	}
}

2578 
	$vty_log_fixed
 (c⁄° *
buf
, 
size_t
 
Àn
)

2580 
i
;

2581 
iovec
 
iov
[2];

2584 i‡(!
vtyvec
)

2587 
iov
[0].
iov_ba£
 = (*)
buf
;

2588 
iov
[0].
iov_Àn
 = 
Àn
;

2589 
iov
[1].
iov_ba£
 = (*)"\r\n";

2590 
iov
[1].
iov_Àn
 = 2;

2592 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
vtyvec
); i++)

2594 
vty
 *vty;

2595 i‡(((
vty
 = 
	`ve˘‹_¶Ÿ
 (
vtyvec
, 
i
)Ë!
NULL
Ë&& vty->
m⁄ô‹
)

2598 
	`wrôev
(
vty
->
fd
, 
iov
, 2);

2600 
	}
}

2603 
	$vty_c⁄fig_lock
 (
vty
 *vty)

2605 i‡(
vty_c⁄fig
 == 0)

2607 
vty
->
c⁄fig
 = 1;

2608 
vty_c⁄fig
 = 1;

2610  
vty
->
c⁄fig
;

2611 
	}
}

2614 
	$vty_c⁄fig_u∆ock
 (
vty
 *vty)

2616 i‡(
vty_c⁄fig
 =1 && 
vty
->
c⁄fig
 == 1)

2618 
vty
->
c⁄fig
 = 0;

2619 
vty_c⁄fig
 = 0;

2621  
vty
->
c⁄fig
;

2622 
	}
}

2625 
thªad_ma°î
 *
	gma°î
;

2628 
	$vty_evít
 (
evít
Évít, 
sock
, 
vty
 *vty)

2630 
thªad
 *
vty_£rv_thªad
;

2632 
evít
)

2634 
NBAPI_SERV
:

2635 
vty_£rv_thªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
nb≠i_ac˚±
, 
vty
, 
sock
);

2636 
	`ve˘‹_£t_ödex
 (
Vvty_£rv_thªad
, 
sock
, 
vty_£rv_thªad
);

2638 
VTY_SERV
:

2639 
vty_£rv_thªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
vty_ac˚±
, 
vty
, 
sock
);

2640 
	`ve˘‹_£t_ödex
 (
Vvty_£rv_thªad
, 
sock
, 
vty_£rv_thªad
);

2642 #ifde‡
VTYSH


2643 
VTYSH_SERV
:

2644 
	`thªad_add_ªad
 (
ma°î
, 
vtysh_ac˚±
, 
vty
, 
sock
);

2646 
VTYSH_READ
:

2647 
vty
->
t_ªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
vtysh_ªad
, vty, 
sock
);

2649 
VTYSH_WRITE
:

2650 
vty
->
t_wrôe
 = 
	`thªad_add_wrôe
 (
ma°î
, 
vtysh_wrôe
, vty, 
sock
);

2653 
VTY_READ
:

2654 
vty
->
t_ªad
 = 
	`thªad_add_ªad
 (
ma°î
, 
vty_ªad
, vty, 
sock
);

2657 i‡(
vty
->
v_timeout
)

2659 i‡(
vty
->
t_timeout
)

2660 
	`thªad_ˇn˚l
 (
vty
->
t_timeout
);

2661 
vty
->
t_timeout
 =

2662 
	`thªad_add_timî
 (
ma°î
, 
vty_timeout
, 
vty
, vty->
v_timeout
);

2665 
VTY_WRITE
:

2666 i‡(! 
vty
->
t_wrôe
)

2667 
vty
->
t_wrôe
 = 
	`thªad_add_wrôe
 (
ma°î
, 
vty_Êush
, vty, 
sock
);

2669 
VTY_TIMEOUT_RESET
:

2670 i‡(
vty
->
t_timeout
)

2672 
	`thªad_ˇn˚l
 (
vty
->
t_timeout
);

2673 
vty
->
t_timeout
 = 
NULL
;

2675 i‡(
vty
->
v_timeout
)

2677 
vty
->
t_timeout
 =

2678 
	`thªad_add_timî
 (
ma°î
, 
vty_timeout
, 
vty
, vty->
v_timeout
);

2682 
	}
}

2684 
DEFUN
 (
c⁄fig_who
,

2685 
c⁄fig_who_cmd
,

2689 
	gi
;

2690 
vty
 *
	gv
;

2692 
	gi
 = 0; i < 
ve˘‹_a˘ive
 (
vtyvec
); i++)

2693 i‡((
	gv
 = 
ve˘‹_¶Ÿ
 (
vtyvec
, 
i
)Ë!
NULL
)

2694 
vty_out
 (
vty
, "%svty[%d] connected from %s.%s",

2695 
v
->
c⁄fig
 ? "*" : " ",

2696 
i
, 
v
->
addªss
, 
VTY_NEWLINE
);

2697  
	gCMD_SUCCESS
;

2701 
DEFUN
 (
löe_vty
,

2702 
löe_vty_cmd
,

2707 
	gvty
->
	gnode
 = 
VTY_NODE
;

2708  
	gCMD_SUCCESS
;

2713 
	$exec_timeout
 (
vty
 *vty, c⁄° *
mö_°r
, c⁄° *
£c_°r
)

2715 
timeout
 = 0;

2719 i‡(
mö_°r
)

2721 
timeout
 = 
	`°πﬁ
 (
mö_°r
, 
NULL
, 10);

2722 
timeout
 *= 60;

2724 i‡(
£c_°r
)

2725 
timeout
 +
	`°πﬁ
 (
£c_°r
, 
NULL
, 10);

2727 
vty_timeout_vÆ
 = 
timeout
;

2728 
vty
->
v_timeout
 = 
timeout
;

2729 
	`vty_evít
 (
VTY_TIMEOUT_RESET
, 0, 
vty
);

2732  
CMD_SUCCESS
;

2733 
	}
}

2735 
DEFUN
 (
exec_timeout_mö
,

2736 
exec_timeout_mö_cmd
,

2741  
exec_timeout
 (
vty
, 
¨gv
[0], 
NULL
);

2744 
DEFUN
 (
exec_timeout_£c
,

2745 
exec_timeout_£c_cmd
,

2751  
exec_timeout
 (
vty
, 
¨gv
[0],árgv[1]);

2754 
DEFUN
 (
no_exec_timeout
,

2755 
no_exec_timeout_cmd
,

2757 
NO_STR


2760  
exec_timeout
 (
vty
, 
NULL
, NULL);

2764 
DEFUN
 (
vty_ac˚ss_˛ass
,

2765 
vty_ac˚ss_˛ass_cmd
,

2770 i‡(
	gvty_ac˚s¶i°_«me
)

2771 
XFREE
(
MTYPE_VTY
, 
vty_ac˚s¶i°_«me
);

2773 
	gvty_ac˚s¶i°_«me
 = 
XSTRDUP
(
MTYPE_VTY
, 
¨gv
[0]);

2775  
	gCMD_SUCCESS
;

2779 
DEFUN
 (
no_vty_ac˚ss_˛ass
,

2780 
no_vty_ac˚ss_˛ass_cmd
,

2782 
NO_STR


2786 i‡(! 
	gvty_ac˚s¶i°_«me
 || (
	g¨gc
 && 
°rcmp
(
vty_ac˚s¶i°_«me
, 
¨gv
[0])))

2788 
vty_out
 (
vty
, "Access-class isÇot currentlyáppliedÅo vty%s",

2789 
VTY_NEWLINE
);

2790  
	gCMD_WARNING
;

2793 
XFREE
(
MTYPE_VTY
, 
vty_ac˚s¶i°_«me
);

2795 
	gvty_ac˚s¶i°_«me
 = 
NULL
;

2797  
	gCMD_SUCCESS
;

2800 #ifde‡
HAVE_IPV6


2802 
DEFUN
 (
vty_ùv6_ac˚ss_˛ass
,

2803 
vty_ùv6_ac˚ss_˛ass_cmd
,

2805 
IPV6_STR


2809 i‡(
	gvty_ùv6_ac˚s¶i°_«me
)

2810 
XFREE
(
MTYPE_VTY
, 
vty_ùv6_ac˚s¶i°_«me
);

2812 
	gvty_ùv6_ac˚s¶i°_«me
 = 
XSTRDUP
(
MTYPE_VTY
, 
¨gv
[0]);

2814  
	gCMD_SUCCESS
;

2818 
DEFUN
 (
no_vty_ùv6_ac˚ss_˛ass
,

2819 
no_vty_ùv6_ac˚ss_˛ass_cmd
,

2821 
NO_STR


2822 
IPV6_STR


2826 i‡(! 
	gvty_ùv6_ac˚s¶i°_«me
 ||

2827 (
	g¨gc
 && 
°rcmp
(
vty_ùv6_ac˚s¶i°_«me
, 
¨gv
[0])))

2829 
vty_out
 (
vty
, "IPv6áccess-class isÇot currentlyáppliedÅo vty%s",

2830 
VTY_NEWLINE
);

2831  
	gCMD_WARNING
;

2834 
XFREE
(
MTYPE_VTY
, 
vty_ùv6_ac˚s¶i°_«me
);

2836 
	gvty_ùv6_ac˚s¶i°_«me
 = 
NULL
;

2838  
	gCMD_SUCCESS
;

2843 
DEFUN
 (
vty_logö
,

2844 
vty_logö_cmd
,

2848 
	gno_∑ssw‹d_check
 = 0;

2849  
	gCMD_SUCCESS
;

2852 
DEFUN
 (
no_vty_logö
,

2853 
no_vty_logö_cmd
,

2855 
NO_STR


2858 
	gno_∑ssw‹d_check
 = 1;

2859  
	gCMD_SUCCESS
;

2863 
DEFUN
 (
vty_ª°ri˘ed_mode
,

2864 
vty_ª°ri˘ed_mode_cmd
,

2868 
	gª°ri˘ed_mode
 = 1;

2869  
	gCMD_SUCCESS
;

2872 
DEFUN
 (
vty_no_ª°ri˘ed_mode
,

2873 
vty_no_ª°ri˘ed_mode_cmd
,

2875 
NO_STR


2878 
	gª°ri˘ed_mode
 = 0;

2879  
	gCMD_SUCCESS
;

2882 
DEFUN
 (
£rvi˚_adv™˚d_vty
,

2883 
£rvi˚_adv™˚d_vty_cmd
,

2888 
	gho°
.
	gadv™˚d
 = 1;

2889  
	gCMD_SUCCESS
;

2892 
DEFUN
 (
no_£rvi˚_adv™˚d_vty
,

2893 
no_£rvi˚_adv™˚d_vty_cmd
,

2895 
NO_STR


2899 
	gho°
.
	gadv™˚d
 = 0;

2900  
	gCMD_SUCCESS
;

2903 
DEFUN
 (
ãrmöÆ_m⁄ô‹
,

2904 
ãrmöÆ_m⁄ô‹_cmd
,

2909 
	gvty
->
	gm⁄ô‹
 = 1;

2910  
	gCMD_SUCCESS
;

2913 
DEFUN
 (
ãrmöÆ_no_m⁄ô‹
,

2914 
ãrmöÆ_no_m⁄ô‹_cmd
,

2917 
NO_STR


2920 
	gvty
->
	gm⁄ô‹
 = 0;

2921  
	gCMD_SUCCESS
;

2924 
ALIAS
 (
ãrmöÆ_no_m⁄ô‹
,

2925 
no_ãrmöÆ_m⁄ô‹_cmd
,

2927 
NO_STR


2931 
DEFUN
 (
show_hi°‹y
,

2932 
show_hi°‹y_cmd
,

2934 
SHOW_STR


2937 
	gödex
;

2939 
	gödex
 = 
vty
->
hödex
 + 1; index != vty->hindex;)

2941 i‡(
	gödex
 =
VTY_MAXHIST
)

2943 
ödex
 = 0;

2947 i‡(
	gvty
->
	ghi°
[
ödex
] !
NULL
)

2948 
vty_out
 (
vty
, " %s%s", vty->
hi°
[
ödex
], 
VTY_NEWLINE
);

2950 
	gödex
++;

2953  
	gCMD_SUCCESS
;

2958 
	$vty_c⁄fig_wrôe
 (
vty
 *vty)

2961 
	`vty_out
 (
vty
, "löêvty%s", 
VTY_NEWLINE
);

2963 i‡(
vty_ac˚s¶i°_«me
)

2964 
	`vty_out
 (
vty
, "áccess-class %s%s",

2965 
vty_ac˚s¶i°_«me
, 
VTY_NEWLINE
);

2967 i‡(
vty_ùv6_ac˚s¶i°_«me
)

2968 
	`vty_out
 (
vty
, " ipv6áccess-class %s%s",

2969 
vty_ùv6_ac˚s¶i°_«me
, 
VTY_NEWLINE
);

2972 i‡(
vty_timeout_vÆ
 !
VTY_TIMEOUT_DEFAULT
)

2973 
	`vty_out
 (
vty
, "Éxec-timeout %ld %ld%s",

2974 
vty_timeout_vÆ
 / 60,

2975 
vty_timeout_vÆ
 % 60, 
VTY_NEWLINE
);

2978 i‡(
no_∑ssw‹d_check
)

2979 
	`vty_out
 (
vty
, "Çÿlogö%s", 
VTY_NEWLINE
);

2981 i‡(
ª°ri˘ed_mode
 !
ª°ri˘ed_mode_deÁu…
)

2983 i‡(
ª°ri˘ed_mode_deÁu…
)

2984 
	`vty_out
 (
vty
, "Çÿ™⁄ymou†ª°ri˘ed%s", 
VTY_NEWLINE
);

2986 
	`vty_out
 (
vty
, "án⁄ymou†ª°ri˘ed%s", 
VTY_NEWLINE
);

2989 
	`vty_out
 (
vty
, "!%s", 
VTY_NEWLINE
);

2991  
CMD_SUCCESS
;

2992 
	}
}

2994 
cmd_node
 
	gvty_node
 =

2996 
VTY_NODE
,

3003 
	$vty_ª£t
 ()

3005 
i
;

3006 
vty
 *vty;

3007 
thªad
 *
vty_£rv_thªad
;

3009 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
vtyvec
); i++)

3010 i‡((
vty
 = 
	`ve˘‹_¶Ÿ
 (
vtyvec
, 
i
)Ë!
NULL
)

3012 
	`buf„r_ª£t
 (
vty
->
obuf
);

3013 
vty
->
°©us
 = 
VTY_CLOSE
;

3014 
	`vty_˛o£
 (
vty
);

3017 
i
 = 0; i < 
	`ve˘‹_a˘ive
 (
Vvty_£rv_thªad
); i++)

3018 i‡((
vty_£rv_thªad
 = 
	`ve˘‹_¶Ÿ
 (
Vvty_£rv_thªad
, 
i
)Ë!
NULL
)

3020 
	`thªad_ˇn˚l
 (
vty_£rv_thªad
);

3021 
	`ve˘‹_¶Ÿ
 (
Vvty_£rv_thªad
, 
i
Ë
NULL
;

3022 
	`˛o£
 (
i
);

3025 
vty_timeout_vÆ
 = 
VTY_TIMEOUT_DEFAULT
;

3027 i‡(
vty_ac˚s¶i°_«me
)

3029 
	`XFREE
(
MTYPE_VTY
, 
vty_ac˚s¶i°_«me
);

3030 
vty_ac˚s¶i°_«me
 = 
NULL
;

3033 i‡(
vty_ùv6_ac˚s¶i°_«me
)

3035 
	`XFREE
(
MTYPE_VTY
, 
vty_ùv6_ac˚s¶i°_«me
);

3036 
vty_ùv6_ac˚s¶i°_«me
 = 
NULL
;

3038 
	}
}

3041 
	$vty_ßve_cwd
 ()

3043 
cwd
[
MAXPATHLEN
];

3044 *
c
;

3046 
c
 = 
	`gëcwd
 (
cwd
, 
MAXPATHLEN
);

3048 i‡(!
c
)

3050 
	`chdú
 (
SYSCONFDIR
);

3051 
	`gëcwd
 (
cwd
, 
MAXPATHLEN
);

3054 
vty_cwd
 = 
	`XMALLOC
 (
MTYPE_TMP
, 
	`°æí
 (
cwd
) + 1);

3055 
	`°r˝y
 (
vty_cwd
, 
cwd
);

3056 
	}
}

3059 
	$vty_gë_cwd
 ()

3061  
vty_cwd
;

3062 
	}
}

3065 
	$vty_shñl
 (
vty
 *vty)

3067  
vty
->
ty≥
 =
VTY_SHELL
 ? 1 : 0;

3068 
	}
}

3071 
	$vty_shñl_£rv
 (
vty
 *vty)

3073  
vty
->
ty≥
 =
VTY_SHELL_SERV
 ? 1 : 0;

3074 
	}
}

3077 
	$vty_öô_vtysh
 ()

3079 
vtyvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

3080 
	}
}

3084 
	$vty_öô
 (
thªad_ma°î
 *
ma°î_thªad
)

3087 
	`vty_ßve_cwd
 ();

3089 
vtyvec
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

3091 
ma°î
 = 
ma°î_thªad
;

3094 
Vvty_£rv_thªad
 = 
	`ve˘‹_öô
 (
VECTOR_MIN_SIZE
);

3097 
	`ö°Æl_node
 (&
vty_node
, 
vty_c⁄fig_wrôe
);

3099 
	`ö°Æl_deÁu…
 (
VTY_NODE
);

3100 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
exec_timeout_mö_cmd
);

3101 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
exec_timeout_£c_cmd
);

3102 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
no_exec_timeout_cmd
);

3103 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
vty_ac˚ss_˛ass_cmd
);

3104 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
no_vty_ac˚ss_˛ass_cmd
);

3105 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
vty_logö_cmd
);

3106 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
no_vty_logö_cmd
);

3107 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
vty_ª°ri˘ed_mode_cmd
);

3108 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
vty_no_ª°ri˘ed_mode_cmd
);

3109 #ifde‡
HAVE_IPV6


3110 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
vty_ùv6_ac˚ss_˛ass_cmd
);

3111 
	`ö°Æl_ñemít
 (
VTY_NODE
, &
no_vty_ùv6_ac˚ss_˛ass_cmd
);

3113 
	}
}

3116 
	$vty_ãrmö©e
 ()

3118 i‡(
vty_cwd
)

3119 
	`XFREE
 (
MTYPE_TMP
, 
vty_cwd
);

3121 i‡(
vtyvec
 && 
Vvty_£rv_thªad
)

3123 
	`vty_ª£t
 ();

3124 
	`ve˘‹_‰ì
 (
vtyvec
);

3125 
	`ve˘‹_‰ì
 (
Vvty_£rv_thªad
);

3127 
	}
}

	@common-libs/3rd-party/quagga-lib/src/workqueue.c

24 
	~<zebø.h
>

25 
	~"thªad.h
"

26 
	~"mem‹y.h
"

27 
	~"w‹kqueue.h
"

28 
	~"lökli°.h
"

29 
	~"comm™d.h
"

30 
	~"log.h
"

33 
li°
 
	gw‹k_queues
;

35 
	#WORK_QUEUE_MIN_GRANULARITY
 1

	)

37 
w‹k_queue_ôem
 *

38 
	$w‹k_queue_ôem_√w
 (
w‹k_queue
 *
wq
)

40 
w‹k_queue_ôem
 *
ôem
;

41 
	`as£π
 (
wq
);

43 
ôem
 = 
	`XCALLOC
 (
MTYPE_WORK_QUEUE_ITEM
,

44  (
w‹k_queue_ôem
));

46  
ôem
;

47 
	}
}

50 
	$w‹k_queue_ôem_‰ì
 (
w‹k_queue_ôem
 *
ôem
)

52 
	`XFREE
 (
MTYPE_WORK_QUEUE_ITEM
, 
ôem
);

54 
	}
}

57 
w‹k_queue
 *

58 
	$w‹k_queue_√w
 (
thªad_ma°î
 *
m
, c⁄° *
queue_«me
)

60 
w‹k_queue
 *
√w
;

62 
√w
 = 
	`XCALLOC
 (
MTYPE_WORK_QUEUE
,  (
w‹k_queue
));

64 i‡(
√w
 =
NULL
)

65  
√w
;

67 
√w
->
«me
 = 
	`XSTRDUP
 (
MTYPE_WORK_QUEUE_NAME
, 
queue_«me
);

68 
√w
->
ma°î
 = 
m
;

69 
	`SET_FLAG
 (
√w
->
Êags
, 
WQ_UNPLUGGED
);

71 i‡–(
√w
->
ôems
 = 
	`li°_√w
 ()Ë=
NULL
)

73 
	`XFREE
 (
MTYPE_WORK_QUEUE_NAME
, 
√w
->
«me
);

74 
	`XFREE
 (
MTYPE_WORK_QUEUE
, 
√w
);

76  
NULL
;

79 
√w
->
ôems
->
dñ
 = ((*)(*)Ë
w‹k_queue_ôem_‰ì
;

81 
	`li°node_add
 (&
w‹k_queues
, 
√w
);

83 
√w
->
cy˛es
.
gønuœrôy
 = 
WORK_QUEUE_MIN_GRANULARITY
;

86 
√w
->
•ec
.
hﬁd
 = 
WORK_QUEUE_DEFAULT_HOLD
;

88  
√w
;

89 
	}
}

92 
	$w‹k_queue_‰ì
 (
w‹k_queue
 *
wq
)

94 i‡(
wq
->
thªad
 !
NULL
)

95 
	`thªad_ˇn˚l
(
wq
->
thªad
);

98 
	`li°_dñëe
 (
wq
->
ôems
);

99 
	`li°node_dñëe
 (&
w‹k_queues
, 
wq
);

101 
	`XFREE
 (
MTYPE_WORK_QUEUE_NAME
, 
wq
->
«me
);

102 
	`XFREE
 (
MTYPE_WORK_QUEUE
, 
wq
);

104 
	}
}

106 
ölöe
 

107 
	$w‹k_queue_scheduÀ
 (
w‹k_queue
 *
wq
, 
dñay
)

110 i‡–
	`CHECK_FLAG
 (
wq
->
Êags
, 
WQ_UNPLUGGED
)

111 && (
wq
->
thªad
 =
NULL
)

112 && (
	`li°cou¡
 (
wq
->
ôems
) > 0) )

114 
wq
->
thªad
 = 
	`thªad_add_background
 (wq->
ma°î
, 
w‹k_queue_run
,

115 
wq
, 
dñay
);

120 
	}
}

123 
	$w‹k_queue_add
 (
w‹k_queue
 *
wq
, *
d©a
)

125 
w‹k_queue_ôem
 *
ôem
;

127 
	`as£π
 (
wq
);

129 i‡(!(
ôem
 = 
	`w‹k_queue_ôem_√w
 (
wq
)))

131 
	`zlog_îr
 ("%s: u«bÀÅÿgëÇew queuêôem", 
__func__
);

135 
ôem
->
d©a
 = data;

136 
	`li°node_add
 (
wq
->
ôems
, 
ôem
);

138 
	`w‹k_queue_scheduÀ
 (
wq
, wq->
•ec
.
hﬁd
);

141 
	}
}

144 
	$w‹k_queue_ôem_ªmove
 (
w‹k_queue
 *
wq
, 
li°node
 *
 
)

146 
w‹k_queue_ôem
 *
ôem
 = 
	`li°gëd©a
 (
 
);

148 
	`as£π
 (
ôem
 && iãm->
d©a
);

151 i‡(
wq
->
•ec
.
dñ_ôem_d©a
)

152 
wq
->
•ec
.
	`dñ_ôem_d©a
 (wq, 
ôem
->
d©a
);

154 
	`li°_dñëe_node
 (
wq
->
ôems
, 
 
);

155 
	`w‹k_queue_ôem_‰ì
 (
ôem
);

158 
	}
}

161 
	$w‹k_queue_ôem_ªqueue
 (
w‹k_queue
 *
wq
, 
li°node
 *
 
)

163 
	`LISTNODE_DETACH
 (
wq
->
ôems
, 
 
);

164 
	`LISTNODE_ATTACH
 (
wq
->
ôems
, 
 
);

165 
	}
}

167 
DEFUN
(
show_w‹k_queues
,

168 
show_w‹k_queues_cmd
,

170 
SHOW_STR


173 
li°node
 *
	gnode
;

174 
w‹k_queue
 *
	gwq
;

176 
vty_out
 (
vty
,

179 
VTY_NEWLINE
);

180 
vty_out
 (
vty
,

188 
VTY_NEWLINE
);

190 
ALL_LIST_ELEMENTS_RO
 ((&
w‹k_queues
), 
node
, 
wq
))

192 
vty_out
 (
vty
,"%c %8d %5d %8ld %7d %6d %6u %s%s",

193 (
CHECK_FLAG
 (
wq
->
Êags
, 
WQ_UNPLUGGED
) ? ' ' : 'P'),

194 
li°cou¡
 (
wq
->
ôems
),

195 
wq
->
•ec
.
hﬁd
,

196 
wq
->
runs
,

197 
wq
->
cy˛es
.
be°
, wq->cy˛es.
gønuœrôy
,

198 (
wq
->
runs
) ?

199 (Ë(
wq
->
cy˛es
.
tŸÆ
 / wq->
runs
) : 0,

200 
wq
->
«me
,

201 
VTY_NEWLINE
);

204  
	gCMD_SUCCESS
;

211 
	$w‹k_queue_∂ug
 (
w‹k_queue
 *
wq
)

213 i‡(
wq
->
thªad
)

214 
	`thªad_ˇn˚l
 (
wq
->
thªad
);

216 
wq
->
thªad
 = 
NULL
;

218 
	`UNSET_FLAG
 (
wq
->
Êags
, 
WQ_UNPLUGGED
);

219 
	}
}

225 
	$w‹k_queue_u≈lug
 (
w‹k_queue
 *
wq
)

227 
	`SET_FLAG
 (
wq
->
Êags
, 
WQ_UNPLUGGED
);

230 
	`w‹k_queue_scheduÀ
 (
wq
, wq->
•ec
.
hﬁd
);

231 
	}
}

238 
	$w‹k_queue_run
 (
thªad
 *thread)

240 
w‹k_queue
 *
wq
;

241 
w‹k_queue_ôem
 *
ôem
;

242 
wq_ôem_°©us
 
ªt
;

243 
cy˛es
 = 0;

244 
li°node
 *
node
, *
¬ode
;

245 
yõlded
 = 0;

247 
wq
 = 
	`THREAD_ARG
 (
thªad
);

248 
wq
->
thªad
 = 
NULL
;

250 
	`as£π
 (
wq
 && wq->
ôems
);

269 i‡(
wq
->
cy˛es
.
gønuœrôy
 == 0)

270 
wq
->
cy˛es
.
gønuœrôy
 = 
WORK_QUEUE_MIN_GRANULARITY
;

272 
	`ALL_LIST_ELEMENTS
 (
wq
->
ôems
, 
node
, 
¬ode
, 
ôem
))

274 
	`as£π
 (
ôem
 && iãm->
d©a
);

277 i‡(
ôem
->
øn
 > 
wq
->
•ec
.
max_ªåõs
)

280 i‡(
wq
->
•ec
.
îr‹func
)

281 
wq
->
•ec
.
	`îr‹func
 (wq, 
ôem
->
d©a
);

282 
	`w‹k_queue_ôem_ªmove
 (
wq
, 
node
);

289 
ªt
 = 
wq
->
•ec
.
	`w‹kfunc
 (wq, 
ôem
->
d©a
);

290 
ôem
->
øn
++;

292 (
ªt
 =
WQ_RETRY_NOW
)

293 && (
ôem
->
øn
 < 
wq
->
•ec
.
max_ªåõs
));

295 
ªt
)

297 
WQ_QUEUE_BLOCKED
:

302 
ôem
->
øn
--;

304 
WQ_RETRY_LATER
:

306 
°©s
;

308 
WQ_REQUEUE
:

310 
ôem
->
øn
--;

311 
	`w‹k_queue_ôem_ªqueue
 (
wq
, 
node
);

314 
WQ_RETRY_NOW
:

316 
WQ_ERROR
:

318 i‡(
wq
->
•ec
.
îr‹func
)

319 
wq
->
•ec
.
	`îr‹func
 (wq, 
ôem
);

322 
WQ_SUCCESS
:

325 
	`w‹k_queue_ôem_ªmove
 (
wq
, 
node
);

331 
cy˛es
++;

334 i‡–!(
cy˛es
 % 
wq
->cy˛es.
gønuœrôy
)

335 && 
	`thªad_should_yõld
 (
thªad
))

337 
yõlded
 = 1;

338 
°©s
;

342 
°©s
:

344 
	#WQ_HYSTERESIS_FACTOR
 4

	)

347 i‡(
yõlded
 && (
cy˛es
 < 
wq
->cy˛es.
gønuœrôy
))

349 
wq
->
cy˛es
.
gønuœrôy
 = ((cycles > 0) ? cycles

350 : 
WORK_QUEUE_MIN_GRANULARITY
);

353 i‡(
cy˛es
 >(
wq
->cy˛es.
gønuœrôy
))

355 i‡(
cy˛es
 > 
wq
->cy˛es.
be°
)

356 
wq
->
cy˛es
.
be°
 = cycles;

359 i‡(
cy˛es
 > (
wq
->cy˛es.
gønuœrôy
 * 
WQ_HYSTERESIS_FACTOR


360 * 
WQ_HYSTERESIS_FACTOR
))

361 
wq
->
cy˛es
.
gønuœrôy
 *
WQ_HYSTERESIS_FACTOR
;

362 i‡(
cy˛es
 > (
wq
->cy˛es.
gønuœrôy
 * 
WQ_HYSTERESIS_FACTOR
))

363 
wq
->
cy˛es
.
gønuœrôy
 +
WQ_HYSTERESIS_FACTOR
;

365 #unde‡
WQ_HYSTERIS_FACTOR


367 
wq
->
runs
++;

368 
wq
->
cy˛es
.
tŸÆ
 += cycles;

371 
	`¥ötf
 ("%s: cycles %d,Çew: best %d, worst %d\n",

372 
__func__
, 
cy˛es
, 
wq
->cy˛es.
be°
, wq->cy˛es.
gønuœrôy
);

376 i‡(
	`li°cou¡
 (
wq
->
ôems
) > 0)

377 
	`w‹k_queue_scheduÀ
 (
wq
, 0);

378 i‡(
wq
->
•ec
.
com∂ëi⁄_func
)

379 
wq
->
•ec
.
	`com∂ëi⁄_func
 (wq);

382 
	}
}

	@common-libs/3rd-party/quagga-lib/src/zclient.c

23 
	~<zebø.h
>

25 
	~"¥efix.h
"

26 
	~"°ªam.h
"

27 
	~"buf„r.h
"

28 
	~"√tw‹k.h
"

29 
	~"if.h
"

30 
	~"log.h
"

31 
	~"thªad.h
"

32 
	~"z˛õ¡.h
"

33 
	~"mem‹y.h
"

34 
	~"èbÀ.h
"

37 
	eevít
 {
	mZCLIENT_SCHEDULE
, 
	mZCLIENT_READ
, 
	mZCLIENT_CONNECT
};

40 
z˛õ¡_evít
 (
evít
, 
z˛õ¡
 *);

42 
thªad_ma°î
 *
ma°î
;

45 
	gz˛õ¡_debug
 = 0;

48 
z˛õ¡
 *

49 
	$z˛õ¡_√w
 ()

51 
z˛õ¡
 *zclient;

52 
z˛õ¡
 = 
	`XCALLOC
 (
MTYPE_ZCLIENT
,  (zclient));

54 
z˛õ¡
->
ibuf
 = 
	`°ªam_√w
 (
ZEBRA_MAX_PACKET_SIZ
);

55 
z˛õ¡
->
obuf
 = 
	`°ªam_√w
 (
ZEBRA_MAX_PACKET_SIZ
);

56 
z˛õ¡
->
wb
 = 
	`buf„r_√w
(0);

58  
z˛õ¡
;

59 
	}
}

67 
	$z˛õ¡_‰ì
 (
z˛õ¡
 *zclient)

69 i‡(
z˛õ¡
->
ibuf
)

70 
	`°ªam_‰ì
(
z˛õ¡
->
ibuf
);

71 i‡(
z˛õ¡
->
obuf
)

72 
	`°ªam_‰ì
(
z˛õ¡
->
obuf
);

73 i‡(
z˛õ¡
->
wb
)

74 
	`buf„r_‰ì
(
z˛õ¡
->
wb
);

76 
	`XFREE
 (
MTYPE_ZCLIENT
, 
z˛õ¡
);

77 
	}
}

82 
	$z˛õ¡_öô
 (
z˛õ¡
 *z˛õ¡, 
ªdi°_deÁu…
)

84 
i
;

87 
z˛õ¡
->
íabÀ
 = 1;

90 
z˛õ¡
->
sock
 = -1;

93 
i
 = 0; i < 
ZEBRA_ROUTE_MAX
; i++)

94 
z˛õ¡
->
ªdi°
[
i
] = 0;

98 
z˛õ¡
->
ªdi°_deÁu…
 =Ñedist_default;

99 
z˛õ¡
->
ªdi°
[
ªdi°_deÁu…
] = 1;

102 
z˛õ¡
->
deÁu…_öf‹m©i⁄
 = 0;

105 i‡(
z˛õ¡_debug
)

106 
	`zlog_debug
 ("zclient start scheduled");

108 
	`z˛õ¡_evít
 (
ZCLIENT_SCHEDULE
, 
z˛õ¡
);

109 
	}
}

113 
	$z˛õ¡_°›
 (
z˛õ¡
 *zclient)

115 i‡(
z˛õ¡_debug
)

116 
	`zlog_debug
 ("zclient stopped");

119 
	`THREAD_OFF
(
z˛õ¡
->
t_ªad
);

120 
	`THREAD_OFF
(
z˛õ¡
->
t_c⁄√˘
);

121 
	`THREAD_OFF
(
z˛õ¡
->
t_wrôe
);

124 
	`°ªam_ª£t
(
z˛õ¡
->
ibuf
);

125 
	`°ªam_ª£t
(
z˛õ¡
->
obuf
);

128 
	`buf„r_ª£t
(
z˛õ¡
->
wb
);

131 i‡(
z˛õ¡
->
sock
 >= 0)

133 
	`˛o£
 (
z˛õ¡
->
sock
);

134 
z˛õ¡
->
sock
 = -1;

136 
z˛õ¡
->
Áû
 = 0;

137 
	}
}

140 
	$z˛õ¡_ª£t
 (
z˛õ¡
 *zclient)

142 
	`z˛õ¡_°›
 (
z˛õ¡
);

143 
	`z˛õ¡_öô
 (
z˛õ¡
, z˛õ¡->
ªdi°_deÁu…
);

144 
	}
}

148 
	$z˛õ¡_sockë
()

150 
sock
;

151 
ªt
;

152 
sockaddr_ö
 
£rv
;

155 
sock
 = 
	`sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

156 i‡(
sock
 < 0)

160 
	`mem£t
 (&
£rv
, 0,  (
sockaddr_ö
));

161 
£rv
.
sö_Ámûy
 = 
AF_INET
;

162 
£rv
.
sö_p‹t
 = 
	`ht⁄s
 (
ZEBRA_PORT
);

163 #ifde‡
HAVE_STRUCT_SOCKADDR_IN_SIN_LEN


164 
£rv
.
sö_Àn
 =  (
sockaddr_ö
);

166 
£rv
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_LOOPBACK
);

169 
ªt
 = 
	`c⁄√˘
 (
sock
, (
sockaddr
 *Ë&
£rv
,  (serv));

170 i‡(
ªt
 < 0)

172 
	`˛o£
 (
sock
);

175  
sock
;

176 
	}
}

179 
	~<sys/un.h
>

182 
	$z˛õ¡_sockë_un
 (c⁄° *
∑th
)

184 
ªt
;

185 
sock
, 
Àn
;

186 
sockaddr_un
 
addr
;

188 
sock
 = 
	`sockë
 (
AF_UNIX
, 
SOCK_STREAM
, 0);

189 i‡(
sock
 < 0)

193 
	`mem£t
 (&
addr
, 0,  (
sockaddr_un
));

194 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

195 
	`°∫˝y
 (
addr
.
sun_∑th
, 
∑th
, 
	`°æí
 (path));

196 #ifde‡
HAVE_STRUCT_SOCKADDR_UN_SUN_LEN


197 
Àn
 = 
addr
.
sun_Àn
 = 
	`SUN_LEN
(&addr);

199 
Àn
 =  (
addr
.
sun_Ámûy
Ë+ 
	`°æí
 (addr.
sun_∑th
);

202 
ªt
 = 
	`c⁄√˘
 (
sock
, (
sockaddr
 *Ë&
addr
, 
Àn
);

203 i‡(
ªt
 < 0)

205 
	`˛o£
 (
sock
);

208  
sock
;

209 
	}
}

212 
	$z˛õ¡_Áûed
(
z˛õ¡
 *zclient)

214 
z˛õ¡
->
Áû
++;

215 
	`z˛õ¡_°›
(
z˛õ¡
);

216 
	`z˛õ¡_evít
(
ZCLIENT_CONNECT
, 
z˛õ¡
);

218 
	}
}

221 
	$z˛õ¡_Êush_d©a
(
thªad
 *thread)

223 
z˛õ¡
 *z˛õ¡ = 
	`THREAD_ARG
(
thªad
);

225 
z˛õ¡
->
t_wrôe
 = 
NULL
;

226 i‡(
z˛õ¡
->
sock
 < 0)

228 
	`buf„r_Êush_avaûabÀ
(
z˛õ¡
->
wb
, z˛õ¡->
sock
))

230 
BUFFER_ERROR
:

231 
	`zlog_w¨n
("%s: buffer_flush_available failed on zclient fd %d, closing",

232 
__func__
, 
z˛õ¡
->
sock
);

233  
	`z˛õ¡_Áûed
(
z˛õ¡
);

235 
BUFFER_PENDING
:

236 
z˛õ¡
->
t_wrôe
 = 
	`thªad_add_wrôe
(
ma°î
, 
z˛õ¡_Êush_d©a
,

237 
z˛õ¡
, z˛õ¡->
sock
);

239 
BUFFER_EMPTY
:

243 
	}
}

246 
	$z˛õ¡_£nd_mesßge
(
z˛õ¡
 *zclient)

248 i‡(
z˛õ¡
->
sock
 < 0)

250 
	`buf„r_wrôe
(
z˛õ¡
->
wb
, z˛õ¡->
sock
, 
	`STREAM_DATA
(z˛õ¡->
obuf
),

251 
	`°ªam_gë_ídp
(
z˛õ¡
->
obuf
)))

253 
BUFFER_ERROR
:

254 
	`zlog_w¨n
("%s: buffer_write failedÅo zclient fd %d, closing",

255 
__func__
, 
z˛õ¡
->
sock
);

256  
	`z˛õ¡_Áûed
(
z˛õ¡
);

258 
BUFFER_EMPTY
:

259 
	`THREAD_OFF
(
z˛õ¡
->
t_wrôe
);

261 
BUFFER_PENDING
:

262 
	`THREAD_WRITE_ON
(
ma°î
, 
z˛õ¡
->
t_wrôe
,

263 
z˛õ¡_Êush_d©a
, 
z˛õ¡
, z˛õ¡->
sock
);

267 
	}
}

270 
	$z˛õ¡_¸óã_hódî
 (
°ªam
 *
s
, 
uöt16_t
 
comm™d
)

273 
	`°ªam_putw
 (
s
, 
ZEBRA_HEADER_SIZE
);

274 
	`°ªam_putc
 (
s
, 
ZEBRA_HEADER_MARKER
);

275 
	`°ªam_putc
 (
s
, 
ZSERV_VERSION
);

276 
	`°ªam_putw
 (
s
, 
comm™d
);

277 
	}
}

281 
	$zebø_mesßge_£nd
 (
z˛õ¡
 *z˛õ¡, 
comm™d
)

283 
°ªam
 *
s
;

286 
s
 = 
z˛õ¡
->
obuf
;

287 
	`°ªam_ª£t
 (
s
);

290 
	`z˛õ¡_¸óã_hódî
 (
s
, 
comm™d
);

292  
	`z˛õ¡_£nd_mesßge
(
z˛õ¡
);

293 
	}
}

297 
	$z˛õ¡_°¨t
 (
z˛õ¡
 *zclient)

299 
i
;

301 i‡(
z˛õ¡_debug
)

302 
	`zlog_debug
 ("zclient_start is called");

305 i‡(! 
z˛õ¡
->
íabÀ
)

309 i‡(
z˛õ¡
->
sock
 >= 0)

313 i‡(
z˛õ¡
->
t_c⁄√˘
)

317 #ifde‡
HAVE_TCP_ZEBRA


318 
z˛õ¡
->
sock
 = 
	`z˛õ¡_sockë
 ();

320 
z˛õ¡
->
sock
 = 
	`z˛õ¡_sockë_un
 (
ZEBRA_SERV_PATH
);

322 i‡(
z˛õ¡
->
sock
 < 0)

324 i‡(
z˛õ¡_debug
)

325 
	`zlog_debug
 ("zclient connection fail");

326 
z˛õ¡
->
Áû
++;

327 
	`z˛õ¡_evít
 (
ZCLIENT_CONNECT
, 
z˛õ¡
);

331 i‡(
	`£t_n⁄blockög
(
z˛õ¡
->
sock
) < 0)

332 
	`zlog_w¨n
("%s: së_n⁄blockög(%dËÁûed", 
__func__
, 
z˛õ¡
->
sock
);

335 
z˛õ¡
->
Áû
 = 0;

336 i‡(
z˛õ¡_debug
)

337 
	`zlog_debug
 ("z˛õ¡ c⁄√˘ suc˚s†wôh sockë [%d]", 
z˛õ¡
->
sock
);

340 
	`z˛õ¡_evít
 (
ZCLIENT_READ
, 
z˛õ¡
);

343 
	`zebø_mesßge_£nd
 (
z˛õ¡
, 
ZEBRA_ROUTER_ID_ADD
);

346 
	`zebø_mesßge_£nd
 (
z˛õ¡
, 
ZEBRA_INTERFACE_ADD
);

349 
i
 = 0; i < 
ZEBRA_ROUTE_MAX
; i++)

350 i‡(
i
 !
z˛õ¡
->
ªdi°_deÁu…
 && z˛õ¡->
ªdi°
[i])

351 
	`zebø_ªdi°ribuã_£nd
 (
ZEBRA_REDISTRIBUTE_ADD
, 
z˛õ¡
, 
i
);

354 i‡(
z˛õ¡
->
deÁu…_öf‹m©i⁄
)

355 
	`zebø_mesßge_£nd
 (
z˛õ¡
, 
ZEBRA_REDISTRIBUTE_DEFAULT_ADD
);

358 
	}
}

363 
	$z˛õ¡_c⁄√˘
 (
thªad
 *
t
)

365 
z˛õ¡
 *zclient;

367 
z˛õ¡
 = 
	`THREAD_ARG
 (
t
);

368 
z˛õ¡
->
t_c⁄√˘
 = 
NULL
;

370 i‡(
z˛õ¡_debug
)

371 
	`zlog_debug
 ("zclient_connect is called");

373  
	`z˛õ¡_°¨t
 (
z˛õ¡
);

374 
	}
}

421 
	$z≠i_ùv4_rouã
 (
u_ch¨
 
cmd
, 
z˛õ¡
 *z˛õ¡, 
¥efix_ùv4
 *
p
,

422 
z≠i_ùv4
 *
≠i
)

424 
i
;

425 
psize
;

426 
°ªam
 *
s
;

429 
s
 = 
z˛õ¡
->
obuf
;

430 
	`°ªam_ª£t
 (
s
);

432 
	`z˛õ¡_¸óã_hódî
 (
s
, 
cmd
);

435 
	`°ªam_putc
 (
s
, 
≠i
->
ty≥
);

436 
	`°ªam_putc
 (
s
, 
≠i
->
Êags
);

437 
	`°ªam_putc
 (
s
, 
≠i
->
mesßge
);

440 
psize
 = 
	`PSIZE
 (
p
->
¥efixÀn
);

441 
	`°ªam_putc
 (
s
, 
p
->
¥efixÀn
);

442 
	`°ªam_wrôe
 (
s
, (
u_ch¨
 *Ë& 
p
->
¥efix
, 
psize
);

445 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_NEXTHOP
))

447 i‡(
	`CHECK_FLAG
 (
≠i
->
Êags
, 
ZEBRA_FLAG_BLACKHOLE
))

449 
	`°ªam_putc
 (
s
, 1);

450 
	`°ªam_putc
 (
s
, 
ZEBRA_NEXTHOP_BLACKHOLE
);

455 
	`°ªam_putc
 (
s
, 
≠i
->
√xth›_num
 +ápi->
ifödex_num
);

457 
i
 = 0; i < 
≠i
->
√xth›_num
; i++)

459 
	`°ªam_putc
 (
s
, 
ZEBRA_NEXTHOP_IPV4
);

460 
	`°ªam_put_ö_addr
 (
s
, 
≠i
->
√xth›
[
i
]);

462 
i
 = 0; i < 
≠i
->
ifödex_num
; i++)

464 
	`°ªam_putc
 (
s
, 
ZEBRA_NEXTHOP_IFINDEX
);

465 
	`°ªam_pué
 (
s
, 
≠i
->
ifödex
[
i
]);

469 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_DISTANCE
))

470 
	`°ªam_putc
 (
s
, 
≠i
->
di°™˚
);

471 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_METRIC
))

472 
	`°ªam_pué
 (
s
, 
≠i
->
mëric
);

475 
	`°ªam_putw_©
 (
s
, 0, 
	`°ªam_gë_ídp
 (s));

477  
	`z˛õ¡_£nd_mesßge
(
z˛õ¡
);

478 
	}
}

480 #ifde‡
HAVE_IPV6


482 
	$z≠i_ùv6_rouã
 (
u_ch¨
 
cmd
, 
z˛õ¡
 *z˛õ¡, 
¥efix_ùv6
 *
p
,

483 
z≠i_ùv6
 *
≠i
)

485 
i
;

486 
psize
;

487 
°ªam
 *
s
;

490 
s
 = 
z˛õ¡
->
obuf
;

491 
	`°ªam_ª£t
 (
s
);

493 
	`z˛õ¡_¸óã_hódî
 (
s
, 
cmd
);

496 
	`°ªam_putc
 (
s
, 
≠i
->
ty≥
);

497 
	`°ªam_putc
 (
s
, 
≠i
->
Êags
);

498 
	`°ªam_putc
 (
s
, 
≠i
->
mesßge
);

501 
psize
 = 
	`PSIZE
 (
p
->
¥efixÀn
);

502 
	`°ªam_putc
 (
s
, 
p
->
¥efixÀn
);

503 
	`°ªam_wrôe
 (
s
, (
u_ch¨
 *)&
p
->
¥efix
, 
psize
);

506 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_NEXTHOP
))

508 
	`°ªam_putc
 (
s
, 
≠i
->
√xth›_num
 +ápi->
ifödex_num
);

510 
i
 = 0; i < 
≠i
->
√xth›_num
; i++)

512 
	`°ªam_putc
 (
s
, 
ZEBRA_NEXTHOP_IPV6
);

513 
	`°ªam_wrôe
 (
s
, (
u_ch¨
 *)
≠i
->
√xth›
[
i
], 16);

515 
i
 = 0; i < 
≠i
->
ifödex_num
; i++)

517 
	`°ªam_putc
 (
s
, 
ZEBRA_NEXTHOP_IFINDEX
);

518 
	`°ªam_pué
 (
s
, 
≠i
->
ifödex
[
i
]);

522 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_DISTANCE
))

523 
	`°ªam_putc
 (
s
, 
≠i
->
di°™˚
);

524 i‡(
	`CHECK_FLAG
 (
≠i
->
mesßge
, 
ZAPI_MESSAGE_METRIC
))

525 
	`°ªam_pué
 (
s
, 
≠i
->
mëric
);

528 
	`°ªam_putw_©
 (
s
, 0, 
	`°ªam_gë_ídp
 (s));

530  
	`z˛õ¡_£nd_mesßge
(
z˛õ¡
);

531 
	}
}

541 
	$zebø_ªdi°ribuã_£nd
 (
comm™d
, 
z˛õ¡
 *z˛õ¡, 
ty≥
)

543 
°ªam
 *
s
;

545 
s
 = 
z˛õ¡
->
obuf
;

546 
	`°ªam_ª£t
(
s
);

548 
	`z˛õ¡_¸óã_hódî
 (
s
, 
comm™d
);

549 
	`°ªam_putc
 (
s
, 
ty≥
);

551 
	`°ªam_putw_©
 (
s
, 0, 
	`°ªam_gë_ídp
 (s));

553  
	`z˛õ¡_£nd_mesßge
(
z˛õ¡
);

554 
	}
}

558 
	$zebø_rouãr_id_upd©e_ªad
 (
°ªam
 *
s
, 
¥efix
 *
rid
)

560 
∂í
;

563 
rid
->
Ámûy
 = 
	`°ªam_gëc
 (
s
);

565 
∂í
 = 
	`¥efix_bÀn
 (
rid
);

566 
	`°ªam_gë
 (&
rid
->
u
.
¥efix
, 
s
, 
∂í
);

567 
rid
->
¥efixÀn
 = 
	`°ªam_gëc
 (
s
);

568 
	}
}

602 
öãrÁ˚
 *

603 
	$zebø_öãrÁ˚_add_ªad
 (
°ªam
 *
s
)

605 
öãrÁ˚
 *
iÂ
;

606 
i‚ame_tmp
[
INTERFACE_NAMSIZ
];

609 
	`°ªam_gë
 (
i‚ame_tmp
, 
s
, 
INTERFACE_NAMSIZ
);

612 
iÂ
 = 
	`if_gë_by_«me_Àn
 (
i‚ame_tmp
, 
	`°∫Àn
(i‚ame_tmp, 
INTERFACE_NAMSIZ
));

615 
iÂ
->
ifödex
 = 
	`°ªam_gël
 (
s
);

618 
iÂ
->
°©us
 = 
	`°ªam_gëc
 (
s
);

619 
iÂ
->
Êags
 = 
	`°ªam_gëq
 (
s
);

620 
iÂ
->
mëric
 = 
	`°ªam_gël
 (
s
);

621 
iÂ
->
mtu
 = 
	`°ªam_gël
 (
s
);

622 
iÂ
->
mtu6
 = 
	`°ªam_gël
 (
s
);

623 
iÂ
->
b™dwidth
 = 
	`°ªam_gël
 (
s
);

624 #ifde‡
HAVE_STRUCT_SOCKADDR_DL


625 
	`°ªam_gë
 (&
iÂ
->
sdl
, 
s
,  (ifp->sdl));

627 
iÂ
->
hw_addr_Àn
 = 
	`°ªam_gël
 (
s
);

628 i‡(
iÂ
->
hw_addr_Àn
)

629 
	`°ªam_gë
 (
iÂ
->
hw_addr
, 
s
, iÂ->
hw_addr_Àn
);

632  
iÂ
;

633 
	}
}

642 
öãrÁ˚
 *

643 
	$zebø_öãrÁ˚_°©e_ªad
 (
°ªam
 *
s
)

645 
öãrÁ˚
 *
iÂ
;

646 
i‚ame_tmp
[
INTERFACE_NAMSIZ
];

649 
	`°ªam_gë
 (
i‚ame_tmp
, 
s
, 
INTERFACE_NAMSIZ
);

652 
iÂ
 = 
	`if_lookup_by_«me_Àn
 (
i‚ame_tmp
,

653 
	`°∫Àn
(
i‚ame_tmp
, 
INTERFACE_NAMSIZ
));

656 i‡(! 
iÂ
)

657  
NULL
;

660 
iÂ
->
ifödex
 = 
	`°ªam_gël
 (
s
);

663 
iÂ
->
°©us
 = 
	`°ªam_gëc
 (
s
);

664 
iÂ
->
Êags
 = 
	`°ªam_gëq
 (
s
);

665 
iÂ
->
mëric
 = 
	`°ªam_gël
 (
s
);

666 
iÂ
->
mtu
 = 
	`°ªam_gël
 (
s
);

667 
iÂ
->
mtu6
 = 
	`°ªam_gël
 (
s
);

668 
iÂ
->
b™dwidth
 = 
	`°ªam_gël
 (
s
);

670  
iÂ
;

671 
	}
}

706 
	$zebø_öãrÁ˚_if_£t_vÆue
 (
°ªam
 *
s
, 
öãrÁ˚
 *
iÂ
)

709 
iÂ
->
ifödex
 = 
	`°ªam_gël
 (
s
);

710 
iÂ
->
°©us
 = 
	`°ªam_gëc
 (
s
);

713 
iÂ
->
Êags
 = 
	`°ªam_gëq
 (
s
);

714 
iÂ
->
mëric
 = 
	`°ªam_gël
 (
s
);

715 
iÂ
->
mtu
 = 
	`°ªam_gël
 (
s
);

716 
iÂ
->
mtu6
 = 
	`°ªam_gël
 (
s
);

717 
iÂ
->
b™dwidth
 = 
	`°ªam_gël
 (
s
);

718 
	}
}

721 
	$memc⁄°™t
(c⁄° *
s
, 
c
, 
size_t
 
n
)

723 c⁄° 
u_ch¨
 *
p
 = 
s
;

725 
n
-- > 0)

726 i‡(*
p
++ !
c
)

729 
	}
}

731 
c⁄√˘ed
 *

732 
	$zebø_öãrÁ˚_addªss_ªad
 (
ty≥
, 
°ªam
 *
s
)

734 
ifödex
;

735 
öãrÁ˚
 *
iÂ
;

736 
c⁄√˘ed
 *
ifc
;

737 
¥efix
 
p
, 
d
;

738 
Ámûy
;

739 
∂í
;

740 
u_ch¨
 
ifc_Êags
;

742 
	`mem£t
 (&
p
, 0, (p));

743 
	`mem£t
 (&
d
, 0, (d));

746 
ifödex
 = 
	`°ªam_gël
 (
s
);

749 
iÂ
 = 
	`if_lookup_by_ödex
 (
ifödex
);

750 i‡(
iÂ
 =
NULL
)

752 
	`zlog_w¨n
 ("zebra_interface_address_read(%s): "

754 (
ty≥
 =
ZEBRA_INTERFACE_ADDRESS_ADD
? "ADD" : "DELETE"),

755 
ifödex
);

756  
NULL
;

760 
ifc_Êags
 = 
	`°ªam_gëc
 (
s
);

763 
Ámûy
 = 
p
.Ámûy = 
	`°ªam_gëc
 (
s
);

765 
∂í
 = 
	`¥efix_bÀn
 (&
p
);

766 
	`°ªam_gë
 (&
p
.
u
.
¥efix
, 
s
, 
∂í
);

767 
p
.
¥efixÀn
 = 
	`°ªam_gëc
 (
s
);

770 
	`°ªam_gë
 (&
d
.
u
.
¥efix
, 
s
, 
∂í
);

771 
d
.
Ámûy
 = family;

773 i‡(
ty≥
 =
ZEBRA_INTERFACE_ADDRESS_ADD
)

776 
ifc
 = 
	`c⁄√˘ed_add_by_¥efix
(
iÂ
, &
p
,(
	`memc⁄°™t
(&
d
.
u
.
¥efix
,0,
∂í
) ?

777 
NULL
 : &
d
));

778 i‡(
ifc
 !
NULL
)

780 
ifc
->
Êags
 = 
ifc_Êags
;

781 i‡(
ifc
->
de°ö©i⁄
)

782 
ifc
->
de°ö©i⁄
->
¥efixÀn
 = ifc->
addªss
->prefixlen;

787 
	`as£π
 (
ty≥
 =
ZEBRA_INTERFACE_ADDRESS_DELETE
);

788 
ifc
 = 
	`c⁄√˘ed_dñëe_by_¥efix
(
iÂ
, &
p
);

791  
ifc
;

792 
	}
}

797 
	$z˛õ¡_ªad
 (
thªad
 *thread)

799 
ªt
;

800 
size_t
 
Æªady
;

801 
uöt16_t
 
Àngth
, 
comm™d
;

802 
uöt8_t
 
m¨kî
, 
vîsi⁄
;

803 
z˛õ¡
 *zclient;

806 
z˛õ¡
 = 
	`THREAD_ARG
 (
thªad
);

807 
z˛õ¡
->
t_ªad
 = 
NULL
;

810 i‡((
Æªady
 = 
	`°ªam_gë_ídp
(
z˛õ¡
->
ibuf
)Ë< 
ZEBRA_HEADER_SIZE
)

812 
ssize_t
 
nbyã
;

813 i‡(((
nbyã
 = 
	`°ªam_ªad_åy
(
z˛õ¡
->
ibuf
, z˛õ¡->
sock
,

814 
ZEBRA_HEADER_SIZE
-
Æªady
)) == 0) ||

815 (
nbyã
 == -1))

817 i‡(
z˛õ¡_debug
)

818 
	`zlog_debug
 ("z˛õ¡ c⁄√˘i⁄ clo£d sockë [%d].", 
z˛õ¡
->
sock
);

819  
	`z˛õ¡_Áûed
(
z˛õ¡
);

821 i‡(
nbyã
 !(
ssize_t
)(
ZEBRA_HEADER_SIZE
-
Æªady
))

824 
	`z˛õ¡_evít
 (
ZCLIENT_READ
, 
z˛õ¡
);

827 
Æªady
 = 
ZEBRA_HEADER_SIZE
;

831 
	`°ªam_£t_gëp
(
z˛õ¡
->
ibuf
, 0);

834 
Àngth
 = 
	`°ªam_gëw
 (
z˛õ¡
->
ibuf
);

835 
m¨kî
 = 
	`°ªam_gëc
 (
z˛õ¡
->
ibuf
);

836 
vîsi⁄
 = 
	`°ªam_gëc
 (
z˛õ¡
->
ibuf
);

837 
comm™d
 = 
	`°ªam_gëw
 (
z˛õ¡
->
ibuf
);

839 i‡(
m¨kî
 !
ZEBRA_HEADER_MARKER
 || 
vîsi⁄
 !
ZSERV_VERSION
)

841 
	`zlog_îr
("%s: socket %d version mismatch, marker %d, version %d",

842 
__func__
, 
z˛õ¡
->
sock
, 
m¨kî
, 
vîsi⁄
);

843  
	`z˛õ¡_Áûed
(
z˛õ¡
);

846 i‡(
Àngth
 < 
ZEBRA_HEADER_SIZE
)

848 
	`zlog_îr
("%s: socket %d messageÜength %u isÜessÅhan %d ",

849 
__func__
, 
z˛õ¡
->
sock
, 
Àngth
, 
ZEBRA_HEADER_SIZE
);

850  
	`z˛õ¡_Áûed
(
z˛õ¡
);

854 i‡(
Àngth
 > 
	`STREAM_SIZE
(
z˛õ¡
->
ibuf
))

856 
°ªam
 *
ns
;

857 
	`zlog_w¨n
("%s: message size %uÉxceeds buffer size %lu,Éxpanding...",

858 
__func__
, 
Àngth
, (
u_l⁄g
)
	`STREAM_SIZE
(
z˛õ¡
->
ibuf
));

859 
ns
 = 
	`°ªam_√w
(
Àngth
);

860 
	`°ªam_c›y
(
ns
, 
z˛õ¡
->
ibuf
);

861 
	`°ªam_‰ì
 (
z˛õ¡
->
ibuf
);

862 
z˛õ¡
->
ibuf
 = 
ns
;

866 i‡(
Æªady
 < 
Àngth
)

868 
ssize_t
 
nbyã
;

869 i‡(((
nbyã
 = 
	`°ªam_ªad_åy
(
z˛õ¡
->
ibuf
, z˛õ¡->
sock
,

870 
Àngth
-
Æªady
)) == 0) ||

871 (
nbyã
 == -1))

873 i‡(
z˛õ¡_debug
)

874 
	`zlog_debug
("z˛õ¡ c⁄√˘i⁄ clo£d sockë [%d].", 
z˛õ¡
->
sock
);

875  
	`z˛õ¡_Áûed
(
z˛õ¡
);

877 i‡(
nbyã
 !(
ssize_t
)(
Àngth
-
Æªady
))

880 
	`z˛õ¡_evít
 (
ZCLIENT_READ
, 
z˛õ¡
);

885 
Àngth
 -
ZEBRA_HEADER_SIZE
;

887 i‡(
z˛õ¡_debug
)

888 
	`zlog_debug
("z˛õ¡ 0x%∞comm™d 0x%x \n", 
z˛õ¡
, 
comm™d
);

890 
comm™d
)

892 
ZEBRA_ROUTER_ID_UPDATE
:

893 i‡(
z˛õ¡
->
rouãr_id_upd©e
)

894 
ªt
 = (*
z˛õ¡
->
rouãr_id_upd©e
Ë(
comm™d
, z˛õ¡, 
Àngth
);

896 
ZEBRA_INTERFACE_ADD
:

897 i‡(
z˛õ¡
->
öãrÁ˚_add
)

898 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_add
Ë(
comm™d
, z˛õ¡, 
Àngth
);

900 
ZEBRA_INTERFACE_DELETE
:

901 i‡(
z˛õ¡
->
öãrÁ˚_dñëe
)

902 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_dñëe
Ë(
comm™d
, z˛õ¡, 
Àngth
);

904 
ZEBRA_INTERFACE_ADDRESS_ADD
:

905 i‡(
z˛õ¡
->
öãrÁ˚_addªss_add
)

906 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_addªss_add
Ë(
comm™d
, z˛õ¡, 
Àngth
);

908 
ZEBRA_INTERFACE_ADDRESS_DELETE
:

909 i‡(
z˛õ¡
->
öãrÁ˚_addªss_dñëe
)

910 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_addªss_dñëe
Ë(
comm™d
, z˛õ¡, 
Àngth
);

912 
ZEBRA_INTERFACE_UP
:

913 i‡(
z˛õ¡
->
öãrÁ˚_up
)

914 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_up
Ë(
comm™d
, z˛õ¡, 
Àngth
);

916 
ZEBRA_INTERFACE_DOWN
:

917 i‡(
z˛õ¡
->
öãrÁ˚_down
)

918 
ªt
 = (*
z˛õ¡
->
öãrÁ˚_down
Ë(
comm™d
, z˛õ¡, 
Àngth
);

920 
ZEBRA_IPV4_ROUTE_ADD
:

921 i‡(
z˛õ¡
->
ùv4_rouã_add
)

922 
ªt
 = (*
z˛õ¡
->
ùv4_rouã_add
Ë(
comm™d
, z˛õ¡, 
Àngth
);

924 
ZEBRA_IPV4_ROUTE_DELETE
:

925 i‡(
z˛õ¡
->
ùv4_rouã_dñëe
)

926 
ªt
 = (*
z˛õ¡
->
ùv4_rouã_dñëe
Ë(
comm™d
, z˛õ¡, 
Àngth
);

928 
ZEBRA_IPV6_ROUTE_ADD
:

929 i‡(
z˛õ¡
->
ùv6_rouã_add
)

930 
ªt
 = (*
z˛õ¡
->
ùv6_rouã_add
Ë(
comm™d
, z˛õ¡, 
Àngth
);

932 
ZEBRA_IPV6_ROUTE_DELETE
:

933 i‡(
z˛õ¡
->
ùv6_rouã_dñëe
)

934 
ªt
 = (*
z˛õ¡
->
ùv6_rouã_dñëe
Ë(
comm™d
, z˛õ¡, 
Àngth
);

940 i‡(
z˛õ¡
->
sock
 < 0)

945 
	`°ªam_ª£t
(
z˛õ¡
->
ibuf
);

946 
	`z˛õ¡_evít
 (
ZCLIENT_READ
, 
z˛õ¡
);

949 
	}
}

952 
	$z˛õ¡_ªdi°ribuã
 (
comm™d
, 
z˛õ¡
 *z˛õ¡, 
ty≥
)

955 i‡(
comm™d
 =
ZEBRA_REDISTRIBUTE_ADD
)

957 i‡(
z˛õ¡
->
ªdi°
[
ty≥
])

959 
z˛õ¡
->
ªdi°
[
ty≥
] = 1;

963 i‡(!
z˛õ¡
->
ªdi°
[
ty≥
])

965 
z˛õ¡
->
ªdi°
[
ty≥
] = 0;

968 i‡(
z˛õ¡
->
sock
 > 0)

969 
	`zebø_ªdi°ribuã_£nd
 (
comm™d
, 
z˛õ¡
, 
ty≥
);

970 
	}
}

974 
	$z˛õ¡_ªdi°ribuã_deÁu…
 (
comm™d
, 
z˛õ¡
 *zclient)

977 i‡(
comm™d
 =
ZEBRA_REDISTRIBUTE_DEFAULT_ADD
)

979 i‡(
z˛õ¡
->
deÁu…_öf‹m©i⁄
)

981 
z˛õ¡
->
deÁu…_öf‹m©i⁄
 = 1;

985 i‡(!
z˛õ¡
->
deÁu…_öf‹m©i⁄
)

987 
z˛õ¡
->
deÁu…_öf‹m©i⁄
 = 0;

990 i‡(
z˛õ¡
->
sock
 > 0)

991 
	`zebø_mesßge_£nd
 (
z˛õ¡
, 
comm™d
);

992 
	}
}

995 
	$z˛õ¡_evít
 (
evít
Évít, 
z˛õ¡
 *zclient)

997 
evít
)

999 
ZCLIENT_SCHEDULE
:

1000 i‡(! 
z˛õ¡
->
t_c⁄√˘
)

1001 
z˛õ¡
->
t_c⁄√˘
 =

1002 
	`thªad_add_evít
 (
ma°î
, 
z˛õ¡_c⁄√˘
, 
z˛õ¡
, 0);

1004 
ZCLIENT_CONNECT
:

1005 i‡(
z˛õ¡
->
Áû
 >= 10)

1007 i‡(
z˛õ¡_debug
)

1008 
	`zlog_debug
 ("zclient connect schedule interval is %d",

1009 
z˛õ¡
->
Áû
 < 3 ? 10 : 60);

1010 i‡(! 
z˛õ¡
->
t_c⁄√˘
)

1011 
z˛õ¡
->
t_c⁄√˘
 =

1012 
	`thªad_add_timî
 (
ma°î
, 
z˛õ¡_c⁄√˘
, 
z˛õ¡
,

1013 
z˛õ¡
->
Áû
 < 3 ? 10 : 60);

1015 
ZCLIENT_READ
:

1016 
z˛õ¡
->
t_ªad
 =

1017 
	`thªad_add_ªad
 (
ma°î
, 
z˛õ¡_ªad
, 
z˛õ¡
, z˛õ¡->
sock
);

1020 
	}
}

	@common-libs/mul-lib/include/atomic.h

20 #i‚de‡
__ATOMIC_H__


21 
	#__ATOMIC_H__


	)

23 
	tc_©omic_t
;

25 
ölöe
 
c_©omic_t


26 
	$©omic_ªad
(
c_©omic_t
 *
±r
)

28  
	`__sync_add_™d_„tch
(
±r
, 0);

29 
	}
}

31 
ölöe
 
c_©omic_t


32 
	$©omic_öc
(
c_©omic_t
 *
±r
, 
öc
)

34  
	`__sync_add_™d_„tch
(
±r
, 
öc
);

35 
	}
}

37 
ölöe
 
c_©omic_t


38 
	$©omic_dec
(
c_©omic_t
 *
±r
, 
vÆ
)

40 
dec
 = -
vÆ
;

41  
	`__sync_add_™d_„tch
(
±r
, 
dec
);

42 
	}
}

	@common-libs/mul-lib/include/c_util.h

20 #i‚de‡
__C_UTIL_H__


21 
	#__C_UTIL_H__


	)

23 
	~<sys/ty≥s.h
>

24 
	~<uni°d.h
>

25 
	~<°dboﬁ.h
>

26 
	~<sys/time.h
>

28 
	~"compûî.h
"

29 
	~"lock.h
"

30 
	~"cbuf.h
"

32 
	#C_RBUF_STATE_BEGIN
 0

	)

33 
	#C_RBUF_STATE_CONT
 1

	)

34 
	#C_RBUF_STATE_END
 2

	)

35 
	#C_RBUF_PART_DATA
 (1 << 7)

	)

37 
	#C_TX_BUF_SZ
 (1024)

	)

39 
	#C_MAX_TX_RETRIES
 (4)

	)

44 
	sc_c⁄n_


46 *
	mrd_evít
;

47 *
	mwr_evít
;

48 
	mfd
;

49 
	mrd_fd
;

50 
cbuf
 *
	mcbuf
;

51 
cbuf_hód
 
	mtx_q
;

52 
	#C_CONN_TYPE_SOCK
 0

	)

53 
	#C_CONN_TYPE_FILE
 1

	)

54 
uöt16_t
 
	mc⁄n_ty≥
;

55 
uöt16_t
 
	mdód
;

56 
uöt32_t
 
	mrx_pkts
;

57 
uöt32_t
 
	mtx_pkts
;

58 
uöt32_t
 
	mtx_îr
;

59 
	#C_CONN_DESC_SZ
 32

	)

60 
	mc⁄n_°r
[
C_CONN_DESC_SZ
];

61 
c_rw_lock_t
 
c⁄n_lock
 
	m__Æig√d
;

62 }
	tc_c⁄n_t
;

64 (*
	tc⁄n_¥oc_t
)(*, 
	tcbuf
 *);

67 
	`c_d´m⁄
 (
nochdú
, 
no˛o£
);

68 
pid_t
 
	`c_pid_ouçut
(c⁄° *
∑th
);

69 
	`c_£rvî_sockë_¸óã
(
uöt32_t
 
£rvî_ù
, 
uöt16_t
 
p‹t
);

70 
	`c_£rvî_sockë_¸óã_blockög
(
uöt32_t
 
£rvî_ù
, 
uöt16_t
 
p‹t
);

71 
	`c_˛õ¡_sockë_¸óã
(*
£rvî_ù
, 
uöt16_t
 
p‹t
);

72 
	`c_˛õ¡_sockë_¸óã_blockög
(*
£rvî_ù
, 
uöt16_t
 
p‹t
);

73 
	`c_£rvî_sockë_˛o£
(
fd
);

74 
	`c_˛õ¡_sockë_˛o£
(
fd
);

75 
	`c_make_sockë_n⁄blockög
(
fd
);

76 
	`c_make_sockë_blockög
(
fd
);

77 
	`c_t˝sock_£t_nodñay
(
fd
);

78 
	`c_sock_£t_ªcvbuf
(
fd
, 
size_t
 
Àn
);

79 
	`c_hex_dump
(*
±r
, 
Àn
);

80 
	`c_sockë_ªad_n⁄block_lo›
(
fd
, *
¨g
, 
c_c⁄n_t
 *
c⁄n
,

81 c⁄° 
size_t
 
rcv_buf_sz
,

82 
c⁄n_¥oc_t
 
¥oc_msg
,

83 (*
gë_d©a_Àn
)(*),

84 
	$boﬁ
 (*
vÆid©e_hdr
)(*),

85 
size_t
 
hdr_sz
);

86 
	`c_sockë_wrôe_n⁄block_lo›
(
c_c⁄n_t
 *
c⁄n
,

87 (*
sched_tx
)(*));

88 
	`c_sockë_wrôe_n⁄block_sg_lo›
(
c_c⁄n_t
 *
c⁄n
,

89 (*
sched_tx
)(*));

90 
	`c_sockë_ªad_block_lo›
(
fd
, *
¨g
, 
c_c⁄n_t
 *
c⁄n
,

91 c⁄° 
size_t
 
max_rcv_buf_sz
,

92 
c⁄n_¥oc_t
 
¥oc_msg
, (*
gë_d©a_Àn
)(*),

93 
	$boﬁ
 (*
vÆid©e_hdr
)(*), 
size_t
 
hdr_sz
);

94 
	`c_sockë_wrôe_block_lo›
(
c_c⁄n_t
 *
c⁄n
, 
cbuf
 *
buf
);

97 
ölöe
 

98 
	$c_ªcvd_sock_dód
(
ªcv_ªs
)

100 i‡((
ªcv_ªs
 == 0) ||

101 ((
ªcv_ªs
 < 0Ë&& (
î∫o
 !
EAGAIN
))) {

106 
	}
}

108 
ölöe
 

109 
	$c_timevÆ_diff
(
timevÆ
 *
ªs
,

110 
timevÆ
 *
t2
,

111 
timevÆ
 *
t1
)

113 i‡(
t2
->
tv_u£c
 >
t1
->tv_usec) {

114 
ªs
->
tv_u£c
 = 
t2
->tv_u£¯- 
t1
->tv_usec;

115 
ªs
->
tv_£c
 = 
t2
->tv_£¯- 
t1
->tv_sec;

117 
ªs
->
tv_u£c
 = 1000000 - 
t1
->tv_u£¯+ 
t2
->tv_usec;

118 
ªs
->
tv_£c
 = 
t2
->tv_£¯- 
t1
->tv_sec - 1;

122 
	}
}

125 
ölöe
 
uöt32_t


126 
	$make_öë_mask
(
uöt8_t
 
Àn
)

128  (~((1 << (32 - (
Àn
))) - 1));

129 
	}
}

133 
	#TIME_uS_SCALE
 (1000000)

	)

134 
	#TIME_uS
(
x
Ë(x*
TIME_uS_SCALE
)

	)

136 
	~<°ddef.h
>

137 
	#c⁄èöî_of
(
±r
, 
°r
, 
memb
) \

138 ((
°r
 *Ë((*Ë(
±r
Ë- 
	`off£tof
(°r, 
memb
)))

	)

140 
	#FN
 
__FUNCTION__


	)

	@common-libs/mul-lib/include/cbuf.h

20 #i‚de‡
__C_BUF_H__


21 
	#__C_BUF_H__


	)

23 
	~"©omic.h
"

24 
	~"°döt.h
"

26 
	scbuf


28 *
	md©a
;

29 *
	mèû
;

30 *
	míd
;

31 
size_t
 
	mÀn
;

32 
cbuf
 *
	m√xt
;

33 
	m˛⁄ed
:8;

34 
	mªs
:24;

37 
uöt64_t
 
	mdpid
;

40 
	scbuf_hód


42 
size_t
 
	mÀn
;

43 
cbuf
 *
	m√xt
;

46 
	#CBUF_SZ
 ((
cbuf
))

	)

47 
	#CBUF_BLK_ALIGN_SZ
 (64)

	)

48 
	#CBUF_ALIGN_SZ
(
Àn
Ë((÷íË+ (
CBUF_BLK_ALIGN_SZ
-1))&(~(CBUF_BLK_ALIGN_SZ-1)))

	)

50 
ölöe
 

51 
	$cbuf_li°_queue_Àn
(
cbuf_hód
 *
hód
)

53 i‡(
hód
) {

54  
hód
->
Àn
;

57 
	}
}

64 
cbuf_li°_hód_öô
(
cbuf_hód
 *
hód
);

67 
cbuf_li°_queue_èû
(
cbuf_hód
 *
hód
,

68 
cbuf
 *
buf
);

71 
cbuf_li°_queue
(
cbuf_hód
 *
hód
,

72 
cbuf
 *
buf
);

75 
cbuf
 *
cbuf_li°_dequeue
(
cbuf_hód
 *
hód
);

78 
cbuf_li°_purge
(
cbuf_hód
 *
hód
);

81 
cbuf
 *
Æloc_cbuf
(
size_t
 
Àn
);

84 *
cbuf_put
(
cbuf
 *
b
, 
size_t
 
Àn
);

85 
size_t
 
cbuf_hódroom
(
cbuf
 *
b
);

86 
size_t
 
cbuf_èûroom
(
cbuf
 *
b
);

87 
cbuf
 *
cbuf_ªÆloc_èûroom
(cbu‡*
b
, 
size_t
 
room
, 
do_‰ì
);

88 
cbuf
 *
cbuf_ªÆloc_hódroom
(cbu‡*
b
, 
size_t
 
room
, 
do_‰ì
);

89 *
cbuf_puŒ
(
cbuf
 *
b
, 
size_t
 
Àn
);

90 *
cbuf_push
(
cbuf
 *
b
, 
size_t
 
Àn
);

93 
‰ì_cbuf
(
cbuf
 *
b
);

	@common-libs/mul-lib/include/compiler.h

19 #i‚de‡
__C_COMPILER_H__


20 
	#__C_COMPILER_H__


	)

22 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

24 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

25 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

27 
	#¥e„tch
(
x
Ë
	`__buûtö_¥e„tch
(x)

	)

30 #i‚de‡
UNUSED


31 
	#UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

34 
	#__hŸ
 
	`__©åibuã__
((
hŸ
))

	)

35 
	#__Á°∑th
 
	`__©åibuã__
((
	`__£˘i⁄__
(".Á°∑th")))

	)

36 
	#__Á°ˇŒ
 
	`__©åibuã__
((
	`ªg∑rm
(3)))

	)

38 #i‚de‡
CPU_L1_CACHE_SZ


39 
	#CPU_L1_CACHE_SZ
 (64)

	)

42 
	#__Æig√d
 
	`__©åibuã__
((
	`Æig√d
(
CPU_L1_CACHE_SZ
)))

	)

44 
	#mb
(Ë
	`__sync_synchr⁄ize
()

	)

45 
	#wmb
(Ë
	`mb
()

	)

46 
	#rmb
(Ë
	`mb
()

	)

48 
	#FETCH_ALWAYS
(
x
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&(x))

	)

	@common-libs/mul-lib/include/idx_pool.h

20 
	sùoﬁ_¨r_


22 
	m√xt_idx
;

23 *
	m¥iv
;

24 }
	tùoﬁ_¨r_t
;

26 
	sùoﬁ_hdl_


28 
c_rw_lock_t
 
	mlock
;

29 
	m√xt_idx
;

30 
	mmax_idx
;

31 
ùoﬁ_¨r_t
 *
	midx_¨r
;

32 }
	tùoﬁ_hdl_t
;

34 
ùoﬁ_gë
(
ùoﬁ_hdl_t
 *
poﬁ
, *
¥iv
);

35 
ùoﬁ_put
(
ùoﬁ_hdl_t
 *
poﬁ
, 
ªt_idx
);

36 
ùoﬁ_hdl_t
 *
ùoﬁ_¸óã
(
size_t
 
sz
, 
uöt32_t
 
°¨t_idx
);

37 
ùoﬁ_dñëe
(
ùoﬁ_hdl_t
 *
poﬁ
);

38 *
ùoﬁ_idx_¥iv
(
ùoﬁ_hdl_t
 *
poﬁ
, 
idx
);

	@common-libs/mul-lib/include/lock.h

19 #i‚de‡
__LOCK_H__


20 
	#__LOCK_H__


	)

22 
	~<±hªad.h
>

24 
±hªad_muãx_t
 
	tc_muãx_lock_t
;

25 
±hªad_rwlock_t
 
	tc_rw_lock_t
;

27 
ölöe
 

28 
	$c_rw_lock_öô
(
c_rw_lock_t
 *
lock
)

30 
	`±hªad_rwlock_öô
(
lock
, 
NULL
);

31 
	}
}

33 
ölöe
 

34 
	$c_rw_lock_de°roy
(
c_rw_lock_t
 *
lock
)

36 
	`±hªad_rwlock_de°roy
(
lock
);

37 
	}
}

41 #ifde‡
LOCK_DEBUG


42 
ölöe
 

43 
	$__c_rd_lock
(
c_rw_lock_t
 *
lock
)

45 
	`¥ötf
("%s: E¡î \n", 
__FUNCTION__
);

46 
	`±hªad_rwlock_rdlock
(
lock
);

47 
	}
}

49 
	#c_rd_lock
(
lock
) \

51 
	`¥ötf
 ("%s:%s:%d\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

52 
	`__c_rd_lock
(
lock
); \

53 }0)

	)

57 
ölöe
 

58 
	$__c_rd_u∆ock
(
c_rw_lock_t
 *
lock
)

60 
	`±hªad_rwlock_u∆ock
(
lock
);

61 
	`¥ötf
("%s: Exô \n", 
__FUNCTION__
);

62 
	}
}

64 
	#c_rd_u∆ock
(
lock
) \

66 
	`¥ötf
 ("%s:%s:%d\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

67 
	`__c_rd_u∆ock
(
lock
); \

68 }0)

	)

71 
ölöe
 

72 
	$__c_wr_lock
(
c_rw_lock_t
 *
lock
)

74 
	`¥ötf
("%s: E¡î \n", 
__FUNCTION__
);

75 
	`±hªad_rwlock_wæock
(
lock
);

76 
	}
}

78 
	#c_wr_lock
(
lock
) \

80 
	`¥ötf
 ("%s:%s:%d\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

81 
	`__c_wr_lock
(
lock
); \

82 }0)

	)

84 
ölöe
 

85 
	$__c_wr_u∆ock
(
c_rw_lock_t
 *
lock
)

87 
	`±hªad_rwlock_u∆ock
(
lock
);

88 
	`¥ötf
("%s: Exô \n", 
__FUNCTION__
);

89 
	}
}

91 
	#c_wr_u∆ock
(
lock
) \

93 
	`¥ötf
 ("%s:%s:%d\n", 
__FILE__
, 
__FUNCTION__
, 
__LINE__
); \

94 
	`__c_wr_u∆ock
(
lock
); \

95 }0)

	)

97 
ölöe
 

98 
	$c_wr_åylock
(
c_rw_lock_t
 *
lock
)

100  
	`±hªad_rwlock_åywæock
(
lock
);

101 
	}
}

103 
ölöe
 

104 
	$c_rd_åylock
(
c_rw_lock_t
 *
lock
)

106  
	`±hªad_rwlock_åyrdlock
(
lock
);

107 
	}
}

111 
ölöe
 

112 
	$c_rd_lock
(
c_rw_lock_t
 *
lock
)

114 
	`±hªad_rwlock_rdlock
(
lock
);

115 
	}
}

117 
ölöe
 

118 
	$c_rd_u∆ock
(
c_rw_lock_t
 *
lock
)

120 
	`±hªad_rwlock_u∆ock
(
lock
);

121 
	}
}

123 
ölöe
 

124 
	$c_wr_lock
(
c_rw_lock_t
 *
lock
)

126 
	`±hªad_rwlock_wæock
(
lock
);

127 
	}
}

129 
ölöe
 

130 
	$c_wr_u∆ock
(
c_rw_lock_t
 *
lock
)

132 
	`±hªad_rwlock_u∆ock
(
lock
);

133 
	}
}

135 
ölöe
 

136 
	$c_wr_åylock
(
c_rw_lock_t
 *
lock
)

138  
	`±hªad_rwlock_åywæock
(
lock
);

139 
	}
}

141 
ölöe
 

142 
	$c_rd_åylock
(
c_rw_lock_t
 *
lock
)

144  
	`±hªad_rwlock_åyrdlock
(
lock
);

145 
	}
}

149 
	sc_£q_lock


151 
	m£q
;

152 
c_rw_lock_t
 
	mwr_lock
;

153 }
	tc_£q_lock_t
;

155 
ölöe
 

156 
	$c_£q_lock_öô
(
c_£q_lock_t
 *
lock
)

158 
lock
->
£q
 = 0;

159 
	`c_rw_lock_öô
(&
lock
->
wr_lock
);

160 
	}
}

162 
ölöe
 

163 
	$c_£q_rd_lock
(
c_£q_lock_t
 *
£q_lock
)

165 
£q
;

168 
£q
 = 
	`FETCH_ALWAYS
(
£q_lock
->seq);

169 i‡(!(
£q
 & 0x1)) ;

172 
	`mb
();

174  
£q
;

175 
	}
}

177 
ölöe
 

178 
	$c_£q_rd_u∆ock
(
c_£q_lock_t
 *
£q_lock
, 
£q
)

180 
	`mb
();

181 i‡(
£q_lock
->
£q
 != seq)  1;

183 
	}
}

185 
ölöe
 

186 
	$c_£q_wr_lock
(
c_£q_lock_t
 *
£q_lock
)

188 
	`c_wr_lock
(&
£q_lock
->
wr_lock
);

189 
£q_lock
->
£q
++;

190 
	`mb
();

191 
	}
}

193 
ölöe
 

194 
	$c_£q_wr_u∆ock
(
c_£q_lock_t
 *
£q_lock
)

196 
	`mb
();

197 
£q_lock
->
£q
++;

198 
	`c_wr_u∆ock
(&
£q_lock
->
wr_lock
);

199 
	}
}

	@common-libs/mul-lib/src/c_util.c

20 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

28 
	~<√töë/ö.h
>

29 
	~<√töë/t˝.h
>

30 
	~<¨∑/öë.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

34 
	~"cbuf.h
"

35 
	~"c_utû.h
"

38 
	$c_d´m⁄
 (
nochdú
, 
no˛o£
)

40 
pid_t
 
pid
;

42 
pid
 = 
	`f‹k
 ();

44 i‡(
pid
 < 0) {

48 i‡(
pid
 != 0) {

49 
	`exô
 (0);

52 
pid
 = 
	`£tsid
();

54 i‡(
pid
 == -1) {

58 i‡(!
nochdú
) {

59 i‡(
	`chdú
("/")) {

60 
	`¥ötf
("FailedÅo chdir /\n");

65 i‡(!
no˛o£
) {

66 
fd
;

68 
fd
 = 
	`›í
 ("/dev/nuŒ", 
O_RDWR
, 0);

69 i‡(
fd
 != -1) {

70 
	`dup2
 (
fd
, 
STDIN_FILENO
);

71 
	`dup2
 (
fd
, 
STDOUT_FILENO
);

72 
	`dup2
 (
fd
, 
STDERR_FILENO
);

73 i‡(
fd
 > 2)

74 
	`˛o£
 (
fd
);

78 
	`umask
 (0027);

81 
	}
}

84 
pid_t


85 
	$c_pid_ouçut
(c⁄° *
∑th
)

87 
tmp
;

88 
fd
;

89 
pid_t
 
pid
;

90 
buf
[16];

91 
Êock
 
lock
;

92 
mode_t
 
ﬁdumask
;

94 
pid
 = 
	`gëpid
 ();

95 
	#PIDFILE_MASK
 0644

	)

96 
ﬁdumask
 = 
	`umask
(0777 & ~
PIDFILE_MASK
);

97 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
 | 
O_CREAT
, 
PIDFILE_MASK
);

98 i‡(
fd
 < 0) {

99 
	`≥º‹
("open");

100 
	`umask
(
ﬁdumask
);

101 
	`exô
(1);

103 
pidsize
;

105 
	`umask
(
ﬁdumask
);

106 
	`mem£t
 (&
lock
, 0, (lock));

108 
lock
.
l_ty≥
 = 
F_WRLCK
;

109 
lock
.
l_whí˚
 = 
SEEK_SET
;

111 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
lock
) < 0) {

112 
	`¥ötf
("Duplicate instanceÑunning\n");

117 
	`•rötf
 (
buf
, "%d\n", (Ë
pid
);

118 
pidsize
 = 
	`°æí
(
buf
);

119 i‡((
tmp
 = 
	`wrôe
 (
fd
, 
buf
, 
pidsize
)) != ()pidsize)

120 
	`¥ötf
("CouldÇot writeÖid %dÅoÖid_file %s\n",

121 ()
pid
, 
∑th
);

122 i‡(
	`·runˇã
(
fd
, 
pidsize
) < 0)

123 
	`¥ötf
("CouldÇotÅruncateÖid_file %sÅo %u bytes\n",

124 
∑th
, (
u_öt
)
pidsize
);

126  
pid
;

127 
	}
}

131 
	$c_make_sockë_n⁄blockög
(
fd
)

133 
Êags
;

134 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 
NULL
)) < 0) {

137 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) == -1) {

142 
	}
}

145 
	$c_make_sockë_blockög
(
fd
)

147 
Êags
;

148 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 
NULL
)) < 0) {

151 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
) == -1) {

156 
	}
}

160 
	$c_£rvî_sockë_¸óã
(
uöt32_t
 
£rvî_ù
, 
uöt16_t
 
p‹t
)

162 
sockaddr_ö
 
sö
;

163 
fd
;

164 
⁄e
 = 1;

166 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

167 i‡(
fd
 < 0) {

168 
	`≥º‹
("");

169  
fd
;

172 
sö
.
sö_Ámûy
 = 
AF_INET
;

173 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
£rvî_ù
);

174 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

176 
	`c_make_sockë_n⁄blockög
(
fd
);

177 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

179 i‡(
	`böd
(
fd
, (
sockaddr
*)&
sö
, (sin)) < 0) {

180 
	`≥º‹
("bind");

184 i‡(
	`li°í
(
fd
, 16) < 0) {

185 
	`≥º‹
("listen");

189  
fd
;

190 
	}
}

193 
	$c_£rvî_sockë_¸óã_blockög
(
uöt32_t
 
£rvî_ù
, 
uöt16_t
 
p‹t
)

195 
sockaddr_ö
 
sö
;

196 
fd
;

197 
⁄e
 = 1;

199 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

200 i‡(
fd
 < 0) {

201 
	`≥º‹
("");

202  
fd
;

205 
sö
.
sö_Ámûy
 = 
AF_INET
;

206 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
£rvî_ù
);

207 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

209 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

211 i‡(
	`böd
(
fd
, (
sockaddr
*)&
sö
, (sin)) < 0) {

212 
	`≥º‹
("bind");

216 i‡(
	`li°í
(
fd
, 16) < 0) {

217 
	`≥º‹
("listen");

221  
fd
;

222 
	}
}

227 
	$c_˛õ¡_sockë_¸óã
(*
£rvî_ù
, 
uöt16_t
 
p‹t
)

229 
sockaddr_ö
 
sö
;

230 
fd
;

231 
⁄e
 = 1;

233 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

234 i‡(
fd
 < 0) {

235 
	`≥º‹
("socket");

236  
fd
;

239 
sö
.
sö_Ámûy
 = 
AF_INET
;

240 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

241 i‡(!
	`öë_©⁄
(
£rvî_ù
, &
sö
.
sö_addr
)) {

245 
	`mem£t
(
sö
.
sö_zîo
, 0,  sin.sin_zero);

246 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
sö
, (sockaddr)) == -1) {

247 
	`≥º‹
("connect");

251 
	`c_make_sockë_n⁄blockög
(
fd
);

252 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄e
, (one));

254  
fd
;

255 
	}
}

259 
	$c_˛õ¡_sockë_¸óã_blockög
(*
£rvî_ù
, 
uöt16_t
 
p‹t
)

261 
sockaddr_ö
 
sö
;

262 
fd
;

264 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

265 i‡(
fd
 < 0) {

266 
	`≥º‹
("socket");

267  
fd
;

270 
sö
.
sö_Ámûy
 = 
AF_INET
;

271 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

272 i‡(!
	`öë_©⁄
(
£rvî_ù
, &
sö
.
sö_addr
)) {

276 
	`mem£t
(
sö
.
sö_zîo
, 0,  sin.sin_zero);

277 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
sö
, (sockaddr)) == -1) {

278 
	`≥º‹
("connect");

282  
fd
;

283 
	}
}

286 
	$c_£rvî_sockë_˛o£
(
fd
)

288 
	`˛o£
(
fd
);

290 
	}
}

293 
	$c_˛õ¡_sockë_˛o£
(
fd
)

295 
	`˛o£
(
fd
);

297 
	}
}

300 
	$c_sock_£t_ªcvbuf
 (
fd
, 
size_t
 
size
)

302  
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
size
,  (size));

303 
	}
}

305 
	$c_t˝sock_£t_nodñay
(
fd
)

307 
zîo
 = 0;

309  
	`£tsock›t
(
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
zîo
, (zero));

311 
	}
}

314 
	$c_hex_dump
(*
±r
, 
Àn
)

316 
i
0, 
idx
 = 0;

317 
tmp_buf
[64] = { 0 };

319 
i
 = 0; i < 
Àn
; i++) {

320 
idx
 +
	`¢¥ötf
((*)(
tmp_buf
 + idx), 3, "%02x",

321 *((*)
±r
 + 
i
));

323 i‡(
idx
 >= 32) {

324 
	`¥ötf
("0x%s\r\n", 
tmp_buf
);

325 
	`mem£t
(
tmp_buf
, 0, 32);

326 
idx
 = 0;

330 i‡(
idx
) {

331 
	`¥ötf
("0x%s\r\n", 
tmp_buf
);

335 
	}
}

338 
c_sockë_ªad_n⁄block_lo›
(
fd
, *
¨g
, 
c_c⁄n_t
 *
c⁄n
,

339 c⁄° 
size_t
 
rcv_buf_sz
,

340 
c⁄n_¥oc_t
 
¥oc_msg
, (*
gë_d©a_Àn
)(*),

341 
	$boﬁ
 (*
vÆid©e_hdr
)(*), 
size_t
 
hdr_sz
 )

343 
ssize_t
 
rd_sz
 = -1;

344 
cbuf
 
cuº_b
, *
b
 = 
NULL
;

345 
lo›_˙t
 = 0;

347 i‡(!
c⁄n
->
cbuf
) {

348 
b
 = 
	`Æloc_cbuf
(
rcv_buf_sz
);

350 
b
 = 
c⁄n
->
cbuf
;

355 i‡(!
	`cbuf_èûroom
(
b
)) {

356 
cbuf
 *
√w
;

358 
√w
 = 
	`Æloc_cbuf
(
b
->
Àn
 + 
rcv_buf_sz
);

359 i‡(
b
->
Àn
) {

360 
	`mem˝y
(
√w
->
d©a
, 
b
->d©a, b->
Àn
);

361 
	`cbuf_put
(
√w
, 
b
->
Àn
);

363 
	`‰ì_cbuf
(
b
);

364 
b
 = 
√w
;

367 i‡(
c⁄n
->
c⁄n_ty≥
 =
C_CONN_TYPE_SOCK
) {

368 i‡(++
lo›_˙t
 < 100) {

369 
rd_sz
 = 
	`ªcv
(
fd
, 
b
->
èû
, 
	`cbuf_èûroom
(b), 0);

370 } 
rd_sz
 = -1;

372 
rd_sz
 = 
	`ªad
(
fd
, 
b
->
èû
, 
	`cbuf_èûroom
(b));

375 i‡(
rd_sz
 <= 0) {

376 
c⁄n
->
cbuf
 = 
b
;

380 
	`cbuf_put
(
b
, 
rd_sz
);

382 
b
->
Àn
 >
hdr_sz
 &&

383 
b
->
Àn
 >
	`gë_d©a_Àn
(b->
d©a
)) {

385 i‡(!
	`vÆid©e_hdr
(
b
->
d©a
)) {

386 
	`¥ötf
("%s: C‹ru±ed hódî", 
FN
);

390 
cuº_b
.
d©a
 = 
b
->data;

391 
cuº_b
.
Àn
 = 
	`gë_d©a_Àn
(
b
->
d©a
);

392 
cuº_b
.
èû
 = 
b
->
d©a
 + cuº_b.
Àn
;

394 
	`¥oc_msg
(
¨g
, &
cuº_b
);

395 
	`cbuf_puŒ
(
b
, 
cuº_b
.
Àn
);

399  
rd_sz
;

400 
	}
}

403 
c_sockë_wrôe_n⁄block_lo›
(
c_c⁄n_t
 *
c⁄n
,

404 (*
sched_tx
)(*))

406 
cbuf
 *
buf
;

407 
£¡_sz
;

408 
îr
 = 0;

410 i‡(
	`u∆ikñy
(
c⁄n
->
dód
)) {

411 
	`cbuf_li°_purge
(&
c⁄n
->
tx_q
);

412 
îr
 = -1;

413 
out
;

416 (
buf
 = 
	`cbuf_li°_dequeue
(&
c⁄n
->
tx_q
))) {

418 
£¡_sz
 = 
	`£nd
(
c⁄n
->
fd
, 
buf
->
d©a
, buf->
Àn
, 
MSG_NOSIGNAL
);

419 i‡(
£¡_sz
 <= 0) {

420 
	`cbuf_li°_queue
(&
c⁄n
->
tx_q
, 
buf
);

421 i‡(
£¡_sz
 =0 || 
î∫o
 =
EAGAIN
) {

422 
c⁄n
->
tx_îr
++;

423 
sched_tx_evít
;

425 
c⁄n
->
dód
 = 1;

426 
îr
 = -1;

427 
out
;

430 i‡(
£¡_sz
 < 
buf
->
Àn
) {

431 
	`cbuf_puŒ
(
buf
, 
£¡_sz
);

432 
	`cbuf_li°_queue
(&
c⁄n
->
tx_q
, 
buf
);

433 
sched_tx_evít
;

436 
c⁄n
->
tx_pkts
++;

438 
	`‰ì_cbuf
(
buf
);

441 
out
:

442  
îr
;

444 
sched_tx_evít
:

445 
	`sched_tx
(
c⁄n
);

446  
îr
;

448 
	}
}

452 
c_sockë_wrôe_n⁄block_sg_lo›
(
c_c⁄n_t
 *
c⁄n
,

453 (*
sched_tx
)(*))

455 
cbuf
 *
buf
;

456 
cbuf
 *
cuº
 = 
c⁄n
->
tx_q
.
√xt
;

457 
£¡_sz
;

458 
îr
 = 0, 
qÀn
 = 0;

459 
iovec
 
iov
[
C_TX_BUF_SZ
];

461 i‡(
	`u∆ikñy
(!
	`cbuf_li°_queue_Àn
(&
c⁄n
->
tx_q
))) {

465 i‡(
	`u∆ikñy
(
c⁄n
->
dód
)) {

466 
	`cbuf_li°_purge
(&
c⁄n
->
tx_q
);

467 
îr
 = -1;

468 
out
;

472 
cuº
 && 
qÀn
 < 
C_TX_BUF_SZ
) {

473 
iov
[
qÀn
].
iov_ba£
 = 
cuº
->
d©a
;

474 
iov
[
qÀn
++].
iov_Àn
 = 
cuº
->
Àn
;

475 
cuº
 = cuº->
√xt
;

478 
£¡_sz
 = 
	`wrôev
(
c⁄n
->
fd
, 
iov
, 
qÀn
);

480 i‡(
£¡_sz
 <= 0) {

481 i‡(
£¡_sz
 =0 || 
î∫o
 =
EAGAIN
) {

482 
c⁄n
->
tx_îr
++;

483 
sched_tx_evít
;

485 
c⁄n
->
dód
 = 1;

486 
îr
 = -1;

487 
out
;

490 
£¡_sz
 && (
buf
 = 
	`cbuf_li°_dequeue
(&
c⁄n
->
tx_q
))) {

491 i‡(
£¡_sz
 >
buf
->
Àn
) {

492 
£¡_sz
 -
buf
->
Àn
;

493 
	`‰ì_cbuf
(
buf
);

494 
c⁄n
->
tx_pkts
++;

496 
	`cbuf_puŒ
(
buf
, 
£¡_sz
);

497 
	`cbuf_li°_queue
(&
c⁄n
->
tx_q
, 
buf
);

498 
sched_tx_evít
;

502 
out
:

503  
îr
;

505 
sched_tx_evít
:

506 
	`sched_tx
(
c⁄n
);

507  
îr
;

508 
	}
}

512 
	$c_sockë_wrôe_block_lo›
(
c_c⁄n_t
 *
c⁄n
, 
cbuf
 *
buf
)

514 
£¡_sz
;

515 
îr
 = 0;

516 
ªåõs
 = 
C_MAX_TX_RETRIES
;

518 i‡(
	`u∆ikñy
(
c⁄n
->
dód
)) {

519 
îr
 = -1;

520 
out
;

523 
åy_agaö
:

524 
£¡_sz
 = 
	`£nd
(
c⁄n
->
fd
, 
buf
->
d©a
, buf->
Àn
, 
MSG_NOSIGNAL
);

525 i‡(
£¡_sz
 <= 0) {

526 i‡(
î∫o
 =
EINTR
Ë
ªåy
;

527 
c⁄n
->
tx_îr
++;

528 
c⁄n
->
dód
 = 1;

529 
out
;

532 i‡(
£¡_sz
 < 
buf
->
Àn
) {

533 
	`cbuf_puŒ
(
buf
, 
£¡_sz
);

534 
ªåy
;

537 
c⁄n
->
tx_pkts
++;

539 
	`‰ì_cbuf
(
buf
);

541 
out
:

542  
îr
;

544 
ªåy
:

545 i‡(
ªåõs
-- <= 0) {

546 
c⁄n
->
tx_îr
++;

547 
	`‰ì_cbuf
(
buf
);

548 
îr
 = -1;

549 
out
;

552 
åy_agaö
;

553 
	}
}

557 
c_sockë_ªad_block_lo›
(
fd
, *
¨g
, 
c_c⁄n_t
 *
c⁄n
,

558 c⁄° 
size_t
 
max_rcv_buf_sz
,

559 
c⁄n_¥oc_t
 
¥oc_msg
, (*
gë_d©a_Àn
)(*),

560 
	$boﬁ
 (*
vÆid©e_hdr
)(*), 
size_t
 
hdr_sz
)

562 
ssize_t
 
rd_sz
 = -1;

563 
cbuf
 *
b
 = 
NULL
;

564 
size_t
 
rcv_buf_sz
 = 
hdr_sz
;

566 
b
 = 
	`Æloc_cbuf
(
max_rcv_buf_sz
);

569 i‡(!
	`cbuf_èûroom
(
b
)) {

570 
cbuf
 *
√w
;

572 
√w
 = 
	`Æloc_cbuf
(
b
->
Àn
 + 
max_rcv_buf_sz
);

573 i‡(
b
->
Àn
) {

574 
	`mem˝y
(
√w
->
d©a
, 
b
->d©a, b->
Àn
);

575 
	`cbuf_put
(
√w
, 
b
->
Àn
);

577 
	`‰ì_cbuf
(
b
);

578 
b
 = 
√w
;

581 i‡(
c⁄n
->
c⁄n_ty≥
 =
C_CONN_TYPE_SOCK
) {

582 
rd_sz
 = 
	`ªcv
(
fd
, 
b
->
èû
, 
rcv_buf_sz
, 0);

584 
rd_sz
 = 
	`ªad
(
fd
, 
b
->
èû
, 
rcv_buf_sz
);

587 i‡(
rd_sz
 <= 0) {

588 
	`‰ì_cbuf
(
b
);

592 
	`cbuf_put
(
b
, 
rd_sz
);

594 i‡(
b
->
Àn
 >
rcv_buf_sz
) {

595 i‡(
b
->
Àn
 > 
hdr_sz
) {

596 i‡(
b
->
Àn
 >
	`gë_d©a_Àn
(b->
d©a
)) {

597 i‡(!
	`vÆid©e_hdr
(
b
->
d©a
)) {

598 
	`¥ötf
("%s: C‹ru±ed hódî", 
FN
);

602 
	`¥oc_msg
(
¨g
, 
b
);

603 
rd_sz
 = 
b
->
Àn
;

610 
rcv_buf_sz
 = 
	`gë_d©a_Àn
(
b
->
d©a
Ë- 
hdr_sz
;

614 i‡(
b
->
Àn
 < 
hdr_sz
) {

615 
rcv_buf_sz
 = 
hdr_sz
 - 
rd_sz
;

617 
rcv_buf_sz
 = 
	`gë_d©a_Àn
(
b
->
d©a
Ë- 
rd_sz
;

622  
rd_sz
;

623 
	}
}

	@common-libs/mul-lib/src/cbuf.c

19 
	~"c⁄fig.h
"

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<as£π.h
>

24 
	~"cbuf.h
"

27 
	$cbuf_li°_hód_öô
(
cbuf_hód
 *
hód
)

29 
hód
->
√xt
 = 
NULL
;

30 
hód
->
Àn
 = 0;

31 
	}
}

34 
	$cbuf_li°_queue_èû
(
cbuf_hód
 *
hód
,

35 
cbuf
 *
buf
)

37 
cbuf
 *
cuº
;

38 
cbuf
 **
¥ev
 = &
hód
->
√xt
;

40 (
cuº
 = *
¥ev
)) {

41 
¥ev
 = &
cuº
->
√xt
;

44 
buf
->
√xt
 = 
NULL
;

45 *
¥ev
 = 
buf
;

46 
hód
->
Àn
++;

47 
	}
}

50 
	$cbuf_li°_queue
(
cbuf_hód
 *
hód
,

51 
cbuf
 *
buf
)

53 
buf
->
√xt
 = 
hód
->next;

54 
hód
->
√xt
 = 
buf
;

55 
hód
->
Àn
++;

56 
	}
}

58 
cbuf
 *

59 
	$cbuf_li°_dequeue
(
cbuf_hód
 *
hód
)

61 
cbuf
 *
cuº
;

62 
cbuf
 **
¥ev
 = &
hód
->
√xt
;

64 i‡((
cuº
 = *
¥ev
)) {

65 *
¥ev
 = 
cuº
->
√xt
;

66 
hód
->
Àn
--;

69  
cuº
;

70 
	}
}

73 
	$cbuf_li°_purge
(
cbuf_hód
 *
hód
)

75 
cbuf
 *
cuº
 = 
hód
->
√xt
;

76 
cbuf
 *
¥ev
 = 
NULL
;

78 
cuº
) {

79 
¥ev
 = 
cuº
;

80 
cuº
 = cuº->
√xt
;

81 
hód
->
Àn
--;

82 
	`‰ì
(
¥ev
);

85 
hód
->
√xt
 = 
NULL
;

87 
	}
}

89 
cbuf
 *

90 
	$Æloc_cbuf
(
size_t
 
Àn
)

92 
cbuf
 *
b
;

93 
size_t
 
Æloc_Àn
 = 
	`CBUF_ALIGN_SZ
(
Àn
 + 
CBUF_SZ
);

95 
b
 = 
	`mÆloc
(
Æloc_Àn
);

96 
	`as£π
(
b
);

98 
b
->
d©a
 = (*)(b + 1);

99 
b
->
èû
 = b->
d©a
;

100 
b
->
íd
 = (*)b + 
Æloc_Àn
;

101 
b
->
Àn
 = 0;

102 
b
->
dpid
 = 0;

104  
b
;

105 
	}
}

108 
	$cbuf_put
(
cbuf
 *
b
, 
size_t
 
Àn
)

110 *
tmp
 = 
b
->
èû
;

112 
	`as£π
(
b
->
èû
+
Àn
 <b->
íd
);

114 
b
->
èû
 +
Àn
;

115 
b
->
Àn
 +=Üen;

117  
tmp
;

118 
	}
}

121 
	$cbuf_puŒ
(
cbuf
 *
b
, 
size_t
 
Àn
)

123 
	`as£π
(
b
->
d©a
 + 
Àn
 <b->
íd
);

125 
b
->
d©a
 +
Àn
;

126 
b
->
Àn
 -=Üen;

128  (*)(
b
->
d©a
);

129 
	}
}

132 
	$cbuf_push
(
cbuf
 *
b
, 
size_t
 
Àn
)

134 
	`as£π
(
	`cbuf_hódroom
(
b
Ë>
Àn
);

136 
b
->
d©a
 -
Àn
;

137 
b
->
Àn
 +=Üen;

139  (*)(
b
->
d©a
);

140 
	}
}

142 
size_t


143 
	$cbuf_hódroom
(
cbuf
 *
b
)

145 
room
;

147 
	`as£π
(
b
 && b->
d©a
);

149 
room
 = (
b
->
d©a
 - (*)bË+ 
CBUF_SZ
;

150 i‡(
room
 < 0)  0;

152  
room
;

153 
	}
}

155 
size_t


156 
	$cbuf_èûroom
(
cbuf
 *
b
)

158  
b
->
íd
 - b->
èû
;

159 
	}
}

161 
cbuf
 *

162 
	$cbuf_ªÆloc_èûroom
(
cbuf
 *
b
, 
size_t
 
room
, 
do_‰ì
)

164 
cbuf
 *
ﬁd
 = 
b
;

166 i‡(
room
 < 
	`cbuf_èûroom
(
b
)) {

167 
b
 = 
	`Æloc_cbuf
(
ﬁd
->
Àn
 + 
room
);

168 
	`cbuf_put
(
b
, 
ﬁd
->
Àn
);

169 
	`mem˝y
(
b
->
d©a
, 
ﬁd
->d©a, old->
Àn
);

170 i‡(
do_‰ì
)

171 
	`‰ì
(
ﬁd
);

174  
b
;

175 
	}
}

177 
cbuf
 *

178 
	$cbuf_ªÆloc_hódroom
(
cbuf
 *
b
, 
size_t
 
room
, 
do_‰ì
)

180 
cbuf
 *
ﬁd
 = 
b
;

183 
b
 = 
	`Æloc_cbuf
(
ﬁd
->
Àn
 + 
room
);

184 
	`cbuf_put
(
b
, 
ﬁd
->
Àn
 + 
room
);

185 
	`cbuf_puŒ
(
b
, 
room
);

186 
	`mem˝y
(
b
->
d©a
, 
ﬁd
->d©a, old->
Àn
);

188 i‡(
do_‰ì
)

189 
	`‰ì
(
ﬁd
);

192  
b
;

193 
	}
}

196 
	$‰ì_cbuf
(
cbuf
 *
b
)

198 
	`‰ì
(
b
);

199 
	}
}

	@common-libs/mul-lib/src/idx_pool.c

20 
	~"c⁄fig.h
"

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<°döt.h
>

25 
	~<limôs.h
>

27 
	~"lock.h
"

28 
	~"idx_poﬁ.h
"

32 
	$ùoﬁ_gë
(
ùoﬁ_hdl_t
 *
poﬁ
, *
¥iv
)

34 
√xt_idx
;

36 
	`c_wr_lock
(&
poﬁ
->
lock
);

38 
√xt_idx
 = 
poﬁ
->next_idx;

40 i‡(
√xt_idx
 == -1) {

41 
	`c_wr_u∆ock
(&
poﬁ
->
lock
);

45 
poﬁ
->
√xt_idx
 =Öoﬁ->
idx_¨r
[next_idx].next_idx;

46 
poﬁ
->
idx_¨r
[
√xt_idx
].
¥iv
 =Öriv;

48 
	`c_wr_u∆ock
(&
poﬁ
->
lock
);

50  
√xt_idx
;

51 
	}
}

54 
	$ùoﬁ_put
(
ùoﬁ_hdl_t
 *
poﬁ
, 
ªt_idx
)

57 
	`c_wr_lock
(&
poﬁ
->
lock
);

59 i‡(
ªt_idx
 < 0 ||Ñë_idx > 
poﬁ
->
max_idx
) {

60 
	`c_wr_u∆ock
(&
poﬁ
->
lock
);

64 
poﬁ
->
idx_¨r
[
ªt_idx
].
√xt_idx
 =Öool->next_idx;

65 
poﬁ
->
idx_¨r
[
ªt_idx
].
¥iv
 = 
NULL
;

66 
poﬁ
->
√xt_idx
 = 
ªt_idx
;

68 
	`c_wr_u∆ock
(&
poﬁ
->
lock
);

71 
	}
}

75 
ùoﬁ_hdl_t
 *

76 
	$ùoﬁ_¸óã
(
size_t
 
sz
, 
uöt32_t
 
°¨t_idx
)

78 
ùoﬁ_hdl_t
 *
poﬁ
;

79 
idx
 = 0;

81 i‡(
sz
 > 
INT_MAX
) {

82  
NULL
;

85 
poﬁ
 = 
	`ˇŒoc
(1, (
ùoﬁ_hdl_t
));

86 i‡(
poﬁ
 =
NULL
) {

87  
NULL
;

91 
poﬁ
->
idx_¨r
 = 
	`ˇŒoc
(1, 
sz
 * (
ùoﬁ_¨r_t
));

92 i‡(
poﬁ
->
idx_¨r
 =
NULL
) {

93 
	`‰ì
(
poﬁ
);

94  
NULL
;

97 
	`c_rw_lock_öô
(&
poﬁ
->
lock
);

99 
poﬁ
->
max_idx
 = 
°¨t_idx
 + 
sz
 - 1;

100 
poﬁ
->
√xt_idx
 = 
°¨t_idx
;

102 ; 
idx
 < 
sz
; idx++) {

103 
poﬁ
->
idx_¨r
[
idx
].
√xt_idx
 = idx+1;

106 
poﬁ
->
idx_¨r
[
idx
-1].
√xt_idx
 = -1;

108  
poﬁ
;

109 
	}
}

112 
	$ùoﬁ_dñëe
(
ùoﬁ_hdl_t
 *
poﬁ
)

114 i‡(
poﬁ
 =
NULL
) {

118 i‡(
poﬁ
->
idx_¨r
) {

119 
	`‰ì
(
poﬁ
->
idx_¨r
);

122 
	`‰ì
(
poﬁ
);

123 
	}
}

126 
	$ùoﬁ_idx_¥iv
(
ùoﬁ_hdl_t
 *
poﬁ
, 
idx
)

134 i‡(!
poﬁ
 || 
idx
 >Öoﬁ->
max_idx
) {

135  
NULL
;

138  
poﬁ
->
idx_¨r
[
idx
].
¥iv
;

139 
	}
}

	@common/config.h

5 
	#HAVE_ASM_TYPES_H
 1

	)

8 
	#HAVE_DAEMON
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_DUP2
 1

	)

17 
	#HAVE_EVENT2_EVENT_H
 1

	)

20 
	#HAVE_FCNTL
 1

	)

23 
	#HAVE_FTRUNCATE
 1

	)

26 
	#HAVE_GETCWD
 1

	)

29 
	#HAVE_GETHOSTBYNAME
 1

	)

32 
	#HAVE_GETIFADDRS
 1

	)

35 
	#HAVE_GETPAGESIZE
 1

	)

38 
	#HAVE_GETTIMEOFDAY
 1

	)

44 
	#HAVE_IF_INDEXTONAME
 1

	)

47 
	#HAVE_IF_NAMETOINDEX
 1

	)

50 
	#HAVE_INET_ATON
 1

	)

53 
	#HAVE_INET_NTOA
 1

	)

56 
	#HAVE_INET_NTOP


	)

59 
	#HAVE_INET_PTON


	)

62 
	#HAVE_INTTYPES_H
 1

	)

65 
	#HAVE_LIBCRYPT
 1

	)

68 
	#HAVE_LIMITS_H
 1

	)

71 
	#HAVE_LINUX_VERSION_H
 1

	)

75 
	#HAVE_MALLOC
 1

	)

78 
	#HAVE_MEMCHR
 1

	)

81 
	#HAVE_MEMMOVE
 1

	)

84 
	#HAVE_MEMORY_H
 1

	)

87 
	#HAVE_MEMSET
 1

	)

90 
	#HAVE_MKFIFO
 1

	)

93 
	#HAVE_NETDB_H
 1

	)

96 
	#HAVE_NETINET_IN_H
 1

	)

99 
	#HAVE_PTHREAD_H
 1

	)

102 
	#HAVE_SELECT
 1

	)

105 
	#HAVE_SIGNAL_H
 1

	)

108 
	#HAVE_SNPRINTF
 1

	)

111 
	#HAVE_SOCKET
 1

	)

114 
	#HAVE_STDBOOL_H
 1

	)

117 
	#HAVE_STDINT_H
 1

	)

120 
	#HAVE_STDLIB_H
 1

	)

123 
	#HAVE_STRCASECMP
 1

	)

126 
	#HAVE_STRCHR
 1

	)

129 
	#HAVE_STRCSPN
 1

	)

132 
	#HAVE_STRDUP
 1

	)

135 
	#HAVE_STRERROR
 1

	)

138 
	#HAVE_STRINGS_H
 1

	)

141 
	#HAVE_STRING_H
 1

	)

150 
	#HAVE_STRNCASECMP
 1

	)

153 
	#HAVE_STRNDUP
 1

	)

156 
	#HAVE_STRNLEN
 1

	)

159 
	#HAVE_STROPTS_H
 1

	)

162 
	#HAVE_STRRCHR
 1

	)

165 
	#HAVE_STRSPN
 1

	)

168 
	#HAVE_STRSTR
 1

	)

171 
	#HAVE_STRTOL
 1

	)

174 
	#HAVE_STRTOUL
 1

	)

177 
	#HAVE_STRTOULL
 1

	)

183 
	#HAVE_SYS_PARAM_H
 1

	)

186 
	#HAVE_SYS_SELECT_H
 1

	)

189 
	#HAVE_SYS_SOCKET_H
 1

	)

192 
	#HAVE_SYS_STAT_H
 1

	)

195 
	#HAVE_SYS_TIMES_H
 1

	)

198 
	#HAVE_SYS_TIME_H
 1

	)

201 
	#HAVE_SYS_TYPES_H
 1

	)

204 
	#HAVE_TIME_H
 1

	)

207 
	#HAVE_UNAME
 1

	)

210 
	#HAVE_UNISTD_H
 1

	)

213 
	#HAVE_VSNPRINTF
 1

	)

216 
	#HAVE__BOOL
 1

	)

220 
	#LT_OBJDIR
 ".libs/"

	)

226 
	#PACKAGE
 "mul"

	)

229 
	#PACKAGE_BUGREPORT
 "hâp://sour˚f‹ge.√t/¥oje˘s/mul/"

	)

232 
	#PACKAGE_NAME
 "MuL"

	)

235 
	#PACKAGE_STRING
 "MuL 1.1"

	)

238 
	#PACKAGE_TARNAME
 "mul"

	)

241 
	#PACKAGE_URL
 ""

	)

244 
	#PACKAGE_VERSION
 "1.1"

	)

247 
	#STDC_HEADERS
 1

	)

250 #i‚de‡
_ALL_SOURCE


251 
	#_ALL_SOURCE
 1

	)

254 #i‚de‡
_GNU_SOURCE


255 
	#_GNU_SOURCE
 1

	)

258 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


259 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

262 #i‚de‡
_TANDEM_SOURCE


263 
	#_TANDEM_SOURCE
 1

	)

266 #i‚de‡
__EXTENSIONS__


267 
	#__EXTENSIONS__
 1

	)

272 
	#VERSION
 "1.1"

	)

301 #i‚de‡
__˝lu•lus


	@common/mul_app_interface.h

20 #i‚de‡
__MUL_APP_INTERFACE_H__


21 
	#__MUL_APP_INTERFACE_H__


	)

23 (*
	töôˇŒ_t
)(*);

24 
öôˇŒ_t
 
__°¨t_modöô_£c
, 
__°›_modöô_£c
;

25 
	#d©a_©å
 
	`__©åibuã__
 ((
	`£˘i⁄
 ("modöô_£c")))

	)

26 
	#moduÀ_öô
(
x
Ë
öôˇŒ_t
 
_
##x 
d©a_©å
 = 
	)
x

28 
öôˇŒ_t
 
__°¨t_modvtyöô_£c
, 
__°›_modvtyöô_£c
;

29 
	#vty_©å
 
	`__©åibuã__
 ((
	`£˘i⁄
 ("modvtyöô_£c")))

	)

30 
	#moduÀ_vty_öô
(
x
Ë
öôˇŒ_t
 
_
##x 
vty_©å
 = 
	)
x

32 
	~"›íÊow.h
"

35 
	ec_≠p_evít
 {

36 
C_DP_REG
,

37 
C_DP_UNREG
,

38 
C_PACKET_IN
,

39 
C_PORT_CHANGE
,

40 
C_FLOW_REMOVED
,

41 
C_FLOW_MOD_FAILED
,

42 
C_EVENT_MAX


43 } 
	tc_≠p_evít_t
;

44 
	#C_APP_ALL_EVENTS
 ((1 << 
C_EVENT_MAX
Ë- 1)

	)

46 
	#C_OFP_VERSION
 (0x„)

	)

47 
	#C_OFPT_BASE
 (0xc0)

	)

48 
	#C_OFPT_SWITCH_ADD
 (
OFPT_FEATURES_REPLY
)

	)

49 
	#C_OFPT_PACKET_IN
 (
OFPT_PACKET_IN
)

	)

50 
	#C_OFPT_PACKET_OUT
 (
OFPT_PACKET_OUT
)

	)

51 
	#C_OFPT_PORT_STATUS
 (
OFPT_PORT_STATUS
)

	)

52 
	#C_OFPT_SWITCH_DELETE
 (
C_OFPT_BASE
)

	)

53 
	#C_OFPT_FLOW_MOD
 (
OFPT_FLOW_MOD
)

	)

54 
	#C_OFPT_PACKET_IN
 (
OFPT_PACKET_IN
)

	)

55 
	#C_OFPT_FLOW_REMOVED
 (
OFPT_FLOW_REMOVED
)

	)

56 
	#C_OFPT_ERR_MSG
 (
OFPT_ERROR
)

	)

57 
	#C_OFPT_REG_APP
 (
C_OFPT_BASE
 + 1)

	)

58 
	#C_OFPT_UNREG_APP
 (
C_OFPT_BASE
 + 2)

	)

59 
	#C_OFPT_RECONN_APP
 (
C_OFPT_BASE
 + 3)

	)

60 
	#C_OFPT_NOCONN_APP
 (
C_OFPT_BASE
 + 4)

	)

61 
	#C_OFPT_SET_FPOPS
 (
C_OFPT_BASE
 + 5)

	)

62 
	#C_OFPT_AUX_CMD
 (
C_OFPT_BASE
 + 6)

	)

64 
	sc_oÂ_swôch_dñëe
 {

65 
oÂ_hódî
 
hódî
;

66 
uöt64_t
 
d©≠©h_id
;

67 
uöt32_t
 
sw_Æüs
;

68 
uöt32_t
 
∑d
;

70 
	`OFP_ASSERT
((
c_oÂ_swôch_dñëe
) == (24));

72 
	sc_oÂ_p‹t_°©us
 {

73 
oÂ_hódî
 
hódî
;

74 
uöt64_t
 
d©≠©h_id
;

75 
uöt32_t
 
sw_Æüs
;

76 
uöt32_t
 
c⁄fig_mask
;

77 
uöt32_t
 
°©e_mask
;

78 
uöt32_t
 
∑d
;

79 
uöt8_t
 
ªas⁄
;

80 
uöt8_t
 
∑d1
[7];

81 
oÂ_phy_p‹t
 
desc
;

83 
	`OFP_ASSERT
((
c_oÂ_p‹t_°©us
)==(
oÂ_p‹t_°©us
)+24);

85 
	sÊow
 {

86 
uöt32_t
 
nw_§c
;

87 
uöt32_t
 
nw_d°
;

88 
uöt16_t
 
ö_p‹t
;

89 
uöt16_t
 
dl_vœn
;

90 
uöt16_t
 
dl_ty≥
;

91 
uöt16_t
 
ç_§c
;

92 
uöt16_t
 
ç_d°
;

93 
uöt8_t
 
dl_§c
[6];

94 
uöt8_t
 
dl_d°
[6];

95 
uöt8_t
 
dl_vœn_p˝
;

96 
uöt8_t
 
nw_tos
;

97 
uöt8_t
 
nw_¥Ÿo
;

98 
	#FL_DFL_GW
 
∑d
[0]

	)

99 
uöt8_t
 
∑d
[3];

101 
	`OFP_ASSERT
((
Êow
)==36);

103 
	sc_oÂ_∑ckë_ö
 {

104 
oÂ_hódî
 
hódî
;

105 
uöt64_t
 
d©≠©h_id
;

106 
uöt32_t
 
sw_Æüs
;

107 
uöt32_t
 
∑d
;

108 
Êow
 
Ê
;

109 
uöt32_t
 
buf„r_id
;

110 
uöt16_t
 
tŸÆ_Àn
;

111 
uöt16_t
 
ö_p‹t
;

112 
uöt8_t
 
ªas⁄
;

113 
uöt8_t
 
∑d1
;

114 
uöt8_t
 
d©a
[0];

121 
	`OFP_ASSERT
((
c_oÂ_∑ckë_ö
) == (72));

124 
	sc_oÂ_Êow_mod
 {

125 
oÂ_hódî
 
hódî
;

126 
uöt64_t
 
d©≠©h_id
;

127 
uöt32_t
 
sw_Æüs
;

129 
Êow
 flow;

130 
	#C_FL_ENT_STATIC
 (0x1)

	)

131 
	#C_FL_ENT_CLONE
 (0x2)

	)

132 
	#C_FL_ENT_LOCAL
 (0x4)

	)

133 
	#C_FL_ENT_NOCACHE
 (0x8)

	)

134 
	#C_FL_ENT_NOSYNC
 (0x10)

	)

135 
	#C_FL_ENT_GSTATS
 (0x20)

	)

136 
	#C_FL_ENT_SWALIAS
 (0x40)

	)

137 
uöt8_t
 
Êags
;

138 
	#C_OFPC_ADD
 0

	)

139 
	#C_OFPC_DEL
 1

	)

140 
uöt8_t
 
comm™d
;

141 
	#C_FL_PRIO_DFL
 0

	)

142 
	#C_FL_PRIO_FWD
 1

	)

143 
	#C_FL_PRIO_DRP
 2

	)

144 
	#C_FL_PRIO_EXM
 65535

	)

145 
uöt16_t
 
¥i‹ôy
;

146 
uöt32_t
 
wûdˇrds
;

147 
uöt16_t
 
ôimeo
;

148 
uöt16_t
 
htimeo
;

149 
uöt16_t
 
mod_Êags
;

150 
uöt16_t
 
›‹t
;

151 
uöt32_t
 
buf„r_id
;

152 
uöt32_t
 
∑d
;

153 
oÂ_a˘i⁄_hódî
 
a˘i⁄s
[0];

155 
	`OFP_ASSERT
((
c_oÂ_Êow_mod
) == (80));

158 
	sc_oÂ_Êow_ªmoved
 {

159 
oÂ_hódî
 
hódî
;

160 
uöt64_t
 
d©≠©h_id
;

161 
Êow
 flow;

162 
uöt32_t
 
wûdˇrds
;

163 
uöt64_t
 
cookõ
;

164 
uöt16_t
 
¥i‹ôy
;

165 
uöt8_t
 
ªas⁄
;

166 
uöt8_t
 
∑d
[1];

167 
uöt32_t
 
duøti⁄_£c
;

168 
uöt32_t
 
duøti⁄_n£c
;

170 
uöt16_t
 
idÀ_timeout
;

171 
uöt8_t
 
∑d2
[2];

172 
uöt64_t
 
∑ckë_cou¡
;

173 
uöt64_t
 
byã_cou¡
;

175 
	`OFP_ASSERT
((
oÂ_Êow_ªmoved
) == 88);

177 
	sc_oÂ_∑ckë_out
 {

178 
oÂ_hódî
 
hódî
;

179 
uöt64_t
 
d©≠©h_id
;

180 
uöt32_t
 
buf„r_id
;

181 
uöt16_t
 
ö_p‹t
;

182 
uöt16_t
 
a˘i⁄s_Àn
;

183 
oÂ_a˘i⁄_hódî
 
a˘i⁄s
[0];

188 
	`OFP_ASSERT
((
c_oÂ_∑ckë_out
) == 24);

190 
	sc_oÂ_ªgi°î_≠p
 {

191 
oÂ_hódî
 
hódî
;

192 
	#C_MAX_APP_STRLEN
 64

	)

193 
≠p_«me
[
C_MAX_APP_STRLEN
];

194 
	#C_APP_ALL_SW
 0x01

	)

195 
	#C_APP_REMOTE
 0x02

	)

196 
	#C_APP_AUX_REMOTE
 0x04

	)

197 
uöt32_t
 
≠p_Êags
;

198 
uöt32_t
 
ev_mask
;

199 
uöt32_t
 
dpid
;

200 
uöt32_t
 
∑d
;

201 
uöt64_t
 
dpid_li°
[0];

203 
	`OFP_ASSERT
((
c_oÂ_ªgi°î_≠p
) == 88);

205 
	sc_oÂ_uƒegi°î_≠p
 {

206 
oÂ_hódî
 
hódî
;

207 
≠p_«me
[
C_MAX_APP_STRLEN
];

210 
	`OFP_ASSERT
((
c_oÂ_uƒegi°î_≠p
) == 72);

212 
	sc_oÂ_£t_Â_›s
 {

213 
oÂ_hódî
 
hódî
;

214 
uöt64_t
 
d©≠©h_id
;

215 
	#C_FP_TYPE_DFL
 0

	)

216 
	#C_FP_TYPE_L2
 1

	)

217 
uöt32_t
 
Â_ty≥
;

218 
uöt32_t
 
∑d
;

220 
	`OFP_ASSERT
((
c_oÂ_£t_Â_›s
) == 24);

222 
	sc_oÂ_aux≠p_cmd
 {

223 
oÂ_hódî
 
hódî
;

225 
	#C_AUX_CMD_SUCCESS
 (0)

	)

226 
	#C_AUX_CMD_ECHO
 (
C_AUX_CMD_SUCCESS
)

	)

227 
	#C_AUX_CMD_MUL_CORE_BASE
 (1)

	)

228 
	#C_AUX_CMD_MUL_GET_SWITCHES
 (
C_AUX_CMD_MUL_CORE_BASE
 + 1)

	)

229 
	#C_AUX_CMD_MUL_GET_SWITCHES_REPLY
 (
C_AUX_CMD_MUL_CORE_BASE
 + 2)

	)

230 
	#C_AUX_CMD_MUL_GET_SWITCH_DETAIL
 (
C_AUX_CMD_MUL_CORE_BASE
 + 3)

	)

231 
	#C_AUX_CMD_MUL_GET_APP_FLOW
 (
C_AUX_CMD_MUL_CORE_BASE
 + 4)

	)

232 
	#C_AUX_CMD_MUL_GET_ALL_FLOWS
 (
C_AUX_CMD_MUL_CORE_BASE
 + 5)

	)

233 
	#C_AUX_CMD_TR_BASE
 (
C_AUX_CMD_MUL_CORE_BASE
 + 1000)

	)

234 
	#C_AUX_CMD_TR_GET_NEIGH
 (
C_AUX_CMD_TR_BASE
 + 1)

	)

235 
	#C_AUX_CMD_TR_NEIGH_STATUS
 (
C_AUX_CMD_TR_GET_NEIGH
 + 1)

	)

236 
	#C_AUX_CMD_FAB_BASE
 (
C_AUX_CMD_MUL_CORE_BASE
 + 200)

	)

237 
	#C_AUX_CMD_FAB_HOST_ADD
 (
C_AUX_CMD_FAB_BASE
 + 1)

	)

238 
	#C_AUX_CMD_FAB_HOST_DEL
 (
C_AUX_CMD_FAB_BASE
 + 2)

	)

239 
	#C_AUX_CMD_FAB_SHOW_ACTIVE_HOSTS
 (
C_AUX_CMD_FAB_BASE
 + 3)

	)

240 
	#C_AUX_CMD_FAB_SHOW_INACTIVE_HOSTS
 (
C_AUX_CMD_FAB_BASE
 + 4)

	)

241 
	#C_AUX_CMD_FAB_SHOW_ROUTES
 (
C_AUX_CMD_FAB_BASE
 + 5)

	)

242 
	#C_AUX_CMD_FAB_ROUTE
 (
C_AUX_CMD_FAB_BASE
 + 6)

	)

243 
uöt32_t
 
cmd_code
;

244 
uöt32_t
 
∑d
;

245 
uöt8_t
 
d©a
[0];

247 
	`OFP_ASSERT
((
c_oÂ_aux≠p_cmd
) == 16);

249 
	sc_oÂ_ªq_dpid_©å
 {

250 
uöt64_t
 
d©≠©h_id
;

252 
	`OFP_ASSERT
((
c_oÂ_ªq_dpid_©å
) == 8);

254 
	sc_oÂ_p‹t_√igh
 {

255 
uöt16_t
 
p‹t_no
;

256 
	#COFP_NEIGH_SWITCH
 0x1

	)

257 
uöt16_t
 
√igh_¥e£¡
;

258 
uöt16_t
 
√igh_p‹t
;

259 
uöt16_t
 
∑d
;

260 
uöt64_t
 
√igh_dpid
;

262 
	`OFP_ASSERT
((
c_oÂ_p‹t_√igh
) == 16);

264 
	sc_oÂ_swôch_√igh
 {

265 
c_oÂ_ªq_dpid_©å
 
swôch_id
;

266 
uöt8_t
 
d©a
[0];

268 
	`OFP_ASSERT
((
c_oÂ_swôch_√igh
) == 8);

270 
	#SW_INIT
 (0)

	)

271 
	#SW_FEATURE_NEGO
 (1)

	)

272 
	#SW_REGISTERED
 (2)

	)

273 
	#SW_DEAD
 (3)

	)

275 
	sc_oÂ_swôch_brõf
 {

276 
c_oÂ_ªq_dpid_©å
 
swôch_id
;

277 
uöt32_t
 
n_p‹ts
;

278 
uöt32_t
 
°©e
;

279 
	#OFP_CONN_DESC_SZ
 (32)

	)

280 
c⁄n_°r
[
OFP_CONN_DESC_SZ
];

282 
	`OFP_ASSERT
((
c_oÂ_swôch_brõf
) == 48);

284 
	sc_oÂ_ho°_mod
 {

285 
c_oÂ_ªq_dpid_©å
 
swôch_id
;

286 
uöt32_t
 
∑d
;

287 
Êow
 
ho°_Êow
;

289 
	`OFP_ASSERT
((
c_oÂ_ho°_mod
) == 48);

291 
	sc_oÂ_rouã
 {

292 
c_oÂ_ho°_mod
 
§c_ho°
;

293 
c_oÂ_ho°_mod
 
d°_ho°
;

294 
uöt8_t
 
rouã_löks
[0];

296 
	`OFP_ASSERT
((
c_oÂ_rouã
) == 96);

298 
	sc_oÂ_rouã_lök
 {

299 
uöt64_t
 
d©≠©h_id
;

300 
uöt16_t
 
§c_lök
;

301 
uöt16_t
 
d°_lök
;

302 
uöt32_t
 
∑d
;

304 
	`OFP_ASSERT
((
c_oÂ_rouã_lök
) == 16);

306 
	#C_OFP_ERR_CODE_BASE
 (100)

	)

309 
	#OFPBRC_BAD_DPID
 (
C_OFP_ERR_CODE_BASE
)

	)

310 
	#OFPBRC_BAD_APP_REG
 (
C_OFP_ERR_CODE_BASE
 + 1)

	)

311 
	#OFPBRC_BAD_APP_UREG
 (
C_OFP_ERR_CODE_BASE
 + 2)

	)

312 
	#OFPBRC_BAD_NO_INFO
 (
C_OFP_ERR_CODE_BASE
 + 3)

	)

313 
	#OFPBRC_BAD_GENERIC
 (
C_OFP_ERR_CODE_BASE
 + 4)

	)

316 
	#OFPBAC_BAD_GENERIC
 (
C_OFP_ERR_CODE_BASE
)

	)

319 
	#OFPFMFC_BAD_FLAG
 (
C_OFP_ERR_CODE_BASE
)

	)

320 
	#OFPFMFC_GENERIC
 (
C_OFP_ERR_CODE_BASE
 + 1)

	)

322 
	#C_OFP_MAX_ERR_LEN
 128

	)

324 
	#C_ADD_ALIAS_IN_SWADD
(
sw_add
, 
Æüs
) \

326 *((*)(
sw_add
->
∑d
)Ë
	`ht⁄l
(
Æüs
); \

327 
	}
} 0)

	)

329 
	#C_GET_ALIAS_IN_SWADD
(
sw_add
Ë
	`¡ohl
(*((*)(sw_add->
∑d
)))

	)

331 
c_oÂ_swôch_dñëe
 
	tc_oÂ_swôch_dñëe_t
;

332 
oÂ_swôch_„©uªs
 
	tc_oÂ_swôch_add_t
;

333 
c_oÂ_∑ckë_ö
 
	tc_oÂ_∑ckë_ö_t
;;

334 
c_oÂ_p‹t_°©us
 
	tc_oÂ_p‹t_°©us_t
;

335 
c_oÂ_Êow_mod
 
	tc_oÂ_Êow_mod_t
;

336 
c_oÂ_∑ckë_out
 
	tc_oÂ_∑ckë_out_t
;

337 
c_oÂ_ªgi°î_≠p
 
	tc_oÂ_ªgi°î_≠p_t
;

338 
c_oÂ_uƒegi°î_≠p
 
	tc_oÂ_uƒegi°î_≠p_t
;

339 
c_oÂ_£t_Â_›s
 
	tc_oÂ_£t_Â_›s_t
;

340 
oÂ_îr‹_msg
 
	tc_oÂ_îr‹_msg_t
;

341 
c_oÂ_aux≠p_cmd
 
	tc_oÂ_aux≠p_cmd_t
;

342 
c_oÂ_ªq_dpid_©å
 
	tc_oÂ_ªq_dpid_©å_t
;

343 
c_oÂ_swôch_√igh
 
	tc_oÂ_swôch_√igh_t
;

344 
c_oÂ_p‹t_√igh
 
	tc_oÂ_p‹t_√igh_t
;

345 
c_oÂ_swôch_brõf
 
	tc_oÂ_swôch_brõf_t
;

346 
c_oÂ_ho°_mod
 
	tc_oÂ_ho°_mod_t
;

347 
c_oÂ_rouã
 
	tc_oÂ_rouã_t
;

348 
c_oÂ_rouã_lök
 
	tc_oÂ_rouã_lök_t
;

350 
mul_≠p_‰ì_buf
(*
b
);

351 
mul_ªgi°î_≠p
(*
≠p
, *
≠p_«me
, 
uöt32_t
 
≠p_Êags
,

352 
uöt32_t
 
ev_mask
, uöt32_à
n_dpid
, 
uöt64_t
 *
dpid_li°
,

353 (*
ev_cb
)(*
≠p_¨g
, *
pkt_¨g
));

354 
	`mul_uƒegi°î_≠p
(*
≠p_«me
);

355 
	`mul_≠p_comm™d_h™dÀr
(*
≠p_«me
,*
b
);

356 
	`mul_≠p_£nd_Êow_add
(*
≠p_«me
, *
sw_¨g
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

357 
uöt32_t
 
buf„r_id
, *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
,

358 
uöt16_t
 
ôimeo
, uöt16_à
htimeo
, 
uöt32_t
 
wûdˇrds
,

359 
uöt16_t
 
¥io
, 
uöt8_t
 
Êag
);

360 
	`mul_£rvi˚_£nd_Êow_add
(*
£rvi˚
,

361 
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

362 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

363 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
,

364 
uöt8_t
 
Êags
);

365 
	`mul_≠p_£nd_Êow_dñ
(*
≠p_«me
, *
sw_¨g
, 
uöt64_t
 
dpid
,

366 
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
,

367 
uöt16_t
 
p‹t
, uöt16_à
¥io
, 
uöt8_t
 
Êag
);

368 
	`mul_£rvi˚_£nd_Êow_dñ
(*
£rvi˚
,

369 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

370 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
,

371 
uöt16_t
 
¥io
, 
uöt8_t
 
Êags
);

372 
	`mul_≠p_£nd_pkt_out
(*
sw_¨g
, 
uöt64_t
 
dpid
, *
∑rms
);

373 *
	`mul_≠p_¸óã_£rvi˚
(*
«me
,

374 (*
£rvi˚_h™dÀr
)(*
£rvi˚
,

375 
cbuf
 *
msg
));

376 *
	`mul_≠p_gë_£rvi˚
(*
«me
);

377 *
	`mul_≠p_gë_£rvi˚_nŸify
(*
«me
,

378 (*
c⁄n_upd©e
)(*
£rvi˚
,

379 
c⁄n_evít
),

380 
boﬁ
 
ªåy_c⁄n
);

381 
	`mul_≠p_de°roy_£rvi˚
(*
£rvi˚
);

	@common/mul_app_main.c

19 
	~"mul_comm⁄.h
"

20 
	~"mul_vty.h
"

21 
	~"mul_≠p_maö.h
"

22 
	~"mul_£rvi˚s.h
"

24 
	sc_≠p_£rvi˚
 {

25 
	m£rvi˚_«me
[
MAX_SERV_NAME_LEN
];

26 
uöt16_t
 
	mp‹t
;

27 * (*
	m£rvi˚_¥iv_öô
)();

28 }
	gc_≠p_£rvi˚_tbl
[] = {

29 { 
MUL_TR_SERVICE_NAME
, 
MUL_TR_SERVICE_PORT
, 
NULL
 },

30 { 
MUL_ROUTE_SERVICE_NAME
, 0, 
mul_rouã_£rvi˚_gë
 },

31 { 
MUL_CORE_SERVICE_NAME
, 
C_AUX_APP_PORT
, 
NULL
 },

32 { 
MUL_FAB_CLI_SERVICE_NAME
, 
MUL_FAB_CLI_PORT
, 
NULL
 }

35 
c_≠p_sock_öô
(
c_≠p_hdl_t
 *
hdl
, *
£rvî
);

38 
c_≠p_hdl_t
 
	gc_≠p_maö_hdl
;

39 *
	g£rvî
 = "127.0.0.1";

41 
›ti⁄
 
	gl⁄g›ts
[] =

43 { "d´m⁄", 
no_¨gumít
, 
NULL
, 'd'},

44 { "hñp", 
no_¨gumít
, 
NULL
, 'h'},

45 { "£rvî-ù", 
ªquúed_¨gumít
, 
NULL
, 's'},

46 { "vty-shñl", 
ªquúed_¨gumít
, 
NULL
, 'V'},

51 
	$ußge
(*
¥og«me
, 
°©us
)

53 
	`¥ötf
("%†O±i⁄s:\n", 
¥og«me
);

54 
	`¥ötf
("-d : Daemon Mode\n");

55 
	`¥ötf
("-s <server-ip> : Server ipáddressÅo connect\n");

56 
	`¥ötf
("-V <vty-port> : vtyÖortáddress. (enables vty shell)\n");

57 
	`¥ötf
("-h : Help\n");

59 
	`exô
(
°©us
);

60 
	}
}

63 
	$mul_≠p_‰ì_buf
(*
b
 
UNUSED
)

66 
	}
}

69 
	$c_≠p_wrôe_evít_sched
(*
c⁄n_¨g
)

71 
c_c⁄n_t
 *
c⁄n
 = 
c⁄n_¨g
;

72 
	`evít_add
((
evít
 *)(
c⁄n
->
wr_evít
), 
NULL
);

73 
	}
}

76 
	$c_≠p_wrôe_evít
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evíts
 UNUSED, *
¨g
)

78 
c_c⁄n_t
 *
c⁄n
 = 
¨g
;

80 
	`c_wr_lock
(&
c⁄n
->
c⁄n_lock
);

81 
	`c_sockë_wrôe_n⁄block_lo›
(
c⁄n
, 
c_≠p_wrôe_evít_sched
);

82 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

83 
	}
}

86 
	$c_≠p_tx
(*
c⁄n_¨g
, 
cbuf
 *
b
)

88 
c_c⁄n_t
 *
c⁄n
 = 
c⁄n_¨g
;

90 
	`c_wr_lock
(&
c⁄n
->
c⁄n_lock
);

92 i‡(
	`cbuf_li°_queue_Àn
(&
c⁄n
->
tx_q
) > 1024) {

93 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

94 
	`‰ì_cbuf
(
b
);

98 
	`cbuf_li°_queue_èû
(&
c⁄n
->
tx_q
, 
b
);

100 
	`c_sockë_wrôe_n⁄block_lo›
(
c⁄n
, 
c_≠p_wrôe_evít_sched
);

102 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

103 
	}
}

106 
	$c_≠p_nŸify_ªc⁄√˘
(
c_≠p_hdl_t
 *
hdl
)

108 
cbuf
 *
b
;

110 i‡(!
hdl
->
ev_cb
) {

114 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
C_OFPT_RECONN_APP
, 0);

116 
hdl
->
	`ev_cb
(hdl, 
b
);

118 
	`‰ì_cbuf
(
b
);

119 
	}
}

122 
	$c_≠p_nŸify_disc⁄√˘
(
c_≠p_hdl_t
 *
hdl
)

124 
cbuf
 *
b
;

126 i‡(!
hdl
->
ev_cb
) {

130 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
C_OFPT_NOCONN_APP
, 0);

132 
hdl
->
	`ev_cb
(hdl, 
b
);

134 
	`‰ì_cbuf
(
b
);

135 
	}
}

138 
	$c_≠p_ªc⁄n_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

139 *
¨g
)

141 
c_≠p_hdl_t
 *
hdl
 = 
¨g
;

142 
timevÆ
 
tv
 = { 2, 0 };

144 if(!
	`c_≠p_sock_öô
(
hdl
, 
£rvî
)) {

145 
	`c_log_debug
("ConnectionÅo controllerÑestored");

146 
	`evít_dñ
((
evít
 *)(
hdl
->
ªc⁄n_timî_evít
));

147 
	`evít_‰ì
((
evít
 *)(
hdl
->
ªc⁄n_timî_evít
));

148 
hdl
->
c⁄n
.
dód
 = 0;

149 
	`c_≠p_nŸify_ªc⁄√˘
(
hdl
);

153 
	`evtimî_add
(
hdl
->
ªc⁄n_timî_evít
, &
tv
);

154 
	}
}

157 
	$c_≠p_ªc⁄√˘
(
c_≠p_hdl_t
 *
hdl
)

159 
timevÆ
 
tv
 = { 1, 0 };

161 
	`evít_dñ
((
evít
 *)(
hdl
->
c⁄n
.
rd_evít
));

162 
	`evít_dñ
((
evít
 *)(
hdl
->
c⁄n
.
wr_evít
));

163 
	`evít_‰ì
((
evít
 *)(
hdl
->
c⁄n
.
rd_evít
));

164 
	`evít_‰ì
((
evít
 *)(
hdl
->
c⁄n
.
wr_evít
));

165 
	`˛o£
(
hdl
->
c⁄n
.
fd
);

167 
	`c_≠p_nŸify_disc⁄√˘
(
hdl
);

169 
hdl
->
ªc⁄n_timî_evít
 = 
	`evtimî_√w
(hdl->
ba£
,

170 
c_≠p_ªc⁄n_timî
,

171 (*)
hdl
);

172 
	`evtimî_add
(
hdl
->
ªc⁄n_timî_evít
, &
tv
);

174 
	}
}

177 
	$c_≠p_ªcv_msg
(*
hdl_¨g
, 
cbuf
 *
b
)

179 
c_≠p_hdl_t
 *
hdl
 = 
hdl_¨g
;

181 i‡(
hdl
->
ev_cb
) {

182 
hdl
->
	`ev_cb
(
hdl_¨g
, 
b
);

186 
	}
}

189 
	$c_≠p_ªad
(
evutû_sockë_t
 
fd
, 
evíts
 
UNUSED
, *
¨g
)

191 
c_≠p_hdl_t
 *
hdl
 = 
¨g
;

192 
ªt
;

194 
ªt
 = 
	`c_sockë_ªad_n⁄block_lo›
(
fd
, 
hdl
, &hdl->
c⁄n
, 
C_APP_RCV_BUF_SZ
,

195 (
c⁄n_¥oc_t
)
c_≠p_ªcv_msg
,

196 
of_gë_d©a_Àn
, 
c_≠p_of_hdr_vÆid
,

197 (
oÂ_hódî
));

199 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

200 
hdl
->
c⁄n
.
dód
 = 1;

201 
	`c_log_debug
("Controller connection Lost..\n");

202 
	`≥º‹
("c_app_read");

203 
	`c_≠p_ªc⁄√˘
(
hdl
);

207 
	}
}

210 
	$mul_≠p_comm™d_h™dÀr
(*
≠p_«me
 
UNUSED
, *
b
)

212 
	`c_≠p_tx
(&
c_≠p_maö_hdl
.
c⁄n
, (
cbuf
 *)(
b
));

214 
	}
}

217 
mul_ªgi°î_≠p
(*
≠p_¨g
 
UNUSED
, *
≠p_«me
, 
uöt32_t
 
≠p_Êags
,

218 
uöt32_t
 
ev_mask
, uöt32_à
n_dpid
, 
uöt64_t
 *
dpid_li°
,

219 (*
ev_cb
)(*
≠p_¨g
, *
pkt_¨g
))

221 
uöt64_t
 *
p_dpid
 = 
NULL
;

222 
cbuf
 *
b
;

223 
c_oÂ_ªgi°î_≠p_t
 *
ªg_≠p
;

224 
idx
 = 0;

226 
b
 = 
	`of_¥ï_msg
((
c_oÂ_ªgi°î_≠p
) +

227 (
n_dpid
 * (
uöt64_t
)), 
C_OFPT_REG_APP
, 0);

229 
ªg_≠p
 = (*)(
b
->
d©a
);

230 
	`°∫˝y
(
ªg_≠p
->
≠p_«me
,áµ_«me, 
C_MAX_APP_STRLEN
-1);

231 
ªg_≠p
->
≠p_Êags
 = 
	`ht⁄l
(app_flags);

232 
ªg_≠p
->
ev_mask
 = 
	`ht⁄l
(ev_mask);

233 
ªg_≠p
->
dpid
 = 
	`ht⁄l
(
n_dpid
);

235 
p_dpid
 = (*)(
ªg_≠p
+1);

236 ; 
idx
 < 
n_dpid
; idx++) {

237 *
p_dpid
++ = *
dpid_li°
++;

240 
c_≠p_maö_hdl
.
ev_cb
 =Év_cb;

242 
	`c_≠p_tx
(&
c_≠p_maö_hdl
.
c⁄n
, 
b
);

245 
	}
}

248 
	$mul_uƒegi°î_≠p
(*
≠p_«me
)

250 
cbuf
 *
b
;

251 
c_oÂ_uƒegi°î_≠p_t
 *
uƒeg_≠p
;

253 
b
 = 
	`of_¥ï_msg
((*
uƒeg_≠p
), 
C_OFPT_UNREG_APP
, 0);

254 
uƒeg_≠p
 = (*)(
b
->
d©a
);

255 
	`°∫˝y
(
uƒeg_≠p
->
≠p_«me
,áµ_«me, 
C_MAX_APP_STRLEN
-1);

257 
	`c_≠p_tx
(&
c_≠p_maö_hdl
.
c⁄n
, 
b
);

260 
	}
}

263 
	$mul_≠p_£nd_pkt_out
(*
¨g
 
UNUSED
, 
uöt64_t
 
dpid
, *
∑rms_¨g
)

265 
of_pkt_out_∑øms
 *
∑rms
 = 
∑rms_¨g
;

266 *
out_d©a
;

267 
cbuf
 *
b
;

268 
uöt8_t
 *
a˘
;

269 
c_oÂ_∑ckë_out
 *
coÂ_po
;

271 
b
 = 
	`of_¥ï_msg
((*
coÂ_po
Ë+ 
∑rms
->
a˘i⁄_Àn
 +Ö¨ms->
d©a_Àn
,

272 
OFPT_PACKET_OUT
, 0);

274 
coÂ_po
 = (*)(
b
->
d©a
);

275 
coÂ_po
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

276 
coÂ_po
->
ö_p‹t
 = 
	`ht⁄s
(
∑rms
->in_port);

277 
coÂ_po
->
buf„r_id
 = 
	`ht⁄l
(
∑rms
->buffer_id);

278 
coÂ_po
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(
∑rms
->
a˘i⁄_Àn
);

280 
a˘
 = (*)(
coÂ_po
+1);

281 
	`mem˝y
(
a˘
, 
∑rms
->
a˘i⁄_li°
,Ö¨ms->
a˘i⁄_Àn
);

283 i‡(
∑rms
->
d©a_Àn
) {

284 
out_d©a
 = (*)(
a˘
 + 
∑rms
->
a˘i⁄_Àn
);

285 
	`mem˝y
(
out_d©a
, 
∑rms
->
d©a
,Ö¨ms->
d©a_Àn
);

288 
	`mul_≠p_comm™d_h™dÀr
(
NULL
, 
b
);

291 
	}
}

293 
cbuf
 *

294 
	$mul_≠p_¥ï_Êow_add
(
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

295 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

296 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
,

297 
uöt8_t
 
Êags
)

299 
c_oÂ_Êow_mod_t
 *
coÂ_fm
;

300 *
a˘
;

301 
cbuf
 *
b
;

302 
size_t
 
tŸ_Àn
 = 0;

304 
tŸ_Àn
 = (*
coÂ_fm
Ë+ 
a˘i⁄_Àn
;

306 
b
 = 
	`of_¥ï_msg
(
tŸ_Àn
, 
C_OFPT_FLOW_MOD
, 0);

308 
coÂ_fm
 = (*)(
b
->
d©a
);

309 i‡(
Êags
 & 
C_FL_ENT_SWALIAS
) {

310 
coÂ_fm
->
sw_Æüs
 = 
	`ht⁄l
((
uöt32_t
)
dpid
);

312 
coÂ_fm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

314 
coÂ_fm
->
comm™d
 = 
C_OFPC_ADD
;

315 
coÂ_fm
->
Êags
 = flags;

316 
	`mem˝y
(&
coÂ_fm
->
Êow
, 
Ê
, (*fl));

317 
coÂ_fm
->
wûdˇrds
 = 
	`ht⁄l
(wildcards);

318 
coÂ_fm
->
¥i‹ôy
 = 
	`ht⁄s
(
¥io
);

319 
coÂ_fm
->
ôimeo
 = 
	`ht⁄s
(itimeo);

320 
coÂ_fm
->
htimeo
 = 
	`ht⁄s
(htimeo);

321 
coÂ_fm
->
buf„r_id
 = 
	`ht⁄l
(buffer_id);

322 
coÂ_fm
->
›‹t
 = 
OFPP_NONE
;

324 
a˘
 = (*)(
coÂ_fm
+1);

325 
	`mem˝y
(
a˘
, 
a˘i⁄s
, 
a˘i⁄_Àn
);

327  
b
;

328 
	}
}

331 
	$mul_≠p_£nd_Êow_add
(*
≠p_«me
 
UNUSED
, *
sw_¨g
 UNUSED,

332 
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

333 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

334 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
,

335 
uöt8_t
 
Êags
)

337 
cbuf
 *
b
;

339 
b
 = 
	`mul_≠p_¥ï_Êow_add
(
dpid
, 
Ê
, 
buf„r_id
, 
a˘i⁄s
, 
a˘i⁄_Àn
,

340 
ôimeo
, 
htimeo
, 
wûdˇrds
, 
¥io
, 
Êags
);

341 
	`mul_≠p_comm™d_h™dÀr
(
NULL
, 
b
);

344 
	}
}

347 
	$mul_£rvi˚_£nd_Êow_add
(*
£rvi˚
,

348 
uöt64_t
 
dpid
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

349 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

350 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
,

351 
uöt8_t
 
Êags
)

353 
cbuf
 *
b
;

355 
b
 = 
	`mul_≠p_¥ï_Êow_add
(
dpid
, 
Ê
, 
buf„r_id
, 
a˘i⁄s
, 
a˘i⁄_Àn
,

356 
ôimeo
, 
htimeo
, 
wûdˇrds
, 
¥io
, 
Êags
);

357 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

360 
	}
}

363 
cbuf
 *

364 
	$mul_≠p_¥ï_Êow_dñ
(
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

365 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
,

366 
uöt16_t
 
¥io
, 
uöt8_t
 
Êags
)

368 
c_oÂ_Êow_mod_t
 *
coÂ_fm
;

369 
cbuf
 *
b
;

370 
size_t
 
tŸ_Àn
 = 0;

372 
tŸ_Àn
 = (*
coÂ_fm
);

374 
b
 = 
	`of_¥ï_msg
(
tŸ_Àn
, 
C_OFPT_FLOW_MOD
, 0);

376 
coÂ_fm
 = (*)(
b
->
d©a
);

377 i‡(
Êags
 & 
C_FL_ENT_SWALIAS
) {

378 
coÂ_fm
->
sw_Æüs
 = 
	`ht⁄l
((
uöt32_t
)
dpid
);

380 
coÂ_fm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

382 
coÂ_fm
->
comm™d
 = 
C_OFPC_DEL
;

383 
coÂ_fm
->
¥i‹ôy
 = 
	`ht⁄s
(
¥io
);

384 
coÂ_fm
->
Êags
 = flags;

385 
	`mem˝y
(&
coÂ_fm
->
Êow
, 
Ê
, (*fl));

386 
coÂ_fm
->
wûdˇrds
 = 
	`ht⁄l
(wildcards);

387 
coÂ_fm
->
›‹t
 = 
	`ht⁄s
(oport);

389  
b
;

390 
	}
}

393 
	$mul_≠p_£nd_Êow_dñ
(*
≠p_«me
 
UNUSED
, *
sw_¨g
 UNUSED,

394 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

395 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
,

396 
uöt16_t
 
¥io
, 
uöt8_t
 
Êags
)

398 
cbuf
 *
b
;

400 
b
 = 
	`mul_≠p_¥ï_Êow_dñ
(
dpid
, 
Ê
, 
wûdˇrds
, 
›‹t
, 
¥io
, 
Êags
);

402 
	`mul_≠p_comm™d_h™dÀr
(
NULL
, 
b
);

405 
	}
}

408 
	$mul_£rvi˚_£nd_Êow_dñ
(*
£rvi˚
,

409 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

410 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
,

411 
uöt16_t
 
¥io
, 
uöt8_t
 
Êags
)

413 
cbuf
 *
b
;

415 
b
 = 
	`mul_≠p_¥ï_Êow_dñ
(
dpid
, 
Ê
, 
wûdˇrds
, 
›‹t
, 
¥io
, 
Êags
);

416 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

419 
	}
}

424 
	$c_≠p_öô
(
c_≠p_hdl_t
 *
hdl
)

426 
	`c_rw_lock_öô
(&
hdl
->
c⁄n
.
c⁄n_lock
);

427 
hdl
->
ba£
 = 
	`evít_ba£_√w
();

428 
	`as£π
(
hdl
->
ba£
);

431 
	}
}

434 
	$c_≠p_sock_öô
(
c_≠p_hdl_t
 *
hdl
, *
£rvî
)

436 
hdl
->
c⁄n
.
fd
 = 
	`c_˛õ¡_sockë_¸óã
(
£rvî
, 
C_APP_PORT
);

437 i‡(
hdl
->
c⁄n
.
fd
 <= 0) {

441 
hdl
->
c⁄n
.
rd_evít
 = 
	`evít_√w
(hdl->
ba£
,

442 
hdl
->
c⁄n
.
fd
,

443 
EV_READ
|
EV_PERSIST
,

444 
c_≠p_ªad
, 
hdl
);

446 
hdl
->
c⁄n
.
wr_evít
 = 
	`evít_√w
(hdl->
ba£
,

447 
hdl
->
c⁄n
.
fd
,

448 
EV_WRITE
,

449 
c_≠p_wrôe_evít
, &
hdl
->
c⁄n
);

451 
	`evít_add
((
evít
 *)(
hdl
->
c⁄n
.
rd_evít
), 
NULL
);

454 
	}
}

457 
mul_≠p_¸óã_£rvi˚
(*
«me
,

458 (*
£rvi˚_h™dÀr
)(*
£rvi˚
, 
cbuf
 *
msg
))

460 
size_t
 
£rv_sz
 = (
c_≠p_£rvi˚_tbl
)/(c_app_service_tbl[0]);

461 
£rv_id
 = 0;

462 
c_≠p_£rvi˚
 *
£rv
;

464 ; 
£rv_id
 < 
£rv_sz
; serv_id++) {

465 
£rv
 = &
c_≠p_£rvi˚_tbl
[
£rv_id
];

466 i‡(!
	`°∫cmp
(
£rv
->
£rvi˚_«me
, 
«me
, 
MAX_SERV_NAME_LEN
-1)) {

467  
	`mul_£rvi˚_°¨t
(
c_≠p_maö_hdl
.
ba£
, 
«me
, 
£rv
->
p‹t
,

468 
£rvi˚_h™dÀr
);

472 
	`c_log_îr
("%†£rvi˚ unknown", 
«me
);

473  
NULL
;

474 
	}
}

477 
__mul_≠p_gë_£rvi˚
(*
«me
,

478 (*
c⁄n_upd©e
)(*
£rvi˚
,

479 
c⁄n_evít
),

480 
boﬁ
 
ªåy_c⁄n
)

482 
size_t
 
£rv_sz
 = (
c_≠p_£rvi˚_tbl
)/(c_app_service_tbl[0]);

483 
£rv_id
 = 0;

484 
c_≠p_£rvi˚
 *
£rv_ñem
;

485 
mul_£rvi˚_t
 *
£rvi˚
;

487 ; 
£rv_id
 < 
£rv_sz
; serv_id++) {

488 
£rv_ñem
 = &
c_≠p_£rvi˚_tbl
[
£rv_id
];

489 i‡(!
	`°∫cmp
(
£rv_ñem
->
£rvi˚_«me
, 
«me
, 
MAX_SERV_NAME_LEN
-1)) {

490 i‡(
£rv_ñem
->
£rvi˚_¥iv_öô
)

491 
£rvi˚
 = 
£rv_ñem
->
	`£rvi˚_¥iv_öô
();

493 
£rvi˚
 = 
	`mul_£rvi˚_ö°™tüã
(
c_≠p_maö_hdl
.
ba£
, 
«me
,

494 
£rv_ñem
->
p‹t
,

495 
c⁄n_upd©e
,

496 
ªåy_c⁄n
);

497  
£rvi˚
;

501 
	`c_log_îr
("%†£rvi˚ unknown", 
«me
);

502  
NULL
;

503 
	}
}

506 
	$mul_≠p_gë_£rvi˚
(*
«me
)

508  
	`__mul_≠p_gë_£rvi˚
(
«me
, 
NULL
, 
Ál£
);

509 
	}
}

512 
mul_≠p_gë_£rvi˚_nŸify
(*
«me
,

513 (*
c⁄n_upd©e
)(*
£rvi˚
,

514 
c⁄n_evít
),

515 
boﬁ
 
ªåy_c⁄n
)

517  
	`__mul_≠p_gë_£rvi˚
(
«me
, 
c⁄n_upd©e
, 
ªåy_c⁄n
);

518 
	}
}

522 
	$mul_≠p_de°roy_£rvi˚
(*
£rvi˚
)

524  
	`mul_£rvi˚_de°roy
(
£rvi˚
);

525 
	}
}

528 
	$mod_öôˇŒs
(
c_≠p_hdl_t
 *
hdl
)

530 
öôˇŒ_t
 *
mod_öô
;

532 
mod_öô
 = &
__°¨t_modöô_£c
;

534 (*
mod_öô
)(
hdl
->
ba£
);

535 
mod_öô
++;

536 } 
mod_öô
 < &
__°›_modöô_£c
);

537 
	}
}

540 
	$modvty__öôˇŒs
(*
¨g
)

542 
öôˇŒ_t
 *
mod_öô
;

544 
mod_öô
 = &
__°¨t_modvtyöô_£c
;

546 (*
mod_öô
)(
¨g
);

547 
mod_öô
++;

548 } 
mod_öô
 < &
__°›_modvtyöô_£c
);

549 
	}
}

551 
DEFUN
 (
show_≠p_vîsi⁄
,

552 
show_≠p_vîsi⁄_cmd
,

554 
SHOW_STR


557 
vty_out
(
vty
, " Version 0.99\r\n");

558  
	gCMD_SUCCESS
;

562 
	$c_≠p_vty_maö
(*
¨g
)

564 
thªad
Åhread;

565 
c_≠p_hdl_t
 *
hdl
 = 
¨g
;

566 
≠p_vtysh_∑th
[64];

568 
	`°∫˝y
(
≠p_vtysh_∑th
, 
C_APP_VTY_COMMON_PATH
, 63 );

569 
	`°∫ˇt
(
≠p_vtysh_∑th
, 
hdl
->
¥og«me
, 63);

571 
hdl
->
vty_ma°î
 = 
	`thªad_ma°î_¸óã
();

573 
	`cmd_öô
(1);

574 
	`vty_öô
(
hdl
->
vty_ma°î
);

575 
	`modvty__öôˇŒs
(
hdl
);

576 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_≠p_vîsi⁄_cmd
);

577 
	`s‹t_node
();

579 
	`vty_£rv_sock
(
NULL
, 
hdl
->
vty_p‹t
, 
≠p_vtysh_∑th
, 1);

581 
	`c_log_debug
(" App vtyÅhreadÑunning \n");

584 
	`thªad_„tch
(
hdl
->
vty_ma°î
, &
thªad
))

585 
	`thªad_ˇŒ
(&
thªad
);

589 
	}
}

592 
	$maö
(
¨gc
, **
¨gv
)

594 *
p
;

595 
d´m⁄_mode
 = 0;

596 
vty_shñl
 = 0;

597 
uöt16_t
 
vty_p‹t
 = 0;

600 
	`umask
 (0027);

603 
c_≠p_maö_hdl
.
¥og«me
 = ((
p
 = 
	`°ºchr
 (
¨gv
[0], '/')) ? ++p :árgv[0]);

607 
›t
;

609 
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "dhS:V:", 
l⁄g›ts
, 0);

610 i‡(
›t
 =
EOF
)

613 
›t
) {

617 
d´m⁄_mode
 = 1;

620 
£rvî
 = 
›èrg
;

623 
vty_shñl
 = 1;

624 
vty_p‹t
 = 
	`©oi
(
›èrg
);

627 
	`ußge
(
c_≠p_maö_hdl
.
¥og«me
, 0);

630 
	`ußge
(
c_≠p_maö_hdl
.
¥og«me
, 1);

635 i‡(
d´m⁄_mode
) {

636 
	`c_d´m⁄
(1, 0);

639 
˛og_deÁu…
 = 
	`›í˛og
 (
c_≠p_maö_hdl
.
¥og«me
, 
CLOG_MUL
,

640 
LOG_CONS
|
LOG_NDELAY
|
LOG_PID
, 
LOG_DAEMON
);

641 
	`˛og_£t_Àvñ
(
NULL
, 
CLOG_DEST_SYSLOG
, 
LOG_WARNING
);

642 
	`˛og_£t_Àvñ
(
NULL
, 
CLOG_DEST_STDOUT
, 
LOG_DEBUG
);

644 
	`c_≠p_öô
(&
c_≠p_maö_hdl
);

645 
	`c_≠p_sock_öô
(&
c_≠p_maö_hdl
, 
£rvî
) < 0) {

646 
	`c_log_debug
("TryingÅo connect..\n");

647 
	`¶ìp
(1);

650 
	`mod_öôˇŒs
(&
c_≠p_maö_hdl
);

652 i‡(
vty_shñl
 && 
vty_p‹t
 > 0) {

653 
c_≠p_maö_hdl
.
vty_p‹t
 = vty_port;

654 
	`±hªad_¸óã
(&
c_≠p_maö_hdl
.
vty_thªad
, 
NULL
, 
c_≠p_vty_maö
, &c_app_main_hdl);

658  
	`evít_ba£_di•©ch
(
c_≠p_maö_hdl
.
ba£
);

663 
	}
}

	@common/mul_app_main.h

19 #i‚de‡
__MUL_APP_MAIN_H___


20 
	#__MUL_APP_MAIN_H___


	)

22 
	#C_APP_RCV_BUF_SZ
 4096

	)

23 
	#C_APP_VTY_COMMON_PATH
 "/v¨/run/≠p_"

	)

25 
	sc_≠p_hdl_


27 *
	m¥og«me
;

28 
c_c⁄n_t
 
	mc⁄n
;

29 
evít_ba£
 *
	mba£
;

30 
evít
 *
	mªc⁄n_timî_evít
;

31 (*
	mev_cb
)(*
	m≠p
, *
	mbuf
);

34 
±hªad_t
 
	mvty_thªad
;

35 *
	mvty_ma°î
;

36 
uöt16_t
 
	mvty_p‹t
;

38 
c_≠p_hdl_
 
	tc_≠p_hdl_t
;

	@common/mul_common.h

19 #i‚de‡
__MUL_COMMON_H__


20 
	#__MUL_COMMON_H__


	)

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°ddef.h
>

25 
	~<°dboﬁ.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sockë.h
>

32 
	~<sys/mm™.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

35 
	~<±hªad.h
>

37 
	~<√töë/ö.h
>

38 
	~<¨∑/öë.h
>

40 
	~"compûî.h
"

41 
	~"cbuf.h
"

42 
	~"lock.h
"

43 
	~"idx_poﬁ.h
"

44 
	~"©omic.h
"

45 
	~"xtoxŒ.h
"

46 
	~"hash.h
"

47 
	~"∑ckës.h
"

48 
	~"˛og.h
"

49 
	~"glib.h
"

50 
	~"evít2/evít.h
"

51 
	~"›íÊow.h
"

52 
	~"c_utû.h
"

53 
	~"mul_≠p_öãrÁ˚.h
"

54 
	~"mul_of_msg.h
"

55 
	~"mul_∑ckë.h
"

56 
	~"mul_£rvi˚s.h
"

	@common/mul_of_msg.c

20 
	~"mul_comm⁄.h
"

21 
	~"øndom.h
"

23 
size_t


24 
	$of_make_a˘i⁄_ouçut
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt16_t
 
›‹t
)

26 
oÂ_a˘i⁄_ouçut
 *
›_a˘
;

28 i‡(!(*
pbuf
)) {

29 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
›_a˘
));

30 
bu‰oom
 = (*
›_a˘
);

31 
	`as£π
(*
pbuf
);

34 
	`as£π
((*
›_a˘
Ë<
bu‰oom
);

36 
›_a˘
 = (*)(*
pbuf
);

38 
›_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

39 
›_a˘
->
Àn
 = 
	`ht⁄s
((*op_act));

40 
›_a˘
->
p‹t
 = 
	`ht⁄s
(
›‹t
);

42  ((*
›_a˘
));

43 
	}
}

45 
size_t


46 
	$of_make_a˘i⁄_£t_vid
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt16_t
 
vid
)

48 
oÂ_a˘i⁄_vœn_vid
 *
vid_a˘
;

50 i‡(!(*
pbuf
)) {

51 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
vid_a˘
));

52 
bu‰oom
 = (*
vid_a˘
);

53 
	`as£π
(*
pbuf
);

56 
	`as£π
((*
vid_a˘
Ë<
bu‰oom
);

58 
vid_a˘
 = (*)(*
pbuf
);

60 
vid_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_SET_VLAN_VID
);

61 
vid_a˘
->
Àn
 = 
	`ht⁄s
((*vid_act));

62 
vid_a˘
->
vœn_vid
 = 
	`ht⁄s
(
vid
);

64  ((*
vid_a˘
));

65 
	}
}

67 
size_t


68 
	$of_make_a˘i⁄_°rù_vœn
(**
pbuf
, 
size_t
 
bu‰oom
)

70 
oÂ_a˘i⁄_hódî
 *
vid_°rù_a˘
;

72 i‡(!(*
pbuf
)) {

73 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
vid_°rù_a˘
));

74 
bu‰oom
 = (*
vid_°rù_a˘
);

75 
	`as£π
(*
pbuf
);

78 
	`as£π
((*
vid_°rù_a˘
Ë<
bu‰oom
);

80 
vid_°rù_a˘
 = (*)(*
pbuf
);

82 
vid_°rù_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_STRIP_VLAN
);

83 
vid_°rù_a˘
->
Àn
 = 
	`ht⁄s
((*vid_strip_act));

85  ((*
vid_°rù_a˘
));

86 
	}
}

88 
size_t


89 
	$of_make_a˘i⁄_£t_dmac
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt8_t
 *
dmac
)

91 
oÂ_a˘i⁄_dl_addr
 *
dmac_a˘
;

93 i‡(!(*
pbuf
)) {

94 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
dmac_a˘
));

95 
bu‰oom
 = (*
dmac_a˘
);

96 
	`as£π
(*
pbuf
);

99 
	`as£π
((*
dmac_a˘
Ë<
bu‰oom
);

101 
dmac_a˘
 = (*)(*
pbuf
);

103 
dmac_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_SET_DL_DST
);

104 
dmac_a˘
->
Àn
 = 
	`ht⁄s
((*dmac_act));

105 
	`mem˝y
(
dmac_a˘
->
dl_addr
, 
dmac
, 
OFP_ETH_ALEN
);

107  ((*
dmac_a˘
));

108 
	}
}

110 
size_t


111 
	$of_make_a˘i⁄_£t_smac
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt8_t
 *
smac
)

113 
oÂ_a˘i⁄_dl_addr
 *
smac_a˘
;

115 i‡(!(*
pbuf
)) {

116 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
smac_a˘
));

117 
bu‰oom
 = (*
smac_a˘
);

118 
	`as£π
(*
pbuf
);

121 
	`as£π
((*
smac_a˘
Ë<
bu‰oom
);

123 
smac_a˘
 = (*)(*
pbuf
);

125 
smac_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_SET_DL_SRC
);

126 
smac_a˘
->
Àn
 = 
	`ht⁄s
((*smac_act));

127 
	`mem˝y
(
smac_a˘
->
dl_addr
, 
smac
, 
OFP_ETH_ALEN
);

129  ((*
smac_a˘
));

130 
	}
}

132 
size_t


133 
	$of_make_a˘i⁄_£t_vœn_p˝
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt8_t
 
vœn_p˝
)

135 
oÂ_a˘i⁄_vœn_p˝
 *
vp˝_a˘
;

137 i‡(!(*
pbuf
)) {

138 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
vp˝_a˘
));

139 
bu‰oom
 = (*
vp˝_a˘
);

140 
	`as£π
(*
pbuf
);

143 
	`as£π
((*
vp˝_a˘
Ë<
bu‰oom
);

145 
vp˝_a˘
 = (*)(
pbuf
);

147 
vp˝_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_SET_VLAN_PCP
);

148 
vp˝_a˘
->
Àn
 = 
	`ht⁄s
((*vpcp_act));

149 
vp˝_a˘
->
vœn_p˝
 = (vlan_pcp & 0x7);

151  ((*
vp˝_a˘
));

152 
	}
}

154 
size_t


155 
	$of_make_a˘i⁄_£t_nw_ù
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt32_t
 
ù
,

156 
uöt16_t
 
ty≥
)

158 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
;

160 i‡(!(*
pbuf
)) {

161 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
nw_addr_a˘
));

162 
bu‰oom
 = (*
nw_addr_a˘
);

163 
	`as£π
(*
pbuf
);

166 
	`as£π
((*
nw_addr_a˘
Ë<
bu‰oom
);

168 
nw_addr_a˘
 = (*)(*
pbuf
);

170 
nw_addr_a˘
->
ty≥
 = 
	`ht⁄s
(type);

171 
nw_addr_a˘
->
Àn
 = 
	`ht⁄s
((*nw_addr_act));

172 
nw_addr_a˘
->
nw_addr
 = 
	`ht⁄l
(
ù
);

174  ((*
nw_addr_a˘
));

175 
	}
}

177 
size_t


178 
	$of_make_a˘i⁄_£t_nw_ßddr
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt32_t
 
nw_ßddr
)

180  
	`of_make_a˘i⁄_£t_nw_ù
(
pbuf
, 
bu‰oom
, 
nw_ßddr
, 
OFPAT_SET_NW_SRC
);

181 
	}
}

183 
size_t


184 
	$of_make_a˘i⁄_£t_nw_daddr
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt32_t
 
nw_daddr
)

186  
	`of_make_a˘i⁄_£t_nw_ù
(
pbuf
, 
bu‰oom
, 
nw_daddr
, 
OFPAT_SET_NW_DST
);

187 
	}
}

189 
size_t


190 
	$of_make_a˘i⁄_£t_nw_tos
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt8_t
 
tos
)

192 
oÂ_a˘i⁄_nw_tos
 *
nw_tos_a˘
;

194 i‡(!(*
pbuf
)) {

195 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
nw_tos_a˘
));

196 
bu‰oom
 = (*
nw_tos_a˘
);

197 
	`as£π
(*
pbuf
);

200 
	`as£π
((*
nw_tos_a˘
Ë<
bu‰oom
);

202 
nw_tos_a˘
 = (*)(*
pbuf
);

204 
nw_tos_a˘
->
ty≥
 = 
	`ht⁄s
(
OFPAT_SET_NW_TOS
);

205 
nw_tos_a˘
->
Àn
 = 
	`ht⁄s
((*nw_tos_act));

206 
nw_tos_a˘
->
nw_tos
 = 
tos
 & ((0x1<<7) - 1);

208  ((*
nw_tos_a˘
));

209 
	}
}

211 
size_t


212 
	$of_make_a˘i⁄_£t_ç_p‹t
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt16_t
 
p‹t
,

213 
uöt16_t
 
ty≥
)

215 
oÂ_a˘i⁄_ç_p‹t
 *
ç_p‹t_a˘
;

217 i‡(!(*
pbuf
)) {

218 *
pbuf
 = (*)
	`ˇŒoc
(1, (*
ç_p‹t_a˘
));

219 
bu‰oom
 = (*
ç_p‹t_a˘
);

220 
	`as£π
(*
pbuf
);

223 
	`as£π
((*
ç_p‹t_a˘
Ë<
bu‰oom
);

225 
ç_p‹t_a˘
 = (*)(*
pbuf
);

227 
ç_p‹t_a˘
->
ty≥
 = 
	`ht⁄s
(type);

228 
ç_p‹t_a˘
->
Àn
 = 
	`ht⁄s
((*tp_port_act));

229 
ç_p‹t_a˘
->
ç_p‹t
 = 
	`ht⁄s
(
p‹t
);

231  ((*
ç_p‹t_a˘
));

232 
	}
}

234 
size_t


235 
	$of_make_a˘i⁄_£t_ç_•‹t
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt16_t
 
p‹t
)

237  
	`of_make_a˘i⁄_£t_ç_p‹t
(
pbuf
, 
bu‰oom
, 
p‹t
, 
OFPAT_SET_TP_SRC
);

238 
	}
}

241 
size_t


242 
	$of_make_a˘i⁄_£t_ç_dp‹t
(**
pbuf
, 
size_t
 
bu‰oom
, 
uöt16_t
 
p‹t
)

244  
	`of_make_a˘i⁄_£t_ç_p‹t
(
pbuf
, 
bu‰oom
, 
p‹t
, 
OFPAT_SET_TP_DST
);

245 
	}
}

248 
	$of_dump_wûdˇrds
(
uöt32_t
 
wûdˇrds
)

250 
uöt32_t
 
nw_d°_mask
, 
nw_§c_mask
;

251 *
pbuf
;

252 
size_t
 
Àn
 = 0;

253 
uöt32_t
 
ù_wc
;

254 
	#OF_DUMP_WC_SZ
 4096

	)

255 
pbuf
 = 
	`ˇŒoc
(1, 
OF_DUMP_WC_SZ
);

256 
	`as£π
(
pbuf
);

258 
wûdˇrds
 = 
	`¡ohl
(wildcards);

260 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_DST_MASK
Ë>> 
OFPFW_NW_DST_SHIFT
);

261 
nw_d°_mask
 = 
ù_wc
 >= 32 ? 0 :

262 
	`make_öë_mask
(32-
ù_wc
);

264 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_SRC_MASK
Ë>> 
OFPFW_NW_SRC_SHIFT
);

265 
nw_§c_mask
 = 
ù_wc
 >= 32 ? 0 :

266 
	`make_öë_mask
(32-
ù_wc
);

269 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "Wildcards:\r\n");

270 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

271 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

272 "smac", (
wûdˇrds
 & 
OFPFW_DL_SRC
) ? "*" : "exact");

273 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

274 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

275 "dmac", (
wûdˇrds
 & 
OFPFW_DL_DST
) ? "*" : "exact");

276 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

277 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

278 "ëh-ty≥", (
wûdˇrds
 & 
OFPFW_DL_TYPE
) ? "*" : "exact");

279 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

280 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

281 "vœn-id", (
wûdˇrds
 & 
OFPFW_DL_VLAN
) ? "*" : "exact");

282 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

283 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

284 "vœn-p˝", (
wûdˇrds
 & 
OFPFW_DL_VLAN_PCP
) ? "*" : "exact");

285 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

286 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: 0x%08x\r\n",

287 "d°-ù-mask", 
nw_d°_mask
);

288 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

289 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: 0x%08x\r\n",

290 "§c-ù-mask", 
nw_§c_mask
);

291 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

292 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

293 "ù-¥Ÿo", (
wûdˇrds
 & 
OFPFW_NW_PROTO
) ? "*" : "exact");

294 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

295 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

296 "§c-p‹t", (
wûdˇrds
 & 
OFPFW_TP_SRC
) ? "*" : "exact");

297 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

298 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

299 "d°-p‹t", (
wûdˇrds
 & 
OFPFW_TP_DST
) ? "*" : "exact");

300 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

301 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_WC_SZ
-len-1, "%-10s: %s\r\n",

302 "ö-p‹t", (
wûdˇrds
 & 
OFPFW_IN_PORT
) ? "*" : "exact");

303 
	`as£π
(
Àn
 < 
OF_DUMP_WC_SZ
-1);

305  
pbuf
;

306 
	}
}

309 
	$of_dump_a˘i⁄s
(*
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
)

311 *
pbuf
;

312 
size_t
 
Àn
 = 0, 
∑r£d_Àn
 = 0;

313 
uöt16_t
 
a˘_ty≥
;

314 
oÂ_a˘i⁄_hódî
 *
hdr
;

315 
	#OF_DUMP_ACT_SZ
 4096

	)

316 
pbuf
 = 
	`ˇŒoc
(1, 
OF_DUMP_ACT_SZ
);

317 
	`as£π
(
pbuf
);

319 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1, "Actions: ");

320 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

322 i‡(!
a˘i⁄_Àn
) {

323 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1, "None (Drop)\r\n");

324 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

325  
pbuf
;

328 
a˘i⁄_Àn
) {

329 
hdr
 = (
oÂ_a˘i⁄_hódî
 *)
a˘i⁄s
;

330 
a˘_ty≥
 = 
	`¡ohs
(
hdr
->
ty≥
);

331 
a˘_ty≥
) {

332 
OFPAT_OUTPUT
:

334 
oÂ_a˘i⁄_ouçut
 *
›_a˘
 = (*)
hdr
;

335 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

337 "ouçut", 
	`¡ohs
(
›_a˘
->
p‹t
));

338 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

339 
∑r£d_Àn
 = (*
›_a˘
);

342 
OFPAT_SET_VLAN_VID
:

344 
oÂ_a˘i⁄_vœn_vid
 *
vid_a˘
 = (*)
hdr
;

345 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

347 "£t-vid", 
	`¡ohs
(
vid_a˘
->
vœn_vid
));

348 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

349 
∑r£d_Àn
 = (*
vid_a˘
);

353 
OFPAT_SET_DL_DST
:

355 
oÂ_a˘i⁄_dl_addr
 *
dmac_a˘
 = (*)
hdr
;

356 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

358 "£t-dmac", 
dmac_a˘
->
dl_addr
[0], dmac_act->dl_addr[1],

359 
dmac_a˘
->
dl_addr
[2], dmac_act->dl_addr[3],

360 
dmac_a˘
->
dl_addr
[4], dmac_act->dl_addr[5]);

361 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

362 
∑r£d_Àn
 = (*
dmac_a˘
);

365 
OFPAT_SET_DL_SRC
:

367 
oÂ_a˘i⁄_dl_addr
 *
smac_a˘
 = (*)
hdr
;

368 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

371 
smac_a˘
->
dl_addr
[0], smac_act->dl_addr[1],

372 
smac_a˘
->
dl_addr
[2], smac_act->dl_addr[3],

373 
smac_a˘
->
dl_addr
[4], smac_act->dl_addr[5]);

374 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

375 
∑r£d_Àn
 = (*
smac_a˘
);

378 
OFPAT_SET_VLAN_PCP
:

380 
oÂ_a˘i⁄_vœn_p˝
 *
vp˝_a˘
 = (*)
hdr
;

381 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

383 
vp˝_a˘
->
vœn_p˝
);

384 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

385 
∑r£d_Àn
 = (*
vp˝_a˘
);

388 
OFPAT_STRIP_VLAN
:

390 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

392 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

393 
∑r£d_Àn
 = (
oÂ_a˘i⁄_hódî
);

395 
OFPAT_SET_NW_SRC
:

397 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
 = (*)
hdr
;

398 
ö_addr
 in_add∏{ .
s_addr
 = 
nw_addr_a˘
->
nw_addr
 };

399 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

400 "nw-ßdd∏%†", 
	`öë_¡ﬂ
(
ö_addr
));

401 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

402 
∑r£d_Àn
 = (*
nw_addr_a˘
);

404 
OFPAT_SET_NW_DST
:

406 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
 = (*)
hdr
;

407 
ö_addr
 in_add∏{ .
s_addr
 = 
nw_addr_a˘
->
nw_addr
 };

408 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

409 "nw-dadd∏%†", 
	`öë_¡ﬂ
(
ö_addr
));

410 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

411 
∑r£d_Àn
 = (*
nw_addr_a˘
);

415 
	`c_log_îr
("%s:unh™dÀdá˘i⁄ %u", 
FN
, 
a˘_ty≥
);

416 
	`‰ì
(
pbuf
);

417  
NULL
;

421 
a˘i⁄_Àn
 -
∑r£d_Àn
;

422 
a˘i⁄s
 = ((
uöt8_t
 *Ô˘i⁄†+ 
∑r£d_Àn
);

425 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1, "\r\n");

426 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

428  
pbuf
;

429 
	}
}

433 
	$of_dump_Êow
(
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
)

435 
	#FL_PBUF_SZ
 4096

	)

436 *
pbuf
 = 
	`ˇŒoc
(1, 
FL_PBUF_SZ
);

437 
Àn
 = 0;

438 
uöt32_t
 
nw_d°_mask
, 
nw_§c_mask
;

439 
uöt32_t
 
dù_wc
, 
sù_wc
;

440 
ö_addr
 in_addr;

442 
wûdˇrds
 = 
	`¡ohl
(wildcards);

443 
dù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_DST_MASK
Ë>> 
OFPFW_NW_DST_SHIFT
);

444 
nw_d°_mask
 = 
dù_wc
 >= 32 ? 0 :

445 
	`make_öë_mask
(32-
dù_wc
);

447 
sù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_SRC_MASK
Ë>> 
OFPFW_NW_SRC_SHIFT
);

448 
nw_§c_mask
 = 
sù_wc
 >= 32 ? 0 :

449 
	`make_öë_mask
(32-
sù_wc
);

451 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "Flow: ");

452 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

454 i‡(
wûdˇrds
 =
OFPFW_ALL
) {

455 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "All Fields Wildcards");

456 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

457  
pbuf
;

460 i‡(!(
wûdˇrds
 & 
OFPFW_DL_SRC
)) {

461 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

463 "smac", 
Ê
->
dl_§c
[0], fl->dl_src[1], fl->dl_src[2],

464 
Ê
->
dl_§c
[3], fl->dl_src[4], fl->dl_src[5]);

465 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

467 i‡(!(
wûdˇrds
 & 
OFPFW_DL_DST
)) {

468 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

470 "dmac", 
Ê
->
dl_d°
[0], fl->dl_dst[1], fl->dl_dst[2],

471 
Ê
->
dl_d°
[3], fl->dl_dst[4], fl->dl_dst[5]);

472 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

475 i‡(!(
wûdˇrds
 & 
OFPFW_DL_TYPE
)) {

476 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

478 "ëh-ty≥", 
	`¡ohs
(
Ê
->
dl_ty≥
));

479 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

481 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN
)) {

482 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

484 "vœn-id", 
	`¡ohs
(
Ê
->
dl_vœn
));

485 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

488 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN_PCP
)) {

489 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

491 "vœn-p˝", 
Ê
->
dl_vœn_p˝
);

492 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

495 i‡(
nw_d°_mask
) {

496 
ö_addr
.
s_addr
 = 
Ê
->
nw_d°
 & 
	`ht⁄l
(
nw_d°_mask
);

497 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

499 "d°-ù", 
	`öë_¡ﬂ
(
ö_addr
),

500 
dù_wc
 >= 32 ? 0 : 32 - dip_wc);

501 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

503 i‡(
nw_§c_mask
) {

504 
ö_addr
.
s_addr
 = 
Ê
->
nw_§c
 & 
	`ht⁄l
(
nw_§c_mask
);

505 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

507 "§c-ù", 
	`öë_¡ﬂ
(
ö_addr
),

508 
sù_wc
 >= 32 ? 0 : 32-sip_wc);

509 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

511 i‡(!(
wûdˇrds
 & 
OFPFW_NW_PROTO
)) {

512 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

514 "ù-¥Ÿo", 
Ê
->
nw_¥Ÿo
);

515 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

517 i‡(!(
wûdˇrds
 & 
OFPFW_NW_TOS
)) {

518 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

520 "ù-tos", 
Ê
->
nw_tos
);

521 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

524 i‡(!(
wûdˇrds
 & 
OFPFW_TP_SRC
)) {

525 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

527 "§c-p‹t", 
	`¡ohs
(
Ê
->
ç_§c
));

528 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

531 i‡(!(
wûdˇrds
 & 
OFPFW_TP_DST
)) {

532 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

534 "d°-p‹t", 
	`¡ohs
(
Ê
->
ç_d°
));

535 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

538 i‡(!(
wûdˇrds
 & 
OFPFW_IN_PORT
)) {

539 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

541 "ö-p‹t", 
	`¡ohs
(
Ê
->
ö_p‹t
));

542 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

545  
pbuf
;

546 
	}
}

550 
	$of_vÆid©e_a˘i⁄s
(*
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
)

552 
size_t
 
∑r£d_Àn
 = 0;

553 
uöt16_t
 
a˘_ty≥
;

554 
oÂ_a˘i⁄_hódî
 *
hdr
;

556 
a˘i⁄_Àn
) {

557 
hdr
 = (
oÂ_a˘i⁄_hódî
 *)
a˘i⁄s
;

558 
a˘_ty≥
 = 
	`¡ohs
(
hdr
->
ty≥
);

559 
a˘_ty≥
) {

560 
OFPAT_OUTPUT
:

562 
oÂ_a˘i⁄_ouçut
 *
›_a˘
 = (*)
hdr
;

563 i‡(!
	`¡ohs
(
›_a˘
->
p‹t
)) {

566 
∑r£d_Àn
 = (*
›_a˘
);

569 
OFPAT_SET_VLAN_VID
:

571 
oÂ_a˘i⁄_vœn_vid
 *
vid_a˘
 = (*)
hdr
;

572 
∑r£d_Àn
 = (*
vid_a˘
);

576 
OFPAT_SET_DL_DST
:

577 
OFPAT_SET_DL_SRC
:

579 
oÂ_a˘i⁄_dl_addr
 *
mac_a˘
 = (*)
hdr
;

580 
∑r£d_Àn
 = (*
mac_a˘
);

583 
OFPAT_SET_VLAN_PCP
:

585 
oÂ_a˘i⁄_vœn_p˝
 *
vp˝_a˘
 = (*)
hdr
;

586 
∑r£d_Àn
 = (*
vp˝_a˘
);

590 
OFPAT_STRIP_VLAN
:

592 
oÂ_a˘i⁄_hódî
 *
°rù_vœn_a˘
 
UNUSED
 = (*)
hdr
;

593 
∑r£d_Àn
 = (*
°rù_vœn_a˘
);

596 
OFPAT_SET_NW_SRC
:

597 
OFPAT_SET_NW_DST
:

599 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
 = (*)
hdr
;

600 
∑r£d_Àn
 = (*
nw_addr_a˘
);

605 
	`c_log_îr
("%s:unh™dÀdá˘i⁄ %u", 
FN
, 
a˘_ty≥
);

610 
a˘i⁄_Àn
 -
∑r£d_Àn
;

611 
a˘i⁄s
 = ((
uöt8_t
 *Ô˘i⁄†+ 
∑r£d_Àn
);

615 
	}
}

618 
	$of_Êow_c‹ª˘i⁄
(
Êow
 *
Ê
, 
uöt32_t
 *
wc
)

620 
uöt16_t
 
ëh_¥Ÿo
;

621 
uöt32_t
 
wûdˇrds
;

623 i‡(!
Ê
 || !
wc
)  -1;

625 
wûdˇrds
 = 
	`¡ohl
(*
wc
);

627 i‡(!(
wûdˇrds
 & 
OFPFW_IN_PORT
) &&

628 (!
Ê
->
ö_p‹t
)) {

632 i‡(!(
wûdˇrds
 & 
OFPFW_DL_TYPE
)) {

633 
ëh_¥Ÿo
 = 
	`¡ohs
(
Ê
->
dl_ty≥
);

635 i‡(
ëh_¥Ÿo
 =
ETH_TYPE_ARP
) {

636 
Ê
->
nw_¥Ÿo
 = 0;

637 
Ê
->
nw_tos
 = 0;

638 
Ê
->
ç_§c
 = 0;

639 
Ê
->
ç_d°
 = 0;

640 
wûdˇrds
 |
OFPFW_NW_PROTO
 | 
OFPFW_NW_TOS
 |

641 
OFPFW_TP_DST
 | 
OFPFW_TP_SRC
;

642 } i‡(
ëh_¥Ÿo
 =
ETH_TYPE_IP
) {

643 i‡(
wûdˇrds
 & 
OFPFW_NW_PROTO
) {

644 
Ê
->
ç_§c
 = 0;

645 
Ê
->
ç_d°
 = 0;

646 
wûdˇrds
 |
OFPFW_TP_DST
 | 
OFPFW_TP_SRC
;

649 
Ê
->
ç_§c
 = 0;

650 
Ê
->
ç_d°
 = 0;

651 
Ê
->
nw_§c
 = 0;

652 
Ê
->
nw_d°
 = 0;

653 
Ê
->
nw_tos
 = 0;

654 
Ê
->
nw_¥Ÿo
 = 0;

655 
wûdˇrds
 |
OFPFW_NW_DST_ALL
 | 
OFPFW_NW_SRC_ALL
 | 
OFPFW_NW_PROTO
 |

656 
OFPFW_NW_TOS
 | 
OFPFW_TP_DST
 | 
OFPFW_TP_SRC
;

659 
Ê
->
ç_§c
 = 0;

660 
Ê
->
ç_d°
 = 0;

661 
Ê
->
nw_§c
 = 0;

662 
Ê
->
nw_d°
 = 0;

663 
Ê
->
nw_tos
 = 0;

664 
Ê
->
nw_¥Ÿo
 = 0;

665 
wûdˇrds
 |
OFPFW_NW_DST_ALL
 | 
OFPFW_NW_SRC_ALL
 | 
OFPFW_NW_PROTO
 |

666 
OFPFW_NW_TOS
 | 
OFPFW_TP_DST
 | 
OFPFW_TP_SRC
;

669 *
wc
 = 
	`ht⁄l
(
wûdˇrds
);

672 
	}
}

674 
ölöe
 
uöt32_t


675 
	$of_Æloc_xid
()

677  
	`øndom_uöt32
();

678 
	}
}

680 * 
__Á°∑th


681 
	$of_¥ï_msg
(
size_t
 
Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
xid
)

683 
cbuf
 *
b
;

684 
oÂ_hódî
 *
h
;

686 
b
 = 
	`Æloc_cbuf
(
Àn
);

687 
h
 = 
	`cbuf_put
(
b
, 
Àn
);

689 
h
->
vîsi⁄
 = 
OFP_VERSION
;

690 
h
->
ty≥
 =Åype;

691 
h
->
Àngth
 = 
	`ht⁄s
(
Àn
);

693 i‡(
xid
) {

694 
h
->
xid
 = xid;

696 
h
->
xid
 = 
	`of_Æloc_xid
();

699 
	`mem£t
(
h
 + 1, 0, 
Àn
 - (*h));

701  
b
;

702 
	}
}

704 
cbuf
 * 
__Á°∑th


705 
	$of_¥ï_Êow_mod
(
uöt16_t
 
comm™d
, c⁄° 
Êow
 *flow,

706 
size_t
 
a˘i⁄s_Àn
, 
uöt32_t
 
wûdˇrds
)

708 
oÂ_Êow_mod
 *
ofm
;

709 
size_t
 
Àn
 =  *
ofm
 + 
a˘i⁄s_Àn
;

710 
cbuf
 *
b
;

712 
b
 = 
	`Æloc_cbuf
(
Àn
);

713 
ofm
 = 
	`cbuf_put
(
b
, 
Àn
);

715 
	`mem£t
(
ofm
, 0, 
Àn
);

716 
ofm
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

717 
ofm
->
hódî
.
ty≥
 = 
OFPT_FLOW_MOD
;

718 
ofm
->
hódî
.
Àngth
 = 
	`ht⁄s
(
Àn
);

719 
ofm
->
m©ch
.
wûdˇrds
 = wildcards;

720 
ofm
->
m©ch
.
ö_p‹t
 = 
Êow
->in_port;

721 
	`mem˝y
(
ofm
->
m©ch
.
dl_§c
, 
Êow
->dl_src,  ofm->match.dl_src);

722 
	`mem˝y
(
ofm
->
m©ch
.
dl_d°
, 
Êow
->dl_dst,  ofm->match.dl_dst);

723 
ofm
->
m©ch
.
dl_vœn
 = 
Êow
->dl_vlan;

724 
ofm
->
m©ch
.
dl_ty≥
 = 
Êow
->dl_type;

725 
ofm
->
m©ch
.
dl_vœn_p˝
 = 
Êow
->dl_vlan_pcp;

726 
ofm
->
m©ch
.
nw_§c
 = 
Êow
->nw_src;

727 
ofm
->
m©ch
.
nw_d°
 = 
Êow
->nw_dst;

728 
ofm
->
m©ch
.
nw_¥Ÿo
 = 
Êow
->nw_proto;

729 
ofm
->
m©ch
.
ç_§c
 = 
Êow
->tp_src;

730 
ofm
->
m©ch
.
ç_d°
 = 
Êow
->tp_dst;

731 
ofm
->
comm™d
 = 
	`ht⁄s
(command);

733  
b
;

734 
	}
}

736 
cbuf
 * 
__Á°∑th


737 
	$of_¥ï_Êow_add_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
buf„r_id
,

738 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

739 
uöt16_t
 
i_timeo
, uöt16_à
h_timeo
,

740 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
¥io
)

742 
cbuf
 *
b
 = 
	`of_¥ï_Êow_mod
(
OFPFC_MODIFY_STRICT
, 
Êow
, 
a˘i⁄s_Àn
, 
wûdˇrds
);

743 
oÂ_Êow_mod
 *
ofm
 = (*)(
b
->
d©a
);

744 
oÂ_a˘i⁄_hódî
 *
oÂ_a˘i⁄s
;

746 
ofm
->
idÀ_timeout
 = 
	`ht⁄s
(
i_timeo
);

747 
ofm
->
h¨d_timeout
 = 
	`ht⁄s
(
h_timeo
);

748 
ofm
->
¥i‹ôy
 = 
	`ht⁄s
(
¥io
);

749 
ofm
->
buf„r_id
 = 
	`ht⁄l
(buffer_id);

750 
oÂ_a˘i⁄s
 = (*)(
ofm
 + 1);

751 
	`mem˝y
(
oÂ_a˘i⁄s
, 
a˘i⁄s
, 
a˘i⁄s_Àn
);

753  
b
;

754 
	}
}

756 
cbuf
 *

757 
	$of_¥ï_Êow_dñ_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
wûdˇrds
,

758 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
)

760 
cbuf
 *
b
 = 
	`of_¥ï_Êow_mod
(
°ri˘
 ? 
OFPFC_DELETE_STRICT
:
OFPFC_DELETE
, 
Êow
,

761 0, 
wûdˇrds
);

762 
oÂ_Êow_mod
 *
ofm
 = (*)(
b
->
d©a
);

764 
ofm
->
out_p‹t
 = 
	`ht⁄s
(
›‹t
?:
OFPP_NONE
);

765  
b
;

766 
	}
}

768 * 
__Á°∑th


769 
	$of_¥ï_pkt_out_msg
(
of_pkt_out_∑øms
 *
∑rms
)

771 
uöt8_t
 
tŸ_Àn
;

772 
oÂ_∑ckë_out
 *
out
;

773 
cbuf
 *
b
;

774 *
d©a
;

776 
tŸ_Àn
 = (
oÂ_∑ckë_out
Ë+ 
∑rms
->
a˘i⁄_Àn


777 + 
∑rms
->
d©a_Àn
;

779 
b
 = 
	`of_¥ï_msg
(
tŸ_Àn
, 
OFPT_PACKET_OUT
, ()
∑rms
->
d©a
);

781 
out
 = (*)
b
->
d©a
;

782 
out
->
buf„r_id
 = 
	`ht⁄l
(
∑rms
->buffer_id);

783 
out
->
ö_p‹t
 = 
	`ht⁄s
(
∑rms
->in_port);

784 
out
->
a˘i⁄s_Àn
 = 
	`ht⁄s
(
∑rms
->
a˘i⁄_Àn
);

786 
d©a
 = (
uöt8_t
 *)
out
->
a˘i⁄s
 + 
∑rms
->
a˘i⁄_Àn
;

788 
	`mem˝y
(
out
->
a˘i⁄s
, 
∑rms
->
a˘i⁄_li°
,Ö¨ms->
a˘i⁄_Àn
);

789 
	`mem˝y
(
d©a
, 
∑rms
->d©a,Ö¨ms->
d©a_Àn
);

791  
b
;

792 
	}
}

794 
cbuf
 *

795 
	$of_¥ï_Êow_°©_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
wûdˇrds
,

796 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
)

798 
oÂ_°©s_ªque°
 *
o§
;

799 
oÂ_Êow_°©s_ªque°
 *
of§
;

800 
size_t
 
Àn
 =  *
o§
 +  *
of§
;

801 
cbuf
 *
b
;

803 
b
 = 
	`of_¥ï_msg
(
Àn
, 
OFPT_STATS_REQUEST
, 0);

804 
o§
 = (*)(
b
->
d©a
);

806 
o§
->
ty≥
 = 
	`ht⁄s
(
OFPST_FLOW
);

808 
of§
 = (*)(
o§
 + 1);

810 
of§
->
èbÀ_id
 = 
tbl_id
;

811 
of§
->
out_p‹t
 = 
	`ht⁄s
(
›‹t
?:
OFPP_NONE
);

813 
of§
->
m©ch
.
wûdˇrds
 = wildcards;

814 
of§
->
m©ch
.
ö_p‹t
 = 
Êow
->in_port;

815 
	`mem˝y
(
of§
->
m©ch
.
dl_§c
, 
Êow
->dl_src,  ofsr->match.dl_src);

816 
	`mem˝y
(
of§
->
m©ch
.
dl_d°
, 
Êow
->dl_dst,  ofsr->match.dl_dst);

817 
of§
->
m©ch
.
dl_vœn
 = 
Êow
->dl_vlan;

818 
of§
->
m©ch
.
dl_ty≥
 = 
Êow
->dl_type;

819 
of§
->
m©ch
.
dl_vœn_p˝
 = 
Êow
->dl_vlan_pcp;

820 
of§
->
m©ch
.
nw_§c
 = 
Êow
->nw_src;

821 
of§
->
m©ch
.
nw_d°
 = 
Êow
->nw_dst;

822 
of§
->
m©ch
.
nw_¥Ÿo
 = 
Êow
->nw_proto;

823 
of§
->
m©ch
.
ç_§c
 = 
Êow
->tp_src;

824 
of§
->
m©ch
.
ç_d°
 = 
Êow
->tp_dst;

826  
b
;

827 
	}
}

	@common/mul_of_msg.h

19 #i‚de‡
__MUL_OF_MSG_H__


20 
	#__MUL_OF_MSG_H__


	)

22 
	#OF_ALL_TABLES
 (0xff)

	)

24 
ölöe
 

25 
	$of_gë_d©a_Àn
(*
h
)

27  
	`¡ohs
(((
oÂ_hódî
 *)
h
)->
Àngth
);

28 
	}
}

30 
ölöe
 
boﬁ


31 
	$of_hdr_vÆid
(*
h_¨g
)

33 
oÂ_hódî
 *
h
 = 
NULL
;

35 if(
h_¨g
 =
NULL
)

38 
	`c_log_debug
("(%sËhódî i†NULL\n", 
__FUNCTION__
);

42 
h
 = 
h_¨g
;

43  (
	`¡ohs
(
h
->
Àngth
Ë<4096 && h->
vîsi⁄
 =1 && h->
ty≥
 < 
OFPT_BARRIER_REPLY
);

44 
	}
}

46 
ölöe
 
boﬁ


47 
	$c_≠p_of_hdr_vÆid
(*
h_¨g
)

49 
oÂ_hódî
 *
h
 = 
h_¨g
;

50  
	`¡ohs
(
h
->
Àngth
Ë<4096 && h->
vîsi⁄
 == 1 &&

51 ((
h
->
ty≥
 >0 && h->ty≥ <
C_OFPT_AUX_CMD
));

52 
	}
}

54 
	sof_Êow_mod_∑øms
 {

55 *
	m≠p_ow√r
;

56 
Êow
 *
	mÊow
;

57 *
	ma˘i⁄s
;

58 
size_t
 
	ma˘i⁄_Àn
;

59 
uöt32_t
 
	mwûdˇrds
;

60 
uöt32_t
 
	mbuf„r_id
;

61 
uöt16_t
 
	m¥io
;

62 
uöt16_t
 
	môimeo
;

63 
uöt16_t
 
	mhtimeo
;

64 
uöt8_t
 
	mÊags
;

65 
uöt8_t
 
	mtbl_idx
;

68 
	sof_pkt_out_∑øms
 {

69 
uöt32_t
 
	mbuf„r_id
;

70 
uöt16_t
 
	mö_p‹t
;

71 
uöt16_t
 
	ma˘i⁄_Àn
;

72 *
	ma˘i⁄_li°
;

73 *
	md©a
;

74 
uöt16_t
 
	md©a_Àn
;

75 
uöt8_t
 
	m∑d
[2];

78 
size_t
 
of_make_a˘i⁄_ouçut
(**
pbuf
, size_à
bu‰oom
, 
uöt16_t
 
›‹t
);

79 
size_t
 
of_make_a˘i⁄_£t_vid
(**
pbuf
, size_à
bu‰oom
, 
uöt16_t
 
vid
);

80 
size_t
 
of_make_a˘i⁄_°rù_vœn
(**
pbuf
, size_à
bu‰oom
);

81 
size_t
 
of_make_a˘i⁄_£t_dmac
(**
pbuf
, size_à
bu‰oom
, 
uöt8_t
 *
dmac
);

82 
size_t
 
of_make_a˘i⁄_£t_nw_ßddr
(**
pbuf
, size_à
bu‰oom
, 
uöt32_t
 
nw_ßddr
);

83 
size_t
 
of_make_a˘i⁄_£t_nw_daddr
(**
pbuf
, size_à
bu‰oom
, 
uöt32_t
 
nw_ßddr
);

84 
size_t
 
of_make_a˘i⁄_£t_vœn_p˝
(**
pbuf
, size_à
bu‰oom
, 
uöt8_t
 
vœn_p˝
);

85 
size_t
 
of_make_a˘i⁄_£t_smac
(**
pbuf
, size_à
bu‰oom
, 
uöt8_t
 *
smac
);

86 
size_t
 
of_make_a˘i⁄_£t_nw_tos
(**
pbuf
, size_à
bu‰oom
, 
uöt8_t
 
tos
);

87 
size_t
 
of_make_a˘i⁄_£t_ç_dp‹t
(**
pbuf
, size_à
bu‰oom
, 
uöt16_t
 
p‹t
);

88 
size_t
 
of_make_a˘i⁄_£t_ç_•‹t
(**
pbuf
, size_à
bu‰oom
, 
uöt16_t
 
p‹t
);

89 *
of_dump_a˘i⁄s
(*
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
);

90 *
of_dump_Êow
(
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
);

91 
of_Êow_c‹ª˘i⁄
(
Êow
 *
Ê
, 
uöt32_t
 *
wûdˇrds
);

92 
of_vÆid©e_a˘i⁄s
(*
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
);

93 *
of_dump_wûdˇrds
(
uöt32_t
 
wûdˇrds
);

94 *
of_¥ï_msg
(
size_t
 
Àn
, 
uöt8_t
 
ty≥
, 
uöt32_t
 
xid
);

95 
cbuf
 *
of_¥ï_Êow_mod
(
uöt16_t
 
comm™d
, c⁄° 
Êow
 *flow,

96 
size_t
 
a˘i⁄s_Àn
, 
uöt32_t
 
wûdˇrds
);

97 
cbuf
 *
of_¥ï_Êow_add_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
buf„r_id
,

98 *
a˘i⁄s
, 
size_t
 
a˘i⁄s_Àn
,

99 
uöt16_t
 
i_timeo
, uöt16_à
h_timeo
,

100 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
¥io
);

101 
cbuf
 *
of_¥ï_Êow_dñ_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
wûdˇrds
,

102 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
);

103 *
of_¥ï_pkt_out_msg
(
of_pkt_out_∑øms
 *
∑rms
);

104 
cbuf
 *
of_¥ï_Êow_°©_msg
(c⁄° 
Êow
 *Êow, 
uöt32_t
 
wûdˇrds
,

105 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
);

	@common/mul_packet.h

20 #i‚de‡
__MUL_PACKET_H__


21 
	#__MUL_PACKET_H__


	)

23 
ölöe
 
boﬁ
 
	$is_zîo_ëhî_addr
(c⁄° 
uöt8_t
 *
addr
)

25  !(
addr
[0] |áddr[1] |áddr[2] |áddr[3] |áddr[4] |áddr[5]);

26 
	}
}

28 
ölöe
 
boﬁ
 
	$is_mu…iˇ°_ëhî_addr
(c⁄° 
uöt8_t
 *
addr
)

30  0x01 & 
addr
[0];

31 
	}
}

33 
ölöe
 
boﬁ
 
	$is_loˇl_ëhî_addr
(c⁄° 
uöt8_t
 *
addr
)

35  0x02 & 
addr
[0];

36 
	}
}

38 
ölöe
 
boﬁ
 
	$is_brﬂdˇ°_ëhî_addr
(c⁄° 
uöt8_t
 *
addr
)

40  (
addr
[0] &áddr[1] &áddr[2] &áddr[3] &áddr[4] &áddr[5]) == 0xff;

41 
	}
}

43 
ölöe
 
boﬁ
 
	$is_uniˇ°_ëhî_addr
(c⁄° 
uöt8_t
 *
addr
)

45  !
	`is_mu…iˇ°_ëhî_addr
(
addr
);

46 
	}
}

	@common/mul_service.c

19 
	~"mul_comm⁄.h
"

21 *
	g__£rvî
 = "127.0.0.1";

23 
c_£rvi˚_˛õ¡_sock_öô
(
mul_£rvi˚_t
 *
£rv
, *
__£rvî
);

26 
	$c_£rvi˚_wrôe_evít_sched
(*
c⁄n_¨g
)

28 
c_c⁄n_t
 *
c⁄n
 = 
c⁄n_¨g
;

29 
	`evít_add
((
evít
 *)(
c⁄n
->
wr_evít
), 
NULL
);

30 
	}
}

33 
	$c_£rvi˚_wrôe_evít
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evíts
 UNUSED, *
¨g
)

35 
c_c⁄n_t
 *
c⁄n
 = 
¨g
;

37 
	`c_wr_lock
(&
c⁄n
->
c⁄n_lock
);

38 
	`c_sockë_wrôe_n⁄block_lo›
(
c⁄n
, 
c_£rvi˚_wrôe_evít_sched
);

39 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

40 
	}
}

43 
	$c_£rvi˚_˛r_rcv_buf
(
mul_£rvi˚_t
 *
£rvi˚
)

45 
buf
[1024];

46 
ªt
 = 0;

47 
ªåõs
 = 0;

49 i‡(
£rvi˚
->
c⁄n
.
dód
) {

53 i‡(
	`c_make_sockë_n⁄blockög
(
£rvi˚
->
c⁄n
.
fd
))

54 
	`c_log_îr
("%s: FaûedÅÿ£àn⁄-blockög", 
FN
);

56 
ªt
 = 
	`ªcv
(
£rvi˚
->
c⁄n
.
fd
, 
buf
, 1024, 
MSG_DONTWAIT
);

57 i‡(
ªt
 < 0) {

61 i‡(
ªåõs
++ >= 100) {

62 
	`c_log_îr
("%s:Çoise on service(%s) conn",

63 
FN
, 
£rvi˚
->
£rvi˚_«me
);

64 
ªt
 = -1;

69 i‡(
	`c_make_sockë_blockög
(
£rvi˚
->
c⁄n
.
fd
))

70 
	`c_log_îr
("%s: FaûedÅÿ£àblockög", 
FN
);

72  
ªt
;

73 
	}
}

76 
	$c_£rvi˚_timed_throw_ª•
(
mul_£rvi˚_t
 *
£rvi˚
)

78 
buf
[1024];

79 
ªt
 = 0;

81 i‡(
£rvi˚
->
c⁄n
.
dód
) {

85 
	`u¶ìp
(50000);

86 
	`c_make_sockë_n⁄blockög
(
£rvi˚
->
c⁄n
.
fd
);

87 
ªt
 = 
	`ªcv
(
£rvi˚
->
c⁄n
.
fd
, 
buf
, 1024, 
MSG_DONTWAIT
);

88 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

89 
	`c_log_debug
("Sîvi˚(%sËc⁄√˘i⁄ Brokí..\n", 
£rvi˚
->
£rvi˚_«me
);

90 
	`≥º‹
("c_service_timed_throw_resp");

91 
	`c_£rvi˚_ªc⁄√˘
(
£rvi˚
);

92 
ªt
 = -1;

94 
	`c_make_sockë_blockög
(
£rvi˚
->
c⁄n
.
fd
);

98  
ªt
;

99 
	}
}

102 
	$c_£rvi˚_£nd
(
mul_£rvi˚_t
 *
£rvi˚
, 
cbuf
 *
b
)

104 i‡(
£rvi˚
->
is_˛õ¡
) {

105 
	`c_£rvi˚_˛r_rcv_buf
(
£rvi˚
);

106 
	`c_sockë_wrôe_block_lo›
(&
£rvi˚
->
c⁄n
, 
b
);

109 
	`c_wr_lock
(&
£rvi˚
->
c⁄n
.
c⁄n_lock
);

111 i‡(
	`cbuf_li°_queue_Àn
(&
£rvi˚
->
c⁄n
.
tx_q
) > 1024) {

112 
	`c_wr_u∆ock
(&
£rvi˚
->
c⁄n
.
c⁄n_lock
);

113 
	`‰ì_cbuf
(
b
);

117 
	`cbuf_li°_queue_èû
(&
£rvi˚
->
c⁄n
.
tx_q
, 
b
);

119 
	`c_sockë_wrôe_n⁄block_lo›
(&
£rvi˚
->
c⁄n
,

120 
c_£rvi˚_wrôe_evít_sched
);

122 
	`c_wr_u∆ock
(&
£rvi˚
->
c⁄n
.
c⁄n_lock
);

124 
	}
}

127 
	$c_£rvi˚_„tch_ª•⁄£
(
mul_£rvi˚_t
 *
£rvi˚
, 
cbuf
 *
b
)

129 
£rvi˚
->
c⁄n
.
cbuf
 = 
b
;

130 
	}
}

137 
cbuf
 *

138 
	$c_£rvi˚_waô_ª•⁄£
(
mul_£rvi˚_t
 *
£rvi˚
)

140 
ªt
 = 0;

142 i‡(
£rvi˚
->
c⁄n
.
dód
Ë 
NULL
;

143 
£rvi˚
->
c⁄n
.
cbuf
 = 
NULL
;

145 
ªt
 = 
	`c_sockë_ªad_block_lo›
(
£rvi˚
->
c⁄n
.
fd
, service,

146 &
£rvi˚
->
c⁄n
,

147 
C_SERV_RCV_BUF_SZ
,

148 (
c⁄n_¥oc_t
)(
c_£rvi˚_„tch_ª•⁄£
),

149 
of_gë_d©a_Àn
, 
c_≠p_of_hdr_vÆid
,

150 (
oÂ_hódî
));

151 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

152 
	`c_log_debug
("Sîvi˚(%sËc⁄√˘i⁄ Brokí..\n", 
£rvi˚
->
£rvi˚_«me
);

153 
	`≥º‹
("c_service_wait_repsonse");

154 i‡(
£rvi˚
->
c⁄n
.
cbuf
) {

155 
	`‰ì_cbuf
(
£rvi˚
->
c⁄n
.
cbuf
);

157 
	`c_£rvi˚_ªc⁄√˘
(
£rvi˚
);

158  
NULL
;

160  
£rvi˚
->
c⁄n
.
cbuf
;

162 
	}
}

165 
	$c_£rvi˚_ªad
(
evutû_sockë_t
 
fd
, 
evíts
 
UNUSED
, *
¨g
)

167 
mul_£rvi˚_t
 *
hdl
 = 
¨g
;

168 
ªt
;

170 
ªt
 = 
	`c_sockë_ªad_n⁄block_lo›
(
fd
, 
hdl
, &hdl->
c⁄n
, 
C_SERV_RCV_BUF_SZ
,

171 (
c⁄n_¥oc_t
)(
hdl
->
ev_cb
),

172 
of_gë_d©a_Àn
, 
c_≠p_of_hdr_vÆid
,

173 (
oÂ_hódî
));

175 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

176 
hdl
->
c⁄n
.
dód
 = 1;

177 
	`evít_dñ
((
hdl
->
c⁄n
.
rd_evít
));

178 
	`evít_dñ
(
hdl
->
c⁄n
.
wr_evít
);

179 
	`evít_‰ì
(
hdl
->
c⁄n
.
rd_evít
);

180 
	`evít_‰ì
(
hdl
->
c⁄n
.
wr_evít
);

181 
hdl
->
c⁄n
.
rd_evít
 = 
NULL
;

182 
hdl
->
c⁄n
.
wr_evít
 = 
NULL
;

183 
	`˛o£
(
hdl
->
c⁄n
.
fd
);

184 
	`c_log_debug
("Sîvi˚(%sËc⁄√˘i⁄ Brokí..\n", 
hdl
->
£rvi˚_«me
);

185 
	`‰ì
(
hdl
);

186 
	`≥º‹
("c_service_read");

190 
	}
}

193 
	$c_£rvi˚_vÆidôy_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

194 *
¨g
)

196 
mul_£rvi˚_t
 *
£rvi˚
 = 
¨g
;

197 
timevÆ
 
tv
 = { 5, 0 };

199 i‡(
£rvi˚
->
c⁄n
.
dód
) ;

201 i‡(!
	`mul_£rvi˚_Æive
(
£rvi˚
)) {

202 
	`c_log_îr
("%s: sîvi˚ dõd", 
£rvi˚
->
£rvi˚_«me
);

203  
	`c_£rvi˚_ªc⁄√˘
(
£rvi˚
);

206 
	`evtimî_add
(
£rvi˚
->
vÆid_timî_evít
, &
tv
);

207 
	}
}

210 
	$c_£rvi˚_ªc⁄n_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

211 *
¨g
)

213 
mul_£rvi˚_t
 *
£rvi˚
 = 
¨g
;

214 
timevÆ
 
tv
 = { 5, 0 };

217 
	`c_log_debug
("Rëry C⁄¿tÿ£rvi˚ %s", 
£rvi˚
->
£rvi˚_«me
);

219 if(!
	`c_£rvi˚_˛õ¡_sock_öô
(
£rvi˚
, 
__£rvî
)) {

220 
	`c_log_debug
("C⁄√˘i⁄Åÿ£rvi˚ %†ª°‹ed", 
£rvi˚
->
£rvi˚_«me
);

221 
	`evít_dñ
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

222 
	`evít_‰ì
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

223 
£rvi˚
->
ªc⁄n_timî_evít
 = 
NULL
;

224 
£rvi˚
->
c⁄n
.
dód
 = 0;

225 i‡(
£rvi˚
->
c⁄n_upd©e
) {

226 
£rvi˚
->
	`c⁄n_upd©e
(£rvi˚, 
MUL_SERVICE_UP
);

229 
£rvi˚
->
vÆid_timî_evít
 = 
	`evtimî_√w
(£rvi˚->
ev_ba£
,

230 
c_£rvi˚_vÆidôy_timî
,

231 (*)
£rvi˚
);

232 
	`evtimî_add
(
£rvi˚
->
vÆid_timî_evít
, &
tv
);

236 
	`evtimî_add
(
£rvi˚
->
ªc⁄n_timî_evít
, &
tv
);

237 
	}
}

241 
	$c_£rvi˚_ªc⁄√˘
(
mul_£rvi˚_t
 *
£rvi˚
)

243 
timevÆ
 
tv
 = { 1, 0 };

245 
£rvi˚
->
c⁄n
.
dód
 = 1;

247 
	`˛o£
(
£rvi˚
->
c⁄n
.
fd
);

249 i‡(
£rvi˚
->
ªc⁄n_timî_evít
) {

250 
	`evít_dñ
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

251 
	`evít_‰ì
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

252 
£rvi˚
->
ªc⁄n_timî_evít
 = 
NULL
;

255 i‡(
£rvi˚
->
vÆid_timî_evít
) {

256 
	`evít_dñ
((
evít
 *)(
£rvi˚
->
vÆid_timî_evít
));

257 
	`evít_‰ì
((
evít
 *)(
£rvi˚
->
vÆid_timî_evít
));

258 
£rvi˚
->
vÆid_timî_evít
 = 
NULL
;

261 i‡(
£rvi˚
->
c⁄n_upd©e
) {

262 
£rvi˚
->
	`c⁄n_upd©e
(£rvi˚, 
MUL_SERVICE_DOWN
);

265 
£rvi˚
->
ªc⁄n_timî_evít
 = 
	`evtimî_√w
(£rvi˚->
ev_ba£
,

266 
c_£rvi˚_ªc⁄n_timî
,

267 (*)
£rvi˚
);

268 
	`evtimî_add
(
£rvi˚
->
ªc⁄n_timî_evít
, &
tv
);

271 
	}
}

274 
	$c_£rvi˚_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
 
UNUSED
, *
¨g
)

276 
mul_£rvi˚_t
 *
£rvi˚
 = 
¨g
;

277 
sockaddr_°‹age
 
ss
;

278 
sockÀn_t
 
¶í
 = (
ss
);

279 
fd
 = 
	`ac˚±
(
li°íî
, (
sockaddr
*)&
ss
, &
¶í
);

280 
mul_£rvi˚_t
 *
£rv_ö°
 = 
NULL
;

282 
	`c_log_debug
("%s:", 
FN
);

284 i‡(
fd
 < 0) {

285 
	`≥º‹
("accept");

286 } i‡(
fd
 > 
FD_SETSIZE
) {

287 
	`˛o£
(
fd
);

289 
£rv_ö°
 = 
	`ˇŒoc
(1, (
mul_£rvi˚_t
));

290 
	`as£π
(
£rv_ö°
);

291 
	`mem˝y
(
£rv_ö°
, 
£rvi˚
, (*serv_inst));

292 
	`mem£t
(&
£rv_ö°
->
c⁄n
, 0, (
c_c⁄n_t
));

294 
	`c_make_sockë_n⁄blockög
(
fd
);

295 
£rv_ö°
->
c⁄n
.
fd
 = fd;

296 
£rv_ö°
->
c⁄n
.
rd_evít
 = 
	`evít_√w
(£rv_ö°->
ev_ba£
,

297 
£rv_ö°
->
c⁄n
.
fd
,

298 
EV_READ
|
EV_PERSIST
,

299 
c_£rvi˚_ªad
, 
£rv_ö°
);

301 
£rv_ö°
->
c⁄n
.
wr_evít
 = 
	`evít_√w
(£rv_ö°->
ev_ba£
,

302 
£rv_ö°
->
c⁄n
.
fd
,

303 
EV_WRITE
,

304 
c_£rvi˚_wrôe_evít
,

305 &
£rv_ö°
->
c⁄n
);

306 
	`evít_add
((
evít
 *)(
£rv_ö°
->
c⁄n
.
rd_evít
), 
NULL
);

308 
	}
}

311 
ölöe
 

312 
	$c_£rvi˚_£rvî_sock_öô
(
mul_£rvi˚_t
 *
£rv
, *
£rvî
 
UNUSED
)

314 
	`c_log_îr
("Sîvi˚ Cª©ê%s:%d", 
£rv
->
£rvi˚_«me
, sîv->
£rv_p‹t
);

316 
£rv
->
c⁄n
.
fd
 = 
	`c_£rvî_sockë_¸óã
(
INADDR_ANY
, sîv->
£rv_p‹t
);

317 i‡(
£rv
->
c⁄n
.
fd
 <= 0) {

321 
£rv
->
c⁄n
.
rd_evít
 = 
	`evít_√w
(£rv->
ev_ba£
, sîv->c⁄n.
fd
,

322 
EV_READ
|
EV_PERSIST
,

323 
c_£rvi˚_ac˚±
, (*)
£rv
);

325 
	`evít_add
(
£rv
->
c⁄n
.
rd_evít
, 
NULL
);

328 
	}
}

331 
	$c_£rvi˚_˛õ¡_sock_öô
(
mul_£rvi˚_t
 *
£rv
, *
__£rvî
)

333 
£rv
->
c⁄n
.
fd
 = 
	`c_˛õ¡_sockë_¸óã_blockög
(
__£rvî
,

334 
£rv
->
£rv_p‹t
);

335 i‡(
£rv
->
c⁄n
.
fd
 <= 0) {

340 
	}
}

343 
c_£rvi˚_öô
(
mul_£rvi˚_t
 *
√w_£rvi˚
, *
ba£
,

344 c⁄° *
«me
, 
uöt16_t
 
£rvi˚_p‹t
,

345 (*
£rvi˚_h™dÀr
)(*
£rvi˚
, 
cbuf
 *
msg
))

347 
	`°∫˝y
(
√w_£rvi˚
->
£rvi˚_«me
, 
«me
, 
MAX_SERV_NAME_LEN
 - 1);

348 
√w_£rvi˚
->
ev_ba£
 = 
ba£
;

349 
√w_£rvi˚
->
ev_cb
 = 
£rvi˚_h™dÀr
;

350 
√w_£rvi˚
->
£rv_p‹t
 = 
£rvi˚_p‹t
;

351 
	`c_rw_lock_öô
(&
√w_£rvi˚
->
c⁄n
.
c⁄n_lock
);

352 
	}
}

354 
mul_£rvi˚_t
 *

355 
mul_£rvi˚_°¨t
(*
ba£
, c⁄° *
«me
, 
uöt16_t
 
£rvi˚_p‹t
,

356 (*
£rvi˚_h™dÀr
)(*
£rvi˚
, 
cbuf
 *
msg
))

358 
mul_£rvi˚_t
 *
√w_£rvi˚
 = 
NULL
;

360 i‡(!(
√w_£rvi˚
 = 
	`ˇŒoc
(1, (
mul_£rvi˚_t
)))) {

361 
	`c_log_îr
("%s: C™àÆlo¯£rvi˚", 
FN
);

362  
NULL
;

365 
	`c_£rvi˚_öô
(
√w_£rvi˚
, 
ba£
, 
«me
, 
£rvi˚_p‹t
, 
£rvi˚_h™dÀr
);

367 
	`c_£rvi˚_£rvî_sock_öô
(
√w_£rvi˚
, 
__£rvî
) < 0) {

368 
	`c_log_debug
("C™nŸ sèπ sîvi˚ %s..\n", 
√w_£rvi˚
->
£rvi˚_«me
);

369 
	`¶ìp
(1);

372  
√w_£rvi˚
;

373 
	}
}

375 
mul_£rvi˚_t
 *

376 
mul_£rvi˚_ö°™tüã
(*
ba£
, c⁄° *
«me
, 
uöt16_t
 
£rvi˚_p‹t
,

377 (*
c⁄n_upd©e
)(*
£rvi˚
,

378 
c⁄n_evít
),

379 
boﬁ
 
ªåy_c⁄n
)

381 
mul_£rvi˚_t
 *
√w_£rvi˚
 = 
NULL
;

382 
timevÆ
 
tv
 = { 2, 0 };

384 i‡(!(
√w_£rvi˚
 = 
	`ˇŒoc
(1, (
mul_£rvi˚_t
)))) {

385 
	`c_log_îr
("%s: C™àÆlo¯£rvi˚", 
FN
);

386  
NULL
;

389 
	`c_£rvi˚_öô
(
√w_£rvi˚
, 
ba£
, 
«me
, 
£rvi˚_p‹t
, 
NULL
);

390 
√w_£rvi˚
->
is_˛õ¡
 = 
åue
;

391 
√w_£rvi˚
->
c⁄n_upd©e
 = conn_update;

393 
	`c_£rvi˚_˛õ¡_sock_öô
(
√w_£rvi˚
, 
__£rvî
) < 0) {

394 
	`c_log_debug
("C™nŸ sèπ sîvi˚ %s..\n", 
√w_£rvi˚
->
£rvi˚_«me
);

395 i‡(!
ªåy_c⁄n
) {

396  
NULL
;

398 
	`¶ìp
(1);

401 
√w_£rvi˚
->
vÆid_timî_evít
 = 
	`evtimî_√w
“ew_£rvi˚->
ev_ba£
,

402 
c_£rvi˚_vÆidôy_timî
,

403 (*)
√w_£rvi˚
);

404 
	`evtimî_add
(
√w_£rvi˚
->
vÆid_timî_evít
, &
tv
);

406 
	`c_log_debug
("%s: Sîvi˚ (%sËö°©üãd", 
FN
, 
«me
);

408  
√w_£rvi˚
;

409 
	}
}

412 
	$mul_£rvi˚_de°roy
(
mul_£rvi˚_t
 *
£rvi˚
)

414 i‡(
£rvi˚
->
ªc⁄n_timî_evít
) {

415 
	`evít_dñ
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

416 
	`evít_‰ì
((
evít
 *)(
£rvi˚
->
ªc⁄n_timî_evít
));

419 i‡(!
£rvi˚
->
c⁄n
.
dód
Ë
	`˛o£
(£rvi˚->c⁄n.
fd
);

421 
	`‰ì
(
£rvi˚
);

422 
	}
}

424 
boﬁ


425 
	$mul_£rvi˚_Æive
(
mul_£rvi˚_t
 *
£rvi˚
)

427 
cbuf
 *
b
;

428 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

430 
b
 = 
	`of_¥ï_msg
((*
coÂ_auc
), 
C_OFPT_AUX_CMD
, 0);

432 
coÂ_auc
 = (*)(
b
->
d©a
);

433 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_ECHO
);

435 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

436 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

437 i‡(
b
) {

438 
	`‰ì_cbuf
(
b
);

439  
åue
;

442  
Ál£
;

443 
	}
}

	@common/mul_services.h

20 #i‚de‡
__MUL_SERVICES_H__


21 
	#__MUL_SERVICES_H__


	)

24 
	~"mul_rouã.h
"

25 
	~"mul_rouã_≠•.h
"

28 
	~"mul_å_£rvÀt.h
"

31 
	~"mul_£rvÀt.h
"

33 
	#MUL_TR_SERVICE_NAME
 "mul-å"

	)

34 
	#MUL_ROUTE_SERVICE_NAME
 "mul-rouã"

	)

35 
	#MUL_FAB_CLI_SERVICE_NAME
 "mul-Áb-˛i"

	)

36 
	#MUL_CORE_SERVICE_NAME
 "mul-c‹e"

	)

38 
	#MAX_SWITCHES_PER_CLUSTER
 (128)

	)

40 
	#C_APP_PORT
 7744

	)

41 
	#C_AUX_APP_PORT
 7745

	)

43 
	#MUL_TR_SERVICE_PORT
 12345

	)

44 
	#MUL_FAB_CLI_PORT
 12346

	)

46 
	#C_SERV_RCV_BUF_SZ
 4096

	)

48 
	smul_£rvi˚


50 
	#MAX_SERV_NAME_LEN
 64

	)

51 
	m£rvi˚_«me
[
MAX_SERV_NAME_LEN
];

52 
uöt16_t
 
	m£rv_p‹t
;

53 
c_c⁄n_t
 
	mc⁄n
;

54 
boﬁ
 
	mis_˛õ¡
;

55 
evít_ba£
 *
	mev_ba£
;

56 
evít
 *
	mªc⁄n_timî_evít
;

57 
evít
 *
	mvÆid_timî_evít
;

58 (*
	mev_cb
)(*
	m£rvi˚
, 
cbuf
 *
	mbuf
);

59 
	#MUL_SERVICE_UP
 (0)

	)

60 
	#MUL_SERVICE_DOWN
 (1)

	)

61 (*
	mc⁄n_upd©e
)(*
	m£rvi˚
, 
	mc⁄n_evít
);

62 *
	m¥iv
;

64 
mul_£rvi˚
 
	tmul_£rvi˚_t
;

66 
ölöe
 
boﬁ


67 
	$mul_£rvi˚_avaûabÀ
(
mul_£rvi˚_t
 *
£rvi˚
)

69  !
£rvi˚
->
c⁄n
.
dód
;

70 
	}
}

72 
cbuf
 *
c_£rvi˚_waô_ª•⁄£
(
mul_£rvi˚_t
 *
£rvi˚
);

73 
c_£rvi˚_timed_throw_ª•
(
mul_£rvi˚_t
 *
£rvi˚
);

74 
c_£rvi˚_£nd
(
mul_£rvi˚_t
 *
£rvi˚
, 
cbuf
 *
b
);

75 
c_£rvi˚_ªc⁄√˘
(
mul_£rvi˚_t
 *
£rvi˚
);

76 
mul_£rvi˚_t
 *
mul_£rvi˚_°¨t
(*
ba£
, c⁄° *
«me
, 
uöt16_t
 
£rvi˚_p‹t
,

77 (*
£rvi˚_h™dÀr
)(*
£rvi˚
,

78 
cbuf
 *
msg
));

79 
mul_£rvi˚_t
 *
	`mul_£rvi˚_ö°™tüã
(*
ba£
, c⁄° *
«me
,

80 
uöt16_t
 
£rvi˚_p‹t
,

81 (*
c⁄n_upd©e
)(*
£rvi˚
,

82 
c⁄n_evít
),

83 
boﬁ
 
ªåy_c⁄n
);

84 
	`mul_£rvi˚_de°roy
(
mul_£rvi˚_t
 *
£rvi˚
);

85 
boﬁ
 
	`mul_£rvi˚_Æive
(
mul_£rvi˚_t
 *
£rvi˚
);

	@common/mul_vty.h

20 #i‚de‡
__MUL_VTY_H__


21 
	#__MUL_VTY_H__


	)

23 
	#_QUAGGA_ASSERT_H


	)

24 
	~<zebø.h
>

25 
	~<vîsi⁄.h
>

26 
	~"gë›t.h
"

27 
	~"thªad.h
"

28 
	~"comm™d.h
"

29 
	~"mem‹y.h
"

30 
	~"¥efix.h
"

31 
	~"fûãr.h
"

	@mul/mul.h

19 #i‚de‡
__MUL_H__


20 
	#__MUL_H__


	)

22 
	~"c⁄fig.h
"

23 
	~"mul_comm⁄.h
"

25 
	~"mul_evíts.h
"

26 
	~"mul_thªad.h
"

27 
	~"mul_¥iv.h
"

28 
	~"mul_of.h
"

29 
	~"cc_of_lib.h
"

	@mul/mul_app_interface.c

20 
	~"mul.h
"

22 
	#RETURN_APP_ERR
(
A
, 
B
, 
R
, 
T
, 
C
) \

24 
c_≠p_öfo_t
 *
_≠p
 = (*)
A
; \

25 i‡(
_≠p
 && (_≠p->
≠p_Êags
 & 
C_APP_REMOTE
 || \

26 
_≠p
->
≠p_Êags
 & 
C_APP_AUX_REMOTE
)) { \

27 i‡(!
R
)  0; \

28  
	`c_ªmŸe_≠p_îr‹
(
A
, 
B
, 
T
, 
C
); \

30  
R
; \

32 }0)

	)

34 
c_swôch_≠p_li°_exp
(
c_swôch_t
 *
sw
);

35 
c_swôch_≠p_li°_de_exp
(
c_swôch_t
 *
sw
);

36 
c_≠p_d¥eg_evít
(
c_swôch_t
 *
sw
, *
buf
,

37 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

38 
c_≠p_dpuƒeg_evít
(
c_swôch_t
 *
sw
, *
buf
,

39 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

40 
c_≠p_∑ckë_ö_evít
(
c_swôch_t
 *
sw
, *
buf
,

41 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

42 
c_≠p_p‹t_ch™ge_evít
(
c_swôch_t
 *
sw
, *
buf
,

43 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

44 
c_≠p_Êow_ªmoved_evít
(
c_swôch_t
 *
sw
, *
buf
,

45 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

46 
c_≠p_Êow_mod_Áûed_evít
(
c_swôch_t
 *
sw
, *
buf
,

47 
c_≠p_öfo_t
 *
≠p
, *
¥iv
);

48 
c_≠p_evít_bœckhﬁe
(*
≠p_¨g
, *
pkt_¨g
);

50 
˘æ_hdl_t
 
˘æ_hdl
;

52 
	sc_≠p_h™dÀr_›


54 (*
	m¥e_¥oc
)(
c_swôch_t
 *
	msw
);

55 (*
	m≠p_h™dÀr
)(
c_swôch_t
 *
	msw
, *
	mbuf
,

56 
c_≠p_öfo_t
 *
	m≠p
, *
	m¥iv
);

57 (*
	mpo°_¥oc
)(
c_swôch_t
 *
	msw
);

58 } 
	gc_≠p_h™dÀr_›s
[] = {

59 { 
c_swôch_≠p_li°_exp
, 
c_≠p_d¥eg_evít
, 
NULL
 },

60 { 
NULL
, 
c_≠p_dpuƒeg_evít
, 
c_swôch_≠p_li°_de_exp
 },

61 { 
NULL
, 
c_≠p_∑ckë_ö_evít
, NULL },

62 { 
NULL
, 
c_≠p_p‹t_ch™ge_evít
, NULL },

63 { 
NULL
, 
c_≠p_Êow_ªmoved_evít
, NULL },

64 { 
NULL
, 
c_≠p_Êow_mod_Áûed_evít
, NULL }

67 
	#C_APP_OPS_SZ
 ((
c_≠p_h™dÀr_›s
)/(
c_≠p_h™dÀr_›
))

	)

70 
	$mul_≠p_‰ì_buf
(*
b
)

72 
	`‰ì_cbuf
((
cbuf
 *)
b
);

73 
	}
}

76 
	$c_≠p_dpid_key_‰ì
(*
¨g
)

78 
	`‰ì
(
¨g
);

79 
	}
}

81 
ölöe
 
c_≠p_öfo_t
 *

82 
	$__c_≠p_lookup
(
˘æ_hdl_t
 *
c_hdl
, *
≠p_«me
)

84 
c_≠p_öfo_t
 *
≠p
;

85 
GSLi°
 *
ôî©‹
 = 
NULL
;

87 
ôî©‹
 = 
c_hdl
->
≠p_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

88 
≠p
 = 
ôî©‹
->
d©a
;

89 i‡(!
	`°∫cmp
(
≠p
->
≠p_«me
,áµ_«me, 
C_MAX_APP_STRLEN
)) {

90  
≠p
;

94  
NULL
;

95 
	}
}

97 
c_≠p_öfo_t
 *

98 
	$c_≠p_gë
(
˘æ_hdl_t
 *
c_hdl
, *
≠p_«me
)

100 
c_≠p_öfo_t
 *
≠p
 = 
NULL
;

102 
	`c_rd_lock
(&
c_hdl
->
lock
);

104 i‡((
≠p
 = 
	`__c_≠p_lookup
(
c_hdl
, 
≠p_«me
))) {

105 
	`©omic_öc
(&
≠p
->
ªf
, 1);

108 
	`c_rd_u∆ock
(&
c_hdl
->
lock
);

110  
≠p
;

111 
	}
}

113 
ölöe
 
c_≠p_öfo_t
 *

114 
	$__c_≠p_gë
(
˘æ_hdl_t
 *
c_hdl
, *
≠p_«me
)

116 
c_≠p_öfo_t
 *
≠p
 = 
NULL
;

118 i‡((
≠p
 = 
	`__c_≠p_lookup
(
c_hdl
, 
≠p_«me
))) {

119 
	`©omic_öc
(&
≠p
->
ªf
, 1);

122  
≠p
;

123 
	}
}

126 
	$c_≠p_put
(
c_≠p_öfo_t
 *
≠p
)

128 i‡(
	`©omic_ªad
(&
≠p
->
ªf
) == 0){

129 
	`‰ì
(
≠p
);

131 
	`©omic_dec
(&
≠p
->
ªf
, 1);

134 
	}
}

136 
c_≠p_öfo_t
 *

137 
	$c_≠p_Æloc
(*
˘x
)

139 
c_≠p_öfo_t
 *
≠p
 = 
NULL
;

141 
≠p
 = 
	`ˇŒoc
(1, (
c_≠p_öfo_t
));

142 i‡(!
≠p
) {

143 
	`c_log_îr
("%s: AµáŒo¯Áûed", 
FN
);

144  
NULL
;

147 
≠p
->
˘x
 = ctx;

149  
≠p
;

150 
	}
}

153 
	$c_≥r_swôch_≠p_ªgi°î
(*
k
, *
v
 
UNUSED
, *
¨g
)

155 
c_swôch_t
 *
sw
 = 
k
;

156 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

158 
	`c_wr_lock
(&
sw
->
lock
);

160 i‡(
	`g_¶i°_föd
(
sw
->
≠p_li°
, 
≠p
)) {

161 
	`c_wr_u∆ock
(&
sw
->
lock
);

165 
	`©omic_öc
(&
≠p
->
ªf
, 1);

166 
sw
->
≠p_li°
 = 
	`g_¶i°_≠≥nd
(sw->≠p_li°, 
≠p
);

167 
	`c_wr_u∆ock
(&
sw
->
lock
);

169 
	}
}

172 
	$__c_≥r_swôch_≠p_ªgi°î
(*
k
, *
v
 
UNUSED
, *
¨g
)

174 
c_swôch_t
 *
sw
 = 
k
;

175 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

177 i‡(
	`g_¶i°_föd
(
sw
->
≠p_li°
, 
≠p
)) {

181 
	`©omic_öc
(&
≠p
->
ªf
, 1);

182 
sw
->
≠p_li°
 = 
	`g_¶i°_≠≥nd
(sw->≠p_li°, 
≠p
);

183 
	}
}

186 
	$c_≥r_swôch_≠p_uƒegi°î
(*
k
, *
v
 
UNUSED
, *
¨g
)

188 
c_swôch_t
 *
sw
 = 
k
;

189 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

191 
	`c_wr_lock
(&
sw
->
lock
);

192 
sw
->
≠p_li°
 = 
	`g_¶i°_ªmove
(sw->≠p_li°, 
≠p
);

193 
	`__of_≥r_swôch_dñ_≠p_Êow_ow√rshù
(
sw
, 
≠p
);

194 
	`c_wr_u∆ock
(&
sw
->
lock
);

195 
	`©omic_dec
(&
≠p
->
ªf
, 1);

196 
	}
}

198 
UNUSED


199 
	$__c_≥r_swôch_≠p_uƒegi°î
(*
k
, *
v
 
UNUSED
, *
¨g
)

201 
c_swôch_t
 *
sw
 = 
k
;

202 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

204 
sw
->
≠p_li°
 = 
	`g_¶i°_ªmove
(sw->≠p_li°, 
≠p
);

205 
	`©omic_dec
(&
≠p
->
ªf
, 1);

206 
	}
}

209 
	$c_≥r_≠p_swôch_ªgi°î
(*
¨g
, *
sw_¨g
)

211 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

212 
c_swôch_t
 *
sw
 = 
sw_¨g
;

214 i‡(
≠p
->
≠p_Êags
 & 
C_APP_ALL_SW
 ||

215 
	`g_hash_èbÀ_lookup
(
≠p
->
dpid_hli°
, &
sw
->
DPID
)) {

218 
	`__c_≥r_swôch_≠p_ªgi°î
(
sw
, 
NULL
, 
≠p
);

220 
	}
}

223 
	$c_≥r_≠p_swôch_uƒegi°î
(*
¨g
, *
sw_¨g
)

225 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

226 
c_swôch_t
 *
sw
 = 
sw_¨g
;

228 if(
≠p
->
≠p_Êags
 & 
C_APP_ALL_SW
 ||

229 
	`g_hash_èbÀ_lookup
(
≠p
->
dpid_hli°
, &
sw
->
DPID
)) {

230 
	`__c_≥r_swôch_≠p_uƒegi°î
(
sw
, 
NULL
, 
≠p
);

232 
	}
}

235 
	$c_≠p_evít_q_ít_‰ì
(*
ít
)

237 
	`‰ì
(
ít
);

238 
	}
}

241 
	$c_≥r_swôch_≠p_ª∂ay
(*
k
, *
v
 
UNUSED
, *
¨g
)

244 
c_sw_ª∂ay_q_ít
 *
q_ít
;

245 
GSLi°
 **
≠p_ª∂ay_q
 =(GSLi° **)
¨g
;

246 
cbuf
 *
b
;

247 
oÂ_swôch_„©uªs
 *
osf
;

248 
c_swôch_t
 *
sw
 = 
k
;

250 
	`c_rd_lock
(&
sw
->
lock
);

251 
b
 = 
	`of_¥ï_msg
((*
osf
Ë+ (
sw
->
n_p‹ts
 * (
oÂ_phy_p‹t
)),

252 
OFPT_FEATURES_REPLY
, 0);

254 
osf
 = (*)(
b
->
d©a
);

255 
	`of_swôch_dëaû_öfo
(
sw
, 
osf
);

256 
	`c_rd_u∆ock
(&
sw
->
lock
);

258 i‡(!(
q_ít
 = 
	`ˇŒoc
(1, (
c_sw_ª∂ay_q_ít
)))) {

259 
	`c_log_îr
("%s: q_íàÆlo¯Áûed", 
FN
);

263 
	`©omic_öc
(&
sw
->
ªf
, 1);

264 
q_ít
->
sw
 = sw;

265 
q_ít
->
b
 = b;

267 *
≠p_ª∂ay_q
 = 
	`g_¶i°_≠≥nd
(*≠p_ª∂ay_q, 
q_ít
);

268 
	}
}

272 
	$c_swôch_ª∂ay_Æl
(
˘æ_hdl_t
 *
hdl
, *
≠p_¨g
)

274 
GSLi°
 *
ôî©‹
;

275 
c_sw_ª∂ay_q_ít
 *
q_ít
;

276 
GSLi°
 *
≠p_ª∂ay_q
 = 
NULL
;

277 
	`c_rd_lock
(&
hdl
->
lock
);

279 i‡(
hdl
->
sw_hash_tbl
) {

280 
	`g_hash_èbÀ_f‹óch
(
hdl
->
sw_hash_tbl
,

281 (
GHFunc
)
c_≥r_swôch_≠p_ª∂ay
,

282 (*)&
≠p_ª∂ay_q
);

285 
	`c_rd_u∆ock
(&
hdl
->
lock
);

287 
ôî©‹
 = 
≠p_ª∂ay_q
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

288 
q_ít
 = 
ôî©‹
->
d©a
;

289 
	`c_sig«l_≠p_evít
(
q_ít
->
sw
, q_ít->
b
, 
C_DP_REG
, 
≠p_¨g
, 
NULL
);

290 
	`of_swôch_put
(
q_ít
->
sw
);

293 i‡(
≠p_ª∂ay_q
) {

294 
	`g_¶i°_‰ì_fuŒ
(
≠p_ª∂ay_q
, 
c_≠p_evít_q_ít_‰ì
);

296 
	}
}

299 
mul_ªgi°î_≠p
(*
≠p_¨g
, *
≠p_«me
, 
uöt32_t
 
≠p_Êags
,

300 
uöt32_t
 
ev_mask
, uöt32_à
n_dpid
, 
uöt64_t
 *
dpid_li°
,

301 (*
ev_cb
)(*
≠p_¨g
, *
pkt_¨g
))

303 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

304 
boﬁ
 
is_ªmŸe
 = 
≠p
? 
åue
:
Ál£
;

305 
uöt64_t
 *
dpid
;

306 
c_swôch_t
 *
sw
;

307 
uöt32_t
 
n
;

308 
boﬁ
 
≠p_Æloc
 = 
Ál£
;

310 i‡(!
≠p_«me
) {

311 
	`c_log_îr
("%s: AµÑegi°øti⁄ faûed", 
FN
);

315 i‡(!
≠p
) {

316 
≠p
 = 
	`ˇŒoc
(1, (
c_≠p_öfo_t
));

317 i‡(!
≠p
) {

318 
	`c_log_îr
("%s: AµáŒo¯Áûed", 
≠p_«me
);

321 
≠p_Æloc
 = 
åue
;

324 
	`c_wr_lock
(&
˘æ_hdl
.
lock
);

326 i‡(
	`__c_≠p_gë
(&
˘æ_hdl
, 
≠p_«me
)) {

327 
	`c_wr_u∆ock
(&
˘æ_hdl
.
lock
);

328 
	`c_log_îr
("%s: AµÉxi°s", 
≠p_«me
);

329 i‡(
≠p_Æloc
Ë
	`‰ì
(
≠p
);

333 
	`°∫˝y
(
≠p
->
≠p_«me
,áµ_«me, 
C_MAX_APP_STRLEN
);

334 
≠p
->
≠p_«me
[
C_MAX_APP_STRLEN
-1] = '\0';

335 
≠p
->
≠p_Êags
 =ápp_flags;

336 i‡(
is_ªmŸe
Ë
≠p
->
≠p_Êags
 |
C_APP_REMOTE
;

337 
≠p
->
ev_mask
 =Év_mask;

338 
≠p
->
ev_cb
 =Év_cb?:
c_≠p_evít_bœckhﬁe
;

339 
	`©omic_öc
(&
≠p
->
ªf
, 1);

341 i‡(!(
≠p
->
≠p_Êags
 & 
C_APP_ALL_SW
)) {

343 i‡(!
n_dpid
) {

344 
	`c_wr_u∆ock
(&
˘æ_hdl
.
lock
);

345 
	`c_log_îr
("%s:%†Nÿdpid†giví", 
FN
, 
≠p
->
≠p_«me
);

346 i‡(
≠p_Æloc
Ë
	`‰ì
(
≠p
);

351 
≠p
->
dpid_hli°
 = 
	`g_hash_èbÀ_√w_fuŒ
(
g_öt64_hash
,

352 
g_öt64_equÆ
,

353 
c_≠p_dpid_key_‰ì
,

354 
NULL
);

355 
≠p
->
n_dpid
 =Ç_dpid;

356 
n
 = 0;Ç < 
n_dpid
;Ç++) {

357 
dpid
 = 
	`ˇŒoc
(1, (
uöt64_t
));

358 
	`as£π
(
dpid
);

360 *
dpid
 = 
dpid_li°
[
n
];

361 
	`g_hash_èbÀ_ö£π
(
≠p
->
dpid_hli°
, 
dpid
, dpid);

363 i‡((
sw
 = 
	`__of_swôch_gë
(&
˘æ_hdl
, *
dpid
))) {

364 
	`c_≥r_swôch_≠p_ªgi°î
(
sw
, 
NULL
, 
≠p
);

365 
	`of_swôch_put
(
sw
);

369 
	`__of_swôch_åavî£_Æl
(&
˘æ_hdl
, 
c_≥r_swôch_≠p_ªgi°î
,

370 
≠p
);

373 
˘æ_hdl
.
≠p_li°
 = 
	`g_¶i°_≠≥nd
(˘æ_hdl.≠p_li°, 
≠p
);

374 
	`c_wr_u∆ock
(&
˘æ_hdl
.
lock
);

376 
	`c_log_debug
("%†≠∞ªgi°îed", 
≠p_«me
);

379 
	}
}

382 
	$mul_uƒegi°î_≠p
(*
≠p_«me
)

384 
c_≠p_öfo_t
 *
≠p
;

386 
	`c_wr_lock
(&
˘æ_hdl
.
lock
);

388 i‡(!(
≠p
 = 
	`__c_≠p_gë
(&
˘æ_hdl
, 
≠p_«me
))) {

389 
	`c_wr_u∆ock
(&
˘æ_hdl
.
lock
);

390 
	`c_log_îr
("%s: Unknow¿Aµ", 
≠p_«me
);

394 
˘æ_hdl
.
≠p_li°
 = 
	`g_¶i°_ªmove
(˘æ_hdl.≠p_li°, 
≠p
);

396 
	`__of_swôch_åavî£_Æl
(&
˘æ_hdl
, 
c_≥r_swôch_≠p_uƒegi°î
,

397 
≠p
);

399 i‡(
≠p
->
dpid_hli°
) {

400 
	`g_hash_èbÀ_de°roy
(
≠p
->
dpid_hli°
);

402 
≠p
->
ev_cb
 = 
c_≠p_evít_bœckhﬁe
;

404 
	`c_wr_u∆ock
(&
˘æ_hdl
.
lock
);

406 
	`c_log_debug
("%†≠∞uƒegi°îed", 
≠p_«me
);

407 
	`c_≠p_put
(
≠p
);

410 
	}
}

413 
	$c_swôch_≠p_li°_exp
(
c_swôch_t
 *
sw
)

415 
	`g_¶i°_f‹óch
(
˘æ_hdl
.
≠p_li°
,

416 (
GFunc
)
c_≥r_≠p_swôch_ªgi°î
, 
sw
);

417 
	}
}

420 
	$c_swôch_≠p_li°_de_exp
(
c_swôch_t
 *
sw
)

422 i‡(
sw
->
≠p_li°
) {

423 
	`g_¶i°_f‹óch
(
˘æ_hdl
.
≠p_li°
,

424 (
GFunc
)
c_≥r_≠p_swôch_uƒegi°î
, 
sw
);

425 
	`g_¶i°_‰ì
(
sw
->
≠p_li°
);

427 
	}
}

430 
	$c_ªmŸe_≠p_evít
(*
≠p_¨g
, *
pkt_¨g
,

431 
uöt32_t
 
n_dpid
, 
GHashTabÀ
 *
dpid_hli°
)

433 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

437 
	}
}

440 
	$c_ªmŸe_≠p_îr‹
(*
≠p_¨g
, 
cbuf
 *
b
,

441 
uöt16_t
 
ty≥
, uöt16_à
code
)

443 
cbuf
 *
√w_b
;

444 
c_oÂ_îr‹_msg_t
 *
coÂ_em
;

445 *
d©a
;

446 
size_t
 
d©a_Àn
;

448 
d©a_Àn
 = 
b
->
Àn
 > 
C_OFP_MAX_ERR_LEN
?

449 
C_OFP_MAX_ERR_LEN
 : 
b
->
Àn
;

451 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_em
Ë+ 
d©a_Àn
, 
C_OFPT_ERR_MSG
, 0);

453 
coÂ_em
 = (*)(
√w_b
->
d©a
);

454 
coÂ_em
->
ty≥
 = 
	`ht⁄s
(type);

455 
coÂ_em
->
code
 = 
	`ht⁄l
(code);

457 
d©a
 = (*)(
coÂ_em
 + 1);

458 
	`mem˝y
(
d©a
, 
b
->d©a, 
d©a_Àn
);

463 
	}
}

466 
	$c_ªmŸe_≠p_nŸify_suc˚ss
(*
≠p_¨g
)

468 
cbuf
 *
√w_b
;

469 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
;

471 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_Øc
), 
C_OFPT_AUX_CMD
, 0);

473 
coÂ_Øc
 = (*)(
√w_b
->
d©a
);

474 
coÂ_Øc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_SUCCESS
);

478 
	}
}

482 
	$c_≠p_evít_bœckhﬁe
(*
≠p_¨g
 
UNUSED
, *
pkt_¨g
)

484 
	`‰ì_cbuf
(
pkt_¨g
);

485 
	}
}

487 
ölöe
 

488 
	$c_≠p_evít_föish
(
c_swôch_t
 *
sw
, 
c_≠p_öfo_t
 *
≠p
, *
pkt_¨g
)

490 
c_sw_evít_q_ít
 *
ev_q_ít
;

492 i‡(
≠p
->
≠p_Êags
 & 
C_APP_REMOTE
) {

493 
≠p
->
	`ev_cb
◊µ, 
pkt_¨g
);

495 
ev_q_ít
 = 
	`mÆloc
((*ev_q_ent));

496 i‡(
	`u∆ikñy
(!
ev_q_ít
)) ;

497 
	`©omic_öc
(&
≠p
->
ªf
, 1);

498 
ev_q_ít
->
≠p
 =ápp;

499 
ev_q_ít
->
b
 = 
pkt_¨g
;

500 
sw
->
≠p_evítq
 = 
	`g_¶i°_≠≥nd
(sw->≠p_evítq, 
ev_q_ít
);

502 
	}
}

505 
	$c_≠p_evít_£nd
(*
¨g
, *
u_¨g
)

507 
c_sw_evít_q_ít
 *
ev_q_ít
 = 
¨g
;

509 i‡(
ev_q_ít
->
≠p
->
≠p_Êags
 & 
C_APP_REMOTE
) {

510 
	`c_log_îr
("%s: Unknow¿ªmŸê≠∞evíàqueued", 
FN
);

511 
	`c_≠p_put
(
ev_q_ít
->
≠p
);

515 
ev_q_ít
->
≠p
->
	`ev_cb
(
u_¨g
,Év_q_ít->
b
);

516 
	`c_≠p_put
(
ev_q_ít
->
≠p
);

517 
	`‰ì_cbuf
(
ev_q_ít
->
b
);

518 
	}
}

520 
ölöe
 

521 
	$c_swôch_≠p_evítq_£nd
(
c_swôch_t
 *
sw
)

524 i‡(
sw
->
≠p_evítq
) {

525 
	`g_¶i°_f‹óch
(
sw
->
≠p_evítq
,

526 (
GFunc
)
c_≠p_evít_£nd
, 
sw
);

527 
	`g_¶i°_‰ì_fuŒ
(
sw
->
≠p_evítq
, 
c_≠p_evít_q_ít_‰ì
);

528 
sw
->
≠p_evítq
 = 
NULL
;

530 
	}
}

533 
	$c_≠p_d¥eg_evít
(
c_swôch_t
 *
sw
, *
b
,

534 
c_≠p_öfo_t
 *
≠p
, *
¥iv
 
UNUSED
)

536 
cbuf
 *
√w_b
;

537 
c_oÂ_swôch_add_t
 *
sw_add
;

539 
√w_b
 = 
	`cbuf_ªÆloc_hódroom
(
b
, 0, 0);

540 i‡(!
√w_b
) {

541 
	`c_log_îr
("%s: FaûedÅÿÆlo¯buf", 
FN
);

545 
sw_add
 = (*)(
√w_b
->
d©a
);

546 
	`C_ADD_ALIAS_IN_SWADD
(
sw_add
, 
sw
->
Æüs_id
);

548  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
√w_b
);

549 
	}
}

552 
	$c_≠p_dpuƒeg_evít
(
c_swôch_t
 *
sw
, *
buf
,

553 
c_≠p_öfo_t
 *
≠p
, *
¥iv
 
UNUSED
)

555 
cbuf
 *
b
;

556 
c_oÂ_swôch_dñëe
 *
oÂ_sd
;

557 
	`as£π
(!
buf
);

559 
b
 = 
	`of_¥ï_msg
((
c_oÂ_swôch_dñëe
),

560 
C_OFPT_SWITCH_DELETE
, 0);

562 
oÂ_sd
 = (*)(
b
->
d©a
);

563 
oÂ_sd
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

564 
oÂ_sd
->
sw_Æüs
 = 
	`ht⁄l
(
sw
->
Æüs_id
);

566  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
b
);

567 
	}
}

569 
__Á°∑th


570 
	$c_≠p_∑ckë_ö_evít
(
c_swôch_t
 *
sw
, *
buf
,

571 
c_≠p_öfo_t
 *
≠p
, *
¥iv
)

573 
Êow
 *
Ê
 = 
¥iv
;

574 
cbuf
 *
b
 = 
buf
, *
√w_b
;

575 
size_t
 
room
 = (
c_oÂ_∑ckë_ö
) -

576 (
oÂ_∑ckë_ö
);

577 
c_oÂ_∑ckë_ö
 *
coÂ_pö
;

578 
oÂ_hódî
 *
‹ig_oÂ
 = (*)(
b
->
d©a
);

579 
uöt16_t
 
‹ig_Àn
;

581 
	`as£π
(
b
);

583 
‹ig_Àn
 = 
	`¡ohs
(
‹ig_oÂ
->
Àngth
);

585 
√w_b
 = 
	`cbuf_ªÆloc_hódroom
(
b
, 
room
, 0);

587 
coÂ_pö
 = 
	`cbuf_push
(
√w_b
, 
room
);

588 
coÂ_pö
->
hódî
.
xid
 = 
‹ig_oÂ
->xid;

589 
coÂ_pö
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

590 
coÂ_pö
->
hódî
.
ty≥
 = 
C_OFPT_PACKET_IN
;

591 
coÂ_pö
->
hódî
.
Àngth
 = 
	`ht⁄s
(
room
 + 
‹ig_Àn
);

592 
coÂ_pö
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

593 
coÂ_pö
->
sw_Æüs
 = 
	`ht⁄l
(
sw
->
Æüs_id
);

594 
	`mem˝y
(&
coÂ_pö
->
Ê
, fl, (*fl));

596  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
√w_b
);

597 
	}
}

600 
	$c_≠p_p‹t_ch™ge_evít
(
c_swôch_t
 *
sw
, *
buf
,

601 
c_≠p_öfo_t
 *
≠p
, *
¥iv
)

603 
cbuf
 *
b
 = 
buf
, *
√w_b
;

604 
size_t
 
room
 = (
c_oÂ_p‹t_°©us
) -

605 (
oÂ_p‹t_°©us
);

606 
c_oÂ_p‹t_°©us
 *
coÂ_p°s
;

607 
oÂ_hódî
 *
‹ig_oÂ
 = (*)(
b
->
d©a
);

608 
uöt16_t
 
‹ig_Àn
;

609 
uöt32_t
 
‹ig_xid
;

610 
c_p‹t_cfg_°©e_mask
 *
chg_mask
 = 
¥iv
;

611 
uöt32_t
 
c⁄fig_mask
 = 
chg_mask
 ?

612 
chg_mask
->
c⁄fig_mask
 : 0;

613 
uöt32_t
 
°©e_mask
 = 
chg_mask
 ?

614 
chg_mask
->
°©e_mask
 : 0;

616 
	`as£π
(
b
);

618 
‹ig_Àn
 = 
	`¡ohs
(
‹ig_oÂ
->
Àngth
);

619 
‹ig_xid
 = 
	`¡ohl
(
‹ig_oÂ
->
xid
);

621 
√w_b
 = 
	`cbuf_ªÆloc_hódroom
(
b
, 
room
, 0);

622 i‡(!
√w_b
) {

623 
	`c_log_îr
("%s: FaûedÅÿÆlo¯buf", 
FN
);

627 
coÂ_p°s
 = 
	`cbuf_push
(
√w_b
, 
room
);

628 
coÂ_p°s
->
hódî
.
xid
 = 
‹ig_xid
;

629 
coÂ_p°s
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

630 
coÂ_p°s
->
hódî
.
ty≥
 = 
C_OFPT_PORT_STATUS
;

631 
coÂ_p°s
->
hódî
.
Àngth
 = 
	`ht⁄s
(
room
 + 
‹ig_Àn
);

632 
coÂ_p°s
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

633 
coÂ_p°s
->
sw_Æüs
 = 
	`ht⁄l
(
sw
->
Æüs_id
);

634 
coÂ_p°s
->
c⁄fig_mask
 = 
	`ht⁄l
(config_mask);

635 
coÂ_p°s
->
°©e_mask
 = 
	`ht⁄l
(state_mask);

637  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
√w_b
);

638 
	}
}

641 
	$c_≠p_Êow_ªmoved_evít
(
c_swôch_t
 *
sw
, *
buf
,

642 
c_≠p_öfo_t
 *
≠p
, *
¥iv
)

644 
cbuf
 *
b
 = 
buf
, *
√w_b
;

645 
of_Êow_mod_∑øms
 *
Ê_∑rms
 = 
¥iv
;

646 
oÂ_Êow_ªmoved
 *
ofm
;

647 
c_oÂ_Êow_ªmoved
 *
cofm
;

648 
size_t
 
˝_Àn
 = (*
ofm
Ë- 
	`off£tof
(
oÂ_Êow_ªmoved
, 
ªas⁄
);

650 
	`as£π
(
b
 && 
¥iv
);

652 
ofm
 = (*)(
b
->
d©a
);

654 
√w_b
 = 
	`of_¥ï_msg
((*
cofm
), 
C_OFPT_FLOW_REMOVED
, 0);

655 i‡(!
√w_b
) {

656 
	`c_log_îr
("%s: FaûedÅÿÆlo¯buf", 
FN
);

660 
cofm
 = (*)(
√w_b
->
d©a
);

661 
cofm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

662 
	`mem˝y
(&
cofm
->
Êow
, &
Ê_∑rms
->flow, (flow));

663 
cofm
->
wûdˇrds
 = 
Ê_∑rms
->wildcards;

664 
cofm
->
cookõ
 = 
ofm
->cookie;

665 
cofm
->
¥i‹ôy
 = 
ofm
->priority;

666 
	`mem˝y
(&
cofm
->
ªas⁄
, &
ofm
->ªas⁄, 
˝_Àn
);

668  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
√w_b
);

669 
	}
}

672 
	$c_≠p_Êow_mod_Áûed_evít
(
c_swôch_t
 *
sw
, *
buf
,

673 
c_≠p_öfo_t
 *
≠p
, *
¥iv
)

675 
cbuf
 *
b
 = 
buf
, *
√w_b
;

676 
of_Êow_mod_∑øms
 *
Ê_∑rms
 = 
¥iv
;

677 
oÂ_îr‹_msg
 *
oÂ_îr
;

678 
oÂ_Êow_mod
 *
oÂ_fm
;

679 
c_oÂ_îr‹_msg_t
 *
coÂ_em
;

680 
c_oÂ_Êow_mod_t
 *
coÂ_fm
;

682 
	`as£π
(
b
 && 
¥iv
);

684 
oÂ_îr
 = (*)(
b
->
d©a
);

685 
oÂ_fm
 = (*)(
oÂ_îr
->
d©a
);

687 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_em
Ë+ (
c_oÂ_Êow_mod
),

688 
C_OFPT_ERR_MSG
, 0);

689 i‡(!
√w_b
) {

690 
	`c_log_îr
("%s: FaûedÅÿÆlo¯buf", 
FN
);

694 
coÂ_em
 = (*)(
√w_b
->
d©a
);

695 
coÂ_em
->
ty≥
 = 
oÂ_îr
->type;

696 
coÂ_em
->
code
 = 
oÂ_îr
->code;

698 
coÂ_fm
 = (*)(
coÂ_em
->
d©a
);

699 
coÂ_fm
->
hódî
.
vîsi⁄
 = 
OFP_VERSION
;

700 
coÂ_fm
->
hódî
.
ty≥
 = 
C_OFPT_FLOW_MOD
;

701 
coÂ_fm
->
hódî
.
Àngth
 = 
	`ht⁄s
((*cofp_fm));

703 
coÂ_fm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

704 
coÂ_fm
->
sw_Æüs
 = 
	`ht⁄l
(
sw
->
Æüs_id
);

705 
	`mem˝y
(&
coÂ_fm
->
Êow
, &
Ê_∑rms
->flow, (flow));

706 
coÂ_fm
->
wûdˇrds
 = 
Ê_∑rms
->wildcards;

707 
coÂ_fm
->
¥i‹ôy
 = 
	`ht⁄s
(
Ê_∑rms
->
¥io
);

708 
coÂ_fm
->
comm™d
 = 
oÂ_fm
->command;

710  
	`c_≠p_evít_föish
(
sw
, 
≠p
, 
√w_b
);

711 
	}
}

713 
__Á°∑th


714 
	$c_sig«l_≠p_evít
(
c_swôch_t
 *
sw
, *
b
, 
c_≠p_evít_t
 
evít
,

715 *
≠p_¨g
, *
¥iv
)

717 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

718 
GSLi°
 *
ôî©‹
 = 
NULL
;

719 
c_≠p_h™dÀr_›
 *
≠p_›
;

721 
≠p_›
 = &
evít
[
c_≠p_h™dÀr_›s
];

722 
	`¥e„tch
(
≠p_›
);

724 i‡(
	`u∆ikñy
(
evít
 >
C_APP_OPS_SZ
)) {

725 
	`c_log_îr
("%s: unh™dÀdÉvít", 
FN
);

729 
	`c_sw_hõr_rdlock
(
sw
);

731 i‡(
≠p_›
->
¥e_¥oc
Ë≠p_›->
	`¥e_¥oc
(
sw
);

732 i‡(
≠p
) {

733 
	`C_PROCESS_APP_EVENT_LOOP
(
sw
, 
b
, 
evít
, 
≠p_›
, 
≠p
);

735 
	`C_PROCESS_ALL_APP_EVENT_LOOP
(
sw
, 
b
, 
evít
, 
≠p_›
);

737 i‡(
≠p_›
->
po°_¥oc
Ë≠p_›->
	`po°_¥oc
(
sw
);

739 
	`c_sw_hõr_u∆ock
(
sw
);

741 
	`c_swôch_≠p_evítq_£nd
(
sw
);

744 
	}
}

746 
__Á°∑th


747 
	$c_≠p_Êow_mod_comm™d
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

749 
c_swôch_t
 *
sw
;

750 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

751 
c_oÂ_Êow_mod
 *
coÂ_fm
 = 
d©a
;

752 
size_t
 
a˘i⁄_Àn
 = 
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
) - (*cofp_fm);

753 
of_Êow_mod_∑øms
 
Ê_∑rms
;

754 
ªt
 = -1;

756 
	`as£π
(
≠p
);

758 i‡(
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
Ë< (
c_oÂ_Êow_mod_t
)) {

759 
	`c_log_îr
("%s:Cmd(%uËSizêî∏%u o‡%lu", 
FN
, 
C_OFPT_FLOW_MOD
,

760 
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
),

761 ()(
c_oÂ_Êow_mod_t
));

762 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

765 
	`mem£t
(&
Ê_∑rms
, 0, (fl_parms));

767 i‡(
coÂ_fm
->
Êags
 & 
C_FL_ENT_SWALIAS
) {

768 
sw
 = 
	`of_swôch_Æüs_gë
(&
˘æ_hdl
, ()(
	`¡ohl
(
coÂ_fm
->
sw_Æüs
)));

770 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
coÂ_fm
->
DPID
));

773 i‡(!
sw
) {

774 
	`c_log_îr
("%s: InvÆid swôch-dpid(0x%Œx)", 
FN
,

775 ()
	`¡ohŒ
(
coÂ_fm
->
DPID
));

776 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_DPID
);

779 i‡(
≠p
->
≠p_Êags
 & 
C_APP_AUX_REMOTE
) {

780 
≠p
 = 
	`c_≠p_gë
(&
˘æ_hdl
, 
C_VTY_NAME
);

781 i‡(!
≠p
) {

783 
	`c_log_îr
("%s: %†≠∞nŸ found", 
FN
, 
C_VTY_NAME
);

784 
≠p
 = 
≠p_¨g
;

788 
	`of_Êow_c‹ª˘i⁄
(&
coÂ_fm
->
Êow
, &coÂ_fm->
wûdˇrds
);

790 i‡(
	`of_vÆid©e_a˘i⁄s
(
coÂ_fm
->
a˘i⁄s
, 
a˘i⁄_Àn
)) {

791 
	`c_log_îr
("%s: InvÆidá˘i⁄Üi°", 
FN
);

792 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_ACTION
, 
OFPBAC_BAD_GENERIC
);

795 i‡(
coÂ_fm
->
Êags
 & 
C_FL_ENT_NOCACHE
 &&

796 
coÂ_fm
->
Êags
 & (
C_FL_ENT_LOCAL
 | 
C_FL_ENT_CLONE
)) {

797 
	`c_log_îr
("%s: InvÆid fœgs", 
FN
);

798 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_FLOW_MOD_FAILED
,

799 
OFPFMFC_BAD_FLAG
);

802 
Ê_∑rms
.
≠p_ow√r
 = 
≠p
;

803 
Ê_∑rms
.
Êow
 = &
coÂ_fm
->flow;

804 
Ê_∑rms
.
a˘i⁄_Àn
 =áction_len;

805 
Ê_∑rms
.
wûdˇrds
 = 
coÂ_fm
->wildcards;

806 
Ê_∑rms
.
buf„r_id
 = 
	`¡ohl
(
coÂ_fm
->buffer_id);

807 
Ê_∑rms
.
Êags
 = 
coÂ_fm
->flags;

808 
Ê_∑rms
.
¥io
 = 
	`¡ohs
(
coÂ_fm
->
¥i‹ôy
);

809 
Ê_∑rms
.
tbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

810 
Ê_∑rms
.
ôimeo
 = 
	`¡ohs
(
coÂ_fm
->itimeo);

811 
Ê_∑rms
.
htimeo
 = 
	`¡ohs
(
coÂ_fm
->htimeo);

812 i‡(
a˘i⁄_Àn
) {

813 
Ê_∑rms
.
a˘i⁄s
 = 
	`mÆloc
(
a˘i⁄_Àn
);

814 
	`as£π
(
Ê_∑rms
.
a˘i⁄s
);

817 
	`mem˝y
(
Ê_∑rms
.
a˘i⁄s
, 
coÂ_fm
->a˘i⁄s, 
a˘i⁄_Àn
);

819 i‡(
coÂ_fm
->
comm™d
 =
C_OFPC_ADD
) {

820 
ªt
 = 
coÂ_fm
->
Êags
 & 
C_FL_ENT_NOCACHE
 ?

821 
	`of_£nd_Êow_add_noˇche
(
sw
, 
Ê_∑rms
.
Êow
, fl_∑rms.
buf„r_id
,

822 
Ê_∑rms
.
a˘i⁄s
, fl_∑rms.
a˘i⁄_Àn
,

823 
Ê_∑rms
.
ôimeo
, fl_∑rms.
htimeo
,

824 
Ê_∑rms
.
wûdˇrds
, fl_∑rms.
¥io
) :

825 
	`of_Êow_add
(
sw
, &
Ê_∑rms
);

827 
ªt
 = 
coÂ_fm
->
Êags
 & 
C_FL_ENT_NOCACHE
 ?

828 
	`of_£nd_Êow_dñ_noˇche
(
sw
, 
Ê_∑rms
.
Êow
, fl_∑rms.
wûdˇrds
,

829 
	`¡ohs
(
coÂ_fm
->
›‹t
), 
Ál£
) :

830 
	`of_Êow_dñ
(
sw
, &
Ê_∑rms
);

833 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

835 
	`of_swôch_put
(
sw
);

836 i‡(
≠p
 !
≠p_¨g
) {

837 
	`c_≠p_put
(
≠p
);

840 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_FLOW_MOD_FAILED
, 
OFPFMFC_GENERIC
);

841 
	}
}

844 
__Á°∑th


845 
	$mul_≠p_£nd_Êow_add
(*
≠p_«me
, *
sw_¨g
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

846 
uöt32_t
 
buf„r_id
, *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
,

847 
uöt16_t
 
ôimeo
, uöt16_à
htimeo
, 
uöt32_t
 
wûdˇrds
,

848 
uöt16_t
 
¥io
, 
uöt8_t
 
Êags
)

850 
c_swôch_t
 *
sw
 = 
sw_¨g
;

851 
of_Êow_mod_∑øms
 
Ê_∑rms
;

852 
c_≠p_öfo_t
 *
≠p
;

853 
ªt
 = 0;

855 i‡(
sw
 =
NULL
) {

856 i‡(!–
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
dpid
))) {

857  -
EINVAL
;

860 
	`©omic_öc
(&
sw
->
ªf
, 1);

864 
wûdˇrds
 = 
	`ht⁄l
(wildcards);

866 i‡(
Êags
 & 
C_FL_ENT_NOCACHE
) {

867 
ªt
 = 
	`of_£nd_Êow_add_noˇche
(
sw
, 
Ê
, 
buf„r_id
, 
a˘i⁄s
, 
a˘i⁄_Àn
,

868 
ôimeo
, 
htimeo
, 
wûdˇrds
, 
¥io
);

869 
	`of_swôch_put
(
sw
);

870  
ªt
;

873 
≠p
 = 
	`c_≠p_gë
(&
˘æ_hdl
, (*)
≠p_«me
);

874 i‡(!
≠p
) {

875 
	`of_swôch_put
(
sw
);

876  -
EINVAL
;

879 
	`mem£t
(&
Ê_∑rms
, 0, (fl_parms));

880 
Ê_∑rms
.
≠p_ow√r
 = 
≠p
;

881 
Ê_∑rms
.
Êow
 = 
Ê
;

882 
Ê_∑rms
.
wûdˇrds
 = wildcards;

883 
Ê_∑rms
.
buf„r_id
 = buffer_id;

884 
Ê_∑rms
.
Êags
 = flags;

885 
Ê_∑rms
.
¥io
 =Örio;

886 
Ê_∑rms
.
tbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

887 
Ê_∑rms
.
ôimeo
 = itimeo;

888 
Ê_∑rms
.
htimeo
 = htimeo;

889 
Ê_∑rms
.
a˘i⁄s
 =áctions;

890 
Ê_∑rms
.
a˘i⁄_Àn
 =áction_len;

892 
ªt
 = 
	`of_Êow_add
(
sw
, &
Ê_∑rms
);

894 
	`c_≠p_put
(
≠p
);

895 
	`of_swôch_put
(
sw
);

897  
ªt
;

898 
	}
}

900 
__Á°∑th


901 
	$mul_≠p_£nd_Êow_dñ
(*
≠p_«me
, *
sw_¨g
, 
uöt64_t
 
dpid
, 
Êow
 *
Ê
,

902 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
, uöt16_à
¥io
, 
uöt8_t
 
Êags
)

904 
c_swôch_t
 *
sw
 = 
sw_¨g
;

905 
of_Êow_mod_∑øms
 
Ê_∑rms
;

906 
c_≠p_öfo_t
 *
≠p
;

907 
ªt
 = 0;

909 i‡(
sw
 =
NULL
) {

910 i‡(!–
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
dpid
))) {

911  -
EINVAL
;

914 
	`©omic_öc
(&
sw
->
ªf
, 1);

917 i‡(
Êags
 & 
C_FL_ENT_NOCACHE
) {

918 
ªt
 = 
	`of_£nd_Êow_dñ_noˇche
(
sw
, 
Ê
, 
wûdˇrds
, 
›‹t
, 
Ál£
);

919 
	`of_swôch_put
(
sw
);

920  
ªt
;

923 
≠p
 = 
	`c_≠p_gë
(&
˘æ_hdl
, (*)
≠p_«me
);

924 i‡(!
≠p
) {

925 
	`of_swôch_put
(
sw
);

926  -
EINVAL
;

929 
	`mem£t
(&
Ê_∑rms
, 0, (fl_parms));

930 
Ê_∑rms
.
≠p_ow√r
 = 
≠p
;

931 
Ê_∑rms
.
Êow
 = 
Ê
;

932 
Ê_∑rms
.
wûdˇrds
 = 
	`ht⁄l
(wildcards);

933 
Ê_∑rms
.
Êags
 = flags;

934 
Ê_∑rms
.
¥io
 = 
	`ht⁄s
(prio);;

935 
Ê_∑rms
.
tbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

937 
ªt
 = 
	`of_Êow_dñ
(
sw
, &
Ê_∑rms
);

939 
	`c_≠p_put
(
≠p
);

940 
	`of_swôch_put
(
sw
);

942  
ªt
;

943 
	}
}

945 
__Á°∑th


946 
	$c_≠p_∑ckë_out_comm™d
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

948 
c_swôch_t
 *
sw
;

949 
of_pkt_out_∑øms
 
∑rms
;

950 
c_oÂ_∑ckë_out
 *
coÂ_po
 = 
d©a
;

951 
uöt16_t
 
pkt_Àn
 = 
	`¡ohs
(
coÂ_po
->
hódî
.
Àngth
);

952 
ªt
 = -1;

954 i‡(
	`u∆ikñy
(
pkt_Àn
 < (
c_oÂ_∑ckë_out_t
))) {

955 
	`c_log_îr
("%s:Cmd(%uËSizêî∏%hu o‡%lu", 
FN
, 
C_OFPT_PACKET_OUT
,

956 
pkt_Àn
, ()(
c_oÂ_∑ckë_out_t
));

957 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

960 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
coÂ_po
->
DPID
));

961 i‡(
	`u∆ikñy
(!
sw
)) {

964 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_DPID
);

967 
∑rms
.
a˘i⁄_Àn
 = 
	`¡ohs
(
coÂ_po
->
a˘i⁄s_Àn
);

968 i‡(
	`u∆ikñy
(
pkt_Àn
 < ((*
coÂ_po
)+
∑rms
.
a˘i⁄_Àn
))) {

969 
	`c_log_îr
("%s:Cmd(%uËD©®szÉº (%hu:%lu)", 
FN
,

970 
C_OFPT_PACKET_OUT
, 
pkt_Àn
,

971 ()(*
coÂ_po
Ë+ 
∑rms
.
a˘i⁄_Àn
);

972 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_ACTION
, 
OFPBAC_BAD_LEN
);

975 
∑rms
.
buf„r_id
 = 
	`¡ohl
(
coÂ_po
->buffer_id);

976 
∑rms
.
ö_p‹t
 = 
	`¡ohs
(
coÂ_po
->in_port);

977 
∑rms
.
a˘i⁄_li°
 = 
coÂ_po
->
a˘i⁄s
;

979 
∑rms
.
d©a_Àn
 = 
pkt_Àn
 - ((*
coÂ_po
)+∑rms.
a˘i⁄_Àn
);

980 
∑rms
.
d©a
 = (*)((
uöt8_t
 *)(
coÂ_po
 + 1) +

981 
∑rms
.
a˘i⁄_Àn
);

983 
	`of_£nd_pkt_out
(
sw
, &
∑rms
);

984 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

986 
	`of_swôch_put
(
sw
);

989 
	}
}

991 
__Á°∑th


992 
	$mul_≠p_£nd_pkt_out
(*
sw_¨g
, 
uöt64_t
 
dpid
, *
∑rms_¨g
)

994 
c_swôch_t
 *
sw
 = 
sw_¨g
;

995 
of_pkt_out_∑øms
 *
∑rms
 = 
∑rms_¨g
;

997 i‡(
sw
 =
NULL
) {

998 i‡(!(
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
dpid
))) {

1002 
	`©omic_öc
(&
sw
->
ªf
, 1);

1005 
	`of_£nd_pkt_out
(
sw
, 
∑rms
);

1007 
	`of_swôch_put
(
sw
);

1011 
	}
}

1014 
	$c_≠p_ªgi°î_≠p_comm™d
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

1016 
i
;

1017 
c_oÂ_ªgi°î_≠p
 *
coÂ_ø
 = 
d©a
;

1018 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

1019 
ªt
 = -1;

1021 i‡(
	`¡ohs
(
coÂ_ø
->
hódî
.
Àngth
Ë< (
c_oÂ_ªgi°î_≠p_t
)) {

1022 
	`c_log_îr
("%s:Cmd(%uËSizêî∏%u o‡%lu", 
FN
, 
C_OFPT_REG_APP
,

1023 
	`¡ohs
(
coÂ_ø
->
hódî
.
Àngth
),

1024 ()(
c_oÂ_ªgi°î_≠p_t
));

1025 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1028 
coÂ_ø
->
≠p_Êags
 = 
	`¡ohl
(cofp_ra->app_flags);

1029 
coÂ_ø
->
ev_mask
 = 
	`¡ohl
(cofp_ra->ev_mask);

1030 
coÂ_ø
->
dpid
 = 
	`¡ohl
(cofp_ra->dpid);

1031 
i
 = 0; i < 
coÂ_ø
->
dpid
; i++) {

1032 
coÂ_ø
->
dpid_li°
[
i
] = 
	`¡ohŒ
(cofp_ra->dpid_list[i]);

1035 
ªt
 = 
	`mul_ªgi°î_≠p
(
≠p
, 
coÂ_ø
->
≠p_«me
, coÂ_ø->
≠p_Êags
,

1036 
coÂ_ø
->
ev_mask
, coÂ_ø->
dpid
,

1037 
coÂ_ø
->
dpid_li°
, 
c_ªmŸe_≠p_evít
);

1038 i‡(
ªt
) {

1039 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
,

1040 
OFPBRC_BAD_APP_REG
);

1043 
	`c_swôch_ª∂ay_Æl
(&
˘æ_hdl
, 
≠p
);

1045 
	}
}

1048 
	$c_≠p_uƒegi°î_≠p_comm™d
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

1050 
c_oÂ_uƒegi°î_≠p
 *
coÂ_uø
 = 
d©a
;

1051 
ªt
 = -1;

1053 i‡(
	`¡ohs
(
coÂ_uø
->
hódî
.
Àngth
Ë< (
c_oÂ_uƒegi°î_≠p_t
)) {

1054 
	`c_log_îr
("%s:Cmd(%u) SizeÉrr %u of %lu",

1055 
FN
, 
C_OFPT_UNREG_APP
, 
	`¡ohs
(
coÂ_uø
->
hódî
.
Àngth
),

1056 ()(
c_oÂ_uƒegi°î_≠p_t
));

1057 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1060 
ªt
 = 
	`mul_uƒegi°î_≠p
(
coÂ_uø
->
≠p_«me
);

1061 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
,

1062 
OFPBRC_BAD_APP_UREG
);

1063 
	}
}

1066 
	$c_≠p_£t_Â›s_comm™d
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

1068 
c_oÂ_£t_Â_›s
 *
coÂ_sÂ
 = 
d©a
;

1069 
ªt
 = -1;

1070 
c_swôch_t
 *
sw
;

1072 i‡(
	`¡ohs
(
coÂ_sÂ
->
hódî
.
Àngth
Ë< (
c_oÂ_£t_Â_›s_t
)) {

1073 
	`c_log_îr
("%s:Cmd(%u) SizeÉrr %u of %lu",

1074 
FN
, 
C_OFPT_SET_FPOPS
, 
	`¡ohs
(
coÂ_sÂ
->
hódî
.
Àngth
),

1075 ()(
c_oÂ_£t_Â_›s_t
));

1076 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1079 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
coÂ_sÂ
->
DPID
));

1080 i‡(
	`u∆ikñy
(!
sw
)) {

1081 
	`c_log_îr
("%s: InvÆid swôch-dpid(0x%Œx)", 
FN
,

1082 ()
	`¡ohŒ
(
coÂ_sÂ
->
DPID
));

1083 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, 
ªt
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_DPID
);

1086 
	`¡ohl
(
coÂ_sÂ
->
Â_ty≥
)) {

1087 
C_FP_TYPE_DFL
:

1088 i‡(
sw
->
Â_›s
.
Â_db_dt‹
) {

1089 
sw
->
Â_›s
.
	`Â_db_dt‹
(sw);

1091 
sw
->
Â_›s
.
Â_db_dt‹
 = 
NULL
;

1092 
sw
->
Â_›s
.
Â_db_˘‹
 = 
NULL
;

1094 
sw
->
Â_›s
.
Â_fwd
 = 
of_dÊ_fwd
;

1095 
sw
->
Â_›s
.
Â_p‹t_°©us
 = 
of_dÊ_p‹t_°©us
;

1097 
	`c_log_îr
("Swôch <%Œx> f∞£àtÿdeÁu…", 
sw
->
DPID
);

1099 
C_FP_TYPE_L2
:

1100 i‡(
sw
->
Â_›s
.
Â_db_dt‹
) {

1101 
sw
->
Â_›s
.
	`Â_db_dt‹
(sw);

1104 
sw
->
Â_›s
.
Â_db_dt‹
 = 
c_l2fdb_de°roy
;

1105 
sw
->
Â_›s
.
Â_db_˘‹
 = 
c_l2fdb_öô
;

1107 
sw
->
Â_›s
.
	`Â_db_˘‹
(sw);

1109 
sw
->
Â_›s
.
Â_fwd
 = 
c_l2_Ãn_fwd
;

1110 
sw
->
Â_›s
.
Â_p‹t_°©us
 = 
c_l2_p‹t_°©us
;

1112 
	`c_log_îr
("Swôch <%Œx> f∞£àtÿL2", 
sw
->
DPID
);

1118 
	`of_swôch_put
(
sw
);

1121 
	}
}

1124 
	$c_≠p_£nd_≥r_Êow_öfo
(*
¨g
, 
c_Ê_íåy_t
 *
ít
)

1126 
c_buf_ôî_¨g
 *
ôî_¨g
 = 
¨g
;

1127 
c_oÂ_Êow_mod_t
 *
coÂ_fm
;

1128 *
a˘
;

1129 
cbuf
 *
b
;

1130 
size_t
 
tŸ_Àn
 = 0;

1132 
	`c_rd_lock
(&
ít
->
FL_LOCK
);

1133 i‡(
ôî_¨g
->
wr_±r
 &&

1134 !(
ít
->
FL_FLAGS
 & 
C_FL_ENT_STATIC
)) {

1135 
	`c_rd_u∆ock
(&
ít
->
FL_LOCK
);

1139 
tŸ_Àn
 = (*
coÂ_fm
Ë+ 
ít
->
a˘i⁄_Àn
;

1141 
b
 = 
	`of_¥ï_msg
(
tŸ_Àn
, 
C_OFPT_FLOW_MOD
, 0);

1143 
coÂ_fm
 = (*)(
b
->
d©a
);

1144 
coÂ_fm
->
sw_Æüs
 = 
	`ht⁄l
((
uöt32_t
)
ít
->
sw
->
Æüs_id
);

1145 
coÂ_fm
->
d©≠©h_id
 = 
	`ht⁄Œ
(
ít
->
sw
->
DPID
);

1146 
coÂ_fm
->
comm™d
 = 
C_OFPC_ADD
;

1147 
coÂ_fm
->
Êags
 = 
ít
->
FL_FLAGS
;

1148 
	`mem˝y
(&
coÂ_fm
->
Êow
, &
ít
->
Ê
, (flow));

1149 
coÂ_fm
->
wûdˇrds
 = 
ít
->
FL_WILDCARDS
;

1150 
coÂ_fm
->
¥i‹ôy
 = 
	`ht⁄s
(
ít
->
FL_PRIO
);

1151 
coÂ_fm
->
ôimeo
 = 
	`ht⁄s
(
ít
->
FL_ITIMEO
);

1152 
coÂ_fm
->
htimeo
 = 
	`ht⁄s
(
ít
->
FL_HTIMEO
);

1153 
coÂ_fm
->
buf„r_id
 = 0xffffffff;

1154 
coÂ_fm
->
›‹t
 = 
OFPP_NONE
;

1156 
a˘
 = (*)(
coÂ_fm
+1);

1157 
	`mem˝y
(
a˘
, 
ít
->
a˘i⁄s
,É¡->
a˘i⁄_Àn
);

1159 
	`c_rd_u∆ock
(&
ít
->
FL_LOCK
);

1162 
	}
}

1166 
	$c_≠p_≥r_swôch_Êow_öfo
(*
k
, *
v
 
UNUSED
, *
¨g
)

1168 
c_swôch_t
 *
sw
 = 
k
;

1169 
c_buf_ôî_¨g
 *
ôî_¨g
 = 
¨g
;

1171 
	`of_Êow_åavî£_tbl_Æl
(
sw
, 
ôî_¨g
, 
c_≠p_£nd_≥r_Êow_öfo
);

1172 
	}
}

1175 
	$c_≠p_£nd_Êow_öfo
(*
≠p_¨g
, 
cbuf
 *
b
, 
boﬁ
 
dump_Æl
)

1177 
c_buf_ôî_¨g
 
ôî_¨g
 = { 
NULL
, NULL };

1178 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
 = (*)(
b
->
d©a
);

1179 
c_oÂ_ªq_dpid_©å
 *
coÂ_rda
;

1180 
c_swôch_t
 *
sw
 = 
NULL
;

1182 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
) <

1183 (*
coÂ_Øc
Ë+ (*
coÂ_rda
)) {

1184 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
,

1185 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

1186 (*
coÂ_Øc
Ë+ (*
coÂ_rda
));

1187 
	`c_ªmŸe_≠p_îr‹
(
≠p_¨g
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1191 
ôî_¨g
.
d©a
 = 
≠p_¨g
;

1192 i‡(!
dump_Æl
) {

1193 
ôî_¨g
.
wr_±r
 = 
≠p_¨g
;

1196 
coÂ_rda
 = (*)(
coÂ_Øc
->
d©a
);

1197 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
coÂ_rda
->
d©≠©h_id
));

1198 i‡(!
sw
) {

1199 
	`c_log_îr
("%s: Swôch(0x%ŒxËnŸ found", 
FN
, 
	`¡ohŒ
(
coÂ_rda
->
d©≠©h_id
));

1200 i‡(!
coÂ_rda
->
d©≠©h_id
) {

1201 
	`of_swôch_åavî£_Æl
(&
˘æ_hdl
, 
c_≠p_≥r_swôch_Êow_öfo
,

1202 &
ôî_¨g
);

1203 
d⁄e
;

1205 
	`c_ªmŸe_≠p_îr‹
(
≠p_¨g
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_DPID
);

1209 
	`of_Êow_åavî£_tbl_Æl
(
sw
, &
ôî_¨g
, 
c_≠p_£nd_≥r_Êow_öfo
);

1211 
	`of_swôch_put
(
sw
);

1213 
d⁄e
:

1214 
	`c_ªmŸe_≠p_nŸify_suc˚ss
(
≠p_¨g
);

1217 
	}
}

1220 
	$c_≠p_≥r_swôch_brõf_öfo
(*
k
, *
v
 
UNUSED
, *
¨g
)

1222 
c_swôch_t
 *
sw
 = 
k
;

1223 
c_buf_ôî_¨g
 *
ôî_¨g
 = 
¨g
;

1224 
c_oÂ_swôch_brõf
 *
coÂ_sb
 = (*)(
ôî_¨g
->
wr_±r
);

1226 
	`c_rd_lock
(&
sw
->
lock
);

1227 
	`of_swôch_brõf_öfo
(
sw
, 
coÂ_sb
);

1229 
	`c_rd_u∆ock
(&
sw
->
lock
);

1230 
ôî_¨g
->
wr_±r
 +(*
coÂ_sb
);

1231 
	}
}

1234 
	$c_≠p_£nd_brõf_swôch_öfo
(*
≠p_¨g
, 
cbuf
 *
b
)

1236 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

1237 
c_buf_ôî_¨g
 
ôî_¨g
 = { 
NULL
, NULL };

1238 
size_t
 
n_swôches
 = 0;

1239 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
;

1241 
	`c_rd_lock
(&
˘æ_hdl
.
lock
);

1243 i‡(!
˘æ_hdl
.
sw_hash_tbl
 ||

1244 !(
n_swôches
 = 
	`g_hash_èbÀ_size
(
˘æ_hdl
.
sw_hash_tbl
))) {

1245 
	`c_rd_u∆ock
(&
˘æ_hdl
.
lock
);

1246 
	`c_ªmŸe_≠p_îr‹
(
≠p_¨g
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_NO_INFO
);

1250 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd_t
) +

1251 (
n_swôches
 * (
c_oÂ_swôch_brõf_t
)),

1252 
C_OFPT_AUX_CMD
, 0);

1253 
coÂ_Øc
 = (*)(
b
->
d©a
);

1254 
coÂ_Øc
->
cmd_code
 = 
	`¡ohl
(
C_AUX_CMD_MUL_GET_SWITCHES_REPLY
);

1255 
ôî_¨g
.
wr_±r
 = 
coÂ_Øc
->
d©a
;

1256 
ôî_¨g
.
d©a
 = (*)(
b
->data);

1258 
	`__of_swôch_åavî£_Æl
(&
˘æ_hdl
, 
c_≠p_≥r_swôch_brõf_öfo
,

1259 &
ôî_¨g
);

1261 
	`c_rd_u∆ock
(&
˘æ_hdl
.
lock
);

1265 
	}
}

1268 
	$c_≠p_£nd_dëaû_swôch_öfo
(*
≠p_¨g
, 
cbuf
 *
b
)

1270 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
 = (*)(
b
->
d©a
);

1271 
c_oÂ_ªq_dpid_©å
 *
coÂ_rda
;

1272 
oÂ_swôch_„©uªs
 *
osf
;

1273 
c_swôch_t
 *
sw
;

1275 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
) <

1276 (*
coÂ_Øc
Ë+ (*
coÂ_rda
)) {

1277 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
, 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

1278 (*
coÂ_Øc
Ë+ (*
coÂ_rda
));

1279 
	`c_ªmŸe_≠p_îr‹
(
≠p_¨g
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1282 
coÂ_rda
 = (*)(
coÂ_Øc
->
d©a
);

1283 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
coÂ_rda
->
d©≠©h_id
));

1284 i‡(!
sw
) {

1285 
	`c_ªmŸe_≠p_îr‹
(
≠p_¨g
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_NO_INFO
);

1289 
	`c_rd_lock
(&
sw
->
lock
);

1290 
b
 = 
	`of_¥ï_msg
((*
osf
Ë+ (
sw
->
n_p‹ts
 * (
oÂ_phy_p‹t
)),

1291 
OFPT_FEATURES_REPLY
, 0);

1293 
osf
 = (*)(
b
->
d©a
);

1294 
	`of_swôch_dëaû_öfo
(
sw
, 
osf
);

1295 
	`c_rd_u∆ock
(&
sw
->
lock
);

1296 
	`of_swôch_put
(
sw
);

1300 
	}
}

1303 
	$c_≠p_aux_ªque°_h™dÀr
(*
≠p_¨g
, 
cbuf
 *
b
, *
d©a
)

1305 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
 = 
d©a
;

1307 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
Ë< (
c_oÂ_aux≠p_cmd
)) {

1308 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
, 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

1309 (
c_oÂ_aux≠p_cmd
));

1310 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, -1, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

1313 
	`¡ohl
(
coÂ_Øc
->
cmd_code
)) {

1314 
C_AUX_CMD_MUL_GET_SWITCHES
:

1315 
	`c_≠p_£nd_brõf_swôch_öfo
(
≠p_¨g
, 
b
);

1317 
C_AUX_CMD_MUL_GET_SWITCH_DETAIL
:

1318 
	`c_≠p_£nd_dëaû_swôch_öfo
(
≠p_¨g
, 
b
);

1320 
C_AUX_CMD_MUL_GET_APP_FLOW
:

1321 
	`c_≠p_£nd_Êow_öfo
(
≠p_¨g
, 
b
, 
Ál£
);

1323 
C_AUX_CMD_MUL_GET_ALL_FLOWS
:

1324 
	`c_≠p_£nd_Êow_öfo
(
≠p_¨g
, 
b
, 
åue
);

1326 
	`RETURN_APP_ERR
(
≠p_¨g
, 
b
, -1, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_GENERIC
);

1331 
	}
}

1334 
	$c_aux_≠p_öô
(*
≠p_¨g
)

1336 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

1338 
≠p
->
≠p_Êags
 = 
C_APP_AUX_REMOTE
;

1339 
≠p
->
ev_cb
 = 
c_ªmŸe_≠p_evít
;

1340 
	}
}

1342 
__Á°∑th


1343 
	$__mul_≠p_comm™d_h™dÀr
(*
≠p_¨g
, 
cbuf
 *
b
)

1345 
oÂ_hódî
 *
hdr
 = (*)(
b
->
d©a
);

1347 
hdr
->
ty≥
) {

1348 
C_OFPT_FLOW_MOD
:

1349  
	`c_≠p_Êow_mod_comm™d
(
≠p_¨g
, 
b
, 
hdr
);

1350 
C_OFPT_PACKET_OUT
:

1351  
	`c_≠p_∑ckë_out_comm™d
(
≠p_¨g
, 
b
, 
hdr
);

1352 
C_OFPT_REG_APP
:

1353  
	`c_≠p_ªgi°î_≠p_comm™d
(
≠p_¨g
, 
b
, 
hdr
);

1354 
C_OFPT_UNREG_APP
:

1355  
	`c_≠p_uƒegi°î_≠p_comm™d
(
≠p_¨g
, 
b
, 
hdr
);

1356 
C_OFPT_SET_FPOPS
:

1357  
	`c_≠p_£t_Â›s_comm™d
(
≠p_¨g
, 
b
, 
hdr
);

1358 
C_OFPT_AUX_CMD
:

1359  
	`c_≠p_aux_ªque°_h™dÀr
(
≠p_¨g
, 
b
, 
hdr
);

1363 
	}
}

1365 
__Á°∑th


1366 
	$mul_≠p_comm™d_h™dÀr
(*
≠p_«me
, *
buf
)

1368 
c_≠p_öfo_t
 *
≠p
 = 
NULL
;

1369 
cbuf
 *
b
 = 
buf
;

1370 
oÂ_hódî
 *
hdr
 = (*)(
b
->
d©a
);

1371 
ªt
;

1373 
	`as£π
(
b
 && 
≠p_«me
);

1375 
	`c_rd_lock
(&
˘æ_hdl
.
lock
);

1377 i‡(
hdr
->
ty≥
 !
C_OFPT_REG_APP
 &&

1378 !(
≠p
 = 
	`__c_≠p_gë
(&
˘æ_hdl
, (*)
≠p_«me
))) {

1379 
	`c_rd_u∆ock
(&
˘æ_hdl
.
lock
);

1380 
	`c_log_îr
("%s: Unknow¿Aµ", (*)
≠p_«me
);

1384 
	`c_rd_u∆ock
(&
˘æ_hdl
.
lock
);

1386 
ªt
 = 
	`__mul_≠p_comm™d_h™dÀr
(
≠p
, 
b
);

1388 
	`c_≠p_put
(
≠p
);

1390 
	`‰ì_cbuf
(
b
);

1391  
ªt
;

1392 
	}
}

1395 
	$mod_öôˇŒs
(
c_≠p_˘x
 *
≠p_˘x
)

1397 
öôˇŒ_t
 *
mod_öô
;

1399 
mod_öô
 = &
__°¨t_modöô_£c
;

1401 (*
mod_öô
)(
≠p_˘x
->
cmn_˘x
.
ba£
);

1402 
mod_öô
++;

1403 } 
mod_öô
 < &
__°›_modöô_£c
);

1404 
	}
}

1407 
	$c_buûtö_≠p_°¨t
(*
¨g
)

1409 
c_≠p_˘x
 *
≠p_˘x
 = 
¨g
;

1411 i‡(
≠p_˘x
->
thªad_idx
 == 0) {

1412 
	`mod_öôˇŒs
(
≠p_˘x
);

1416 
	}
}

1419 
UNUSED


1420 
	$c_≠p_maö_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

1421 *
¨g
)

1423 
c_≠p_˘x
 *
≠p_˘x
 = 
¨g
;

1424 
timevÆ
 
tv
 = { 1 , 0 };

1426 
	`evtimî_add
(
≠p_˘x
->
≠p_maö_timî_evít
, &
tv
);

1427 
	}
}

1430 
	$c_≠p_vty
(*
¨g
 
UNUSED
)

1434 
	}
}

1437 
	$c_≠p_maö
(*
¨g
 
UNUSED
)

1441 
	}
}

1443 
moduÀ_öô
(
c_≠p_maö
);

1444 
moduÀ_vty_öô
(
c_≠p_vty
);

	@mul/mul_events.c

19 
	~"mul.h
"

21 
c_w‹kî_do_swôch_dñ
(
c_w‹kî_˘x
 *
c_wrk_˘x
,

22 
c_swôch_t
 *
sw
);

23 
c_w‹kî_do_≠p_dñ
(
c_≠p_˘x
 *c_app_ctx,

24 
c_≠p_öfo_t
 *
≠p
);

27 
	$c_wrôe_evít_sched
(*
c⁄n_¨g
)

29 
c_c⁄n_t
 *
c⁄n
 = 
c⁄n_¨g
;

30 
	`evít_add
((
evít
 *)(
c⁄n
->
wr_evít
), 
NULL
);

31 
	}
}

34 
	$c_≥r_sw_timî
(*
¨g_sw
, *
¨g_time
)

36 
c_swôch_t
 *
sw
 = 
¨g_sw
;

37 
c_w‹kî_˘x
 *
w_˘x
 = 
sw
->
˘x
;

38 
uöt64_t
 
time
 = *(uöt64_à*)
¨g_time
;

39 
uöt64_t
 
time_diff
;

40 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
w_˘x
->
thªad_d©a
;

42 i‡(
sw
->
swôch_°©e
 !
SW_REGISTERED
) {

43 
	`__of_£nd_„©uªs_ªque°
(
sw
);

47 
time_diff
 = 
time
 - 
sw
->
œ°_ª‰esh_time
;

48 i‡(
time_diff
 > 
	`TIME_uS
(30)) {

49 
	`c_log_debug
("Timög ouàswôch_id(0x%Œx)\n", 
sw
->
DPID
);

50 
t_d©a
->
sw_li°
 = 
	`g_¶i°_ªmove
—_d©a->sw_li°, 
sw
);

51 
	`c_w‹kî_do_swôch_dñ
(
sw
->
˘x
, sw);

54 } i‡(
time_diff
 > 
	`TIME_uS
(10)) {

55 
	`of_£nd_echo_ªque°
(
sw
);

58 i‡(
sw
->
ˇ∑bûôõs
 & 
OFPC_FLOW_STATS
) {

59 
time_diff
 = 
time
 - 
sw
->
œ°_ßm∂e_time
;

61 i‡(
time_diff
 > 
	`TIME_uS
(5)) {

62 
	`of_≥r_swôch_Êow_°©s_sˇn
(
sw
, 
time
);

66 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

67 
	}
}

70 
	$c_≥r_w‹kî_timî_evít
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

71 *
¨g
)

73 
c_w‹kî_˘x
 *
w_˘x
 = 
¨g
;

74 
timevÆ
 
tv
 = { 
C_PER_WORKER_TIMEO
, 0 };

75 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
w_˘x
->
thªad_d©a
;

76 
uöt64_t
 
cuº_time
;

78 
cuº_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

79 i‡(
t_d©a
->
sw_li°
) {

80 
	`g_¶i°_f‹óch
(
t_d©a
->
sw_li°
, 
c_≥r_sw_timî
, &
cuº_time
);

83 
	`evtimî_add
(
w_˘x
->
w‹kî_timî_evít
, &
tv
);

84 
	}
}

87 
	$c_w‹kî_ùc_ªad
(
evutû_sockë_t
 
fd
, 
evít
 
UNUSED
, *
¨g
)

89 
c_cmn_˘x
 *
cmn_˘x
 = 
¨g
;

90 
ssize_t
 
ªt
;

91 
c_c⁄n_t
 *
c⁄n
;

92 
thªad_idx
;

94 
cmn_˘x
->
thªad_ty≥
) {

95 
THREAD_WORKER
:

97 
c_w‹kî_˘x
 *
w_˘x
 = 
¨g
;

98 
c⁄n
 = &
w_˘x
->
maö_wrk_c⁄n
;

99 
thªad_idx
 = 
w_˘x
->thread_idx;

102 
THREAD_APP
:

104 
c_≠p_˘x
 *
≠p_˘x
 = 
¨g
;

105 
c⁄n
 = &
≠p_˘x
->
maö_wrk_c⁄n
;

106 
thªad_idx
 = 
≠p_˘x
->thread_idx;

110 
	`c_log_îr
("%s: Unh™dÀdÅhªadÅy≥(%u)", 
FN
, 
cmn_˘x
->
thªad_ty≥
);

114 
ªt
 = 
	`c_sockë_ªad_n⁄block_lo›
(
fd
, 
¨g
, 
c⁄n
, 
CIPC_RCV_BUF_SZ
,

115 
c_ùc_msg_rcv
, 
c_ùc_gë_d©a_Àn
,

116 
c_ùc_hdr_vÆid
, (
c_ùc_hdr
));

118 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

119 
	`c_log_w¨n
("ThreadÅype %u id %u ipcÑd socket:DEAD(%d)",

120 
cmn_˘x
->
thªad_ty≥
, 
thªad_idx
,
ªt
);

121 
	`≥º‹
("ipc-socket");

122 
	`evít_‰ì
(
	`C_EVENT
(
c⁄n
->
rd_evít
));

126 
	}
}

129 
	$c_thªad_wrôe_evít
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evíts
 UNUSED, *
¨g
)

131 
c_c⁄n_t
 *
c⁄n
 = 
¨g
;

133 
	`c_wr_lock
(&
c⁄n
->
c⁄n_lock
);

134 
	`c_sockë_wrôe_n⁄block_lo›
(
c⁄n
, 
c_wrôe_evít_sched
);

135 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

136 
	}
}

144 
__Á°∑th


145 
	$c_swôch_ªad_n⁄block_lo›
(
fd
, *
¨g
, 
c_c⁄n_t
 *
c⁄n
,

146 c⁄° 
size_t
 
rcv_buf_sz
,

147 
c⁄n_¥oc_t
 
¥oc_msg
 )

149 
ssize_t
 
rd_sz
 = -1;

150 
cbuf
 
cuº_b
, *
b
 = 
NULL
;

151 
lo›_˙t
 = 0;

154 i‡(!
c⁄n
->
cbuf
) {

155 
b
 = 
	`Æloc_cbuf
(
rcv_buf_sz
);

157 
b
 = 
c⁄n
->
cbuf
;

161 i‡(!
	`cbuf_èûroom
(
b
)) {

162 
cbuf
 *
√w
;

164 
√w
 = 
	`Æloc_cbuf
(
b
->
Àn
 + 
rcv_buf_sz
);

165 i‡(
b
->
Àn
) {

166 
	`mem˝y
(
√w
->
d©a
, 
b
->d©a, b->
Àn
);

167 
	`cbuf_put
(
√w
, 
b
->
Àn
);

169 
	`‰ì_cbuf
(
b
);

170 
b
 = 
√w
;

173 i‡(++
lo›_˙t
 < 100) {

174 
rd_sz
 = 
	`ªcv
(
fd
, 
b
->
èû
, 
	`cbuf_èûroom
(b), 0);

176 
rd_sz
 = -1;

179 
	`c_thªad_sg_tx_sync
(
c⁄n
);

181 i‡(
rd_sz
 <= 0) {

182 
c⁄n
->
cbuf
 = 
b
;

186 
	`cbuf_put
(
b
, 
rd_sz
);

188 
b
->
Àn
 >(
oÂ_hódî
) &&

189 
b
->
Àn
 >
	`¡ohs
(((
oÂ_hódî
 *)(b->
d©a
))->
Àngth
)) {

191 i‡(!
	`of_hdr_vÆid
(
b
->
d©a
)) {

192 
	`c_log_îr
("%s: C‹ru±ed hódî", 
FN
);

196 
cuº_b
.
d©a
 = 
b
->data;

197 
cuº_b
.
Àn
 = 
	`¡ohs
(((
oÂ_hódî
 *)(
b
->
d©a
))->
Àngth
);

198 
cuº_b
.
èû
 = 
b
->
d©a
 + cuº_b.
Àn
;

201 
	`¥oc_msg
(
¨g
, &
cuº_b
);

202 
	`cbuf_puŒ
(
b
, 
cuº_b
.
Àn
);

204 
	`c_thªad_sg_tx_sync
(
c⁄n
);

208  
rd_sz
;

209 
	}
}

213 
__Á°∑th


214 
	$c_swôch_thªad_ªad
(
evutû_sockë_t
 
fd
, 
evíts
 
UNUSED
, *
¨g
)

216 
c_swôch_t
 *
sw
 = 
¨g
;

217 
ªt
;

218 
c_w‹kî_˘x
 *
w_˘x
 = 
sw
->
˘x
;

220 
ªt
 = 
	`c_swôch_ªad_n⁄block_lo›
(
fd
, 
sw
, &sw->
c⁄n
, 
OFC_RCV_BUF_SZ
,

221 
of_swôch_ªcv_msg
);

222 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

224 
	`≥º‹
("c_switch_thread_read");

225 
sw
->
c⁄n
.
dód
 = 1;

226 
	`c_w‹kî_do_swôch_dñ
(
w_˘x
, 
sw
);

230 
	}
}

233 
	$c_≠p_thªad_ªad
(
evutû_sockë_t
 
fd
, 
evíts
 
UNUSED
, *
¨g
)

235 
c_≠p_öfo_t
 *
≠p
 = 
¨g
;

236 
ªt
;

237 
c_≠p_˘x
 *
≠p_˘x
 = 
≠p
->
˘x
;

239 
ªt
 = 
	`c_sockë_ªad_n⁄block_lo›
(
fd
, 
≠p
, &≠p->
≠p_c⁄n
, 
OFC_RCV_BUF_SZ
,

240 (
c⁄n_¥oc_t
)
__mul_≠p_comm™d_h™dÀr
,

241 
of_gë_d©a_Àn
, 
c_≠p_of_hdr_vÆid
,

242 (
oÂ_hódî
));

243 i‡(
	`c_ªcvd_sock_dód
(
ªt
)) {

244 
	`c_log_îr
("%s Application socket dead",

245 
≠p
->
≠p_Êags
 & 
C_APP_AUX_REMOTE
 ?"Aux":"");

246 
	`≥º‹
("app-socket");

247 
≠p
->
≠p_c⁄n
.
dód
 = 1;

248 
	`c_w‹kî_do_≠p_dñ
(
≠p_˘x
, 
≠p
);

252 
	}
}

255 
	$c_w‹kî_do_≠p_dñ
(
c_≠p_˘x
 *c_app_ctx,

256 
c_≠p_öfo_t
 *
≠p
)

258 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
c_≠p_˘x
->
thªad_d©a
;

260 
	`evít_dñ
(
	`C_EVENT
(
≠p
->
≠p_c⁄n
.
rd_evít
));

261 
	`evít_dñ
(
	`C_EVENT
(
≠p
->
≠p_c⁄n
.
wr_evít
));

262 
	`evít_‰ì
(
	`C_EVENT
(
≠p
->
≠p_c⁄n
.
rd_evít
));

263 
	`evít_‰ì
(
	`C_EVENT
(
≠p
->
≠p_c⁄n
.
wr_evít
));

264 
	`˛o£
(
≠p
->
≠p_c⁄n
.
fd
);

266 
t_d©a
->
≠p_li°
 = 
	`g_¶i°_ªmove
—_d©a->≠p_li°, 
≠p
);

268 i‡(!(
≠p
->
≠p_Êags
 & 
C_APP_AUX_REMOTE
))

269 
	`mul_uƒegi°î_≠p
(
≠p
->
≠p_«me
);

270 
	}
}

273 
	$c_w‹kî_do_swôch_dñ
(
c_w‹kî_˘x
 *
c_wrk_˘x
,

274 
c_swôch_t
 *
sw
)

276 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
c_wrk_˘x
->
thªad_d©a
;

278 
	`evít_dñ
(
	`C_EVENT
(
sw
->
c⁄n
.
rd_evít
));

279 
	`evít_dñ
(
	`C_EVENT
(
sw
->
c⁄n
.
wr_evít
));

280 
	`evít_‰ì
(
	`C_EVENT
(
sw
->
c⁄n
.
rd_evít
));

281 
	`evít_‰ì
(
	`C_EVENT
(
sw
->
c⁄n
.
wr_evít
));

282 
	`˛o£
(
sw
->
c⁄n
.
fd
);

284 
t_d©a
->
sw_li°
 = 
	`g_¶i°_ªmove
—_d©a->sw_li°, 
sw
);

286 
	`of_swôch_dñ
(
sw
);

288 
	`of_swôch_put
(
sw
);

289 
	}
}

292 
	$c_w‹kî_do_≠p_add
(*
˘x_¨g
, *
msg_¨g
)

294 
c_≠p_˘x
 *
≠p_wrk_˘x
 = 
˘x_¨g
;

295 
c_ùc_thªad_msg
 *
msg
 = 
msg_¨g
;

296 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
≠p_wrk_˘x
->
thªad_d©a
;

297 
c_≠p_öfo_t
 *
≠p
 = 
NULL
;

298 
sockaddr_ö
 
≥î_addr
;

299 
sockÀn_t
 
≥î_sz
 = (
≥î_addr
);

301 i‡(
	`gë≥î«me
(
msg
->
√w_c⁄n_fd
, (*)&
≥î_addr
, &
≥î_sz
) < 0) {

302 
	`c_log_îr
("%s:gëÖì∏Áûed", 
FN
);

306 i‡(!(
≠p
 = 
	`c_≠p_Æloc
(
≠p_wrk_˘x
))) {

310 
≠p
->
≠p_c⁄n
.
fd
 = 
msg
->
√w_c⁄n_fd
;

311 
t_d©a
->
≠p_li°
 = 
	`g_¶i°_≠≥nd
—_d©a->≠p_li°, 
≠p
);

313 i‡(
msg
->
aux_c⁄n_vÆid
 && msg->
aux_c⁄n
) {

314 
	`c_aux_≠p_öô
(
≠p
);

317 
≠p
->
≠p_c⁄n
.
rd_evít
 = 
	`evít_√w
(
≠p_wrk_˘x
->
cmn_˘x
.
ba£
,

318 
msg
->
√w_c⁄n_fd
,

319 
EV_READ
|
EV_PERSIST
,

320 
c_≠p_thªad_ªad
, 
≠p
);

321 
≠p
->
≠p_c⁄n
.
wr_evít
 = 
	`evít_√w
(
≠p_wrk_˘x
->
cmn_˘x
.
ba£
,

322 
msg
->
√w_c⁄n_fd
,

323 
EV_WRITE
,

324 
c_thªad_wrôe_evít
,

325 &
≠p
->
≠p_c⁄n
);

326 
	`evít_add
(
	`C_EVENT
(
≠p
->
≠p_c⁄n
.
rd_evít
), 
NULL
);

329 
	}
}

338 
	$c_w‹kî_do_swôch_add
(*
˘x_¨g
, *
msg_¨g
)

340 
c_w‹kî_˘x
 *
c_wrk_˘x
 = 
˘x_¨g
;

341 
c_ùc_thªad_msg
 *
msg
 = 
msg_¨g
;

342 
c_≥r_thªad_d©_t
 *
t_d©a
 = &
c_wrk_˘x
->
thªad_d©a
;

343 
c_swôch_t
 *
√w_swôch
;

344 
sockaddr_ö
 
≥î_addr
;

345 
sockÀn_t
 
≥î_sz
 = (
≥î_addr
);

347 i‡(
	`gë≥î«me
(
msg
->
√w_c⁄n_fd
, (*)&
≥î_addr
, &
≥î_sz
) < 0) {

348 
	`c_log_îr
("getÖeer failed");

352 i‡(!
msg
->
√w_c⁄n_fd_vÆid
) {

353 
	`c_log_îr
("field invalid indicated");

357 
	`c_log_debug
("New swôchÅÿthªad (%u)\n", ()
c_wrk_˘x
->
thªad_idx
);

360 
√w_swôch
 = 
	`of_swôch_Æloc
(
c_wrk_˘x
);

362 
t_d©a
->
sw_li°
 = 
	`g_¶i°_≠≥nd
—_d©a->sw_li°, 
√w_swôch
);

364 
√w_swôch
->
c_hdl
 = 
c_wrk_˘x
->
cmn_˘x
.c_hdl;

365 
√w_swôch
->
c⁄n
.
fd
 = 
msg
->
√w_c⁄n_fd
;

366 
	`¢¥ötf
(
√w_swôch
->
c⁄n
.
c⁄n_°r
, 
C_CONN_DESC_SZ
 -1, "%s:%d",

367 
	`öë_¡ﬂ
(
≥î_addr
.
sö_addr
), 
	`¡ohs
’ìr_addr.
sö_p‹t
));

368 
√w_swôch
->
c⁄n
.
rd_evít
 = 
	`evít_√w
(
c_wrk_˘x
->
cmn_˘x
.
ba£
,

369 
msg
->
√w_c⁄n_fd
,

370 
EV_READ
|
EV_PERSIST
,

371 
c_swôch_thªad_ªad
, 
√w_swôch
);

372 
√w_swôch
->
c⁄n
.
wr_evít
 = 
	`evít_√w
(
c_wrk_˘x
->
cmn_˘x
.
ba£
,

373 
msg
->
√w_c⁄n_fd
,

374 
EV_WRITE
,

375 
c_thªad_wrôe_evít
, &
√w_swôch
->
c⁄n
);

377 
	`evít_add
(
	`C_EVENT
(
√w_swôch
->
c⁄n
.
rd_evít
), 
NULL
);

379 
	`of_£nd_hñlo
(
√w_swôch
);

382 
	}
}

385 
	$c_w‹kî_evít_√w_c⁄n
(*
˘x_¨g
, *
msg_¨g
)

387 
c_cmn_˘x
 *
c_˘x
 = 
˘x_¨g
;

389 
c_˘x
->
thªad_ty≥
) {

390 
THREAD_WORKER
:

391  
	`c_w‹kî_do_swôch_add
(
˘x_¨g
, 
msg_¨g
);

392 
THREAD_APP
:

393  
	`c_w‹kî_do_≠p_add
(
˘x_¨g
, 
msg_¨g
);

397 
	}
}

401 
	$c_√w_c⁄n_to_thªad
(
c_maö_˘x
 *
m_˘x
, 
√w_c⁄n_fd
,

402 
boﬁ
 
sw_c⁄n
, boﬁ 
aux_c⁄n
)

404 
c_ùc_hdr
 *
ùc_hdr
;

405 
c_ùc_thªad_msg
 *
ùc_t_msg
;

406 
thªad_idx
, 
ùc_wr_fd
 = -1;

408 
ùc_hdr
 = 
	`Æloc_ùc_msg
(
C_IPC_THREAD
, 
C_IPC_THREAD_NEW_CONN_FD
);

409 i‡(!
ùc_hdr
) {

410 
	`c_log_w¨n
("ipc msgálloc failed");

414 
ùc_t_msg
 = (*)(
ùc_hdr
 + 1);

415 
ùc_t_msg
->
√w_c⁄n_fd
 =Çew_conn_fd;

416 
ùc_t_msg
->
√w_c⁄n_fd_vÆid
 = 1;

418 i‡(
sw_c⁄n
) {

419 
thªad_idx
 = 
	`c_gë_√w_swôch_w‹kî
(
m_˘x
);

420 
ùc_wr_fd
 = 
	`c_tid_to_ùc_wr_fd
(
m_˘x
, 
thªad_idx
);

423 
thªad_idx
 = 
	`c_gë_√w_≠p_w‹kî
(
m_˘x
);

424 
ùc_wr_fd
 = 
	`c_tid_to_≠p_ùc_wr_fd
(
m_˘x
, 
thªad_idx
);

425 i‡(
aux_c⁄n
) {

426 
ùc_t_msg
->
aux_c⁄n
 = 1;

427 
ùc_t_msg
->
aux_c⁄n_vÆid
 = 1;

431  
	`c_£nd_uniˇ°_ùc_msg
(
ùc_wr_fd
, 
ùc_hdr
);

432 
	}
}

435 
	$c_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
 
UNUSED
, *
¨g
)

437 
c_maö_˘x
 *
m_˘x
 = 
¨g
;

438 
sockaddr_°‹age
 
ss
;

439 
sockÀn_t
 
¶í
 = (
ss
);

440 
fd
 = 
	`ac˚±
(
li°íî
, (
sockaddr
*)&
ss
, &
¶í
);

442 i‡(
fd
 < 0) {

443 
	`≥º‹
("accept");

444 } i‡(
fd
 > 
FD_SETSIZE
) {

445 
	`˛o£
(
fd
);

447 
	`c_make_sockë_n⁄blockög
(
fd
);

449 
	`c_t˝sock_£t_nodñay
(
fd
);

450 
	`c_√w_c⁄n_to_thªad
(
m_˘x
, 
fd
, 
åue
, 
Ál£
);

452 
	}
}

456 
	$c_≠p_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
 
UNUSED
, *
¨g
)

458 
c_maö_˘x
 *
m_˘x
 = 
¨g
;

459 
sockaddr_°‹age
 
ss
;

460 
sockÀn_t
 
¶í
 = (
ss
);

461 
fd
 = 
	`ac˚±
(
li°íî
, (
sockaddr
*)&
ss
, &
¶í
);

463 
	`c_log_debug
("ináppácceptÅhread");

465 i‡(
fd
 < 0) {

466 
	`≥º‹
("accept");

467 } i‡(
fd
 > 
FD_SETSIZE
) {

468 
	`˛o£
(
fd
);

470 
	`c_make_sockë_n⁄blockög
(
fd
);

472 
	`c_√w_c⁄n_to_thªad
(
m_˘x
, 
fd
, 
Ál£
, false);

474 
	}
}

477 
	$c_aux_≠p_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
 
UNUSED
, *
¨g
)

479 
c_maö_˘x
 *
m_˘x
 = 
¨g
;

480 
sockaddr_°‹age
 
ss
;

481 
sockÀn_t
 
¶í
 = (
ss
);

482 
fd
 = 
	`ac˚±
(
li°íî
, (
sockaddr
*)&
ss
, &
¶í
);

484 
	`c_log_debug
("ináppácceptáuxÅhread");

486 i‡(
fd
 < 0) {

487 
	`≥º‹
("accept");

488 } i‡(
fd
 > 
FD_SETSIZE
) {

489 
	`˛o£
(
fd
);

491 
	`c_make_sockë_n⁄blockög
(
fd
);

493 
	`c_√w_c⁄n_to_thªad
(
m_˘x
, 
fd
, 
Ál£
, 
åue
);

495 
	}
}

	@mul/mul_events.h

20 #i‚de‡
__MUL_EVENTS_H__


21 
	#__MUL_EVENTS_H__


	)

22 
	~"cc_of_lib.h
"

25 
	#C_EVENT
(
x
Ë((
evít
 *)(x))

	)

27 
c_wrôe_evít_sched
(*
c⁄n_¨g
);

28 
c_w‹kî_evít_√w_c⁄n
(*
˘x_¨g
, *
msg_¨g
);

29 
c_swôch_thªad_ªad
(
evutû_sockë_t
 
fd
, 
evíts
, *
¨g
);

30 
c_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
, *
¨g
);

31 
c_≠p_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
, *
¨g
);

32 
c_aux_≠p_ac˚±
(
evutû_sockë_t
 
li°íî
, 
evít
, *
¨g
);

33 
c_w‹kî_ùc_ªad
(
evutû_sockë_t
 
li°íî
, 
evít
, *
¨g
);

34 
c_≥r_w‹kî_timî_evít
(
evutû_sockë_t
 
fd
, 
evít
, *
¨g
);

35 
c_swôch_thªad_wrôe_evít
(
evutû_sockë_t
 
fd
, 
evíts
, *
¨g
);

37 
	#HAVE_SG_TX
 1

	)

39 #ifde‡
HAVE_SG_TX


41 
ölöe
 

42 
	$c_thªad_sg_tx_sync
(*
c⁄n_¨g
)

44 
c_c⁄n_t
 *
c⁄n
 = 
c⁄n_¨g
;

46 
	`c_wr_lock
(&
c⁄n
->
c⁄n_lock
);

47 
	`c_sockë_wrôe_n⁄block_sg_lo›
(
c⁄n
, 
c_wrôe_evít_sched
);

48 
	`c_wr_u∆ock
(&
c⁄n
->
c⁄n_lock
);

49 
	}
}

53 
ölöe
 

54 
	$c_thªad_tx
(*
c⁄n
, 
cbuf
 *
b
, 
boﬁ
 
⁄ly_q
, 
uöt64_t
 
d©≠©h_id
)

56 
size_t
 
sz
 = 0;

57 
	`c_log_debug
("(%s) SendingÖacketÅoÜibrary %lu\n",

58 
__FUNCTION__
, 
d©≠©h_id
);

60 
sz
 = (
size_t
)
b
->
Àn
;

61 
	`cc_of_£nd_pkt
(
d©≠©h_id
, 0 ,(*)
b
->
d©a
, 
sz
);

85 
	}
}

87 
ölöe
 

88 
	$c_thªad_sg_tx_sync
(*
c⁄n_¨g
 
UNUSED
)

91 
	}
}

93 
ölöe
 

94 
	$c_thªad_tx
(*
c⁄n_¨g
, 
cbuf
 *
b
, 
boﬁ
 
⁄ly_q
 
UNUSED
, 
uöt64_t
 
d©≠©h_id
)

101 
	`c_log_debug
("(%s) SendingÖacketÅoÜibrary %llu\n",

102 
__FUNCTION__
, 
d©≠©h_id
);

104 
	`cc_of_£nd_pkt
(
d©≠©h_id
, 0 ,

105 (*)
b
->
d©a
,(
size_t
)b->
Àn
 );

120 
	}
}

	@mul/mul_fp.c

22 
	~"mul.h
"

23 
	~"mul_Â.h
"

26 
	$c_l2fdb_ö°Æl
(
c_swôch_t
 *
sw
, 
c_l2fdb_ít_t
 *
ít
, 
boﬁ
 
add
)

28 
Êow
 
Ê
;

29 
oÂ_a˘i⁄_ouçut
 
›_a˘
;

31 
	`mem˝y
(&
Ê
.
dl_d°
, 
ít
->
mac
, 
OFP_ETH_ALEN
);

33 i‡(
add
) {

34 
›_a˘
.
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

35 
›_a˘
.
Àn
 = 
	`ht⁄s
((op_act));

36 
›_a˘
.
p‹t
 = 
	`ht⁄s
(
ít
->port);

37 
ít
->
ö°ÆÀd
 = 1;

38 
	`of_£nd_Êow_add_noˇche
(
sw
, &
Ê
, (
uöt32_t
)(-1),

39 &
›_a˘
, (op_act), 60, 0,

40 
	`ht⁄l
(
OFPFW_ALL
 & ~(
OFPFW_DL_DST
)),

41 
C_FL_PRIO_DFL
);

43 
ít
->
ö°ÆÀd
 = 0;

44 
	`of_£nd_Êow_dñ_noˇche
(
sw
, &
Ê
, 
	`ht⁄l
(
OFPFW_ALL
 & ~(
OFPFW_DL_DST
)),

45 
OFPP_NONE
, 
Ál£
);

49 
	}
}

52 
	$c_l2fdb_evi˘
(
c_swôch_t
 *
sw
, 
uöt8_t
 *
mac
, 
uöt16_t
 
p‹t
,

53 
c_l2fdb_ít_t
 *
ít
)

55 i‡(
ít
) {

56 i‡(
ít
->
ö°ÆÀd
) {

57 
	`c_l2fdb_ö°Æl
(
sw
, 
ít
, 
Ál£
);

59 
	`c_l2fdb_ít_öô
(
ít
, 
mac
, 
p‹t
);

61 
	}
}

63 
__Á°∑th


64 
	$c_l2fdb_À¨n
(
c_swôch_t
 *
sw
, 
uöt8_t
 *
mac
, 
uöt16_t
 
p‹t
)

66 
c_l2fdb_bkt_t
 *
bkt
 = 
sw
->
≠p_Êow_tbl
;

67 
bkt_idx
 = 
	`c_l2fdb_key
(
mac
);

68 
idx
 = 0;

69 
c_l2fdb_ít_t
 *
ít
, *
emp_ít
 = 
NULL
;

70 
c_l2fdb_ít_t
 *
evi˘_ít
 = 
NULL
;

72 
bkt
 +
bkt_idx
;

74 
idx
 < 
C_FDB_ENT_PER_BKT
) {

75 
ít
 = &
bkt
->
fdb_ít
[
idx
++];

77 i‡(!
ít
->
vÆid
) {

78 i‡(!
emp_ít
)

79 
emp_ít
 = 
ít
;

83 i‡(
	`c_l2fdb_equÆ
(
mac
, 
ít
->mac)) {

84 i‡(
ít
->
p‹t
 !=Öort) {

85 
ít
->
p‹t
 =Öort;

86 
	`c_l2fdb_ö°Æl
(
sw
, 
ít
, 
åue
);

92 i‡(!
evi˘_ít
 ||Évi˘_ít->
time°amp
 > 
ít
->timestamp) {

93 
evi˘_ít
 = 
ít
;

97 i‡(
emp_ít
) {

98 
	`c_l2fdb_ít_öô
(
emp_ít
, 
mac
, 
p‹t
);

103 
	`c_log_îr
("%s: C™àaddÉ¡ry. TryögÅÿevi˘", 
FN
);

104 
	`c_l2fdb_evi˘
(
sw
, 
mac
, 
p‹t
, 
evi˘_ít
);

107 
	}
}

109 
ölöe
 
c_l2fdb_ít_t
 *

110 
	$c_l2fdb_lookup
(
c_swôch_t
 *
sw
, 
uöt8_t
 *
mac
)

112 
c_l2fdb_bkt_t
 *
bkt
 = 
sw
->
≠p_Êow_tbl
;

113 
bkt_idx
 = 
	`c_l2fdb_key
(
mac
);

114 
idx
 = 0;

115 
c_l2fdb_ít_t
 *
ít
;

117 
bkt
 +
bkt_idx
;

119 
idx
 < 
C_FDB_ENT_PER_BKT
) {

120 
ít
 = &
bkt
->
fdb_ít
[
idx
++];

121 i‡(
ít
->
vÆid
 && 
	`c_l2fdb_equÆ
(
mac
,Ént->mac)) {

122  
ít
;

126  
NULL
;

127 
	}
}

130 
	$c_l2fdb_öô
(
c_swôch_t
 *
sw
)

132 
sw
->
≠p_Êow_tbl
 = 
	`ˇŒoc
(1, (
c_l2fdb_bkt
Ë* 
C_L2FDB_SZ
);

133 
	`as£π
(
sw
->
≠p_Êow_tbl
);

136 
	}
}

139 
	$c_l2fdb_de°roy
(
c_swôch_t
 *
sw
)

141 
	`c_wr_lock
(&
sw
->
lock
);

143 i‡(
sw
->
≠p_Êow_tbl
Ë
	`‰ì
(sw->app_flow_tbl);

144 
sw
->
≠p_Êow_tbl
 = 
NULL
;

146 
	`c_wr_u∆ock
(&
sw
->
lock
);

147 
	}
}

157 
__Á°∑th


158 
	$c_l2_Ãn_fwd
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
 
UNUSED
, *
d©a
, 
size_t
 
pkt_Àn
,

159 
Êow
 *
ö_Êow
, 
uöt16_t
 
ö_p‹t
)

161 
oÂ_∑ckë_ö
 *
›i
 
__Æig√d
 = (*)(
b
->
d©a
);

162 
of_pkt_out_∑øms
 
∑rms
;

163 
oÂ_a˘i⁄_ouçut
 
›_a˘
;

164 
c_l2fdb_ít_t
 *
ít
;

167 #ifde‡
L2_INVALID_ADDR_CHK


168 i‡(
	`is_zîo_ëhî_addr
(
ö_Êow
->
dl_§c
) ||

169 
	`is_zîo_ëhî_addr
(
ö_Êow
->
dl_d°
) ||

170 
	`is_mu…iˇ°_ëhî_addr
(
ö_Êow
->
dl_§c
) ||

171 
	`is_brﬂdˇ°_ëhî_addr
(
ö_Êow
->
dl_§c
)) {

172 
	`c_log_debug
("%s: InvÆid src/d° ma¯addr", 
FN
);

177 
›_a˘
.
ty≥
 = 
	`ht⁄s
(
OFPAT_OUTPUT
);

178 
›_a˘
.
Àn
 = 
	`ht⁄s
((op_act));

179 
›_a˘
.
p‹t
 = 
	`ht⁄s
(
OFPP_ALL
);

181 
	`c_wr_lock
(&
sw
->
lock
);

182 
	`c_l2fdb_À¨n
(
sw
, 
ö_Êow
->
dl_§c
, 
ö_p‹t
);

184 i‡((
ít
 = 
	`c_l2fdb_lookup
(
sw
, 
ö_Êow
->
dl_d°
))) {

185 
›_a˘
.
p‹t
 = 
	`ht⁄s
(
ít
->port);

186 
ít
->
ö°ÆÀd
 = 1;

187 
	`of_£nd_Êow_add_noˇche
(
sw
, 
ö_Êow
, 
	`¡ohl
(
›i
->
buf„r_id
),

188 &
›_a˘
, (op_act), 60, 0,

189 
	`ht⁄l
(
OFPFW_ALL
 & ~(
OFPFW_DL_DST
)),

190 
C_FL_PRIO_DFL
);

192 i‡(
›i
->
buf„r_id
 !(
uöt32_t
)(-1)) {

193 
	`c_wr_u∆ock
(&
sw
->
lock
);

198 
	`c_wr_u∆ock
(&
sw
->
lock
);

200 
∑rms
.
buf„r_id
 = 
	`¡ohl
(
›i
->buffer_id);

201 
∑rms
.
a˘i⁄_Àn
 = (
›_a˘
);

202 
∑rms
.
a˘i⁄_li°
 = &
›_a˘
;

203 
∑rms
.
ö_p‹t
 = in_port;

204 
∑rms
.
d©a
 = data;

205 
∑rms
.
d©a_Àn
 =Ö¨ms.
buf„r_id
 =(
uöt32_t
)(-1)? 0 : 
pkt_Àn
;

207 
	`of_£nd_pkt_out
(
sw
, &
∑rms
);

210 
	}
}

213 
	$c_l2_p‹t_°©us
(
c_swôch_t
 *
sw
 
UNUSED
, 
uöt32_t
 
cfg
 UNUSED, uöt32_à
°©e
 UNUSED)

217 
	}
}

	@mul/mul_fp.h

21 #i‚de‡
__MUL_FP_H__


22 
	#__MUL_FP_H__


	)

24 
	#C_L2FDB_SZ
 (1048576)

	)

25 
	#C_FDB_ENT_PER_BKT
 2

	)

27 
	sc_l2fdb_ít


29 
uöt64_t
 
	mtime°amp
;

30 
uöt32_t
 
	m∑d
;

31 
uöt16_t
 
	mp‹t
;

32 
uöt8_t
 
	mvÆid
;

33 
uöt8_t
 
	mö°ÆÀd
;

34 
uöt8_t
 
	mmac
[
OFP_ETH_ALEN
];

36 
c_l2fdb_ít
 
	tc_l2fdb_ít_t
;

38 
	sc_l2fdb_bkt


40 
c_l2fdb_ít
 
	mfdb_ít
[
C_FDB_ENT_PER_BKT
] 
__©åibuã__
((
Æig√d
(8)));

41 
uöt8_t
 
	m∑d
[16];

43 
c_l2fdb_bkt
 
	tc_l2fdb_bkt_t
;

45 
OFP_ASSERT
((
c_l2fdb_bkt_t
) == 64);

47 
ölöe
 

48 
	$c_l2fdb_key
(c⁄° *
¨g
)

50 c⁄° 
uöt8_t
 *
p
 = 
¨g
;

51 
idx
;

53 
idx
 = (
p
[4] << 24) | ((p[3] ^Ö[5]) << 16) |Ö[2] << 8 | (p[1]);

54  
idx
 % 
C_L2FDB_SZ
;

55 
	}
}

57 
ölöe
 

58 
	$c_l2fdb_equÆ
(c⁄° *
p1
, c⁄° *
p2
)

60  !
	`memcmp
(
p1
, 
p2
, 
OFP_ETH_ALEN
);

61 
	}
}

63 
ölöe
 

64 
	$c_l2fdb_ít_öô
(
c_l2fdb_ít_t
 *
ít
, 
uöt8_t
 *
mac
, 
uöt16_t
 
p‹t
)

67 
	`mem˝y
(
ít
->
mac
, mac, 
OFP_ETH_ALEN
);

68 
ít
->
p‹t
 =Öort;

69 
ít
->
time°amp
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

70 
ít
->
vÆid
 = 1;

71 
	}
}

	@mul/mul_ipc.c

19 
	~"mul.h
"

22 
	$Æloc_ùc_msg
(
uöt8_t
 
ùc_ty≥
, 
uöt16_t
 
ùc_msg_ty≥
)

24 
c_ùc_hdr
 *
ùc_hdr
 = 
NULL
;

26 
ùc_ty≥
) {

27 
C_IPC_THREAD
:

28 
ùc_hdr
 = (*)
	`mÆloc
((
c_ùc_hdr
) +

29 (
c_ùc_thªad_msg
));

30 i‡(!
ùc_hdr
) {

31  
NULL
;

33 
ùc_hdr
->
ùc_ty≥
 = 
C_IPC_THREAD
;

34 
ùc_hdr
->
ùc_msg_Àn
 = (
c_ùc_hdr
) +

35 (
c_ùc_thªad_msg
);

36 
ùc_hdr
->
ùc_msg_ty≥
 = ipc_msg_type;

39 
C_IPC_EXT_APP
:

43  
ùc_hdr
;

44 
	}
}

47 
	$c_£nd_uniˇ°_ùc_msg
(
fd
, *
msg
)

49 
c_ùc_hdr
 *
ùc_hdr
 = 
msg
;

50 
ªt
;

53 
ªt
 = 
	`wrôe
(
fd
, 
msg
, 
ùc_hdr
->
ùc_msg_Àn
);

54 i‡(
ªt
 < 0) {

55 
	`c_log_w¨n
("ipc_write failed");

56  
ªt
;

62 
	}
}

65 
	$c_ùc_w‹kî_msg_rcv
(
c_w‹kî_˘x
 *
c_wrk_˘x
,

66 
c_ùc_hdr
 *
hdr
)

68 
size_t
 
Àn
 = 
hdr
->
ùc_msg_Àn
;

69 
c_ùc_thªad_msg
 *
msg
;

71 i‡(
hdr
->
ùc_ty≥
 !
C_IPC_THREAD
) {

72 
	`c_log_îr
("unexpected ipcÅype");

76 i‡(
Àn
 < 
MIN_IPC_THREAD_MSG_SZ
 ||

77 
Àn
 > 
MAX_IPC_THREAD_MSG_SZ
) {

78 
	`c_log_îr
("unexpected ipcÜen");

82 
msg
 = (*)(
hdr
 + 1);

83 
hdr
->
ùc_msg_ty≥
) {

84 
C_IPC_THREAD_NEW_CONN_FD
:

85 
	`c_w‹kî_evít_√w_c⁄n
(
c_wrk_˘x
, 
msg
);

88 
	`c_log_îr
("unknown ipc msgÅype");

93 
	}
}

96 
	$c_ùc_msg_rcv
(*
˘x_¨g
, 
cbuf
 *
buf
)

98 
c_cmn_˘x
 *
cmn_˘x
 = 
˘x_¨g
;

100 
cmn_˘x
->
thªad_ty≥
) {

101 
THREAD_MAIN
:

104 
THREAD_WORKER
:

105 
THREAD_APP
:

106  
	`c_ùc_w‹kî_msg_rcv
((*)
cmn_˘x
, (*)
buf
->
d©a
);

110 
	}
}

	@mul/mul_main.c

19 
	~"mul.h
"

22 
›ti⁄
 
	gl⁄g›ts
[] =

24 { "d´m⁄", 
no_¨gumít
, 
NULL
, 'd'},

25 { "hñp", 
no_¨gumít
, 
NULL
, 'h'},

26 { "swôch-thªads", 
ªquúed_¨gumít
, 
NULL
, 'S'},

27 { "≠p-thªads", 
ªquúed_¨gumít
, 
NULL
, 'A'},

31 c⁄° *
	gpid_fûe
 = 
C_PID_PATH
;

39 
	$ußge
(*
¥og«me
, 
°©us
)

41 
	`¥ötf
("%†O±i⁄s:\n", 
¥og«me
);

42 
	`¥ötf
("-d : Daemon Mode\n");

44 
	`¥ötf
("-A <num> : Number ofápp handlerÅhreads\n");

45 
	`¥ötf
("-h : Help\n");

47 
	`exô
(
°©us
);

48 
	}
}

51 
	$mul_ãrmö©e
(
∑øm
)

53 
sockaddr_ö
 
ù_addr
;

54 
uöt32_t
 
√tw‹k_byã_‹dî
;

56 
	`öë_©⁄
(
C_CONTROLLER_IP
, &
ù_addr
.
sö_addr
.
s_addr
);

57 
√tw‹k_byã_‹dî
 = 
	`¡ohl
(
ù_addr
.
sö_addr
.
s_addr
);

59 
	`¥ötf
("Calling OFLIB APIÅo freeÜibrary\n");

60 
	`cc_of_dev_‰ì
(
√tw‹k_byã_‹dî
, 0, 
C_LISTEN_PORT
);

61 
	`cc_of_lib_‰ì
();

63 
	`±hªad_exô
(
NULL
);

67 
	}
}

70 
	$maö
(
¨gc
, **
¨gv
)

72 *
p
;

73 
d´m⁄_mode
 = 0;

74 *
¥og«me
;

75 
©hªads
 = 2;

76 
sockaddr_ö
 
ù_addr
;

79 
	`umask
 (0027);

82 
¥og«me
 = ((
p
 = 
	`°ºchr
 (
¨gv
[0], '/')) ? ++p :árgv[0]);

86 
›t
;

88 
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, "dhS:A:", 
l⁄g›ts
, 0);

89 i‡(
›t
 =
EOF
)

92 
›t
) {

96 
d´m⁄_mode
 = 1;

109 
©hªads
 = 
	`©oi
(
›èrg
);

110 i‡(
©hªads
 < 0 ||áthreads > 8) {

111 
	`¥ötf
 ("Illegal:Too manyáppÅhreads\n");

112 
	`exô
(0);

116 
	`ußge
(
¥og«me
, 0);

119 
	`ußge
(
¥og«me
, 1);

124 i‡(
d´m⁄_mode
) {

125 
	`c_d´m⁄
(0, 0);

128 
	`c_pid_ouçut
(
C_PID_PATH
);

130 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

133 
	`sig«l
(
SIGINT
, 
mul_ãrmö©e
);

136 
	`of_˘æ_öô
(&
˘æ_hdl
, 0, 
©hªads
);

139 
	`cc_of_debug_toggÀ
(
TRUE
);

140 
	`cc_of_lib_öô
(
CONTROLLER
);

141 
	`cc_of_log_toggÀ
(
TRUE
);

145 
	`öë_©⁄
(
C_CONTROLLER_IP
, &
ù_addr
.
sö_addr
.
s_addr
);

146 
uöt32_t
 
√tw‹k_byã_‹dî
;

147 
√tw‹k_byã_‹dî
 = 
	`¡ohl
(
ù_addr
.
sö_addr
.
s_addr
);

148 
	`cc_of_dev_ªgi°î
(
√tw‹k_byã_‹dî
, 0 , 
C_LISTEN_PORT
,

149 
CC_OFVER_1_0
, 
mul_cc_ªcv_pkt
,

150 
mul_cc_of_ac˚±
, 
mul_cc_of_dñëe
);

157 
	`cbuf_li°_hód_öô
(&
˘æ_hdl
.
c_maö_buf_hód
);

159 
˛og_deÁu…
 = 
	`›í˛og
 (
¥og«me
, 
CLOG_MUL
,

160 
LOG_CONS
|
LOG_NDELAY
|
LOG_PID
, 
LOG_DAEMON
);

161 
	`˛og_£t_Àvñ
(
NULL
, 
CLOG_DEST_SYSLOG
, 
LOG_WARNING
);

162 
	`˛og_£t_Àvñ
(
NULL
, 
CLOG_DEST_STDOUT
, 
LOG_DEBUG
);

166 
	`c_thªad_°¨t
(&
˘æ_hdl
, 0, 
©hªads
);

169 
	`¶ìp
(1);

172 
	`¥ötf
("Calling OFLIB APIÅo freeÜibrary\n");

173 
	`cc_of_dev_‰ì
((
uöt32_t
)
ù_addr
.
sö_addr
.
s_addr
, 0, 
C_LISTEN_PORT
);

174 
	`cc_of_lib_‰ì
();

176 
	`±hªad_exô
(
NULL
);

180 
	}
}

	@mul/mul_of.c

20 
	~"mul.h
"

22 
of_£nd_Êow_add
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt32_t
 
buf„r_id
);

23 
of_£nd_Êow_dñ
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
,

24 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
);

25 
of_£nd_Êow_dñ_°ri˘
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt16_t
 
›‹t
);

26 
c_Ê_íåy_t
 *
__of_Êow_gë_exm
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
);

27 
of_Êow_ruÀ_‰ì
(*
¨g
, *
u_¨g
);

29 
ölöe
 

30 
	$of_Êow_mod_vÆid©e_∑rms
(
of_Êow_mod_∑øms
 *
Ê_∑rms
)

32 i‡(
Ê_∑rms
->
tbl_idx
 > 
C_MAX_RULE_FLOW_TBLS
 ||

33 (!
Ê_∑rms
->
≠p_ow√r
) ||

34 (
Ê_∑rms
->
Êags
 & 
C_FL_ENT_CLONE
 && fl_∑rms->Êag†& 
C_FL_ENT_LOCAL
) ||

35 (
Ê_∑rms
->
Êags
 & 
C_FL_ENT_NOCACHE
)) {

36 
	`c_log_îr
("%s: InvÆid flow mod fœgs", 
FN
);

41 
	}
}

43 
ölöe
 

44 
	$of_exm_Êow_mod_vÆid©e_∑rms
(
of_Êow_mod_∑øms
 *
Ê_∑rms
)

46 i‡(
Ê_∑rms
->
Êags
 & 
C_FL_ENT_CLONE
 || fl_∑rms->Êag†& 
C_FL_ENT_NOCACHE
 ||

47 !
Ê_∑rms
->
≠p_ow√r
) {

48 
	`c_log_îr
("%s: InvÆid flow mod fœgs", 
FN
);

53 
	}
}

56 
	$of_Êow_≠p_ªf_‰ì
(*
¨g
 
UNUSED
)

60 
	}
}

64 
	$of_dump_Êow_Æl
(
Êow
 *
Ê
)

66 
	#FL_PBUF_SZ
 2048

	)

67 *
pbuf
 = 
	`ˇŒoc
(1, 
FL_PBUF_SZ
);

68 
Àn
 = 0;

70 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "FlowÅuple:\r\n");

71 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

72 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

75 "smac", 
Ê
->
dl_§c
[0], fl->dl_src[1], fl->dl_src[2],

76 
Ê
->
dl_§c
[3], fl->dl_src[4], fl->dl_src[5],

77 "dmac", 
Ê
->
dl_d°
[0], fl->dl_dst[1], fl->dl_dst[2],

78 
Ê
->
dl_d°
[3], fl->dl_dst[4], fl->dl_dst[5]);

79 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

80 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

82 "ëh-ty≥", 
	`¡ohs
(
Ê
->
dl_ty≥
),

83 "vœn-id", 
	`¡ohs
(
Ê
->
dl_vœn
),

84 "vœn-p˝", 
	`¡ohs
(
Ê
->
dl_vœn_p˝
));

85 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

86 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

88 "de°-ù", 
	`¡ohl
(
Ê
->
nw_d°
),

89 "§c-ù", 
	`¡ohl
(
Ê
->
nw_§c
),

90 "ù-¥Ÿo", 
Ê
->
nw_¥Ÿo
,

91 "ù-tos", 
Ê
->
nw_tos
);

92 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

93 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

95 "§c-p‹t", 
	`¡ohs
(
Ê
->
ç_§c
),

96 "d°-p‹t", 
	`¡ohs
(
Ê
->
ç_d°
),

97 "ö-p‹t", 
	`¡ohs
(
Ê
->
ö_p‹t
));

99  
pbuf
;

100 
	}
}

103 
	$of_dump_Ê_≠p
(
c_Ê_íåy_t
 *
ít
)

105 
c_≠p_öfo_t
 *
≠p
;

106 
GSLi°
 *
ôî©‹
;

107 
	#FL_APP_BUF_SZ
 1024

	)

108 *
pbuf
 = 
	`ˇŒoc
(1, 
FL_APP_BUF_SZ
);

109 
Àn
 = 0;

111 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_APP_BUF_SZ
-len-1, "Owner: ");

112 
	`as£π
(
Àn
 < 
FL_APP_BUF_SZ
-1);

114 
	`c_rd_lock
(&
ít
->
FL_LOCK
);

115 
ôî©‹
 = 
ít
->
≠p_ow√r_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

116 
≠p
 = 
ôî©‹
->
d©a
;

117 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_APP_BUF_SZ
-Àn-1, "%†", 
≠p
->
≠p_«me
);

118 
	`as£π
(
Àn
 < 
FL_APP_BUF_SZ
-1);

120 
	`c_rd_u∆ock
(&
ít
->
FL_LOCK
);

122  
pbuf
;

123 
	}
}

126 
	$of_swôch_hash_key
 (c⁄° *
p
)

128 
c_swôch_t
 *
sw
 = (c_swôch_à*Ë
p
;

130  ()(
sw
->
DPID
);

131 
	}
}

134 
	$of_swôch_hash_cmp
 (c⁄° *
p1
, c⁄° *
p2
)

136 c⁄° 
c_swôch_t
 *
sw1
 = (c_swôch_à*Ë
p1
;

137 c⁄° 
c_swôch_t
 *
sw2
 = (c_swôch_à*Ë
p2
;

139 i‡(
sw1
->
DPID
 =
sw2
->DPID) {

144 
	}
}

149 
	$of_swôch_add
(
c_swôch_t
 *
sw
)

151 
c_cmn_˘x
 *
cmn_˘x
 = 
sw
->
˘x
;

152 
˘æ_hdl_t
 *
˘æ
 = 
cmn_˘x
->
c_hdl
;

155 
	`c_wr_lock
(&
˘æ
->
lock
);

158 i‡(!
˘æ
->
sw_hash_tbl
) {

160 
˘æ
->
sw_hash_tbl
 = 
	`g_hash_èbÀ_√w
(
of_swôch_hash_key
,

161 
of_swôch_hash_cmp
);

164 
	`g_hash_èbÀ_add
(
˘æ
->
sw_hash_tbl
, 
sw
);

165 
	`c_log_debug
("(%s) AddedÅoÅhe hashtable dpid:%llu\n",

166 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

168 i‡((
sw
->
Æüs_id
 = 
	`ùoﬁ_gë
(
˘æ
->
sw_ùoﬁ
, sw)) < 0) {

170 
	`c_log_îr
("(%s) Cant getálias for switch 0x%llx\n",

171 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

174 
	`c_wr_u∆ock
(&
˘æ
->
lock
);

176 
	}
}

180 
	$of_swôch_dñ
(
c_swôch_t
 *
sw
)

182 
c_cmn_˘x
 *
cmn_˘x
 = 
sw
->
˘x
;

183 
˘æ_hdl_t
 *
˘æ
 = 
cmn_˘x
->
c_hdl
;

185 
	`c_wr_lock
(&
˘æ
->
lock
);

186 i‡(
˘æ
->
sw_hash_tbl
) {

187 
	`g_hash_èbÀ_ªmove
(
˘æ
->
sw_hash_tbl
, 
sw
);

190 i‡(
˘æ
->
sw_ùoﬁ
) {

191 
	`ùoﬁ_put
(
˘æ
->
sw_ùoﬁ
, 
sw
->
Æüs_id
);

193 
	`c_wr_u∆ock
(&
˘æ
->
lock
);

195 if(!
sw
->
is_dummy_d©≠©h_id
)

197 i‡(
sw
->
c⁄n
.
cbuf
) {

198 
	`‰ì_cbuf
(
sw
->
c⁄n
.
cbuf
);

199 
sw
->
c⁄n
.
cbuf
 = 
NULL
;

201 
sw
->
swôch_°©e
 = 
SW_DEAD
;

202 
	`c_sig«l_≠p_evít
(
sw
, 
NULL
, 
C_DP_UNREG
, NULL, NULL);

205 
	}
}

209 
	$of_swôch_Æloc
(*
˘x
)

211 
c_swôch_t
 *
√w_swôch
;

213 
√w_swôch
 = 
	`ˇŒoc
(1, (
c_swôch_t
));

214 
	`as£π
(
√w_swôch
);

216 
√w_swôch
->
swôch_°©e
 = 
SW_INIT
;

220 
√w_swôch
->
˘x
 = ctx;

221 
√w_swôch
->
œ°_ª‰esh_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

222 
	`c_rw_lock_öô
(&
√w_swôch
->
lock
);

223 
	`c_rw_lock_öô
(&
√w_swôch
->
c⁄n
.
c⁄n_lock
);

226 
	`cbuf_li°_hód_öô
(&
√w_swôch
->
c⁄n
.
tx_q
);

228  
√w_swôch
;

229 
	}
}

234 
c_swôch_t
 *

235 
	$of_swôch_gë
(
˘æ_hdl_t
 *
˘æ
, 
uöt64_t
 
dpid
)

237 
c_swôch_t
 
key
, *
sw
 = 
NULL
;

238 
found
;

240 
key
.
d©≠©h_id
 = 
dpid
;

242 
	`c_rd_lock
(&
˘æ
->
lock
);

244 
	`c_log_debug
("(%sËOF swôch gë dpid:%lu", 
__FUNCTION__
, 
dpid
);

248 
found
 = 
	`g_hash_èbÀ_lookup_exãnded
(
˘æ
->
sw_hash_tbl
, &
key
,

249 
NULL
, (
gpoöãr
*)&
sw
);

250 i‡(
found
) {

251 
	`©omic_öc
(&
sw
->
ªf
, 1);

254 
	`c_rd_u∆ock
(&
˘æ
->
lock
);

256  
sw
;

257 
	}
}

259 
c_swôch_t
 *

260 
	$of_swôch_Æüs_gë
(
˘æ_hdl_t
 *
˘æ
, 
Æüs
)

262 
c_swôch_t
 *
sw
;

264 
	`c_rd_lock
(&
˘æ
->
lock
);

266 
sw
 = 
	`ùoﬁ_idx_¥iv
(
˘æ
->
sw_ùoﬁ
, 
Æüs
);

267 i‡(
sw
) {

268 
	`©omic_öc
(&
sw
->
ªf
, 1);

271 
	`c_rd_u∆ock
(&
˘æ
->
lock
);

273  
sw
;

274 
	}
}

276 
c_swôch_t
 *

277 
	$__of_swôch_gë
(
˘æ_hdl_t
 *
˘æ
, 
uöt64_t
 
dpid
)

279 
c_swôch_t
 
key
, *
sw
 = 
NULL
;

280 
found
;

282 
key
.
d©≠©h_id
 = 
dpid
;

284 i‡(
˘æ
->
sw_hash_tbl
) {

285 
found
 = 
	`g_hash_èbÀ_lookup_exãnded
(
˘æ
->
sw_hash_tbl
, &
key
,

286 
NULL
, (
gpoöãr
*)&
sw
);

287 i‡(
found
) {

288 
	`©omic_öc
(&
sw
->
ªf
, 1);

293  
sw
;

294 
	}
}

298 
	$of_swôch_put
(
c_swôch_t
 *
sw
)

300 i‡(
	`©omic_ªad
(&
sw
->
ªf
) == 0){

301 
	`c_log_debug
("sw (0x:%ŒxË‰ìd", 
sw
->
DPID
);

302 
	`cbuf_li°_purge
(&
sw
->
c⁄n
.
tx_q
);

303 
	`of_swôch_Êow_tbl_dñëe
(
sw
);

305 i‡(
sw
->
Â_›s
.
Â_db_dt‹
) {

306 
sw
->
Â_›s
.
	`Â_db_dt‹
(sw);

308 
	`‰ì
(
sw
);

312 
	`©omic_dec
(&
sw
->
ªf
, 1);

314 
	}
}

317 
	$of_swôch_dëaû_öfo
(
c_swôch_t
 *
sw
,

318 
oÂ_swôch_„©uªs
 *
osf
)

320 
oÂ_phy_p‹t
 *
p‹t_msg
, *
p‹t
;

321 
n
 = 0;

323 
osf
->
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

324 
osf
->
n_buf„rs
 = 
	`ht⁄l
(
sw
->n_buffers);

325 
osf
->
n_èbÀs
 = 
sw
->n_tables;

326 
osf
->
ˇ∑bûôõs
 = 
	`ht⁄l
(
sw
->capabilities);

327 
osf
->
a˘i⁄s
 = 
	`ht⁄l
(
sw
->actions);

329 
p‹t_msg
 = 
osf
->
p‹ts
;

331 ; 
n
 < 
OFSW_MAX_PORTS
;Ç++) {

332 i‡(!
sw
->
p‹ts
[
n
].
vÆid
) ;

334 
p‹t
 = &
sw
->
p‹ts
[
n
].
p_öfo
;

336 
p‹t_msg
->
p‹t_no
 = 
	`ht⁄s
(
n
);

337 
p‹t_msg
->
c⁄fig
 = 
	`ht⁄l
(
p‹t
->config);

338 
p‹t_msg
->
°©e
 = 
	`ht⁄l
(
p‹t
->state);

339 
p‹t_msg
->
cuº
 = 
	`ht⁄l
(
p‹t
->curr);

340 
p‹t_msg
->
advîti£d
 = 
	`ht⁄l
(
p‹t
->advertised);

341 
p‹t_msg
->
suµ‹ãd
 = 
	`ht⁄l
(
p‹t
->supported);

342 
p‹t_msg
->
≥î
 = 
	`ht⁄l
(
p‹t
->peer);

344 
	`mem˝y
(
p‹t_msg
->
«me
, 
p‹t
->«me, 
OFP_MAX_PORT_NAME_LEN
);

345 
	`mem˝y
(
p‹t_msg
->
hw_addr
, 
p‹t
->hw_addr, 
OFP_ETH_ALEN
);

347 
p‹t_msg
++;

349 
	}
}

352 
	$of_swôch_brõf_öfo
(
c_swôch_t
 *
sw
,

353 
c_oÂ_swôch_brõf
 *
coÂ_sb
)

355 
coÂ_sb
->
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
sw
->
DPID
);

356 
coÂ_sb
->
n_p‹ts
 = 
	`¡ohl
(
sw
->n_ports);

357 
coÂ_sb
->
°©e
 = 
	`¡ohl
(
sw
->
swôch_°©e
);

358 
	`°∫˝y
(
coÂ_sb
->
c⁄n_°r
, 
sw
->
c⁄n
.c⁄n_°r, 
OFP_CONN_DESC_SZ
);

359 
coÂ_sb
->
c⁄n_°r
[
OFP_CONN_DESC_SZ
-1] = '\0';

360 
	}
}

364 
	$of_swôch_åavî£_Æl
(
˘æ_hdl_t
 *
hdl
, 
GHFunc
 
ôî_‚
, *
¨g
)

367 
	`c_rd_lock
(&
hdl
->
lock
);

369 i‡(
hdl
->
sw_hash_tbl
) {

370 
	`g_hash_èbÀ_f‹óch
(
hdl
->
sw_hash_tbl
,

371 (
GHFunc
)
ôî_‚
, 
¨g
);

374 
	`c_rd_u∆ock
(&
hdl
->
lock
);

376 
	}
}

379 
	$__of_swôch_åavî£_Æl
(
˘æ_hdl_t
 *
hdl
, 
GHFunc
 
ôî_‚
, *
¨g
)

382 i‡(
hdl
->
sw_hash_tbl
) {

383 
	`g_hash_èbÀ_f‹óch
(
hdl
->
sw_hash_tbl
,

384 (
GHFunc
)
ôî_‚
, 
¨g
);

386 
	}
}

389 
	$of_Êow_exm_key
(c⁄° *
p
)

391 c⁄° 
Êow
 *
Ê
 = 
p
;

393  
	`hash_w‹ds
((c⁄° 
uöt32_t
 *Ë
Ê
,

394  *
Ê
/(
uöt32_t
), 1);

395 
	}
}

398 
	$of_Êow_exm_key_cmp
 (c⁄° *
p1
, c⁄° *
p2
)

400 
Êow
 *
Ê1
 = (Êow *Ë
p1
;

401 
Êow
 *
Ê2
 = (Êow *Ë
p2
;

403  !
	`memcmp
(
Ê1
, 
Ê2
, (*fl1));

404 
	}
}

407 
	$of_Êow_exm_key_‰ì
(*
¨g
 
UNUSED
)

410 
	}
}

413 
	$__of_Êow_exm_ªÀa£
(*
¨g
)

415 
c_Ê_íåy_t
 *
ít
 = 
¨g
;

416 
c_Ê_íåy_t
 *
∑ª¡
 = 
ít
->parent;

418 i‡(
∑ª¡
) {

419 
∑ª¡
->
˛⁄ed_li°
 = 
	`g_¶i°_ªmove
’¨ít->˛⁄ed_li°, 
ít
);

420 
	`of_Êow_íåy_put
(
∑ª¡
);

422 
	`of_Êow_íåy_put
(
ít
);

423 
	}
}

426 
	$of_Êow_exm_ªÀa£
(*
¨g
, *
u_¨g
)

428 
c_Êow_tbl_t
 *
tbl
;

429 
c_swôch_t
 *
sw
 = 
u_¨g
;

430 
c_Ê_íåy_t
 *
ít
 = 
¨g
;

432 
tbl
 = &
sw
->
exm_Êow_tbl
;

434 i‡(
tbl
->
exm_Ê_hash_tbl
) {

436 
	`g_hash_èbÀ_ªmove
(
tbl
->
exm_Ê_hash_tbl
, &
ít
->
Ê
);

440 
	}
}

443 
	$of_Êow_add_≠p_ow√rshù
(
c_Ê_íåy_t
 *
ít
, *
√w_≠p
)

445 
GSLi°
 *
ôî©‹
 = 
NULL
;

446 *
≠p
;

448 
	`c_wr_lock
(&
ít
->
FL_LOCK
);

449 
ôî©‹
 = 
ít
->
≠p_ow√r_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

450 
≠p
 = 
ôî©‹
->
d©a
;

451 i‡(
≠p
 =
√w_≠p
) {

452 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

453  -
EEXIST
;

457 
	`c_≠p_ªf
(
√w_≠p
);

458 
	`©omic_öc
(&
ít
->
≠p_ªf
, 1);

459 
ít
->
≠p_ow√r_li°
 = 
	`g_¶i°_≠≥nd
”¡->≠p_ow√r_li°, 
√w_≠p
);

460 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

463 
	}
}

466 
	$__of_Êow_föd_≠p_ow√rshù
(*
key_¨g
 
UNUSED
, *
ít_¨g
, *
≠p
)

468 
GSLi°
 *
ôî©‹
 = 
NULL
;

469 *
≠p_ow√r
;

470 
c_Ê_íåy_t
 *
ít
 = 
ít_¨g
;

472 
ôî©‹
 = 
ít
->
≠p_ow√r_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

473 
≠p_ow√r
 = 
ôî©‹
->
d©a
;

474 i‡(
≠p_ow√r
 =
≠p
) {

480 
	}
}

484 
	$__of_Êow_dñ_≠p_ow√rshù
(
c_Ê_íåy_t
 *
ít
, *
≠p
)

486 
ít
->
≠p_ow√r_li°
 = 
	`g_¶i°_ªmove
”¡->≠p_ow√r_li°, 
≠p
);

487 
	`©omic_dec
(&
ít
->
≠p_ªf
, 1);

488 
	`c_≠p_uƒef
(
≠p
);

491 
	}
}

494 
	$of_Êow_föd_dñ_≠p_ow√rshù
(*
key_¨g
 
UNUSED
, *
ít_¨g
, *
≠p
)

496 
c_Ê_íåy_t
 *
ít
 = 
ít_¨g
;

498 
	`c_wr_lock
(&
ít
->
FL_LOCK
);

500 i‡(
	`__of_Êow_föd_≠p_ow√rshù
(
NULL
, 
ít
, 
≠p
) ) {

501 
	`__of_Êow_dñ_≠p_ow√rshù
(
ít
, 
≠p
);

503 i‡(!
	`©omic_ªad
(&
ít
->
≠p_ªf
)) {

504 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

508 i‡(!(
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

509 
	`of_£nd_Êow_dñ
(
ít
->
sw
,É¡, 0, 
Ál£
);

513 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

516 
	}
}

519 
	$__of_≥r_swôch_dñ_≠p_Êow_ruÀ
(
c_swôch_t
 *
sw
, 
GSLi°
 **
li°
, *
≠p
)

521 
GSLi°
 *
tmp
, *
tmp1
, *
¥ev
 = 
NULL
;

522 
c_Ê_íåy_t
 *
ít
;

524 
tmp
 = *
li°
;

525 
tmp
) {

526 
ít
 = 
tmp
->
d©a
;

527 
	`c_wr_lock
(&
ít
->
FL_LOCK
);

528 i‡(
	`__of_Êow_föd_≠p_ow√rshù
(
NULL
, 
ít
, 
≠p
)) {

529 
	`__of_Êow_dñ_≠p_ow√rshù
(
ít
, 
≠p
);

530 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

531 
tmp1
 = 
tmp
;

533 i‡(!
	`©omic_ªad
(&
ít
->
≠p_ªf
)) {

534 i‡(
¥ev
) {

535 
¥ev
->
√xt
 = 
tmp
->next;

536 
tmp
 =Åmp->
√xt
;

538 *
li°
 = 
tmp
->
√xt
;

539 
tmp
 = *
li°
;

542 i‡(!
ít
->
∑ª¡
 && !”¡->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

543 
	`of_£nd_Êow_dñ
(
sw
, 
ít
, 0, 
Ál£
);

546 
	`g_¶i°_‰ì_1
(
tmp1
);

547 
	`of_Êow_ruÀ_‰ì
(
ít
, 
sw
);

552 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

553 
¥ev
 = 
tmp
;

554 
tmp
 = 
¥ev
->
√xt
;

558 
	}
}

561 
	$__of_≥r_swôch_dñ_≠p_Êow_exm
(
c_swôch_t
 *
sw
, *
≠p
)

563 
c_Êow_tbl_t
 *
tbl
 = &
sw
->
exm_Êow_tbl
;

565 i‡(
tbl
->
exm_Ê_hash_tbl
) {

566 
	`g_hash_èbÀ_f‹óch_ªmove
(
tbl
->
exm_Ê_hash_tbl
,

567 
of_Êow_föd_dñ_≠p_ow√rshù
, 
≠p
);

569 
	}
}

572 
	$__of_≥r_swôch_dñ_≠p_Êow_ow√rshù
(
c_swôch_t
 *
sw
, *
≠p
)

574 
idx
 = 0;

575 
c_Êow_tbl_t
 *
tbl
;

577 
idx
 = 0; idx < 
C_MAX_RULE_FLOW_TBLS
; idx++) {

578 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
idx
];

579 
	`__of_≥r_swôch_dñ_≠p_Êow_ruÀ
(
sw
, &
tbl
->
ruÀ_Ê_tbl
, 
≠p
);

582 
	`__of_≥r_swôch_dñ_≠p_Êow_exm
(
sw
, 
≠p
);

584 
	}
}

586 
UNUSED


587 
	$of_Êow_exm_add
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

589 
c_Ê_íåy_t
 *
√w_ít
, *
ít
;

590 
c_Êow_tbl_t
 *
tbl
;

591 
ªt
 = 0;

592 
boﬁ
 
√ed_hw_sync
 = 
	`FL_EXM_NEED_HW_SYNC
(
Ê_∑rms
);

594 i‡(
	`of_exm_Êow_mod_vÆid©e_∑rms
(
Ê_∑rms
)) {

595  -
EINVAL
;

598 
√w_ít
 = 
	`ˇŒoc
(1, (*new_ent));

599 
	`as£π
(
√w_ít
);

601 
	`c_rw_lock_öô
(&
√w_ít
->
FL_LOCK
);

602 
√w_ít
->
sw
 = sw;

603 
√w_ít
->
FL_ENT_TYPE
 = 
C_TBL_EXM
;

604 
√w_ít
->
FL_FLAGS
 = 
Ê_∑rms
->
Êags
;

605 
√w_ít
->
FL_HWTBL_IDX
 = 
C_TBL_HW_IDX_DFL
;

607 
√w_ít
->
FL_PRIO
 = 
C_FL_PRIO_EXM
;

608 
	`mem˝y
(&
√w_ít
->
Ê
, 
Ê_∑rms
->
Êow
, (flow));

609 
√w_ít
->
a˘i⁄_Àn
 = 
Ê_∑rms
->action_len;

610 
√w_ít
->
a˘i⁄s
 = 
Ê_∑rms
->actions;

611 
	`©omic_öc
(&
√w_ít
->
FL_REF
, 1);

613 
tbl
 = &
sw
->
exm_Êow_tbl
;

615 
	`c_wr_lock
(&
sw
->
lock
);

617 i‡((
ít
 = 
	`__of_Êow_gë_exm
(
sw
, 
Ê_∑rms
->
Êow
))) {

618 
ªt
 = -
EEXIST
;

619 i‡((
Ê_∑rms
->
Êags
 & 
C_FL_ENT_LOCAL
) &&

620 (
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

621 
ªt
 = 
	`of_Êow_add_≠p_ow√rshù
(
ít
, 
Ê_∑rms
->
≠p_ow√r
);

624 
	`c_wr_u∆ock
(&
sw
->
lock
);

625 
	`of_Êow_íåy_put
((*)
ít
);

626 
	`‰ì
(
√w_ít
);

627  
ªt
;

630 
	`of_Êow_add_≠p_ow√rshù
(
√w_ít
, 
Ê_∑rms
->
≠p_ow√r
);

632 
	`g_hash_èbÀ_ö£π
(
tbl
->
exm_Ê_hash_tbl
, &
√w_ít
->
Ê
,Çew_ent);

634 
	`c_wr_u∆ock
(&
sw
->
lock
);

636 i‡(
√ed_hw_sync
) {

637 
	`of_£nd_Êow_add
(
sw
, 
√w_ít
, 
Ê_∑rms
->
buf„r_id
);

640 
	`of_Êow_íåy_put
(
√w_ít
);

642  
ªt
;

643 
	}
}

648 
c_Ê_íåy_t
 *

649 
	$of_Êow_˛⁄e_exm
(
c_swôch_t
 *
sw
, 
Êow
 *Êow, 
c_Ê_íåy_t
 *
∑ª¡
)

651 
c_Ê_íåy_t
 *
ít
;

652 
c_Êow_tbl_t
 *
tbl
;

654 
ít
 = 
	`ˇŒoc
(1, (*ent));

655 
	`as£π
(
ít
);

657 
ít
->
FL_ENT_TYPE
 = 
C_TBL_EXM
;

658 
ít
->
FL_FLAGS
 = 0;

659 
ít
->
FL_HWTBL_IDX
 = 
∑ª¡
->FL_HWTBL_IDX;

661 
ít
->
FL_ITIMEO
 = 
C_FL_IDLE_DFL_TIMEO
;

662 
ít
->
FL_HTIMEO
 = 
C_FL_HARD_DFL_TIMEO
;

663 
ít
->
FL_PRIO
 = 
C_FL_PRIO_EXM
;

664 
	`mem˝y
(&
ít
->
Ê
, 
Êow
, (*flow));

665 
ít
->
a˘i⁄_Àn
 = 
∑ª¡
->action_len;

666 
ít
->
a˘i⁄s
 = 
∑ª¡
->actions;

667 
ít
->
∑ª¡
 =Öarent;

668 
	`©omic_öc
(&
ít
->
FL_REF
, 1);

670 
	`c_wr_lock
(&
sw
->
lock
);

672 
tbl
 = &
sw
->
exm_Êow_tbl
;

674 
∑ª¡
->
˛⁄ed_li°
 = 
	`g_¶i°_≠≥nd
’¨ít->˛⁄ed_li°, 
ít
);

675 
	`g_hash_èbÀ_ö£π
(
tbl
->
exm_Ê_hash_tbl
, &
ít
->
Ê
,Ént);

677 
	`c_wr_u∆ock
(&
sw
->
lock
);

679  
ít
;

680 
	}
}

682 
UNUSED


683 
	$of_Êow_exm_dñ
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

685 
c_Êow_tbl_t
 *
tbl
;

686 
c_Ê_íåy_t
 *
Ê_ít
;

688 i‡(
	`of_exm_Êow_mod_vÆid©e_∑rms
(
Ê_∑rms
)) {

689  -
EINVAL
;

692 
tbl
 = &
sw
->
exm_Êow_tbl
;

694 
	`c_wr_lock
(&
sw
->
lock
);

696 
Ê_ít
 = 
	`__of_Êow_gë_exm
(
sw
, 
Ê_∑rms
->
Êow
);

697 i‡(!
Ê_ít
) {

698 
	`c_wr_u∆ock
(&
sw
->
lock
);

699  -
EINVAL
;

703 
	`c_wr_lock
(&
Ê_ít
->
FL_LOCK
);

704 i‡(
	`__of_Êow_föd_≠p_ow√rshù
(
NULL
, 
Ê_ít
, 
Ê_∑rms
->
≠p_ow√r
)) {

705 
	`__of_Êow_dñ_≠p_ow√rshù
(
Ê_ít
, 
Ê_∑rms
->
≠p_ow√r
);

706 
	`c_wr_u∆ock
(&
Ê_ít
->
FL_LOCK
);

708 
	`c_log_îr
("%s: Ow√rshù mism©ch. Flow dñ faûed", 
FN
);

709 
	`c_wr_u∆ock
(&
Ê_ít
->
FL_LOCK
);

710 
	`c_wr_u∆ock
(&
sw
->
lock
);

711  -
EINVAL
;

714 i‡(!
	`©omic_ªad
(&
Ê_ít
->
≠p_ªf
)) {

715 
	`g_hash_èbÀ_ªmove
(
tbl
->
exm_Ê_hash_tbl
, 
Ê_∑rms
->
Êow
);

718 i‡(!(
Ê_ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
))

719 
	`of_£nd_Êow_dñ
(
sw
, 
Ê_ít
, 0, 
åue
);

722 
	`c_wr_u∆ock
(&
sw
->
lock
);

724 
	`of_Êow_íåy_put
(
Ê_ít
);

727 
	}
}

730 
	$of_Êow_exm_ôî
(*
k
 
UNUSED
, *
v
, *
¨gs
)

732 
c_ôî_¨gs
 *
u_∑rms
 = 
¨gs
;

733 
c_Ê_íåy_t
 *
ít
 = 
v
;

734 
Êow_∑r£r_‚
 
‚
;

736 
‚
 = (
Êow_∑r£r_‚
)(
u_∑rms
->
u_‚
);

738 
	`‚
(
u_∑rms
->
u_¨g
, 
ít
);

739 
	}
}

743 
	$of_Êow_ruÀ_‰ì
(*
¨g
, *
u_¨g
)

745 
c_Ê_íåy_t
 *
ít
 = 
¨g
;

747 i‡(
ít
->
˛⁄ed_li°
) {

748 
	`g_¶i°_f‹óch
(
ít
->
˛⁄ed_li°
, (
GFunc
)
of_Êow_exm_ªÀa£
, 
u_¨g
);

749 
	`g_¶i°_‰ì
(
ít
->
˛⁄ed_li°
);

752 
	`of_Êow_íåy_put
(
ít
);

753 
	}
}

756 
	$of_Êow_ruÀ_ôî
(*
k
, *
¨gs
)

758 
c_ôî_¨gs
 *
u_∑rms
 = 
¨gs
;

759 
c_Ê_íåy_t
 *
ít
 = 
k
;

760 
Êow_∑r£r_‚
 
‚
;

762 
‚
 = (
Êow_∑r£r_‚
)(
u_∑rms
->
u_‚
);

764 
	`‚
(
u_∑rms
->
u_¨g
, 
ít
);

765 
	}
}

768 
c_Ê_íåy_t
 * 
UNUSED


769 
	$__of_Êow_lookup_ruÀ_°ri˘
(
GSLi°
 *
li°
, 
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
)

771 
GSLi°
 *
ôî©‹
 = 
NULL
;

772 
c_Ê_íåy_t
 *
ít
;

774 
ôî©‹
 = 
li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

775 
ít
 = 
ôî©‹
->
d©a
;

776 i‡(!
	`memcmp
(&
ít
->
Ê
, fl, (*fl))

777 && 
ít
->
FL_WILDCARDS
 =
wûdˇrds
) {

778  
ít
;

782  
NULL
;

783 
	}
}

785 
c_Ê_íåy_t
 *

786 
	$__of_Êow_lookup_ruÀ_°ri˘_¥io_höt
(
GSLi°
 **
li°
, 
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
,

787 
uöt16_t
 
¥io
)

789 
GSLi°
 *
ôî©‹
 = 
NULL
, *
höt
 = NULL;

790 
c_Ê_íåy_t
 *
ít
;

792 
ôî©‹
 = *
li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

793 
ít
 = 
ôî©‹
->
d©a
;

794 i‡((
höt
 && ((
c_Ê_íåy_t
 *)(höt->
d©a
))->
FL_PRIO
 > 
ít
->FL_PRIO) ||

795 (
¥io
 >
ít
->
FL_PRIO
)) {

796 
höt
 = 
ôî©‹
;

798 i‡(!
	`memcmp
(&
ít
->
Ê
, fl, (*fl))

799 && 
ít
->
FL_WILDCARDS
 =
wûdˇrds
 &&

800 
ít
->
FL_PRIO
 =
¥io
) {

801 *
li°
 = 
höt
;

802  
ít
;

806 *
li°
 = 
höt
;

807  
NULL
;

808 
	}
}

810 
UNUSED


811 
	$of_Êow_¥öt_no_m©ch
(
c_Ê_íåy_t
 *
ít
, 
Êow
 *
Ê
)

813 
uöt32_t
 
wûdˇrds
, 
ù_wc
;

814 
uöt32_t
 
nw_d°_mask
, 
nw_§c_mask
;

815 
Êow
 *
ít_Ê
;

816 *
miss_°r
 = 
NULL
;

818 
ít_Ê
 = &
ít
->
Ê
;

819 
wûdˇrds
 = 
	`¡ohl
(
ít
->
FL_WILDCARDS
);

821 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_DST_MASK
Ë>> 
OFPFW_NW_DST_SHIFT
);

822 
nw_d°_mask
 = 
ù_wc
 >= 32 ? 0 :

823 
	`make_öë_mask
(32-
ù_wc
);

825 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_SRC_MASK
Ë>> 
OFPFW_NW_SRC_SHIFT
);

826 
nw_§c_mask
 = 
ù_wc
 >= 32 ? 0 :

827 
	`make_öë_mask
(32-
ù_wc
);

831 i‡((
Ê
->
nw_d°
 & 
	`ht⁄l
(
nw_d°_mask
)Ë!
ít_Ê
->nw_dst) {

832 
miss_°r
 = "nw dst";

833 
out
;

835 i‡((
Ê
->
nw_§c
 & 
	`ht⁄l
(
nw_§c_mask
)Ë!
ít_Ê
->nw_src) {

836 
miss_°r
 = "nw src";

837 
out
;

840 i‡(!(
wûdˇrds
 & 
OFPFW_NW_PROTO
Ë&& 
Ê
->
nw_¥Ÿo
 !
ít_Ê
->nw_proto) {

841 
miss_°r
 = "nwÖroto";

842 
out
;

844 i‡(!(
wûdˇrds
 & 
OFPFW_NW_TOS
Ë&& 
Ê
->
nw_tos
 !
ít_Ê
->nw_tos) {

845 
miss_°r
 = "nwÅos";

846 
out
;

848 i‡(!(
wûdˇrds
 & 
OFPFW_TP_DST
Ë&& 
Ê
->
ç_d°
 !
ít_Ê
->tp_dst) {

849 
miss_°r
 = "nwÅp dst";

850 
out
;

852 i‡(!(
wûdˇrds
 & 
OFPFW_TP_SRC
Ë&& 
Ê
->
ç_§c
 !
ít_Ê
->tp_src) {

853 
miss_°r
 = "nwÅp src";

854 
out
;

856 i‡(!(
wûdˇrds
 & 
OFPFW_DL_SRC
Ë&& 
	`memcmp
(
Ê
->
dl_§c
, 
ít_Ê
->dl_src, 6)) {

857 
miss_°r
 = "nw dl src";

858 
out
;

860 i‡(!(
wûdˇrds
 & 
OFPFW_DL_DST
Ë&& 
	`memcmp
(
Ê
->
dl_d°
, 
ít_Ê
->dl_dst, 6)) {

861 
miss_°r
 = "nw dl dst";

862 
out
;

865 i‡(!(
wûdˇrds
 & 
OFPFW_DL_TYPE
Ë&& 
Ê
->
dl_ty≥
 !
ít_Ê
->dl_type) {

866 
miss_°r
 = "nw dlÅype";

867 
out
;

870 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN
Ë&& 
Ê
->
dl_vœn
 !
ít_Ê
->dl_vlan) {

871 
miss_°r
 = "dl_vlan";

872 
out
;

874 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN_PCP
Ë&& 
Ê
->
dl_vœn_p˝
 !
ít_Ê
->dl_vlan_pcp) {

875 
miss_°r
 = "dl_vlan_pcp";

876 
out
;

878 i‡(!(
wûdˇrds
 & 
OFPFW_IN_PORT
Ë&& 
Ê
->
ö_p‹t
 !
ít_Ê
->in_port) {

879 
miss_°r
 = "inÖort";

880 
out
;

882 
out
:

884 i‡(
miss_°r
) {

885 
	`c_log_debug
 ("Mism©ch @ %s", 
miss_°r
);

889 
	}
}

891 
c_Ê_íåy_t
 *

892 
	$__of_Êow_lookup_ruÀ
(
c_swôch_t
 *
sw
 
UNUSED
, 
Êow
 *
Ê
, 
c_Êow_tbl_t
 *
tbl
)

894 
GSLi°
 *
li°
, *
ôî©‹
 = 
NULL
;

895 
c_Ê_íåy_t
 *
ít
;

896 
Êow
 *
ít_Ê
;

897 
uöt32_t
 
wûdˇrds
, 
ù_wc
;

898 
uöt32_t
 
nw_d°_mask
, 
nw_§c_mask
;

900 
li°
 = 
tbl
->
ruÀ_Ê_tbl
;

902 
ôî©‹
 = 
li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

904 
ít
 = 
ôî©‹
->
d©a
;

905 
ít_Ê
 = &
ít
->
Ê
;

906 
wûdˇrds
 = 
	`¡ohl
(
ít
->
FL_WILDCARDS
);

908 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_DST_MASK
Ë>> 
OFPFW_NW_DST_SHIFT
);

909 
nw_d°_mask
 = 
ù_wc
 >= 32 ? 0 :

910 
	`make_öë_mask
(32-
ù_wc
);

912 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_SRC_MASK
Ë>> 
OFPFW_NW_SRC_SHIFT
);

913 
nw_§c_mask
 = 
ù_wc
 >= 32 ? 0 :

914 
	`make_öë_mask
(32-
ù_wc
);

918 i‡((
Ê
->
nw_d°
 & 
	`ht⁄l
(
nw_d°_mask
)Ë=
ít_Ê
->nw_dst &&

919 (
Ê
->
nw_§c
 & 
	`ht⁄l
(
nw_§c_mask
)Ë=
ít_Ê
->nw_src &&

920 (
wûdˇrds
 & 
OFPFW_NW_PROTO
 || 
Ê
->
nw_¥Ÿo
 =
ít_Ê
->nw_proto) &&

921 (
wûdˇrds
 & 
OFPFW_NW_TOS
 || 
Ê
->
nw_tos
 =
ít_Ê
->nw_tos) &&

922 (
wûdˇrds
 & 
OFPFW_TP_DST
 || 
Ê
->
ç_d°
 =
ít_Ê
->tp_dst) &&

923 (
wûdˇrds
 & 
OFPFW_TP_SRC
 || 
Ê
->
ç_§c
 =
ít_Ê
->tp_src) &&

924 (
wûdˇrds
 & 
OFPFW_DL_SRC
 || !
	`memcmp
(
Ê
->
dl_§c
, 
ít_Ê
->dl_src, 6)) &&

925 (
wûdˇrds
 & 
OFPFW_DL_DST
 || !
	`memcmp
(
Ê
->
dl_d°
, 
ít_Ê
->dl_dst, 6)) &&

926 (
wûdˇrds
 & 
OFPFW_DL_TYPE
 || 
Ê
->
dl_ty≥
 =
ít_Ê
->dl_type) &&

927 (
wûdˇrds
 & 
OFPFW_DL_VLAN
 || 
Ê
->
dl_vœn
 =
ít_Ê
->dl_vlan) &&

928 (
wûdˇrds
 & 
OFPFW_DL_VLAN_PCP
 || 
Ê
->
dl_vœn_p˝
 =
ít_Ê
->dl_vlan_pcp) &&

929 (
wûdˇrds
 & 
OFPFW_IN_PORT
 || 
Ê
->
ö_p‹t
 =
ít_Ê
->in_port)) {

930  
ít
;

935  
NULL
;

936 
	}
}

942 
	$of_Êow_ruÀ_add
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

944 
GSLi°
 *
li°
;

945 
c_Ê_íåy_t
 *
√w_ít
, *
ít
;

946 
c_Êow_tbl_t
 *
tbl
;

947 
ªt
 = 0;

948 
boﬁ
 
hw_sync
 = 
	`FL_NEED_HW_SYNC
(
Ê_∑rms
);

950 
√w_ít
 = 
	`ˇŒoc
(1, (*new_ent));

951 
	`as£π
(
√w_ít
);

953 i‡(
	`of_Êow_mod_vÆid©e_∑rms
(
Ê_∑rms
)) {

954  -
EINVAL
;

958 
	`c_rw_lock_öô
(&
√w_ít
->
FL_LOCK
);

959 
√w_ít
->
sw
 = sw;

960 
√w_ít
->
FL_ENT_TYPE
 = 
C_TBL_RULE
;

961 
√w_ít
->
FL_FLAGS
 = 
Ê_∑rms
->
Êags
;

962 
√w_ít
->
FL_WILDCARDS
 = 
Ê_∑rms
->
wûdˇrds
;

963 
√w_ít
->
FL_HWTBL_IDX
 = 
C_TBL_HW_IDX_DFL
;

965 
√w_ít
->
FL_PRIO
 = 
Ê_∑rms
->
¥io
;

966 
	`mem˝y
(&
√w_ít
->
Ê
, 
Ê_∑rms
->
Êow
, (flow));

967 
√w_ít
->
a˘i⁄_Àn
 = 
Ê_∑rms
->action_len;

968 
√w_ít
->
a˘i⁄s
 = 
Ê_∑rms
->actions;

969 
√w_ít
->
˛⁄ed_li°
 = 
NULL
;

971 i‡(
hw_sync
) {

972 
	`©omic_öc
(&
√w_ít
->
FL_REF
, 1);

975 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
Ê_∑rms
->
tbl_idx
];

976 
li°
 = 
tbl
->
ruÀ_Ê_tbl
;

978 
	`c_wr_lock
(&
sw
->
lock
);

981 i‡((
ít
 = 
	`__of_Êow_lookup_ruÀ_°ri˘_¥io_höt
(&
li°
, 
Ê_∑rms
->
Êow
,

982 
Ê_∑rms
->
wûdˇrds
,

983 
Ê_∑rms
->
¥io
))) {

984 
ªt
 = -
EEXIST
;

985 i‡((
Ê_∑rms
->
Êags
 & 
C_FL_ENT_LOCAL
) &&

986 (
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

987 
ªt
 = 
	`of_Êow_add_≠p_ow√rshù
(
ít
, 
Ê_∑rms
->
≠p_ow√r
);

990 
	`c_wr_u∆ock
(&
sw
->
lock
);

991 
	`‰ì
(
√w_ít
);

992 
	`c_log_debug
("%s: FlowáÃódyÖª£¡", 
FN
);

993  
ªt
;

996 
	`of_Êow_add_≠p_ow√rshù
(
√w_ít
, 
Ê_∑rms
->
≠p_ow√r
);

998 
tbl
->
ruÀ_Ê_tbl
 = 
	`g_¶i°_ö£π_bef‹e
—bl->ruÀ_Ê_tbl, 
li°
, 
√w_ít
);

999 
	`c_wr_u∆ock
(&
sw
->
lock
);

1001 i‡(
hw_sync
) {

1002 
	`of_£nd_Êow_add
(
sw
, 
√w_ít
, 
Ê_∑rms
->
buf„r_id
);

1003 
	`of_Êow_íåy_put
(
√w_ít
);

1006  
ªt
;

1007 
	}
}

1009 
boﬁ


1010 
	$__of_Êow_ruÀ_dñ_°ri˘
(
GSLi°
 **
li°
, 
Êow
 **flow,

1011 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
¥io
,

1012 *
≠p
)

1014 
GSLi°
 *
tmp
, *
¥ev
 = 
NULL
;

1015 
c_Ê_íåy_t
 *
ít
;

1016 
boﬁ
 
found
 = 
Ál£
;

1018 
tmp
 = *
li°
;

1019 
tmp
) {

1020 
ít
 = 
tmp
->
d©a
;

1022 
	`c_wr_lock
(&
ít
->
FL_LOCK
);

1023 i‡(!
	`memcmp
(&
ít
->
Ê
, *
Êow
, (flow)) &&

1024 
ít
->
FL_WILDCARDS
 =
wûdˇrds
 &&

1025 
ít
->
FL_PRIO
 =
¥io
 &&

1026 
	`__of_Êow_föd_≠p_ow√rshù
(
NULL
, 
ít
, 
≠p
)) {

1028 
	`__of_Êow_dñ_≠p_ow√rshù
(
ít
, 
≠p
);

1030 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

1031 *
Êow
 = &
ít
->
Ê
;

1032 
found
 = 
TRUE
;

1034 i‡(
	`©omic_ªad
(&
ít
->
≠p_ªf
)) {

1038 i‡(
¥ev
)

1039 
¥ev
->
√xt
 = 
tmp
->next;

1041 *
li°
 = 
tmp
->
√xt
;

1042 
	`g_¶i°_‰ì_1
 (
tmp
);

1045 
¥ev
 = 
tmp
;

1046 
tmp
 = 
¥ev
->
√xt
;

1047 
	`c_wr_u∆ock
(&
ít
->
FL_LOCK
);

1050  
found
;

1051 
	}
}

1054 
	$of_Êow_ruÀ_dñ
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

1056 
c_Ê_íåy_t
 *
ít
;

1057 
c_Êow_tbl_t
 *
tbl
;

1058 
Êow
 *Êow = 
Ê_∑rms
->flow;

1060 i‡(
	`of_Êow_mod_vÆid©e_∑rms
(
Ê_∑rms
)) {

1064 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
Ê_∑rms
->
tbl_idx
];

1066 
	`c_wr_lock
(&
sw
->
lock
);

1068 i‡(!
	`__of_Êow_ruÀ_dñ_°ri˘
(&
tbl
->
ruÀ_Ê_tbl
, &
Êow
,

1069 
Ê_∑rms
->
wûdˇrds
, fl_∑rms->
¥io
,

1070 
Ê_∑rms
->
≠p_ow√r
)) {

1071 
	`c_log_îr
("%s: FlowÇŸÖª£¡", 
FN
);

1072 
	`c_wr_u∆ock
(&
sw
->
lock
);

1080 
ít
 = 
	`c⁄èöî_of
(
Êow
, 
c_Ê_íåy_t
, 
Ê
);

1082 i‡(!(
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

1083 
	`of_£nd_Êow_dñ_°ri˘
(
sw
, 
ít
, 0);

1086 i‡(!
	`©omic_ªad
(&
ít
->
≠p_ªf
)) {

1087 
	`of_Êow_ruÀ_‰ì
(
ít
, 
sw
);

1090 
	`c_wr_u∆ock
(&
sw
->
lock
);

1093 
	}
}

1096 
	$of_Êow_add
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

1098 #ifde‡
CONFIG_FLOW_EXM


1099 i‡(
Ê_∑rms
->
wûdˇrds
) {

1100  
	`of_Êow_ruÀ_add
(
sw
, 
Ê_∑rms
);

1102  
	`of_Êow_exm_add
(
sw
, 
Ê_∑rms
);

1107  
	`of_Êow_ruÀ_add
(
sw
, 
Ê_∑rms
);

1109 
	}
}

1112 
	$of_Êow_dñ
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
Ê_∑rms
)

1114 #ifde‡
CONFIG_FLOW_EXM


1115 i‡(
Ê_∑rms
->
wûdˇrds
) {

1116  
	`of_Êow_ruÀ_dñ
(
sw
, 
Ê_∑rms
);

1118  
	`of_Êow_exm_dñ
(
sw
, 
Ê_∑rms
);

1123  
	`of_Êow_ruÀ_dñ
(
sw
, 
Ê_∑rms
);

1125 
	}
}

1128 
	$of_Êow_åavî£_tbl
(
c_swôch_t
 *
sw
, 
uöt8_t
 
tbl_ty≥
, uöt8_à
tbl_idx
,

1129 *
u_¨g
, 
Êow_∑r£r_‚
 
‚
)

1131 
c_ôî_¨gs
 
¨gs
;

1132 
c_Êow_tbl_t
 *
tbl
;

1134 i‡(
tbl_ty≥
 && 
tbl_idx
 >
C_MAX_RULE_FLOW_TBLS
) {

1135 
	`c_log_îr
("%†unknow¿tb»ty≥", 
FN
);

1139 
¨gs
.
u_¨g
 = u_arg;

1140 
¨gs
.
u_‚
 = (*)
‚
;

1142 
	`c_rd_lock
(&
sw
->
lock
);

1144 i‡(!
tbl_ty≥
) {

1145 
tbl
 = &
sw
->
exm_Êow_tbl
;

1147 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
tbl_idx
];

1150 i‡(
tbl
->
c_Ê_tbl_ty≥
 =
C_TBL_EXM
) {

1151 
	`g_hash_èbÀ_f‹óch
(
tbl
->
exm_Ê_hash_tbl
,

1152 (
GHFunc
)
of_Êow_exm_ôî
, &
¨gs
);

1153 } i‡(
tbl
->
c_Ê_tbl_ty≥
 =
C_TBL_RULE
){

1154 
	`g_¶i°_f‹óch
(
tbl
->
ruÀ_Ê_tbl
,

1155 (
GFunc
)
of_Êow_ruÀ_ôî
, &
¨gs
);

1158 
	`c_rd_u∆ock
(&
sw
->
lock
);

1159 
	}
}

1162 
	$of_Êow_åavî£_tbl_Æl
(
c_swôch_t
 *
sw
, *
u_¨g
, 
Êow_∑r£r_‚
 
‚
)

1164 
uöt8_t
 
tbl_idx
 = 0;

1166 
	`of_Êow_åavî£_tbl
(
sw
, 
C_TBL_EXM
, 
tbl_idx
, 
u_¨g
, 
‚
);

1168 ; 
tbl_idx
 < 
C_MAX_RULE_FLOW_TBLS
;Åbl_idx++) {

1169 
	`of_Êow_åavî£_tbl
(
sw
, 
C_TBL_RULE
, 
tbl_idx
, 
u_¨g
, 
‚
);

1172 
	}
}

1177 
	$of_swôch_Êow_tbl_¸óã
(
c_swôch_t
 *
sw
)

1179 
tbl_idx
 = 0;

1180 
c_Êow_tbl_t
 *
tbl
;

1182 
	`c_wr_lock
(&
sw
->
lock
);

1184 
tbl
 = &
sw
->
exm_Êow_tbl
;

1185 
tbl
->
exm_Ê_hash_tbl
 =

1186 
	`g_hash_èbÀ_√w_fuŒ
(
of_Êow_exm_key
,

1187 
of_Êow_exm_key_cmp
,

1188 
of_Êow_exm_key_‰ì
,

1189 
__of_Êow_exm_ªÀa£
);

1190 
	`as£π
(
tbl
->
exm_Ê_hash_tbl
);

1191 
tbl
->
c_Ê_tbl_ty≥
 = 
C_TBL_EXM
;

1192 
tbl
->
hw_tbl_idx
 = 
C_TBL_HW_IDX_DFL
;

1194 
tbl_idx
 = 0;Åbl_idx < 
C_MAX_RULE_FLOW_TBLS
;Åbl_idx++) {

1195 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
tbl_idx
];

1197 
tbl
->
c_Ê_tbl_ty≥
 = 
C_TBL_RULE
;

1198 
tbl
->
hw_tbl_idx
 = 
C_TBL_HW_IDX_DFL
;

1200 
	`c_wr_u∆ock
(&
sw
->
lock
);

1201 
	}
}

1206 
	$of_swôch_Êow_tbl_dñëe
(
c_swôch_t
 *
sw
)

1208 
tbl_idx
 = 0;

1209 
c_Êow_tbl_t
 *
tbl
;

1211 
	`c_wr_lock
(&
sw
->
lock
);

1213 ; 
tbl_idx
 < 
C_MAX_RULE_FLOW_TBLS
;Åbl_idx++) {

1214 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
tbl_idx
];

1215 i‡(
tbl
->
ruÀ_Ê_tbl
) {

1216 
	`g_¶i°_f‹óch
(
tbl
->
ruÀ_Ê_tbl
, (
GFunc
)
of_Êow_ruÀ_‰ì
, 
sw
);

1217 
	`g_¶i°_‰ì
(
tbl
->
ruÀ_Ê_tbl
);

1218 
tbl
->
ruÀ_Ê_tbl
 = 
NULL
;

1222 
tbl
 = &
sw
->
exm_Êow_tbl
;

1223 i‡(
tbl
->
exm_Ê_hash_tbl
) {

1224 
	`g_hash_èbÀ_de°roy
(
tbl
->
exm_Ê_hash_tbl
);

1227 
	`c_wr_u∆ock
(&
sw
->
lock
);

1228 
	}
}

1232 
	$of_swôch_Êow_tbl_ª£t
(
c_swôch_t
 *
sw
)

1234 
tbl_idx
 = 0;

1235 
c_Êow_tbl_t
 *
tbl
;

1237 
	`c_wr_lock
(&
sw
->
lock
);

1239 ; 
tbl_idx
 < 
C_MAX_RULE_FLOW_TBLS
;Åbl_idx++) {

1240 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
tbl_idx
];

1241 i‡(
tbl
->
ruÀ_Ê_tbl
) {

1242 
	`g_¶i°_f‹óch
(
tbl
->
ruÀ_Ê_tbl
, (
GFunc
)
of_Êow_ruÀ_‰ì
, 
sw
);

1243 
	`g_¶i°_‰ì
(
tbl
->
ruÀ_Ê_tbl
);

1244 
tbl
->
ruÀ_Ê_tbl
 = 
NULL
;

1248 
tbl
 = &
sw
->
exm_Êow_tbl
;

1249 i‡(
tbl
->
exm_Ê_hash_tbl
) {

1250 
	`g_hash_èbÀ_ªmove_Æl
(
tbl
->
exm_Ê_hash_tbl
);

1253 
	`c_wr_u∆ock
(&
sw
->
lock
);

1254 
	}
}

1257 
	$of_£nd_„©uªs_ªque°
(
c_swôch_t
 *
sw
)

1259 
cbuf
 *
b
;

1262 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
OFPT_FEATURES_REQUEST
, 0);

1265 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1266 
	}
}

1269 
	$__of_£nd_„©uªs_ªque°
(
c_swôch_t
 *
sw
)

1271 
	`of_£nd_„©uªs_ªque°
(
sw
);

1272 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1273 
	}
}

1276 
	$of_£nd_echo_ªque°
(
c_swôch_t
 *
sw
)

1278 
cbuf
 *
b
;

1281 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
OFPT_ECHO_REQUEST
, 0);

1283 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
Ál£
, sw->
d©≠©h_id
);

1284 
	}
}

1287 
	$__of_£nd_echo_ªque°
(
c_swôch_t
 *
sw
)

1289 
	`of_£nd_echo_ªque°
(
sw
);

1290 
	}
}

1293 
	$of_£nd_echo_ª∂y
(
c_swôch_t
 *
sw
, 
uöt32_t
 
xid
)

1295 
cbuf
 *
b
;

1298 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
OFPT_ECHO_REPLY
, 
xid
);

1300 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
Ál£
, sw->
d©≠©h_id
);

1301 
	}
}

1304 
	$__of_£nd_echo_ª∂y
(
c_swôch_t
 *
sw
, 
uöt32_t
 
xid
)

1306 
	`of_£nd_echo_ª∂y
(
sw
, 
xid
);

1307 
	}
}

1310 
	$of_£nd_hñlo
(
c_swôch_t
 *
sw
)

1312 
cbuf
 *
b
;

1315 
	`c_log_debug
("(%s) Send HelloÅoÜibrary dummy_dpid:%lu\n",

1316 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

1317 
b
 = 
	`of_¥ï_msg
((
oÂ_hódî
), 
OFPT_HELLO
, 0);

1319 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
Ál£
, sw->
d©≠©h_id
);

1320 
	}
}

1322 
__Á°∑th


1323 
	$of_£nd_pkt_out
(
c_swôch_t
 *
sw
, 
of_pkt_out_∑øms
 *
∑rms
)

1325 
cbuf
 *
b
;

1327 
b
 = 
	`of_¥ï_pkt_out_msg
(
∑rms
);

1329 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1330 
	}
}

1332 
__Á°∑th


1333 
	$__of_£nd_pkt_out
(
c_swôch_t
 *
sw
, 
of_pkt_out_∑øms
 *
∑rms
)

1335 
	`of_£nd_pkt_out
(
sw
, 
∑rms
);

1336 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1337 
	}
}

1341 
	$of_£nd_Êow_add
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt32_t
 
buf„r_id
)

1343 
cbuf
 *
b
 = 
	`of_¥ï_Êow_add_msg
(&
ít
->
Ê
, 
buf„r_id
,É¡->
a˘i⁄s
,

1344 
ít
->
a˘i⁄_Àn
,É¡->
FL_ITIMEO
,

1345 
ít
->
FL_HTIMEO
,É¡->
FL_WILDCARDS
,

1346 
ít
->
FL_PRIO
);

1347 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1348 
	}
}

1350 
UNUSED


1351 
	$__of_£nd_Êow_add
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt32_t
 
buf„r_id
)

1353 
	`of_£nd_Êow_add
(
sw
, 
ít
, 
buf„r_id
);

1354 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1355 
	}
}

1358 
__Á°∑th


1359 
	$of_£nd_Êow_add_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

1360 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

1361 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
)

1363 
cbuf
 *
b
 = 
	`of_¥ï_Êow_add_msg
(
Ê
, 
buf„r_id
, 
a˘i⁄s
,

1364 
a˘i⁄_Àn
, 
ôimeo
, 
htimeo
,

1365 
wûdˇrds
, 
¥io
);

1366 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1369 
	}
}

1371 
__Á°∑th


1372 
	$__of_£nd_Êow_add_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
, 
uöt32_t
 
buf„r_id
,

1373 *
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

1374 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
)

1376 
ªt
;

1377 
ªt
 = 
	`of_£nd_Êow_add_noˇche
(
sw
, 
Ê
, 
buf„r_id
, 
a˘i⁄s
, 
a˘i⁄_Àn
,

1378 
ôimeo
, 
htimeo
, 
wûdˇrds
, 
¥io
);

1379 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1381  
ªt
;

1382 
	}
}

1385 
	$of_£nd_Êow_dñ
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
)

1387 
cbuf
 *
b
 = 
	`of_¥ï_Êow_dñ_msg
(&
ít
->
Ê
,É¡->
FL_WILDCARDS
, 
›‹t
,

1388 
°ri˘
);

1389 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1390 
	}
}

1393 
	$of_£nd_Êow_dñ_°ri˘
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt16_t
 
›‹t
)

1395 
cbuf
 *
b
 = 
	`of_¥ï_Êow_dñ_msg
(&
ít
->
Ê
,É¡->
FL_WILDCARDS
, 
›‹t
,

1396 
åue
);

1397 
oÂ_Êow_mod
 *
ofm
 = (*)(
b
->
d©a
);

1400 
ofm
->
¥i‹ôy
 = 
	`ht⁄s
(
ít
->
FL_PRIO
);

1401 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1402 
	}
}

1404 
UNUSED


1405 
	$__of_£nd_Êow_dñ
(
c_swôch_t
 *
sw
, 
c_Ê_íåy_t
 *
ít
, 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
)

1407 
	`of_£nd_Êow_dñ
(
sw
, 
ít
, 
›‹t
, 
°ri˘
);

1408 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1409 
	}
}

1412 
	$of_£nd_Êow_dñ_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
,

1413 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
)

1415 
cbuf
 *
b
 = 
	`of_¥ï_Êow_dñ_msg
(
Ê
, 
wûdˇrds
, 
›‹t
, 
°ri˘
);

1417 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1420 
	}
}

1423 
	$__of_£nd_Êow_dñ_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
,

1424 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
)

1426 
	`of_£nd_Êow_dñ_noˇche
(
sw
, 
Ê
, 
wûdˇrds
, 
›‹t
, 
°ri˘
);

1427 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1429 
	}
}

1432 
	$of_£nd_Êow_°©_ªq
(
c_swôch_t
 *
sw
, c⁄° 
Êow
 *flow,

1433 
uöt32_t
 
wûdˇrds
, 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
)

1435 
cbuf
 *
b
 = 
	`of_¥ï_Êow_°©_msg
(
Êow
, 
wûdˇrds
, 
tbl_id
, 
›‹t
);

1437 
	`c_thªad_tx
(&
sw
->
c⁄n
, 
b
, 
åue
, sw->
d©≠©h_id
);

1439 
	}
}

1442 
	$__of_£nd_Êow_°©_ªq
(
c_swôch_t
 *
sw
, c⁄° 
Êow
 *flow,

1443 
uöt32_t
 
wûdˇrds
, 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
)

1445 
	`of_£nd_Êow_°©_ªq
(
sw
, 
Êow
, 
wûdˇrds
, 
tbl_id
, 
›‹t
);

1447 
	`c_thªad_sg_tx_sync
(&
sw
->
c⁄n
);

1449 
	}
}

1452 
	$of_¥o˚ss_phy_p‹t
(
c_swôch_t
 *
sw
, *
›p_
, 
uöt8_t
 
ªas⁄
,

1453 
c_p‹t_cfg_°©e_mask
 *
chg_mask
)

1455 c⁄° 
oÂ_phy_p‹t
 *
›p
;

1456 
oÂ_phy_p‹t
 *
p‹t_desc
;

1457 
uöt16_t
 
p‹t_no
;

1459 
›p
 = 
›p_
;

1460 
p‹t_no
 = 
	`¡ohs
(
›p
->port_no);

1462 i‡(
p‹t_no
 >
OFSW_MAX_PORTS
) {

1463 
	`c_log_îr
("%s:C™à¥o˚s†out-of-øngêd∞p‹t(%u)", 
FN
, 
p‹t_no
);

1467 
p‹t_desc
 = &
sw
->
p‹ts
[
p‹t_no
].
p_öfo
;

1469 
ªas⁄
) {

1470 
OFPPR_DELETE
:

1471 i‡(!(
sw
->
p‹ts
[
p‹t_no
].
vÆid
 & 
OFC_SW_PORT_VALID
)) {

1476 
sw
->
n_p‹ts
--;

1477 
	`mem£t
 (&
sw
->
p‹ts
[
p‹t_no
], 0, (
oÂ_phy_p‹t
));

1479 
OFPPR_ADD
:

1480 
OFPPR_MODIFY
:

1481 i‡(!(
sw
->
p‹ts
[
p‹t_no
].
vÆid
 & 
OFC_SW_PORT_VALID
)) {

1482 
sw
->
n_p‹ts
++;

1486 
	`c_log_îr
("%s: Unknow¿p‹t(%uËch™gêªas⁄(%u)", 
FN
, 
p‹t_no
, 
ªas⁄
);

1490 
sw
->
p‹ts
[
p‹t_no
].
vÆid
 = 
OFC_SW_PORT_VALID
;

1492 i‡(
chg_mask
) {

1493 
chg_mask
->
c⁄fig_mask
 = 
p‹t_desc
->
c⁄fig
 ^ 
	`¡ohl
(
›p
->config);

1494 
chg_mask
->
°©e_mask
 = 
p‹t_desc
->
°©e
 ^ 
	`¡ohl
(
›p
->state);

1497 
p‹t_desc
->
p‹t_no
 =Öort_no;

1498 
p‹t_desc
->
c⁄fig
 = 
	`¡ohl
(
›p
->config);

1499 
p‹t_desc
->
°©e
 = 
	`¡ohl
(
›p
->state);

1500 
p‹t_desc
->
cuº
 = 
	`¡ohl
(
›p
->curr);

1501 
p‹t_desc
->
advîti£d

	`¡ohl
(
›p
->advertised);

1502 
p‹t_desc
->
suµ‹ãd
 = 
	`¡ohl
(
›p
->supported);

1503 
p‹t_desc
->
≥î
 = 
	`¡ohl
(
›p
->peer);

1505 
	`mem˝y
(
p‹t_desc
->
«me
, 
›p
->«me, 
OFP_MAX_PORT_NAME_LEN
);

1506 
p‹t_desc
->
«me
[
OFP_MAX_PORT_NAME_LEN
-1] = '\0';

1508 
	`mem˝y
(
p‹t_desc
->
hw_addr
, 
›p
->hw_addr, 
OFP_ETH_ALEN
);

1511 
	}
}

1514 
	$of_ªcv_p‹t_°©us
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1516 
c_p‹t_cfg_°©e_mask
 
chg_mask
 = { 0, 0 };

1517 
oÂ_p‹t_°©us
 *
›s
 = (*)(
b
->
d©a
);

1519 
	`c_wr_lock
(&
sw
->
lock
);

1520 
	`of_¥o˚ss_phy_p‹t
(
sw
, &
›s
->
desc
, ops->
ªas⁄
, &
chg_mask
);

1521 
	`c_wr_u∆ock
(&
sw
->
lock
);

1523 
	`c_sig«l_≠p_evít
(
sw
, 
b
, 
C_PORT_CHANGE
, 
NULL
, &
chg_mask
);

1524 
	}
}

1528 
	$of_ªcv_„©uªs_ª∂y
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1530 
c_swôch_t
 *
com∑ª_sw
 = 
NULL
;

1531 
boﬁ
 
is_dummy_dpid
 = 
FALSE
;

1532 
uöt64_t
 
dummy_d©≠©h_id
;

1533 
oÂ_swôch_„©uªs
 *
osf
 = (*)(
b
->
d©a
);

1534 
size_t
 
n_p‹ts
, 
i
;

1536 
n_p‹ts
 = ((
	`¡ohs
(
osf
->
hódî
.
Àngth
)

1537 - 
	`off£tof
(
oÂ_swôch_„©uªs
, 
p‹ts
))

1538 /  *
osf
->
p‹ts
);

1540 
	`c_log_debug
("(%sËn_p‹ts:%d", 
__FUNCTION__
, 
n_p‹ts
);

1541 
dummy_d©≠©h_id
 = 
sw
->
d©≠©h_id
;

1542 
is_dummy_dpid
 = 
sw
->
is_dummy_d©≠©h_id
;

1544 if(
is_dummy_dpid
)

1551 
sw
->
is_dummy_d©≠©h_id
 = 
FALSE
;

1556 
com∑ª_sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
	`¡ohŒ
(
osf
->
d©≠©h_id
));

1557 if(
com∑ª_sw
 !
NULL
)

1559 
	`c_log_debug
("(%s) dpid:%luÖresent inÅhe hashtable\n",

1560 
__FUNCTION__
, 
	`¡ohŒ
(
osf
->
d©≠©h_id
));

1566 
	`c_log_debug
("(%s) dpid:%lu NOTÖresent inÅhe hashtable\n",

1567 
__FUNCTION__
, 
	`¡ohŒ
(
osf
->
d©≠©h_id
));

1572 
sw
->
d©≠©h_id
 = 
	`¡ohŒ
(
osf
->datapath_id);

1573 
sw
->
vîsi⁄
 = 
osf
->
hódî
.version;

1574 
sw
->
n_buf„rs
 = 
	`¡ohl
(
osf
->n_buffers);

1575 
sw
->
n_èbÀs
 = 
osf
->n_tables;

1576 
sw
->
a˘i⁄s
 = 
	`¡ohl
(
osf
->actions);

1577 
sw
->
ˇ∑bûôõs
 = 
	`¡ohl
(
osf
->capabilities);

1578 
	`c_log_debug
("(%s) dpid:%lu version:%dÇ_tables:%dáctions:0x%x capabilities:0x%pÇ_buffers:%d",

1579 
__FUNCTION__
, 
sw
->
d©≠©h_id
, sw->
vîsi⁄
, sw->
n_èbÀs
,

1580 
sw
->
a˘i⁄s
, sw->
ˇ∑bûôõs
, sw->
n_buf„rs
);

1584 
	`cc_of_£t_ªÆ_dpid_auxid
(
dummy_d©≠©h_id
, 0, 
sw
->
d©≠©h_id
, 0);

1585 
	`c_log_debug
("(%sËªÆ dpid síàtÿlibøry", 
__FUNCTION__
);

1586 
sw
->
is_dummy_d©≠©h_id
 = 
FALSE
;

1588 
i
 = 0; i < 
n_p‹ts
; i++) {

1589 
	`of_¥o˚ss_phy_p‹t
(
sw
, &
osf
->
p‹ts
[
i
], 
OFPPR_ADD
, 
NULL
);

1592 
	`of_swôch_Êow_tbl_¸óã
(
sw
);

1594 
sw
->
n_p‹ts
 =Ç_ports;

1596 i‡(
sw
->
swôch_°©e
 !
SW_REGISTERED
) {

1598 
	`c_log_debug
("(%sËswôch i†beögÑegi°îed", 
__FUNCTION__
);

1599 
	`of_swôch_add
(
sw
);

1600 
sw
->
swôch_°©e
 = 
SW_REGISTERED
;

1601 
sw
->
œ°_ßm∂e_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

1602 
sw
->
Â_›s
.
Â_fwd
 = 
of_dÊ_fwd
;

1603 
sw
->
Â_›s
.
Â_p‹t_°©us
 = 
of_dÊ_p‹t_°©us
;

1606 
	`c_sig«l_≠p_evít
(
sw
, 
b
, 
C_DP_REG
, 
NULL
, NULL);

1608 
	}
}

1611 
__Á°∑th


1612 
	$of_Êow_exåa˘
(
uöt8_t
 *
pkt
, 
Êow
 *flow,

1613 
uöt16_t
 
ö_p‹t
, 
size_t
 
pkt_Àn
)

1615 
ëh_hódî
 *
ëh
;

1616 
ªtvÆ
 = 0;

1617 
size_t
 
ªm_Àn
 = 
pkt_Àn
;

1619 
	`mem£t
(
Êow
, 0,  *flow);

1620 
Êow
->
dl_vœn
 = 0;

1621 
Êow
->
ö_p‹t
 = 
	`ht⁄s
(in_port);

1623 i‡(
	`u∆ikñy
(
ªm_Àn
 < (*
ëh
))) {

1627 
ëh
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1628 
ªm_Àn
 -(*
ëh
);

1629 i‡(
	`likñy
(
	`¡ohs
(
ëh
->
ëh_ty≥
Ë>
OFP_DL_TYPE_ETH2_CUTOFF
)) {

1631 
Êow
->
dl_ty≥
 = 
ëh
->
ëh_ty≥
;

1634 
	`c_log_îr
("802.2Ñecvd. Not handled");

1639 i‡(
	`u∆ikñy
(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_VLAN
))) {

1640 
vœn_hódî
 *
vh
;

1641 i‡(
ªm_Àn
 < (*
vh
)) {

1644 
vh
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1645 
ªm_Àn
 -(*
vh
);

1646 
Êow
->
dl_ty≥
 = 
vh
->
vœn_√xt_ty≥
;

1647 
Êow
->
dl_vœn
 = 
vh
->
vœn_tci
 & 
	`ht⁄s
(
VLAN_VID_MASK
);

1648 
Êow
->
dl_vœn_p˝
 = (
uöt8_t
)((
	`¡ohs
(
vh
->
vœn_tci
) >>

1649 
VLAN_PCP_SHIFT
Ë& 
VLAN_PCP_BITMASK
);

1652 
	`mem˝y
(
Êow
->
dl_§c
, 
ëh
->
ëh_§c
, 
ETH_ADDR_LEN
);

1653 
	`mem˝y
(
Êow
->
dl_d°
, 
ëh
->
ëh_d°
, 
ETH_ADDR_LEN
);

1655 i‡(
	`likñy
(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_IP
))) {

1656 c⁄° 
ù_hódî
 *
nh
;

1658 i‡(
ªm_Àn
 < (*
nh
)) {

1661 
nh
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1662 
ªm_Àn
 -(*
nh
);

1664 
Êow
->
nw_tos
 = 
nh
->
ù_tos
 & 0xfc;

1665 
Êow
->
nw_¥Ÿo
 = 
nh
->
ù_¥Ÿo
;

1666 
Êow
->
nw_§c
 = 
nh
->
ù_§c
;

1667 
Êow
->
nw_d°
 = 
nh
->
ù_d°
;

1668 i‡(
	`likñy
(!
	`IP_IS_FRAGMENT
(
nh
->
ù_‰ag_off
))) {

1669 i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_TCP
) {

1670 c⁄° 
t˝_hódî
 *
t˝
;

1671 i‡(
ªm_Àn
 < (*
t˝
)) {

1672 
Êow
->
nw_¥Ÿo
 = 0;

1675 
t˝
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);;

1676 
ªm_Àn
 -(*
t˝
);

1678 
Êow
->
ç_§c
 = 
t˝
->
t˝_§c
;

1679 
Êow
->
ç_d°
 = 
t˝
->
t˝_d°
;

1680 } i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_UDP
) {

1681 c⁄° 
udp_hódî
 *
udp
;

1682 i‡(
ªm_Àn
 < (*
udp
)) {

1683 
Êow
->
nw_¥Ÿo
 = 0;

1686 
udp
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1687 
ªm_Àn
 -(*
udp
);

1689 
Êow
->
ç_§c
 = 
udp
->
udp_§c
;

1690 
Êow
->
ç_d°
 = 
udp
->
udp_d°
;

1691 } i‡(
Êow
->
nw_¥Ÿo
 =
IP_TYPE_ICMP
) {

1692 c⁄° 
icmp_hódî
 *
icmp
;

1693 i‡(
ªm_Àn
 < (*
icmp
)) {

1694 
Êow
->
nw_¥Ÿo
 = 0;

1697 
icmp
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1698 
ªm_Àn
 -(*
icmp
);

1700 
Êow
->
ç_§c
 = 
	`ht⁄s
(
icmp
->
icmp_ty≥
);

1701 
Êow
->
ç_d°
 = 
	`ht⁄s
(
icmp
->
icmp_code
);

1704 
ªtvÆ
 = 1;

1706 } i‡(
Êow
->
dl_ty≥
 =
	`ht⁄s
(
ETH_TYPE_ARP
)) {

1707 c⁄° 
¨p_ëh_hódî
 *
¨p
;

1708 i‡(
ªm_Àn
 < (*
¨p
)) {

1711 
¨p
 = 
	`OF_PKT_NEXT_HDR
(
pkt
, 
pkt_Àn
, 
ªm_Àn
);

1712 
ªm_Àn
 -(*
¨p
);

1714 i‡(
¨p
->
¨_¥o
 =
	`ht⁄s
(
ARP_PRO_IP
) &&

1715 
¨p
->
¨_∂n
 =
IP_ADDR_LEN
) {

1716 
Êow
->
nw_§c
 = 
¨p
->
¨_•a
;

1717 
Êow
->
nw_d°
 = 
¨p
->
¨_ça
;

1719 
Êow
->
nw_¥Ÿo
 = 
	`¡ohs
(
¨p
->
¨_›
) && 0xff;

1721  
ªtvÆ
;

1722 
	}
}

1724 
c_Ê_íåy_t
 * 
UNUSED


1725 
	$of_Êow_gë_exm
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
)

1727 
c_Êow_tbl_t
 *
tbl
 = &
sw
->
exm_Êow_tbl
;

1728 
c_Ê_íåy_t
 *
ít
 = 
NULL
;

1729 
found
;

1731 
	`c_rd_lock
(&
sw
->
lock
);

1733 
found
 = 
	`g_hash_èbÀ_lookup_exãnded
(
tbl
->
exm_Ê_hash_tbl
, 
Ê
,

1734 
NULL
, (
gpoöãr
*)&
ít
);

1735 i‡(
found
) {

1736 
	`©omic_öc
(&
ít
->
FL_REF
, 1);

1739 
	`c_rd_u∆ock
(&
sw
->
lock
);

1741  
ít
;

1743 
	}
}

1745 
c_Ê_íåy_t
 *

1746 
	$__of_Êow_gë_exm
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
)

1748 
c_Êow_tbl_t
 *
tbl
 = &
sw
->
exm_Êow_tbl
;

1749 
c_Ê_íåy_t
 *
ít
 = 
NULL
;

1750 
found
;

1752 
found
 = 
	`g_hash_èbÀ_lookup_exãnded
(
tbl
->
exm_Ê_hash_tbl
, 
Ê
,

1753 
NULL
, (
gpoöãr
*)&
ít
);

1754 i‡(
found
) {

1755 
	`©omic_öc
(&
ít
->
FL_REF
, 1);

1758  
ít
;

1759 
	}
}

1761 
ölöe
 
c_Ê_íåy_t
 *

1762 
	$of_do_Êow_lookup_¶ow
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
)

1764 
c_Êow_tbl_t
 *
tbl
;

1765 
c_Ê_íåy_t
 *
ít
 = 
NULL
;

1766 
idx
;

1768 
	`c_rd_lock
(&
sw
->
lock
);

1769 
idx
 = 0; idx < 
C_MAX_RULE_FLOW_TBLS
; idx++) {

1770 
tbl
 = &
sw
->
ruÀ_Êow_tbls
[
idx
];

1771 i‡(
tbl
 && (
ít
 = 
	`__of_Êow_lookup_ruÀ
(
sw
, 
Ê
,Åbl))) {

1772 
	`©omic_öc
(&
ít
->
FL_REF
, 1);

1773 
	`c_rd_u∆ock
(&
sw
->
lock
);

1774  
ít
;

1777 
	`c_rd_u∆ock
(&
sw
->
lock
);

1779  
NULL
;

1780 
	}
}

1783 
ölöe
 
c_Ê_íåy_t
 *

1784 
	$of_do_Êow_lookup
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
)

1787 #ifde‡
CONFIG_FLOW_EXM


1788 
c_Ê_íåy_t
 *
ít
 = 
NULL
;

1790 i‡((
ít
 = 
	`of_Êow_gë_exm
(
sw
, 
Ê
))) {

1791  
ít
;

1794  
	`of_do_Êow_lookup_¶ow
(
sw
, 
Ê
);

1795 
	}
}

1798 
	$of_Êow_íåy_put
(
c_Ê_íåy_t
 *
ít
)

1800 
	`c_log_debug
("(%sË\n", 
__FUNCTION__
);

1801 i‡(
	`©omic_ªad
(&
ít
->
FL_REF
) == 0) {

1802 i‡(
ít
->
a˘i⁄s
 &&

1803 !(
ít
->
FL_FLAGS
 & 
C_FL_ENT_CLONE
)) {

1805 
	`‰ì
(
ít
->
a˘i⁄s
);

1808 i‡(
ít
->
≠p_ow√r_li°
) {

1809 
	`g_¶i°_‰ì_fuŒ
(
ít
->
≠p_ow√r_li°
, 
of_Êow_≠p_ªf_‰ì
);

1810 
ít
->
≠p_ow√r_li°
 = 
NULL
;

1813 
	`‰ì
(
ít
);

1816 
	`©omic_dec
(&
ít
->
FL_REF
, 1);

1819 
	}
}

1822 
ölöe
 

1823 
	$c_mˇ°_≠p_∑ckë_ö
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
,

1824 
c_Ê_íåy_t
 *
Ê_ít
, 
Êow
 *
Ê
)

1826 *
≠p
;

1827 
GSLi°
 *
ôî©‹
;

1829 
	`c_rd_lock
(&
Ê_ít
->
FL_LOCK
);

1830 
ôî©‹
 = 
Ê_ít
->
≠p_ow√r_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

1831 
≠p
 = 
ôî©‹
->
d©a
;

1832 
	`c_sig«l_≠p_evít
(
sw
, 
b
, 
C_PACKET_IN
, 
≠p
, 
Ê
);

1835 
	`c_rd_u∆ock
(&
Ê_ít
->
FL_LOCK
);

1836 
	}
}

1839 
	$of_dÊ_fwd
(
c_swôch
 *
sw
, 
cbuf
 *
b
, *
d©a
, 
size_t
 
pkt_Àn
,

1840 
Êow
 *
Ê
, 
uöt16_t
 
ö_p‹t
)

1842 
of_pkt_out_∑øms
 
∑rms
;

1843 
c_Ê_íåy_t
 *
Ê_ít
;

1844 
oÂ_∑ckë_ö
 *
›i
 = (*)(
b
->
d©a
);

1846 
	`c_log_debug
("(%sËsw->dpid:%d\n", 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

1847 if(!(
Ê_ít
 = 
	`of_do_Êow_lookup
(
sw
, 
Ê
))) {

1852 i‡(
Ê_ít
->
FL_ENT_TYPE
 !
C_TBL_EXM
 &&

1853 
Ê_ít
->
FL_FLAGS
 & 
C_FL_ENT_CLONE
) {

1854 
Ê_ít
 = 
	`of_Êow_˛⁄e_exm
(
sw
, 
Ê
, fl_ent);

1857 i‡(
Ê_ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
) {

1858 
	`c_mˇ°_≠p_∑ckë_ö
(
sw
, 
b
, 
Ê_ít
, 
Ê
);

1860 
	`of_Êow_íåy_put
(
Ê_ít
);

1864 
	`of_£nd_Êow_add
(
sw
, 
Ê_ít
, 
	`¡ohl
(
›i
->
buf„r_id
));

1865 
	`c_log_debug
("(%sËOF síd flow cÆÀd sw->dpid:%d\n", 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

1867 
∑rms
.
d©a
 = 0;

1868 
∑rms
.
d©a_Àn
 = 0;

1869 
∑rms
.
buf„r_id
 = 
	`¡ohl
(
›i
->buffer_id);

1870 
∑rms
.
ö_p‹t
 = in_port;

1871 
∑rms
.
a˘i⁄_Àn
 = 
Ê_ít
->action_len;

1872 
∑rms
.
a˘i⁄_li°
 = 
Ê_ít
->
a˘i⁄s
;

1873 
∑rms
.
d©a_Àn
 = 
pkt_Àn
;

1874 
∑rms
.
d©a
 = data;

1876 
	`of_£nd_pkt_out
(
sw
, &
∑rms
);

1877 
	`of_Êow_íåy_put
(
Ê_ít
);

1880 
	}
}

1883 
	$of_dÊ_p‹t_°©us
(
c_swôch_t
 *
sw
 
UNUSED
, 
uöt32_t
 
cfg
 UNUSED, uöt32_à
°©e
 UNUSED)

1887 
	}
}

1890 
__Á°∑th


1891 
	$of_ªcv_∑ckë_ö
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1893 
oÂ_∑ckë_ö
 *
›i
 
__Æig√d
 = (*)(
b
->
d©a
);

1894 
size_t
 
pkt_ofs
, 
pkt_Àn
;

1895 
Êow
 
Ê
;

1896 
uöt16_t
 
ö_p‹t
 = 
	`¡ohs
(
›i
->in_port);

1898 
	`c_log_debug
("(%sËsw->dpid:%d\n", 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

1901 
pkt_ofs
 = 
	`off£tof
(
oÂ_∑ckë_ö
, 
d©a
);

1902 
pkt_Àn
 = 
	`¡ohs
(
›i
->
hódî
.
Àngth
Ë- 
pkt_ofs
;

1905 if(!
sw
->
Â_›s
.
Â_fwd
 || 
	`of_Êow_exåa˘
(
›i
->
d©a
, &
Ê
, 
ö_p‹t
, 
pkt_Àn
) < 0) {

1909 
	`c_log_debug
("(%sËPackë IN DONE sw->dpid:%d\n", 
__FUNCTION__
, 
sw
->
d©≠©h_id
);

1910 
sw
->
Â_›s
.
	`Â_fwd
(sw, 
b
, 
›i
->
d©a
, 
pkt_Àn
, &
Ê
, 
ö_p‹t
);

1913 
	}
}

1916 
	$of_ªcv_echo_ªque°
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1918 
oÂ_hódî
 *
h
 = (*)(
b
->
d©a
);

1920  
	`of_£nd_echo_ª∂y
(
sw
, 
h
->
xid
);

1921 
	}
}

1924 
	$of_ªcv_echo_ª∂y
(
c_swôch_t
 *
sw
 
UNUSED
, 
cbuf
 *
b
 UNUSED)

1927 
	}
}

1930 
	$of_Êow_ªmoved
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1932 
Êow
 flow;

1933 
oÂ_Êow_ªmoved
 *
ofm
 = (*)(
b
->
d©a
);

1934 
of_Êow_mod_∑øms
 
Ê_∑rms
;

1936 
	`mem£t
(&
Ê_∑rms
, 0, (fl_parms));

1937 
	`mem£t
(&
Êow
, 0, (flow));

1939 
Ê_∑rms
.
wûdˇrds
 = 
ofm
->
m©ch
.wildcards;

1940 
Ê_∑rms
.
¥io
 = 
	`¡ohs
(
ofm
->
¥i‹ôy
);

1942 
Êow
.
ö_p‹t
 = 
ofm
->
m©ch
.in_port;

1943 
	`mem˝y
(
Êow
.
dl_§c
, 
ofm
->
m©ch
.dl_src,  ofm->match.dl_src);

1944 
	`mem˝y
(
Êow
.
dl_d°
, 
ofm
->
m©ch
.dl_dst,  ofm->match.dl_dst);

1945 
Êow
.
dl_vœn
 = 
ofm
->
m©ch
.dl_vlan;

1946 
Êow
.
dl_ty≥
 = 
ofm
->
m©ch
.dl_type;

1947 
Êow
.
dl_vœn_p˝
 = 
ofm
->
m©ch
.dl_vlan_pcp;

1948 
Êow
.
nw_§c
 = 
ofm
->
m©ch
.nw_src;

1949 
Êow
.
nw_d°
 = 
ofm
->
m©ch
.nw_dst;

1950 
Êow
.
nw_¥Ÿo
 = 
ofm
->
m©ch
.nw_proto;

1951 
Êow
.
ç_§c
 = 
ofm
->
m©ch
.tp_src;

1952 
Êow
.
ç_d°
 = 
ofm
->
m©ch
.tp_dst;

1954 
Ê_∑rms
.
Êow
 = &flow;

1955 
Ê_∑rms
.
tbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

1962 
	`c_sig«l_≠p_evít
(
sw
, 
b
, 
C_FLOW_REMOVED
, 
NULL
, &
Ê_∑rms
);

1963 
	}
}

1966 
	$of_ªcv_Êow_mod_Áûed
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

1968 
Êow
 flow;

1969 
oÂ_îr‹_msg
 *
oÂ_îr
 = (*)(
b
->
d©a
);

1970 
oÂ_Êow_mod
 *
ofm
 = (*)(
oÂ_îr
->
d©a
);

1971 
of_Êow_mod_∑øms
 
Ê_∑rms
;

1972 *
≠p
;

1973 *
¥öt_°r
;

1975 
	`mem£t
(&
Êow
, 0, (flow));

1976 
Êow
.
ö_p‹t
 = 
ofm
->
m©ch
.in_port;

1977 
	`mem˝y
(
Êow
.
dl_§c
, 
ofm
->
m©ch
.dl_src,  ofm->match.dl_src);

1978 
	`mem˝y
(
Êow
.
dl_d°
, 
ofm
->
m©ch
.dl_dst,  ofm->match.dl_dst);

1979 
Êow
.
dl_vœn
 = 
ofm
->
m©ch
.dl_vlan;

1980 
Êow
.
dl_ty≥
 = 
ofm
->
m©ch
.dl_type;

1981 
Êow
.
dl_vœn_p˝
 = 
ofm
->
m©ch
.dl_vlan_pcp;

1982 
Êow
.
nw_§c
 = 
ofm
->
m©ch
.nw_src;

1983 
Êow
.
nw_d°
 = 
ofm
->
m©ch
.nw_dst;

1984 
Êow
.
nw_¥Ÿo
 = 
ofm
->
m©ch
.nw_proto;

1985 
Êow
.
ç_§c
 = 
ofm
->
m©ch
.tp_src;

1986 
Êow
.
ç_d°
 = 
ofm
->
m©ch
.tp_dst;

1988 
Ê_∑rms
.
wûdˇrds
 = 
ofm
->
m©ch
.wildcards;

1989 
Ê_∑rms
.
Êow
 = &flow;

1990 
Ê_∑rms
.
¥io
 = 
	`¡ohs
(
ofm
->
¥i‹ôy
);

1991 
Ê_∑rms
.
tbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

1994 i‡(!(
≠p
 = 
	`c_≠p_gë
(
sw
->
c_hdl
, 
C_VTY_NAME
))) {

1995 
≠p_sig«l_out
;

1998 
Ê_∑rms
.
≠p_ow√r
 = 
≠p
;

1999 
	`of_Êow_dñ
(
sw
, &
Ê_∑rms
);

2000 
	`c_≠p_put
(
≠p
);

2001 
Ê_∑rms
.
≠p_ow√r
 = 
NULL
;

2003 
≠p_sig«l_out
:

2009 
	`c_sig«l_≠p_evít
(
sw
, 
b
, 
C_FLOW_MOD_FAILED
, 
NULL
, &
Ê_∑rms
);

2011 
¥öt_°r

	`of_dump_Êow
(&
Êow
, 
Ê_∑rms
.
wûdˇrds
);

2012 
	`c_log_îr
("%s: flow-mod faûed f‹ flow:", 
FN
);

2013 
	`c_log_îr
("%s", 
¥öt_°r
);

2014 
	`‰ì
(
¥öt_°r
);

2017 
	}
}

2020 
	$of_ªcv_îr_msg
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

2022 
oÂ_îr‹_msg
 *
oÂ_îr
 = (*)(
b
->
d©a
);

2024 
	`c_log_îr
("%s: swôch 0x%Œx síàîr‹Åy≥ %hu codê%hu", 
FN
,

2025 
sw
->
DPID
, 
	`¡ohs
(
oÂ_îr
->
ty≥
),Çtohs(oÂ_îr->
code
));

2027 
	`¡ohs
(
oÂ_îr
->
ty≥
)) {

2028 
OFPET_FLOW_MOD_FAILED
:

2029  
	`of_ªcv_Êow_mod_Áûed
(
sw
, 
b
);

2033 
	}
}

2036 
	$of_Êow_°©s_upd©e
(
c_swôch_t
 *
sw
, 
oÂ_Êow_°©s
 *
oÂ_°©s
)

2038 
c_Ê_íåy_t
 *
ít
;

2039 
Êow
 flow;

2040 
uöt64_t
 
cuº_time
;

2041 
time_diff
;

2043 
	`mem£t
(&
Êow
, 0, (flow));

2045 
Êow
.
ö_p‹t
 = 
oÂ_°©s
->
m©ch
.in_port;

2046 
	`mem˝y
(
Êow
.
dl_§c
, 
oÂ_°©s
->
m©ch
.dl_src,  ofp_stats->match.dl_src);

2047 
	`mem˝y
(
Êow
.
dl_d°
, 
oÂ_°©s
->
m©ch
.dl_dst,  ofp_stats->match.dl_dst);

2048 
Êow
.
dl_vœn
 = 
oÂ_°©s
->
m©ch
.dl_vlan;

2049 
Êow
.
dl_ty≥
 = 
oÂ_°©s
->
m©ch
.dl_type;

2050 
Êow
.
dl_vœn_p˝
 = 
oÂ_°©s
->
m©ch
.dl_vlan_pcp;

2051 
Êow
.
nw_§c
 = 
oÂ_°©s
->
m©ch
.nw_src;

2052 
Êow
.
nw_d°
 = 
oÂ_°©s
->
m©ch
.nw_dst;

2053 
Êow
.
nw_¥Ÿo
 = 
oÂ_°©s
->
m©ch
.nw_proto;

2054 
Êow
.
ç_§c
 = 
oÂ_°©s
->
m©ch
.tp_src;

2055 
Êow
.
ç_d°
 = 
oÂ_°©s
->
m©ch
.tp_dst;

2059 
ít
 = 
	`of_do_Êow_lookup
(
sw
, &
Êow
);

2061 i‡(!
ít
) {

2062 
	`c_log_îr
("%s: Unknow¿Êow i¿°©†ª∂y", 
FN
);

2066 
cuº_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

2067 
time_diff
 = ()((
cuº_time
 - 
ít
->
Ê_°©s
.
œ°_ª‰esh
))/
TIME_uS_SCALE
;

2069 i‡(
ít
->
Ê_°©s
.
œ°_ª‰esh
 && 
time_diff
) {

2070 
ít
->
Ê_°©s
.
bps
 = ()(
	`¡ohŒ
(
oÂ_°©s
->
byã_cou¡
)

2071 - 
ít
->
Ê_°©s
.
byã_cou¡
)/
time_diff
;

2072 
ít
->
Ê_°©s
.
µs
 = ()(
	`¡ohŒ
(
oÂ_°©s
->
∑ckë_cou¡
)

2073 - 
ít
->
Ê_°©s
.
pkt_cou¡
)/
time_diff
;

2076 
ít
->
Ê_°©s
.
byã_cou¡
 = 
	`¡ohŒ
(
oÂ_°©s
->byte_count);

2077 
ít
->
Ê_°©s
.
pkt_cou¡
 = 
	`¡ohŒ
(
oÂ_°©s
->
∑ckë_cou¡
);

2078 
ít
->
Ê_°©s
.
œ°_ª‰esh
 = 
cuº_time
;

2080 
	`of_Êow_íåy_put
(
ít
);

2083 
	}
}

2086 
	$of_≥r_Êow_°©s_sˇn
(*
time_¨g
, 
c_Ê_íåy_t
 *
ít
)

2088 
uöt64_t
 
time
 = *(uöt64_à*)
time_¨g
;

2090 i‡((
ít
->
FL_ENT_TYPE
 !
C_TBL_EXM
 &&

2091 
ít
->
FL_FLAGS
 & 
C_FL_ENT_CLONE
) ||

2092 
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
) {

2096 i‡(
ít
->
FL_FLAGS
 & 
C_FL_ENT_GSTATS
)

2097 i‡(!
ít
->
Ê_°©s
.
œ°_ª‰esh
 ||

2098 ((
time
 - 
ít
->
Ê_°©s
.
œ°_ª‰esh
Ë> 
	`TIME_uS
(5))) {

2099 
	`__of_£nd_Êow_°©_ªq
(
ít
->
sw
, &ít->
Ê
,É¡->
FL_WILDCARDS
,

2100 
OF_ALL_TABLES
, 0);

2102 
	}
}

2105 
	$of_≥r_swôch_Êow_°©s_sˇn
(
c_swôch_t
 *
sw
, 
uöt64_t
 
cuº_time
)

2107 
	`of_Êow_åavî£_tbl_Æl
(
sw
, (*)&
cuº_time
, 
of_≥r_Êow_°©s_sˇn
);

2108 
	}
}

2112 
	$of_ªcv_°©s_ª∂y
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
)

2114 
oÂ_°©s_ª∂y
 *
oÂ_§
 = (*)(
b
->
d©a
);

2117 
	`¡ohs
(
oÂ_§
->
ty≥
)) {

2118 
OFPST_FLOW
:

2120 
	`of_Êow_°©s_upd©e
(
sw
, (*)(
oÂ_§
 + 1));

2124 
	`c_log_îr
("%s: Unh™dÀd sèt†ª∂y 0x%x", 
FN
, 
	`¡ohs
(
oÂ_§
->
ty≥
));

2129 
	}
}

2131 
of_h™dÀr
 
	gof_h™dÀrs
[] 
	g__Æig√d
 = {

2132 
NULL_OF_HANDLER
,

2133 { 
of_ªcv_îr_msg
, (
oÂ_îr‹_msg
) },

2134 { 
of_ªcv_echo_ªque°
, 
OFP_HDR_SZ
 },

2135 { 
of_ªcv_echo_ª∂y
, 
OFP_HDR_SZ
 },

2136 
NULL_OF_HANDLER
,

2137 
NULL_OF_HANDLER
,

2138 { 
of_ªcv_„©uªs_ª∂y
, 
OFP_HDR_SZ
 },

2139 
NULL_OF_HANDLER
,

2140 
NULL_OF_HANDLER
,

2141 
NULL_OF_HANDLER
,

2142 { 
of_ªcv_∑ckë_ö
, (
oÂ_∑ckë_ö
) },

2143 { 
of_Êow_ªmoved
, (
oÂ_Êow_ªmoved
) },

2144 { 
of_ªcv_p‹t_°©us
, (
oÂ_p‹t_°©us
) },

2145 
NULL_OF_HANDLER
,

2146 
NULL_OF_HANDLER
,

2147 
NULL_OF_HANDLER
,

2148 
NULL_OF_HANDLER
,

2149 { 
of_ªcv_°©s_ª∂y
, (
oÂ_°©s_ª∂y
) },

2150 
NULL_OF_HANDLER
,

2151 
NULL_OF_HANDLER
,

2154 
__Á°∑th


2155 
	$of_swôch_ªcv_msg
(*
sw_¨g
, 
cbuf
 *
b
)

2157 
c_swôch_t
 *
sw
 = 
sw_¨g
;

2158 
oÂ_hódî
 *
oh
;

2160 
	`c_log_debug
("(%sË", 
__FUNCTION__
);

2162 
	`¥e„tch
(&
of_h™dÀrs
[
OFPT_PACKET_IN
]);

2164 
oh
 = (*)
b
->
d©a
;

2166 
	`c_log_debug
("(%s) OF MSG RX TYPE (%d)",

2167 
__FUNCTION__
, 
oh
->
ty≥
);

2175 if((
sw
->
is_dummy_d©≠©h_id
 =
TRUE
) &&

2176 (
oh
->
ty≥
 !
OFPT_ECHO_REQUEST
) &&

2177 (
oh
->
ty≥
 !
OFPT_FEATURES_REPLY
))

2180 
	`of_£nd_„©uªs_ªque°
(
sw
);

2184 
sw
->
œ°_ª‰esh_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
();

2185 
sw
->
c⁄n
.
rx_pkts
++;

2187 
	`RET_OF_MSG_HANDLER
(
sw
, 
of_h™dÀrs
, 
b
, 
oh
->
ty≥
, b->
Àn
);

2188 
	}
}

2193 
	$of_˘æ_öô
(
˘æ_hdl_t
 *
c_hdl
, 
size_t
 
¡hªads
, size_à
n_≠±hªads
)

2195 
	`mem£t
 (
c_hdl
, 0, (
˘æ_hdl_t
));

2196 
	`c_rw_lock_öô
(&
c_hdl
->
lock
);

2199 
c_hdl
->
sw_ùoﬁ
 = 
	`ùoﬁ_¸óã
(
MAX_SWITCHES_PER_CLUSTER
, 0);

2200 
	`as£π
(
c_hdl
->
sw_ùoﬁ
);

2203 
c_hdl
->
w‹kî_˘x_li°
 = (
c_cmn_˘x
 **)
	`mÆloc
(
¡hªads
 * (*));

2204 
	`as£π
(
c_hdl
->
w‹kî_˘x_li°
);

2206 
c_hdl
->
n_thªads
 = 
¡hªads
;

2207 
c_hdl
->
n_≠±hªads
 =Ç_appthreads;

2214 
	}
}

	@mul/mul_of.h

19 #i‚de‡
__MUL_OF_H__


20 
	#__MUL_OF_H__


	)

22 
	#OF_MAX_ACTION_LEN
 1024

	)

24 
	#OF_PKT_NEXT_HDR
(
h_
, 
tŸ
, 
ªm
Ë((*)((
uöt8_t
 *)h_ +ÅŸ -Ñem))

	)

26 (*
	toÂ_h™dÀr_t
)(
	tc_swôch_t
 *
	tsw
, 
	tcbuf
 *
	tb
);

28 
	sof_h™dÀr
 {

29 
oÂ_h™dÀr_t
 
h™dÀr
;

30 
size_t
 
mö_size
;

33 
	#OFP_HDR_SZ
 (
oÂ_hódî
)

	)

34 
	#NULL_OF_HANDLER
 {
NULL
,(
oÂ_hódî
)
	}

	)
}

35 
	#OF_UNK_MSG
(
h
, 
ty≥
Ë—y≥ > ((
of_h™dÀrs
)/(of_handlers[0])) \

36 || !
h
[
ty≥
].
h™dÀr
)

	)

38 
	#RET_OF_MSG_HANDLER
(
sw
, 
h
, 
b
, 
ty≥
, 
Àngth
) \

40 i‡(
	`u∆ikñy
(
Àngth
 < 
h
[
ty≥
].
mö_size
 || 
	`OF_UNK_MSG
(h,Åype))) { \

41 
	`c_log_îr
("u√x≥˘edÜígth(%uË‹Åy≥(%u)", ()
Àngth
, 
ty≥
); \

44  
h
[
ty≥
].
	`h™dÀr
(
sw
, (*)
b
); \

45 } 0)

	)

48 
	#FL_NEED_HW_SYNC
(
∑rms
Ë((’¨ms)->
Êags
 & 
C_FL_ENT_NOSYNC
) || \

49 (
∑rms
)->
Êags
 & 
C_FL_ENT_CLONE
) || \

50 ((
∑rms
)->
Êags
 & 
C_FL_ENT_LOCAL
)? 
Ál£
 : 
åue
;

	)

52 
	#FL_EXM_NEED_HW_SYNC
(
∑rms
Ë(’¨ms)->
Êags
 & 
C_FL_ENT_NOSYNC
 || \

53 (
∑rms
)->
Êags
 & 
C_FL_ENT_LOCAL
) ? \

54 
Ál£
 : 
åue
;

	)

56 
of_£nd_„©uªs_ªque°
(
c_swôch_t
 *
sw
);

57 
of_£nd_echo_ªque°
(
c_swôch_t
 *
sw
);

58 
of_£nd_hñlo
(
c_swôch_t
 *
sw
);

59 
of_£nd_pkt_out
(
c_swôch_t
 *
sw
, 
of_pkt_out_∑øms
 *
∑rms
);

60 
of_£nd_echo_ª∂y
(
c_swôch_t
 *
sw
, 
uöt32_t
 
xid
);

61 
__of_£nd_„©uªs_ªque°
(
c_swôch_t
 *
sw
);

62 
__of_£nd_echo_ªque°
(
c_swôch_t
 *
sw
);

63 
__of_£nd_hñlo
(
c_swôch_t
 *
sw
);

64 
__of_£nd_pkt_out
(
c_swôch_t
 *
sw
, 
of_pkt_out_∑øms
 *
∑rms
);

65 
__of_£nd_echo_ª∂y
(
c_swôch_t
 *
sw
, 
uöt32_t
 
xid
);

66 
of_swôch_ªcv_msg
(*
sw_¨g
, 
cbuf
 *
b
);

67 
of_swôch_add
(
c_swôch_t
 *
sw
);

68 
of_swôch_dñ
(
c_swôch_t
 *
sw
);

69 
of_swôch_Êow_tbl_dñëe
(
c_swôch_t
 *
sw
);

70 
of_swôch_Êow_tbl_ª£t
(
c_swôch_t
 *
sw
);

71 
of_Êow_exåa˘
(
uöt8_t
 *
pkt
, 
Êow
 *flow,

72 
uöt16_t
 
ö_p‹t
, 
size_t
 
pkt_Àn
);

73 
of_Êow_íåy_put
(
c_Ê_íåy_t
 *
ít
);

74 
of_Êow_add
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
∑rms
);

75 
of_Êow_dñ
(
c_swôch_t
 *
sw
, 
of_Êow_mod_∑øms
 *
∑rms
);

76 
of_£nd_Êow_add_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
,

77 
uöt32_t
 
buf„r_id
, *
a˘i⁄s
,

78 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

79 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
);

80 
of_£nd_Êow_dñ_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
,

81 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
);

82 
__of_£nd_Êow_add_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
,

83 
uöt32_t
 
buf„r_id
, *
a˘i⁄s
,

84 
size_t
 
a˘i⁄_Àn
, 
uöt16_t
 
ôimeo
,

85 
uöt16_t
 
htimeo
, 
uöt32_t
 
wûdˇrds
, uöt16_à
¥io
);

86 
__of_£nd_Êow_dñ_noˇche
(
c_swôch_t
 *
sw
, 
Êow
 *
Ê
,

87 
uöt32_t
 
wûdˇrds
, 
uöt16_t
 
›‹t
, 
boﬁ
 
°ri˘
);

88 
of_£nd_Êow_°©_ªq
(
c_swôch_t
 *
sw
, c⁄° 
Êow
 *flow,

89 
uöt32_t
 
wûdˇrds
, 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
);

90 
__of_£nd_Êow_°©_ªq
(
c_swôch_t
 *
sw
, c⁄° 
Êow
 *flow,

91 
uöt32_t
 
wûdˇrds
, 
uöt8_t
 
tbl_id
, 
uöt16_t
 
›‹t
);

92 
of_≥r_swôch_Êow_°©s_sˇn
(
c_swôch_t
 *
sw
, 
uöt64_t
 
cuº_time
);

93 *
of_dump_Êow_Æl
(
Êow
 *
Ê
);

94 *
of_dump_Êow
(
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
);

95 *
of_dump_Ê_≠p
(
c_Ê_íåy_t
 *
ít
);

96 (*
	tÊow_∑r£r_‚
)(*
	t¨g
, 
	tc_Ê_íåy_t
 *
	tít
);

97 
	`of_Êow_åavî£_tbl_Æl
(
c_swôch_t
 *
sw
, *
u_¨g
, 
Êow_∑r£r_‚
 
‚
);

98 
	`__of_≥r_swôch_dñ_≠p_Êow_ow√rshù
(
c_swôch_t
 *
sw
, *
≠p
);

99 
	`__of_Êow_föd_≠p_ow√rshù
(*
key_¨g
 
UNUSED
, *
ít_¨g
, *
≠p
);

100 *
	`of_swôch_Æloc
(*
˘x
);

101 
c_swôch_t
 *
	`of_swôch_gë
(
˘æ_hdl_t
 *
˘æ
, 
uöt64_t
 
dpid
);

102 
c_swôch_t
 *
	`of_swôch_Æüs_gë
(
˘æ_hdl_t
 *
˘æ
, 
Æüs
);

103 
c_swôch_t
 *
	`__of_swôch_gë
(
˘æ_hdl_t
 *
˘æ
, 
uöt64_t
 
dpid
);

104 
	`of_swôch_put
(
c_swôch_t
 *
sw
);

105 
	`of_swôch_brõf_öfo
(
c_swôch_t
 *
sw
,

106 
c_oÂ_swôch_brõf
 *
coÂ_sb
);

107 
	`of_swôch_dëaû_öfo
(
c_swôch_t
 *
sw
,

108 
oÂ_swôch_„©uªs
 *
osf
);

109 
	`of_swôch_åavî£_Æl
(
˘æ_hdl_t
 *
hdl
, 
GHFunc
 
dump_‚
, *
¨g
);

110 
	`__of_swôch_åavî£_Æl
(
˘æ_hdl_t
 *
hdl
, 
GHFunc
 
dump_‚
, *
¨g
);

111 
	`of_dÊ_fwd
(
c_swôch
 *
sw
, 
cbuf
 *
b
, *
d©a
,

112 
size_t
 
pkt_Àn
, 
Êow
 *
Ê
, 
uöt16_t
 
ö_p‹t
);

113 
	`of_dÊ_p‹t_°©us
(
c_swôch_t
 *
sw
, 
uöt32_t
 
cfg
, uöt32_à
°©e
);

115 
	`of_˘æ_öô
(
˘æ_hdl_t
 *
c_hdl
, 
size_t
 
¡hªads
, size_à
n_≠±hªads
);

	@mul/mul_priv.h

19 #i‚de‡
__MUL_PRIV_H__


20 
	#__MUL_PRIV_H__


	)

23 
	#C_VTY_NAME
 "mul-vty"

	)

25 
	#C_LISTEN_PORT
 6633

	)

26 
	#C_APP_LISTEN_PORT
 7744

	)

27 
	#C_APP_AUX_LISTEN_PORT
 7745

	)

28 
	#C_IPC_PATH
 "/v¨/run/cùc_x"

	)

29 
	#C_IPC_APP_PATH
 "/v¨/run/cùc_≠p_x"

	)

30 
	#C_PER_WORKER_TIMEO
 1

	)

31 
	#C_CONTROLLER_IP
 "127.0.0.1"

	)

33 
	#C_VTY_PORT
 7000

	)

34 
	#C_PID_PATH
 "/v¨/run/mul.pid"

	)

35 
	#C_VTYSH_PATH
 "/v¨/run/mul.vty"

	)

37 
	#OFSW_MAX_PORTS
 65536

	)

38 
	#OFC_SUCCESS
 0

	)

39 
	#OFC_FAIL
 -1

	)

40 
	#OFC_SW_TIME
 20

	)

41 
	#åue
 1

	)

42 
	#Ál£
 0

	)

43 
	#OFC_SW_PORT_VALID
 
åue


	)

44 
	#OFC_SW_PORT_INVALID
 
Ál£


	)

45 
	#OFC_SW_PORT_INFO_DIRTY
 0x80000000

	)

46 
	#OFC_RCV_BUF_SZ
 4096

	)

47 
	#CIPC_RCV_BUF_SZ
 512

	)

49 
	sc_ôî_¨gs


51 *
	mu_¨g
;

52 *
	mu_‚
;

55 
	ep‹t_°©e
 {

56 
	mP_DISABLED
 = 1 << 0,

57 
	mP_LISTENING
 = 1 << 1,

58 
	mP_LEARNING
 = 1 << 2,

59 
	mP_FORWARDING
 = 1 << 3,

60 
	mP_BLOCKING
 = 1 << 4

61 } 
	tp‹t_°©e_t
;

63 
	gc_swôch
;

66 
	s˘æ_hdl_
 {

68 
c_rw_lock_t
 
	mlock
;

72 
GHashTabÀ
 *
	msw_hash_tbl
;

76 
ùoﬁ_hdl_t
 *
	msw_ùoﬁ
;

77 
GSLi°
 *
	m≠p_li°
;

79 
c_cmn_˘x
 *
	mmaö_˘x
;

80 
c_cmn_˘x
 **
	mw‹kî_˘x_li°
;

82 *
	mvty_ma°î
;

84 
	mn_thªads
;

85 
	mn_≠±hªads
;

88 
cbuf_hód
 
	mc_maö_buf_hód
;

89 
cbuf
 *
	mmaö_buf_node
;

91 } 
	t˘æ_hdl_t
;

94 
	#c_sw_hõr_rdlock
(
sw
) \

96 
	`c_rd_lock
(&
˘æ_hdl
.
lock
); \

97 
	`c_rd_lock
(&
sw
->
lock
); \

98 } 0)

	)

100 
	#c_sw_hõr_u∆ock
(
sw
) \

102 
	`c_rd_u∆ock
(&
sw
->
lock
); \

103 
	`c_rd_u∆ock
(&
˘æ_hdl
.
lock
); \

104 } 0)

	)

107 
	sc_≠p_öfo_


109 *
	m˘x
;

110 
c_©omic_t
 
	mªf
;

111 
sockaddr_ö
 
	m≥î_addr
;

112 
c_c⁄n_t
 
	m≠p_c⁄n
;

113 
uöt32_t
 
	mev_mask
;

114 
uöt32_t
 
	m≠p_Êags
;

115 
uöt32_t
 
	mn_dpid
;

116 
GHashTabÀ
 *
	mdpid_hli°
;

117 (*
	mev_cb
)(*
	m≠p_¨g
, *
	mpkt_¨g
);

118 
	m≠p_«me
[
C_MAX_APP_STRLEN
];

119 } 
	tc_≠p_öfo_t
;

121 
	sc_sw_evít_q_ít


123 
c_≠p_öfo_t
 *
	m≠p
;

124 
cbuf
 *
	mb
;

127 
	#C_PROCESS_ALL_APP_EVENT_LOOP
(
sw
, 
b
, 
evít
, 
›
) \

129 
c_≠p_öfo_t
 *
__≠p
; \

130 
ôî©‹
 = 
sw
->
≠p_li°
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) { \

131 
__≠p
 = 
ôî©‹
->
d©a
; \

132 i‡(!((1 << 
evít
Ë& 
__≠p
->
ev_mask
)) { \

135 
≠p_›
->
	`≠p_h™dÀr
(
sw
, 
b
, 
__≠p
, 
¥iv
); \

137 } 0)

	)

139 
	#C_PROCESS_APP_EVENT_LOOP
(
sw
, 
b
, 
evít
, 
›
, 
__≠p
) \

141 i‡((1 << 
evít
Ë& 
__≠p
->
ev_mask
) { \

142 
≠p_›
->
	`≠p_h™dÀr
(
sw
, 
b
, 
__≠p
, 
¥iv
); \

144 } 0)

	)

146 
	sc_swôch_Â_›s


148 (*
	mÂ_fwd
)(
c_swôch
 *
	msw
, 
cbuf
 *
	mb
, *
	mö_d©a
, 
size_t
 
	mÀn
,

149 
Êow
 *
	mö_Êow
, 
uöt16_t
 
	mù‹t
);

150 (*
	mÂ_p‹t_°©us
)(
c_swôch
 *
	msw
, 
uöt32_t
 
	mcfg
, uöt32_à
	m°©e
);

152 (*
	mÂ_db_˘‹
)(
c_swôch
 *
	msw
);

153 (*
	mÂ_db_dt‹
)(
c_swôch
 *
	msw
);

156 
	sc_sw_p‹ts
 {

157 
oÂ_phy_p‹t
 
	mp_öfo
;

158 
uöt32_t
 
	mvÆid
;

159 } 
	tc_sw_p‹ts_t
;

161 
	sc_Ê_íåy_hdr_


163 
c_rw_lock_t
 
	mlock
;

164 
uöt8_t
 
	mc_Ê_ít_ty≥
;

165 
uöt8_t
 
	mÊags
;

166 
uöt16_t
 
	m¥io
;

167 
uöt8_t
 
	mhw_tbl_idx
;

168 
uöt8_t
 
	m∑d
;

169 
uöt32_t
 
	mwûdˇrds
;

170 
c_©omic_t
 
	mªf
;

171 
	#C_FL_IDLE_DFL_TIMEO
 (120)

	)

172 
uöt16_t
 
	mi_timeo
;

173 
	#C_FL_HARD_DFL_TIMEO
 (900)

	)

174 
uöt16_t
 
	mh_timeo
;

175 }
	tc_Ê_íåy_hdr_t
;

177 
	#FL_LOCK
 
Ê_hdr
.
lock


	)

178 
	#FL_ENT_TYPE
 
Ê_hdr
.
c_Ê_ít_ty≥


	)

179 
	#FL_REF
 
Ê_hdr
.
ªf


	)

180 
	#FL_FLAGS
 
Ê_hdr
.
Êags


	)

181 
	#FL_PRIO
 
Ê_hdr
.
¥io


	)

182 
	#FL_WILDCARDS
 
Ê_hdr
.
wûdˇrds


	)

183 
	#FL_HWTBL_IDX
 
Ê_hdr
.
hw_tbl_idx


	)

184 
	#FL_ITIMEO
 
Ê_hdr
.
i_timeo


	)

185 
	#FL_HTIMEO
 
Ê_hdr
.
h_timeo


	)

187 
	sc_Ê_íåy_°©s_


189 
uöt64_t
 
	mbyã_cou¡
;

190 
uöt64_t
 
	mpkt_cou¡
;

192 
	mµs
;

193 
	mbps
;

195 
uöt64_t
 
	mœ°_ª‰esh
;

196 }
	tc_Ê_íåy_°©s_t
;

198 
	sc_Ê_íåy_


200 
c_Ê_íåy_hdr_t
 
	mÊ_hdr
;

201 
c_swôch
 *
	msw
;

204 
Êow
 
	mÊ
;

209 
GSLi°
 *
	m˛⁄ed_li°
;

210 *
	m∑ª¡
;

213 
c_©omic_t
 
	m≠p_ªf
;

214 
GSLi°
 *
	m≠p_ow√r_li°
;

216 
size_t
 
	ma˘i⁄_Àn
;

217 
oÂ_a˘i⁄_hódî
 *
	ma˘i⁄s
;

219 
c_Ê_íåy_°©s_t
 
	mÊ_°©s
;

220 }
	tc_Ê_íåy_t
;

222 
	sc_Êow_tbl_


224 
	#C_TBL_EXM
 (0)

	)

225 
	#C_TBL_RULE
 (1)

	)

226 
	#C_TBL_UNK
 (2)

	)

227 
uöt8_t
 
	mc_Ê_tbl_ty≥
;

228 
	#C_TBL_HW_IDX_DFL
 (1)

	)

229 
uöt8_t
 
	mhw_tbl_idx
;

232 
GHashTabÀ
 *
	mexm_Ê_hash_tbl
;

233 
GSLi°
 *
	mruÀ_Ê_tbl
;

235 (*
	mdt‹
)(*
	msw
, *
	mtbl
);

236 } 
	tc_Êow_tbl_t
;

239 
	sc_swôch


241 *
˘x
 
	m__Æig√d
;

242 
c_swôch_Â_›s
 
	mÂ_›s
;

243 
˘æ_hdl_t
 *
	mc_hdl
;

244 
	#DPID
 
d©≠©h_id


	)

245 
	md©≠©h_id
;

246 
boﬁ
 
	mis_dummy_d©≠©h_id
;

247 *
	m≠p_Êow_tbl
;

248 
c_Êow_tbl_t
 
	mexm_Êow_tbl
;

249 
	#C_RULE_FLOW_TBL_DFL
 0

	)

250 
	#C_MAX_RULE_FLOW_TBLS
 1

	)

251 
c_Êow_tbl_t
 
	mruÀ_Êow_tbls
[
C_MAX_RULE_FLOW_TBLS
];

252 
GSLi°
 *
	m≠p_li°
;

253 
GSLi°
 *
	m≠p_evítq
;

255 
c_c⁄n_t
 
	mc⁄n
;

257 
c_©omic_t
 
	mªf
;

258 
c_rw_lock_t
 
	mlock
;

259 
uöt64_t
 
	mœ°_ª‰esh_time
;

260 
uöt64_t
 
	mœ°_ßm∂e_time
;

262 
c_sw_p‹ts_t
 
	mp‹ts
[
OFSW_MAX_PORTS
];

264 
uöt32_t
 
	mswôch_°©e
;

266 
uöt32_t
 
	mn_buf„rs
;

267 
	mÆüs_id
;

268 
uöt8_t
 
	mvîsi⁄
;

269 
uöt8_t
 
	mn_èbÀs
;

271 
uöt32_t
 
	ma˘i⁄s
;

273 
uöt32_t
 
	mˇ∑bûôõs
;

274 
uöt32_t
 
	mn_p‹ts
;

277 
c_swôch
 
	tc_swôch_t
;

279 
	sc_sw_ª∂ay_q_ít


281 
c_swôch_t
 *
	msw
;

282 
cbuf
 *
	mb
;

285 
	sc_buf_ôî_¨g


287 
uöt8_t
 *
	mwr_±r
;

288 *
	md©a
;

291 
	sc_p‹t_cfg_°©e_mask


293 
uöt32_t
 
	mc⁄fig_mask
;

294 
uöt32_t
 
	m°©e_mask
;

297 
c_l2_Ãn_fwd
(
c_swôch_t
 *
sw
, 
cbuf
 *
b
, *
›i
, 
size_t
 
pkt_Àn
,

298 
Êow
 *
ö_Êow
, 
uöt16_t
 
ö_p‹t
);

299 
c_l2_p‹t_°©us
(
c_swôch_t
 *
sw
, 
uöt32_t
 
cfg
, uöt32_à
°©e
);

300 
c_l2fdb_öô
(
c_swôch_t
 *
sw
);

301 
c_l2fdb_de°roy
(
c_swôch_t
 *
sw
);

302 
c_ùc_msg_rcv
(*
˘x_¨g
, 
cbuf
 *
buf
);

303 
c_£nd_uniˇ°_ùc_msg
(
fd
, *
msg
);

304 *
Æloc_ùc_msg
(
uöt8_t
 
ùc_ty≥
, 
uöt16_t
 
ùc_msg_ty≥
);

306 
c_≠p_öfo_t
 *
c_≠p_Æloc
(*
˘x
);

307 
c_≠p_öfo_t
 *
c_≠p_gë
(
˘æ_hdl_t
 *
c_hdl
, *
≠p_«me
);

308 
c_≠p_put
(
c_≠p_öfo_t
 *
≠p
);

309 
boﬁ
 
c_≠p_hdr_vÆid
(*
h_¨g
);

310 
c_buûtö_≠p_°¨t
(*
¨g
);

311 
c_sig«l_≠p_evít
(
c_swôch_t
 *
sw
, *
b
, 
c_≠p_evít_t
 
evít
,

312 *
≠p_¨g
, *
¥iv
);

313 
__mul_≠p_comm™d_h™dÀr
(*
≠p_¨g
, 
cbuf
 *
b
);

314 
c_aux_≠p_öô
(*
≠p_¨g
);

316 
ölöe
 

317 
	$c_≠p_ªf
(*
≠p_¨g
)

319 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

320 
	`©omic_öc
(&
≠p
->
ªf
, 1);

321 
	}
}

323 
ölöe
 

324 
	$c_≠p_uƒef
(*
≠p_¨g
)

326 
c_≠p_öfo_t
 *
≠p
 = 
≠p_¨g
;

327 
	`©omic_dec
(&
≠p
->
ªf
, 1);

328 
	}
}

332 #ifde‡
C_PROF_SUPPORT


333 
uöt64_t
 
	gcuº_time
;

335 
	#°¨t_¥of
(
X
) \

337 i‡(((
c_w‹kî_˘x
 *)(
X
))->
thªad_idx
 == 1) \

338 
cuº_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
(); \

339 } 0)

	)

341 
	#gë_¥of
(
X
, 
°r
) \

343 i‡(((
c_w‹kî_˘x
 *)(
X
))->
thªad_idx
 == 1) { \

344 
	`¥ötf
 ("%s:Åimê%Œuus\n", 
°r
, 
	`g_gë_m⁄Ÿ⁄ic_time
() - \

345 
cuº_time
); \

346 
cuº_time
 = 
	`g_gë_m⁄Ÿ⁄ic_time
(); \

348 }0)

	)

350 
	#°¨t_¥of
(
X
)

	)

351 
	#gë_¥of
(
X
, 
°r
)

	)

358 
˘æ_hdl_t
 
	g˘æ_hdl
;

368 
mul_cc_ªcv_pkt
(
uöt64_t
 
dp_id
, 
uöt8_t
 
aux_id
, *
of_msg
, 
size_t
 
msg_Àn
);

371 
mul_cc_of_ac˚±
(
uöt64_t
 
dummy_dpid
, 
uöt8_t
 
dummy_auxid
,

372 
uöt32_t
 
swôch_ù
, 
uöt16_t
 
swôch_p‹t
);

375 
mul_cc_of_dñëe
(
uöt64_t
 
dpid
, 
uöt8_t
 
auxid
);

378 
mul_ãrmö©e
(
∑øm
);

	@mul/mul_servlet.c

20 
	~"mul_comm⁄.h
"

21 
	~"mul_£rvÀt.h
"

23 
	g¥öt_£p
[] =

27 c⁄° *
	gof_swôch_°©es
[] = {

32 
NULL
,

36 
	$oÂ_p‹t_c⁄fig_to°r
(*
°rög
, 
uöt32_t
 
c⁄fig
)

38 i‡(
c⁄fig
 & 
OFPPC_PORT_DOWN
) {

39 
	`°rˇt
(
°rög
, " PORT_DOWN");

41 
	`°rˇt
(
°rög
, " PORT_UP");

43 
	}
}

46 
	$oÂ_ˇ∑bûôõs_to°r
(*
°rög
, 
uöt32_t
 
ˇ∑bûôõs
)

48 i‡(
ˇ∑bûôõs
 == 0) {

49 
	`°r˝y
(
°rög
, "No capabilities\n");

52 i‡(
ˇ∑bûôõs
 & 
OFPC_FLOW_STATS
) {

53 
	`°rˇt
(
°rög
, "FLOW_STATS ");

55 i‡(
ˇ∑bûôõs
 & 
OFPC_TABLE_STATS
) {

56 
	`°rˇt
(
°rög
, "TABLE_STATS ");

58 i‡(
ˇ∑bûôõs
 & 
OFPC_PORT_STATS
) {

59 
	`°rˇt
(
°rög
, "PORT_STATS ");

61 i‡(
ˇ∑bûôõs
 & 
OFPC_STP
) {

62 
	`°rˇt
(
°rög
, "STP ");

64 i‡(
ˇ∑bûôõs
 & 
OFPC_IP_REASM
) {

65 
	`°rˇt
(
°rög
, "IP_REASM ");

67 i‡(
ˇ∑bûôõs
 & 
OFPC_QUEUE_STATS
) {

68 
	`°rˇt
(
°rög
, "QUEUE_STATS ");

70 i‡(
ˇ∑bûôõs
 & 
OFPC_ARP_MATCH_IP
) {

71 
	`°rˇt
(
°rög
, "ARP_MATCH_IP");

73 
	}
}

76 
	$of_dump_Êow_cmd
(
Êow
 *
Ê
, 
uöt32_t
 
wûdˇrds
, 
uöt64_t
 
dpid
)

78 
	#FL_PBUF_SZ
 4096

	)

79 *
pbuf
 = 
	`ˇŒoc
(1, 
FL_PBUF_SZ
);

80 
Àn
 = 0;

81 
uöt32_t
 
nw_d°_mask
, 
nw_§c_mask
;

82 
uöt32_t
 
ù_wc
;

83 
ö_addr
 
ù_addr
 = { .
s_addr
 = 0 };

85 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

86 "of-Êowádd swôch 0x%Œx ", 
dpid
);

88 
wûdˇrds
 = 
	`¡ohl
(wildcards);

89 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_DST_MASK
Ë>> 
OFPFW_NW_DST_SHIFT
);

90 
nw_d°_mask
 = 
ù_wc
 >= 32 ? 0 :

91 
	`make_öë_mask
(32-
ù_wc
);

93 
ù_addr
.
s_addr
 = 
Ê
->
nw_d°
 & 
	`ht⁄l
(
nw_d°_mask
);

94 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

95 "dù %s/%d ", 
	`öë_¡ﬂ
(
ù_addr
),

96 
ù_wc
 >= 32 ? 0 : 32-ip_wc);

98 
ù_wc
 = ((
wûdˇrds
 & 
OFPFW_NW_SRC_MASK
Ë>> 
OFPFW_NW_SRC_SHIFT
);

99 
nw_§c_mask
 = 
ù_wc
 >= 32 ? 0 :

100 
	`make_öë_mask
(32-
ù_wc
);

102 
ù_addr
.
s_addr
 = 
Ê
->
nw_§c
 & 
	`ht⁄l
(
nw_§c_mask
);

103 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

104 "sù %s/%d ", 
	`öë_¡ﬂ
(
ù_addr
),

105 
ù_wc
 >= 32 ? 0 : 32-ip_wc);

107 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "proto ");

108 i‡(!(
wûdˇrds
 & 
OFPFW_NW_PROTO
)) {

109 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

110 "%d ", 
Ê
->
nw_¥Ÿo
);

112 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

115 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "tos ");

116 i‡(!(
wûdˇrds
 & 
OFPFW_NW_TOS
)) {

117 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

118 "%d ", 
Ê
->
nw_tos
);

120 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

124 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "dport ");

125 i‡(!(
wûdˇrds
 & 
OFPFW_TP_DST
)) {

126 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

127 "%hu ", 
	`¡ohs
(
Ê
->
ç_d°
));

129 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

132 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "sport ");

133 i‡(!(
wûdˇrds
 & 
OFPFW_TP_SRC
)) {

134 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

135 "%hu ", 
	`¡ohs
(
Ê
->
ç_§c
));

137 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

140 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "smac ");

141 i‡(!(
wûdˇrds
 & 
OFPFW_DL_SRC
)) {

142 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

144 
Ê
->
dl_§c
[0], fl->dl_src[1], fl->dl_src[2],

145 
Ê
->
dl_§c
[3], fl->dl_src[4], fl->dl_src[5]);

146 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

148 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

151 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "dmac ");

152 i‡(!(
wûdˇrds
 & 
OFPFW_DL_DST
)) {

153 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

155 "dmac", 
Ê
->
dl_d°
[0], fl->dl_dst[1], fl->dl_dst[2],

156 
Ê
->
dl_d°
[3], fl->dl_dst[4], fl->dl_dst[5]);

157 
	`as£π
(
Àn
 < 
FL_PBUF_SZ
-1);

159 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

162 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "eth-type ");

163 i‡(!(
wûdˇrds
 & 
OFPFW_DL_TYPE
)) {

164 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

165 "%hu ", 
	`¡ohs
(
Ê
->
dl_ty≥
));

167 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

171 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "vlan-id ");

172 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN
)) {

173 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

174 "%hu ", 
	`¡ohs
(
Ê
->
dl_vœn
));

176 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

179 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "vlan-pcp ");

180 i‡(!(
wûdˇrds
 & 
OFPFW_DL_VLAN_PCP
)) {

181 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

182 "%d ", 
Ê
->
dl_vœn_p˝
);

184 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* ");

187 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "in-port ");

188 i‡(!(
wûdˇrds
 & 
OFPFW_IN_PORT
)) {

189 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1,

190 "%hu \r\n", 
	`¡ohs
(
Ê
->
ö_p‹t
));

192 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
FL_PBUF_SZ
-len-1, "* \r\n");

196  
pbuf
;

197 
	}
}

200 
	$of_dump_a˘i⁄s_cmd
(*
a˘i⁄s
, 
size_t
 
a˘i⁄_Àn
)

202 *
pbuf
;

203 
size_t
 
Àn
 = 0, 
∑r£d_Àn
 = 0;

204 
uöt16_t
 
a˘_ty≥
;

205 
oÂ_a˘i⁄_hódî
 *
hdr
;

206 
	#OF_DUMP_ACT_SZ
 4096

	)

207 
pbuf
 = 
	`ˇŒoc
(1, 
OF_DUMP_ACT_SZ
);

208 
	`as£π
(
pbuf
);

210 i‡(!
a˘i⁄_Àn
) {

211 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1, "action-add drop\r\n");

212 
commô
;

215 
a˘i⁄_Àn
) {

216 
hdr
 = (
oÂ_a˘i⁄_hódî
 *)
a˘i⁄s
;

217 
a˘_ty≥
 = 
	`¡ohs
(
hdr
->
ty≥
);

218 
a˘_ty≥
) {

219 
OFPAT_OUTPUT
:

221 
oÂ_a˘i⁄_ouçut
 *
›_a˘
 = (*)
hdr
;

222 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

224 
	`¡ohs
(
›_a˘
->
p‹t
));

225 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

226 
∑r£d_Àn
 = (*
›_a˘
);

229 
OFPAT_SET_VLAN_VID
:

231 
oÂ_a˘i⁄_vœn_vid
 *
vid_a˘
 = (*)
hdr
;

232 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

234 
	`¡ohs
(
vid_a˘
->
vœn_vid
));

235 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

236 
∑r£d_Àn
 = (*
vid_a˘
);

240 
OFPAT_SET_DL_DST
:

242 
oÂ_a˘i⁄_dl_addr
 *
dmac_a˘
 = (*)
hdr
;

243 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

246 
dmac_a˘
->
dl_addr
[0], dmac_act->dl_addr[1],

247 
dmac_a˘
->
dl_addr
[2], dmac_act->dl_addr[3],

248 
dmac_a˘
->
dl_addr
[4], dmac_act->dl_addr[5]);

249 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

250 
∑r£d_Àn
 = (*
dmac_a˘
);

253 
OFPAT_SET_DL_SRC
:

255 
oÂ_a˘i⁄_dl_addr
 *
smac_a˘
 = (*)
hdr
;

256 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

259 
smac_a˘
->
dl_addr
[0], smac_act->dl_addr[1],

260 
smac_a˘
->
dl_addr
[2], smac_act->dl_addr[3],

261 
smac_a˘
->
dl_addr
[4], smac_act->dl_addr[5]);

262 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

263 
∑r£d_Àn
 = (*
smac_a˘
);

266 
OFPAT_SET_VLAN_PCP
:

268 
oÂ_a˘i⁄_vœn_p˝
 *
vp˝_a˘
 = (*)
hdr
;

269 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

271 
vp˝_a˘
->
vœn_p˝
);

272 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

273 
∑r£d_Àn
 = (*
vp˝_a˘
);

276 
OFPAT_STRIP_VLAN
:

278 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

280 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

281 
∑r£d_Àn
 = (
oÂ_a˘i⁄_hódî
);

283 
OFPAT_SET_NW_SRC
:

285 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
 = (*)
hdr
;

286 
ö_addr
 in_add∏{ .
s_addr
 = 
nw_addr_a˘
->
nw_addr
 };

287 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

289 
	`öë_¡ﬂ
(
ö_addr
));

290 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

291 
∑r£d_Àn
 = (*
nw_addr_a˘
);

293 
OFPAT_SET_NW_DST
:

295 
oÂ_a˘i⁄_nw_addr
 *
nw_addr_a˘
 = (*)
hdr
;

296 
ö_addr
 in_add∏{ .
s_addr
 = 
nw_addr_a˘
->
nw_addr
 };

297 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1,

299 
	`öë_¡ﬂ
(
ö_addr
));

300 
	`as£π
(
Àn
 < 
OF_DUMP_ACT_SZ
-1);

301 
∑r£d_Àn
 = (*
nw_addr_a˘
);

305 
	`c_log_îr
("%s:unh™dÀdá˘i⁄ %u", 
FN
, 
a˘_ty≥
);

306 
	`‰ì
(
pbuf
);

307  
NULL
;

311 
a˘i⁄_Àn
 -
∑r£d_Àn
;

312 
a˘i⁄s
 = ((
uöt8_t
 *Ô˘i⁄†+ 
∑r£d_Àn
);

315 
commô
:

316 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
OF_DUMP_ACT_SZ
-len-1, "commit\r\n");

318  
pbuf
;

319 
	}
}

322 
boﬁ


323 
	$check_ª∂y_ty≥
(
cbuf
 *
b
, 
uöt32_t
 
cmd_code
)

325 
c_oÂ_aux≠p_cmd_t
 *
coÂ_auc
 = (*)(
b
->
d©a
);

327 i‡(
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
) < (*cofp_auc)) {

328  
Ál£
;

331 i‡(
coÂ_auc
->
hódî
.
ty≥
 !
C_OFPT_AUX_CMD
 ||

332 
coÂ_auc
->
cmd_code
 !
	`ht⁄l
(cmd_code)) {

333 
	`c_log_îr
("%s:Åy≥(%huËcmd_codê(%u)", 
FN
,

334 
coÂ_auc
->
hódî
.
ty≥
, 
	`¡ohl
(coÂ_auc->
cmd_code
));

335  
Ál£
;

338  
åue
;

339 
	}
}

346 
cbuf
 *

347 
	$mul_gë_swôches_brõf
(*
£rvi˚
)

349 
cbuf
 *
b
;

350 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

352 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
),

353 
C_OFPT_AUX_CMD
, 0);

355 
coÂ_auc
 = (*)(
b
->
d©a
);

356 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_MUL_GET_SWITCHES
);

358 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

359 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

360 i‡(
b
) {

361 i‡(!
	`check_ª∂y_ty≥
(
b
, 
C_AUX_CMD_MUL_GET_SWITCHES_REPLY
)) {

362 
	`c_log_îr
("%s: Faûed", 
FN
);

363 
	`‰ì_cbuf
(
b
);

364  
NULL
;

368  
b
;

369 
	}
}

376 
	$mul_dump_swôches_brõf
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
)

378 *
pbuf
 = 
	`ˇŒoc
(1, 
SWITCH_BR_PBUF_SZ
);

379 
Àn
 = 0;

380 
i
 = 0, 
n_swôches
;

381 
c_oÂ_aux≠p_cmd_t
 *
coÂ_auc
;

382 
c_oÂ_swôch_brõf_t
 *
coÂ_swb
;

384 i‡(!
pbuf
) {

385 
	`c_log_îr
("%s:Öbu‡Ælo¯Áûed", 
FN
);

386 
out
;

389 
coÂ_auc
 = (*)(
b
->
d©a
);

390 
n_swôches
 = (
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
Ë- (
c_oÂ_aux≠p_cmd_t
))/

391 (
c_oÂ_swôch_brõf_t
);

393 
coÂ_swb
 = (*)(
coÂ_auc
->
d©a
);

394 ; 
i
 < 
n_swôches
; i++) {

395 
coÂ_swb
->
c⁄n_°r
[
OFP_CONN_DESC_SZ
-1] = '\0';

396 
Àn
 +
	`¢¥ötf
(
pbuf
 +Üí, 
SWITCH_BR_PBUF_SZ
-len-1,

398 
	`¡ohŒ
(
coÂ_swb
->
swôch_id
.
d©≠©h_id
),

399 
of_swôch_°©es
[
	`¡ohl
(
coÂ_swb
->
°©e
)],

400 
coÂ_swb
->
c⁄n_°r
,

401 
	`¡ohl
(
coÂ_swb
->
n_p‹ts
));

402 i‡(
Àn
 >
SWITCH_BR_PBUF_SZ
-1) {

403 
	`c_log_îr
("%s:Öbu‡ovîrun", 
FN
);

406 
coÂ_swb
 += 1;

409 
out
:

410 i‡(
‰ì_buf
) {

411 i‡(
b
Ë
	`‰ì_cbuf
(b);

414  
pbuf
;

415 
	}
}

422 
cbuf
 *

423 
	$mul_gë_swôch_dëaû
(*
£rvi˚
, 
uöt64_t
 
dpid
)

425 
cbuf
 *
b
;

426 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

427 
c_oÂ_ªq_dpid_©å
 *
coÂ_rda
;

428 
oÂ_hódî
 *
h
;

430 
b
 = 
	`of_¥ï_msg
((*
coÂ_auc
Ë+ (*
coÂ_rda
),

431 
C_OFPT_AUX_CMD
, 0);

433 
coÂ_auc
 = (*)(
b
->
d©a
);

434 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_MUL_GET_SWITCH_DETAIL
);

435 
coÂ_rda
 = (*)(
coÂ_auc
->
d©a
);

436 
coÂ_rda
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

438 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

439 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

440 i‡(
b
) {

441 
h
 = (*)(
b
->
d©a
);

442 i‡(
h
->
ty≥
 !
C_OFPT_SWITCH_ADD
 ||

443 
	`¡ohs
(
h
->
Àngth
Ë< (
oÂ_swôch_„©uªs
)) {

444 
	`c_log_îr
("%s: Faûed", 
FN
);

445 
	`‰ì_cbuf
(
b
);

446  
NULL
;

450  
b
;

451 
	}
}

458 
	$mul_dump_swôch_dëaû
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
)

460 *
pbuf
 = 
	`ˇŒoc
(1, 
MUL_SERVLET_PBUF_DFL_SZ
);

461 
Àn
 = 0;

462 
i
 = 0, 
n_p‹ts
;

463 
oÂ_swôch_„©uªs
 *
osf
 = (*)(
b
->
d©a
);

464 
°rög
[
OFP_PRINT_MAX_STRLEN
];

466 i‡(!
pbuf
) {

467 
	`c_log_îr
("%s:Öbu‡Ælo¯Áûed", 
FN
);

468 
out
;

471 
n_p‹ts
 = ((
	`¡ohs
(
osf
->
hódî
.
Àngth
)

472 - 
	`off£tof
(
oÂ_swôch_„©uªs
, 
p‹ts
))

473 /  *
osf
->
p‹ts
);

475 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1, "Datapath-id : 0x%llx\r\n",

476 
	`¡ohŒ
(
osf
->
d©≠©h_id
));

477 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

479 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

480 "Buf„r† : %d\r\n",
	`¡ohl
(
osf
->
n_buf„rs
));

481 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

483 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

484 "TabÀ† : %d\r\n", 
osf
->
n_èbÀs
);

485 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

487 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

488 "A˘i⁄† : 0x%x\r\n", 
	`¡ohl
(
osf
->
a˘i⁄s
));

489 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

491 
	`mem£t
(
°rög
, 0, 64);

492 
	`oÂ_ˇ∑bûôõs_to°r
(
°rög
, 
	`¡ohl
(
osf
->
ˇ∑bûôõs
));

494 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

495 "C≠abûôõs: 0x%x(%s)\r\n", 
	`¡ohl
(
osf
->
ˇ∑bûôõs
),

496 
°rög
);

497 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

499 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

500 "Num P‹t† : %d\r\n", 
n_p‹ts
);

501 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

503 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

506 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

508 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

510 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

512 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

515 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

518 
i
 = 0; i < 
n_p‹ts
; i ++) {

519 
oÂ_phy_p‹t
 *
p_öfo
 = &
osf
->
p‹ts
[
i
];

521 
p_öfo
->
«me
[
OFP_MAX_PORT_NAME_LEN
-1] = '\0';

522 
	`mem£t
(
°rög
, 0, 
OFP_PRINT_MAX_STRLEN
);

523 
	`oÂ_p‹t_c⁄fig_to°r
(
°rög
, 
	`¡ohl
(
p_öfo
->
c⁄fig
));

525 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

527 
	`¡ohs
(
p_öfo
->
p‹t_no
),Ö_öfo->
«me
,

528 
p_öfo
->
hw_addr
[0],Ö_info->hw_addr[1],Ö_info->hw_addr[2],

529 
p_öfo
->
hw_addr
[3],Ö_info->hw_addr[4],Ö_info->hw_addr[5],

530 
°rög
);

531 i‡(
Àn
 >
MUL_SERVLET_PBUF_DFL_SZ
-1Ë
out_pbuf_îr
;

533 
	`mem£t
(
°rög
, 0, 
OFP_PRINT_MAX_STRLEN
);

537 
out
:

538 i‡(
‰ì_buf
) {

539 i‡(
b
Ë
	`‰ì_cbuf
(b);

542  
pbuf
;

543 
out_pbuf_îr
:

544 
	`c_log_îr
("%s:Öbu‡ovîrun", 
FN
);

545 
out
;

546 
	}
}

549 
mul_dump_sögÀ_Êow
(
c_oÂ_Êow_mod
 *
coÂ_fm
, *
¨g
,

550 (*
cb_‚
)(*
¨g
, *
pbuf
))

552 *
pbuf
;

553 
Àn
 = 0;

554 
size_t
 
a˘i⁄_Àn
;

556 
a˘i⁄_Àn
 = 
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
) - (*cofp_fm);

558 
	`cb_‚
(
¨g
, 
¥öt_£p
);

559 
pbuf
 = 
	`of_dump_Êow
(&
coÂ_fm
->
Êow
, coÂ_fm->
wûdˇrds
);

560 i‡(
pbuf
) {

561 
	`cb_‚
(
¨g
, 
pbuf
);

562 
	`‰ì
(
pbuf
);

565 
pbuf
 = 
	`of_dump_a˘i⁄s
(
coÂ_fm
->
a˘i⁄s
, 
a˘i⁄_Àn
);

566 i‡(
pbuf
) {

567 
	`cb_‚
(
¨g
, 
pbuf
);

568 
	`‰ì
(
pbuf
);

571 
pbuf
 = 
	`ˇŒoc
(1, 
MUL_SERVLET_PBUF_DFL_SZ
);

572 i‡(!
pbuf
) ;

574 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

575 "%s: %hu\r\n", "Prio", 
	`¡ohs
(
coÂ_fm
->
¥i‹ôy
));

577 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
MUL_SERVLET_PBUF_DFL_SZ
-len-1,

579 
coÂ_fm
->
Êags
 & 
C_FL_ENT_STATIC
 ? "static":"dynamic",

580 
coÂ_fm
->
Êags
 & 
C_FL_ENT_CLONE
 ? "clone": "no-clone",

581 
coÂ_fm
->
Êags
 & 
C_FL_ENT_LOCAL
 ? "local": "non-local");

583 
	`cb_‚
(
¨g
, 
pbuf
);

584 
	`‰ì
(
pbuf
);

586 
	`cb_‚
(
¨g
, 
¥öt_£p
);

590 
	}
}

593 
mul_dump_sögÀ_Êow_cmd
(
c_oÂ_Êow_mod
 *
coÂ_fm
, *
¨g
,

594 (*
cb_‚
)(*
¨g
, *
pbuf
))

596 *
pbuf
;

597 
size_t
 
a˘i⁄_Àn
;

599 
a˘i⁄_Àn
 = 
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
) - (*cofp_fm);

601 
pbuf
 = 
	`of_dump_Êow_cmd
(&
coÂ_fm
->
Êow
, coÂ_fm->
wûdˇrds
,

602 
	`¡ohŒ
(
coÂ_fm
->
d©≠©h_id
));

603 i‡(
pbuf
) {

604 
	`cb_‚
(
¨g
, 
pbuf
);

605 
	`‰ì
(
pbuf
);

608 
pbuf
 = 
	`of_dump_a˘i⁄s_cmd
(
coÂ_fm
->
a˘i⁄s
, 
a˘i⁄_Àn
);

609 i‡(
pbuf
) {

610 
	`cb_‚
(
¨g
, 
pbuf
);

611 
	`‰ì
(
pbuf
);

615 
	}
}

623 
mul_gë_Êow_öfo
(*
£rvi˚
, 
uöt64_t
 
dpid
, 
boﬁ
 
Êow_£lf
,

624 
boﬁ
 
dump_cmd
, *
¨g
,

625 (*
cb_‚
)(*
¨g
, *
pbuf
))

627 
cbuf
 *
b
;

628 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

629 
c_oÂ_ªq_dpid_©å
 *
coÂ_rda
;

630 
c_oÂ_Êow_mod
 *
coÂ_fm
;

631 
oÂ_hódî
 *
h
;

633 
b
 = 
	`of_¥ï_msg
((*
coÂ_auc
Ë+ (*
coÂ_rda
),

634 
C_OFPT_AUX_CMD
, 0);

636 
coÂ_auc
 = (*)(
b
->
d©a
);

637 
coÂ_auc
->
cmd_code
 = 
Êow_£lf
 ?

638 
	`ht⁄l
(
C_AUX_CMD_MUL_GET_APP_FLOW
):

639 
	`ht⁄l
(
C_AUX_CMD_MUL_GET_ALL_FLOWS
);

640 
coÂ_rda
 = (*)(
coÂ_auc
->
d©a
);

641 
coÂ_rda
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

643 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

645 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

646 i‡(
b
) {

647 
h
 = (*)(
b
->
d©a
);

648 i‡(
h
->
ty≥
 !
OFPT_FLOW_MOD
) {

649 
	`‰ì_cbuf
(
b
);

652 
coÂ_fm
 = (*)(
b
->
d©a
);

654 i‡(
	`¡ohs
(
coÂ_fm
->
hódî
.
Àngth
) < (*cofp_fm)) {

655 
	`‰ì_cbuf
(
b
);

660 i‡(!
dump_cmd
) {

661 
	`mul_dump_sögÀ_Êow
(
coÂ_fm
, 
¨g
, 
cb_‚
);

663 
	`mul_dump_sögÀ_Êow_cmd
(
coÂ_fm
, 
¨g
, 
cb_‚
);

665 
	`‰ì_cbuf
(
b
);

670 
	}
}

	@mul/mul_servlet.h

20 #i‚de‡
__MUL_SERVLET_H__


21 
	#__MUL_SERVLET_H__


	)

23 
	#OFP_PRINT_MAX_STRLEN
 (256*4)

	)

24 
	#MUL_SERVLET_PBUF_DFL_SZ
 (10240)

	)

25 
	#SWITCH_BR_PBUF_SZ
 (
MUL_SERVLET_PBUF_DFL_SZ
)

	)

27 
cbuf
 *
mul_gë_swôches_brõf
(*
£rvi˚
);

28 
cbuf
 *
mul_gë_swôch_dëaû
(*
£rvi˚
, 
uöt64_t
 
dpid
);

29 *
mul_nb≠i_dump_swôch_brõf
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
);

30 *
mul_dump_swôches_brõf
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
);

31 *
mul_dump_swôch_dëaû
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
);

32 
mul_gë_Êow_öfo
(*
£rvi˚
, 
uöt64_t
 
dpid
, 
boﬁ
 
Êow_£lf
,

33 
boﬁ
 
dump_cmd
, *
¨g
,

34 (*
cb_‚
)(*
¨g
, *
pbuf
));

	@mul/mul_thread.h

19 #i‚de‡
__MUL_THREAD_H__


20 
	#__MUL_THREAD_H__


	)

23 
	#c_¥öt
 
¥ötf


	)

24 
	#c_îr_log
 
c_¥öt


	)

25 
	#c_dbg_log
 
c_¥öt


	)

26 
	#c_w¨n_log
 
c_¥öt


	)

27 
	#c_log_îr


	)

31 
	gc_maö_˘x
;

33 
	ethªad_°©e


35 
	mTHREAD_STATE_PRE_INIT
,

36 
	mTHREAD_STATE_FINAL_INIT
,

37 
	mTHREAD_STATE_RUNNING
,

39 }
	tthªad_°©e_t
;

41 
	sc_≥r_thªad_d©_


44 
GSLi°
 *
	msw_li°
;

45 
GSLi°
 *
	m≠p_li°
;

47 }
	tc_≥r_thªad_d©_t
;

49 
	sc_cmn_˘x


51 
±hªad_t
 
	mthªad
;

52 
evít_ba£
 *
	mba£
;

53 
thªad_°©e_t
 
	mrun_°©e
;

54 *
	mc_hdl
;

55 
	#THREAD_MAIN
 0

	)

56 
	#THREAD_WORKER
 1

	)

57 
	#THREAD_APP
 2

	)

58 
	#THREAD_VTY
 3

	)

59 
	mthªad_ty≥
;

62 
	sc_vty_˘x


64 
c_cmn_˘x
 
	mcmn_˘x
;

67 
	sc_≠p_˘x


69 
c_cmn_˘x
 
	mcmn_˘x
;

70 
	mthªad_idx
;

71 
c_c⁄n_t
 
	mmaö_wrk_c⁄n
;

72 
evít
 *
	m≠p_maö_timî_evít
;

73 
c_≥r_thªad_d©_t
 
	mthªad_d©a
;

76 
	sc_w‹kî_˘x


78 
c_cmn_˘x
 
	mcmn_˘x
;

79 
	mthªad_idx
;

81 
c_c⁄n_t
 
	mmaö_wrk_c⁄n
;

82 
evít
 *
	mw‹kî_timî_evít
;

84 
c_≥r_thªad_d©_t
 
	mthªad_d©a
;

87 
	sc_maö_˘x


89 
c_cmn_˘x
 
	mcmn_˘x
;

90 
	#C_MAX_THREADS
 16

	)

91 
	m¡hªads
;

92 
	#C_MAX_APP_THREADS
 4

	)

93 
	mn_≠±hªads
;

94 
	mswôch_lb_höt
;

95 
	m≠p_lb_höt
;

96 
	mmsg_lb_höt
;

97 
c_w‹kî_˘x
 **
	mw‹kî_poﬁ
;

98 
c_≠p_˘x
 **
	m≠p_poﬁ
;

100 
evít
 *
	mc_ac˚±_evít
;

101 
evít
 *
	mc_≠p_ac˚±_evít
;

102 
evít
 *
	mc_≠p_aux_ac˚±_evít
;

105 
c_≥r_thªad_d©_t
 
	mthªad_d©a
;

109 
	#c_tid_to_˘x_¶Ÿ
(
m
, 
tid
Ë(&m->
w‹kî_poﬁ
[tid])

	)

110 
	#c_tid_to_≠p_˘x_¶Ÿ
(
m
, 
tid
Ë(&m->
≠p_poﬁ
[tid])

	)

111 
	#C_THREAD_RUN
(
˘x
Ëdÿ{ 1Ë{ 
	`c_thªad_run
(˘x); } } 0)

	)

113 
	sthªad_Æloc_¨gs


115 
	m¡hªads
;

116 
	mn_≠±hªads
;

117 
	mthªad_ty≥
;

118 
	mthªad_idx
;

119 *
	mc_hdl
;

125 
	mC_IPC_THREAD_BASE
 = 0,

126 
	mC_IPC_EXT_APP_BASE
 = 100

127 }
	tc_ùc_msg_ba£_t
;

132 
	mC_IPC_THREAD_NEW_CONN_FD
 = 
C_IPC_THREAD_BASE
,

133 
	mC_IPC_THREAD_MAX
,

134 }
	tc_ùc_msg_thªad_ba£_t
;

137 
	sc_ùc_hdr


139 
	#C_IPC_THREAD
 0

	)

140 
	#C_IPC_EXT_APP
 1

	)

141 
uöt8_t
 
	mùc_ty≥
;

142 
uöt8_t
 
	mùc_msg_Àn
;

143 
uöt16_t
 
	mùc_msg_ty≥
;

146 
	#DEF_VALID_VAR
(
x
Ëx##
_vÆid
;

	)

147 
	#DEF_STRUCT_VALID_PAIR
(
ty≥
, 
v¨
) \

148 
uöt8_t
 
	`DEF_VALID_VAR
(
v¨
); \

149 
ty≥
 
v¨
; \

150 

	)

151 
	sc_ùc_thªad_msg


153 
DEF_STRUCT_VALID_PAIR
(, 
√w_c⁄n_fd
);

154 
DEF_STRUCT_VALID_PAIR
(, 
aux_c⁄n
);

157 
	#MIN_IPC_THREAD_MSG_SZ
 ((
c_ùc_hdr
) + \

158 (
c_ùc_thªad_msg
))

	)

160 
	#MAX_IPC_THREAD_MSG_SZ
 
MIN_IPC_THREAD_MSG_SZ


	)

162 
ölöe
 

163 
	$c_ùc_gë_d©a_Àn
(*
h_¨g
)

165 
c_ùc_hdr
 *
h
 = 
h_¨g
;

167  
h
->
ùc_msg_Àn
;

168 
	}
}

170 
ölöe
 
boﬁ


171 
	$c_ùc_hdr_vÆid
(*
h_¨g
)

173 
c_ùc_hdr
 *
h
 = 
h_¨g
;

175 i‡(
h
->
ùc_ty≥
 > 
C_IPC_EXT_APP
 ||

176 
h
->
ùc_msg_Àn
 > 
MAX_IPC_THREAD_MSG_SZ
 ||

177 
h
->
ùc_msg_ty≥
 >
C_IPC_THREAD_MAX
) {

178  
Ál£
;

181  
åue
;

182 
	}
}

184 
c_thªad_°¨t
(*
c_hdl
, 
¡hªads
, 
n_≠±hªads
);

185 
c_gë_√w_swôch_w‹kî
(
c_maö_˘x
 *
m_˘x
);

186 
c_gë_√w_≠p_w‹kî
(
c_maö_˘x
 *
m_˘x
);

187 
c_£t_thªad_dÊ_afföôy
();

189 
ölöe
 

190 
	$c_tid_to_ùc_wr_fd
(
c_maö_˘x
 *
m_˘x
, 
t_idx
)

192 
c_w‹kî_˘x
 *
w_˘x
;

194 
w_˘x
 = 
m_˘x
->
w‹kî_poﬁ
[
t_idx
];

195  
w_˘x
->
maö_wrk_c⁄n
.
fd
;

196 
	}
}

198 
ölöe
 

199 
	$c_tid_to_≠p_ùc_wr_fd
(
c_maö_˘x
 *
m_˘x
, 
t_idx
)

201 
c_≠p_˘x
 *
≠p_˘x
;

203 
≠p_˘x
 = 
m_˘x
->
≠p_poﬁ
[
t_idx
];

204  
≠p_˘x
->
maö_wrk_c⁄n
.
fd
;

205 
	}
}

	@mul/mul_thread_core.c

19 
	~"mul.h
"

21 
boﬁ
 
	gˇŒbk_execuãd
 = 
FALSE
;

22 *
c_thªad_maö
(*
¨g
);

23 
c_vty_thªad_run
(*
¨g
);

25 
mul_cc_thªad_evít_lo›_lib_suµ‹t
(
c_maö_˘x
 *
maö_˘x
);

28 
	$c_£t_thªad_dÊ_afföôy
()

30 
˘æ_hdl_t
 
˘æ_hdl
;

31 
˝u_£t_t
 
˝u
;

34 
	`CPU_ZERO
(&
˝u
);

35 
	`CPU_SET
(
˘æ_hdl
.
n_thªads
 + cål_hdl.
n_≠±hªads
, &
˝u
);

36 
	`±hªad_£èfföôy_≈
(
	`±hªad_£lf
(), (
˝u_£t_t
), &
˝u
);

39 
	}
}

43 
	$c_gë_√w_swôch_w‹kî
(
c_maö_˘x
 *
m_˘x
)

45 
m_˘x
->
swôch_lb_höt
 = (m_˘x->swôch_lb_höà+ 1Ë% m_˘x->
¡hªads
;

46  
m_˘x
->
swôch_lb_höt
;

47 
	}
}

50 
	$c_gë_√w_≠p_w‹kî
(
c_maö_˘x
 *
m_˘x
)

52 
m_˘x
->
≠p_lb_höt
 = (m_˘x->≠p_lb_höà+ 1Ë% m_˘x->
n_≠±hªads
;

53  
m_˘x
->
≠p_lb_höt
;

54 
	}
}

57 
	$c_Æloc_thªad_˘x
(
thªad_Æloc_¨gs
 *
¨gs
)

59 *
˘x
;

61 
¨gs
->
thªad_ty≥
) {

62 
THREAD_MAIN
:

64 
c_maö_˘x
 *
m_˘x
;

66 
	`c_log_debug
("(%sË¡hªads:%d", 
__FUNCTION__
, 
¨gs
->
¡hªads
);

67 
	`as£π
(
¨gs
->
n_≠±hªads
 >= 0 &&

68 
¨gs
->
n_≠±hªads
 <
C_MAX_APP_THREADS
);

69 
m_˘x
 = 
	`ˇŒoc
(1, (
c_maö_˘x
));

70 
	`as£π
(
m_˘x
);

72 
˘x
 = 
m_˘x
;

73 
m_˘x
->
¡hªads
 = 0;

74 
m_˘x
->
n_≠±hªads
 = 
¨gs
->n_appthreads;

75 
m_˘x
->
cmn_˘x
.
thªad_ty≥
 = 
¨gs
->thread_type;

78 
m_˘x
->
cmn_˘x
.
c_hdl
 = 
¨gs
->c_hdl;

81 
THREAD_WORKER
:

84 
	`c_log_debug
("WorkerÅhread creation --ÇotÅo beÉxecuted !!!");

85 
c_w‹kî_˘x
 *
w_˘x
;

86 
w_˘x
 = 
	`ˇŒoc
(1, (
c_w‹kî_˘x
));

87 
	`as£π
(
w_˘x
);

89 
˘x
 = 
w_˘x
;

90 
w_˘x
->
cmn_˘x
.
thªad_ty≥
 = 
¨gs
->thread_type;

93 
w_˘x
->
cmn_˘x
.
c_hdl
 = 
¨gs
->c_hdl;

95 
w_˘x
->
thªad_idx
 = 
¨gs
->thread_idx;

98 
THREAD_VTY
:

100 
c_vty_˘x
 *
vty_˘x
;

101 
vty_˘x
 = 
	`ˇŒoc
(1, (
c_vty_˘x
));

102 
	`as£π
(
vty_˘x
);

104 
˘x
 = 
vty_˘x
;

105 
vty_˘x
->
cmn_˘x
.
thªad_ty≥
 = 
¨gs
->thread_type;

106 
vty_˘x
->
cmn_˘x
.
c_hdl
 = 
¨gs
->c_hdl;

109 
THREAD_APP
:

111 
c_≠p_˘x
 *
≠p_˘x
;

112 
≠p_˘x
 = 
	`ˇŒoc
(1, (
c_≠p_˘x
));

113 
	`as£π
(
≠p_˘x
);

115 
˘x
 = 
≠p_˘x
;

116 
≠p_˘x
->
cmn_˘x
.
thªad_ty≥
 = 
¨gs
->thread_type;

117 
≠p_˘x
->
thªad_idx
 = 
¨gs
->thread_idx;

118 
≠p_˘x
->
cmn_˘x
.
c_hdl
 = 
¨gs
->c_hdl;

122  
NULL
;

126  
˘x
;

127 
	}
}

172 
	$c_maö_thªad_föÆ_öô
(
c_maö_˘x
 *
m_˘x
)

174 
evutû_sockë_t
 
c_li°íî
;

176 
c_vty_˘x
 *
vty_˘x
;

177 
c_≠p_˘x
 *
≠p_˘x
, **
≠p_˘x_¶Ÿ
;

178 
ùc_∑th_°r
[64];

179 
thªad_idx
;

181 
thªad_Æloc_¨gs
 
t_¨gs
 = { 0, 0,

182 
THREAD_WORKER
,

184 
m_˘x
->
cmn_˘x
.
c_hdl
 };

189 
m_˘x
->
cmn_˘x
.
ba£
 = 
	`evít_ba£_√w
();

190 
	`as£π
(
m_˘x
->
cmn_˘x
.
ba£
);

241 
	`c_log_debug
("(%sËã°ög!!!\n", 
__FUNCTION__
);

243 
m_˘x
->
≠p_poﬁ
 = 
	`ˇŒoc
(m_˘x->
n_≠±hªads
, (*));

244 
	`as£π
(
m_˘x
->
≠p_poﬁ
);

247 
thªad_idx
 = 0;Åhªad_idx < 
m_˘x
->
n_≠±hªads
;Åhread_idx++) {

248 
≠p_˘x_¶Ÿ
 = 
	`c_tid_to_≠p_˘x_¶Ÿ
(
m_˘x
, 
thªad_idx
);

250 
t_¨gs
.
thªad_ty≥
 = 
THREAD_APP
;

251 
t_¨gs
.
thªad_idx
 =Åhread_idx;

252 
≠p_˘x
 = 
	`c_Æloc_thªad_˘x
(&
t_¨gs
);

253 
	`as£π
(
≠p_˘x
);

255 *
≠p_˘x_¶Ÿ
 = 
≠p_˘x
;

257 
	`mem£t
(
ùc_∑th_°r
, 0, (ipc_path_str));

258 
	`¢¥ötf
(
ùc_∑th_°r
, 63, "%s%d", 
C_IPC_APP_PATH
, 
thªad_idx
);

259 i‡(
	`mkfifo
(
ùc_∑th_°r
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IWGRP
) == -1

260 && 
î∫o
 !
EEXIST
) {

261 
	`≥º‹
("");

262 
	`as£π
(0);

265 
	`±hªad_¸óã
(&
≠p_˘x
->
cmn_˘x
.
thªad
, 
NULL
, 
c_thªad_maö
,ápp_ctx);

267 
≠p_˘x
->
maö_wrk_c⁄n
.
c⁄n_ty≥
 = 
C_CONN_TYPE_FILE
;

268 
≠p_˘x
->
maö_wrk_c⁄n
.
fd
 = 
	`›í
(
ùc_∑th_°r
, 
O_WRONLY
);

269 
	`as£π
(
≠p_˘x
->
maö_wrk_c⁄n
.
fd
 > 0);

273 
t_¨gs
.
thªad_ty≥
 = 
THREAD_VTY
;

274 
vty_˘x
 = 
	`c_Æloc_thªad_˘x
(&
t_¨gs
);

275 
	`as£π
(
vty_˘x
);

276 
	`±hªad_¸óã
(&
vty_˘x
->
cmn_˘x
.
thªad
, 
NULL
, 
c_thªad_maö
, vty_ctx);

280 
c_li°íî
 = 
	`c_£rvî_sockë_¸óã
(
INADDR_ANY
, 
C_APP_LISTEN_PORT
);

281 
	`as£π
(
c_li°íî
);

282 
m_˘x
->
c_≠p_ac˚±_evít
 = 
	`evít_√w
(m_˘x->
cmn_˘x
.
ba£
, 
c_li°íî
,

283 
EV_READ
|
EV_PERSIST
,

284 
c_≠p_ac˚±
, (*)
m_˘x
);

285 
	`evít_add
(
m_˘x
->
c_≠p_ac˚±_evít
, 
NULL
);

287 
c_li°íî
 = 
	`c_£rvî_sockë_¸óã
(
INADDR_ANY
, 
C_APP_AUX_LISTEN_PORT
);

288 
	`as£π
(
c_li°íî
);

289 
m_˘x
->
c_≠p_aux_ac˚±_evít

	`evít_√w
(m_˘x->
cmn_˘x
.
ba£
, 
c_li°íî
,

290 
EV_READ
|
EV_PERSIST
,

291 
c_aux_≠p_ac˚±
, (*)
m_˘x
);

292 
	`evít_add
(
m_˘x
->
c_≠p_aux_ac˚±_evít
, 
NULL
);

294 
m_˘x
->
cmn_˘x
.
run_°©e
 = 
THREAD_STATE_RUNNING
;

296 
	`c_£t_thªad_dÊ_afföôy
();

298 
	`c_log_debug
("%s:Ñu¬ögÅid(%u)", 
__FUNCTION__
, ()
	`±hªad_£lf
());

301 
	}
}

310 
	$mul_cc_of_ac˚±
(
uöt64_t
 
dummy_dpid
, 
uöt8_t
 
dummy_auxid
,

311 
uöt32_t
 
swôch_ù
, 
uöt16_t
 
swôch_p‹t
)

313 
c_swôch_t
 *
√w_swôch
 = 
NULL
;

314 
c_maö_˘x
 *c_maö_˘x = 
˘æ_hdl
.
maö_˘x
;

316 
	`c_log_debug
("(%s) AcceptÑeceived dpid:%luáuxid:0x%x \n",

317 
__FUNCTION__
, 
dummy_dpid
, 
dummy_auxid
);

325 
√w_swôch
 = 
	`of_swôch_Æloc
(
c_maö_˘x
);

326 if(
√w_swôch
 =
NULL
)

328 
	`c_log_debug
("New switch context NOT created !!!\n");

329  
CC_OF_EMISC
;

332 
	`c_log_debug
("(%sËNew swôch c⁄ãxà¸óãd\n", 
__FUNCTION__
);

336 
√w_swôch
->
d©≠©h_id
 = 
dummy_dpid
;

337 
√w_swôch
->
is_dummy_d©≠©h_id
 = 
TRUE
;

338 
ö_addr
 *
swôch_addr
;

339 
swôch_addr
 = (
ö_addr
 *)&
swôch_ù
;

340 
	`¢¥ötf
(
√w_swôch
->
c⁄n
.
c⁄n_°r
, 
C_CONN_DESC_SZ
 -1, "%s:%d",

341 
	`öë_¡ﬂ
(*
swôch_addr
), 
swôch_p‹t
);

342 
	`c_log_debug
("(%s) switch:port str:%s\n",

343 
__FUNCTION__
, 
√w_swôch
->
c⁄n
.
c⁄n_°r
);

344 
√w_swôch
->
c_hdl
 = &
˘æ_hdl
;

351 
	`of_swôch_add
(
√w_swôch
);

355 
	`of_£nd_hñlo
(
√w_swôch
);

358 
	}
}

361 
	$mul_cc_of_dñëe
(
uöt64_t
 
dpid
, 
uöt8_t
 
auxid
)

363 
c_swôch_t
 *
sw
 = 
NULL
;

370 
	`of_swôch_dñ
(
sw
);

373 
	`of_swôch_put
(
sw
);

376 
	}
}

399 
	$mul_cc_ªcv_pkt
(
uöt64_t
 
dp_id
, 
uöt8_t
 
aux_id
, *
of_msg
, 
size_t
 
msg_Àn
)

402 
size_t
 
Àn
 = 0;

403 
cbuf
 *
b
 = 
NULL
;

405 
	`c_log_debug
("(%s) RecvÑeceived dpid:%luáuxid:%d msg_len:%d\n",

406 
__FUNCTION__
, 
dp_id
, 
aux_id
, 
msg_Àn
);

411 
msg_Àn
 = 1024;

412 if(
	`cbuf_li°_queue_Àn
(&
˘æ_hdl
.
c_maö_buf_hód
) > (1024 * 1024))

415 
	`c_log_îr
("(%s) MainÅhread buffer queue is full\n");

421 
b
 = 
	`Æloc_cbuf
(
msg_Àn
);

423 if(
b
 =
NULL
)

425 
	`c_log_îr
("(%s) BufferÇodeÇotállocated dp-id:0x%xáux-id:0x%x\n",

426 
__FUNCTION__
, 
dp_id
, 
aux_id
);

427  
CC_OF_ENOMEM
;

435 
b
->
dpid
 = 
dp_id
;

437 if(
msg_Àn
 != 0)

439 
cbuf
 *
√w
 = 
NULL
;

440 
√w
 = 
	`Æloc_cbuf
(
msg_Àn
);

442 
√w
->
dpid
 = 
dp_id
;

444 
	`mem˝y
(
√w
->
d©a
, 
of_msg
, 
msg_Àn
);

445 
	`cbuf_put
(
√w
, 
msg_Àn
);

447 
	`‰ì
(
b
);

448 
b
 = 
√w
;

456 
	`cbuf_li°_queue_èû
(&
˘æ_hdl
.
c_maö_buf_hód
, 
b
);

467 
	}
}

480 
	$mul_cc_thªad_evít_lo›_lib_suµ‹t
(
c_maö_˘x
 *
maö_˘x
)

482 
uöt32_t
 
cuº_Àn
 = 0;

483 
uöt32_t
 
queue_Àn
 = 0;

484 
c_swôch_t
 *
sw
 = 
NULL
;

485 
cbuf
 *
b
 = 
NULL
;

488 
	`c_log_debug
("(%s)Åid(%u) \n",

489 
__FUNCTION__
, ()
	`±hªad_£lf
());

500 
queue_Àn
 = 
	`cbuf_li°_queue_Àn
(&
˘æ_hdl
.
c_maö_buf_hód
);

503 if(
queue_Àn
 != 0)

507 
b
 = 
	`cbuf_li°_dequeue
(&
˘æ_hdl
.
c_maö_buf_hód
);

508 
cuº_Àn
 = 
	`cbuf_li°_queue_Àn
(&
˘æ_hdl
.
c_maö_buf_hód
);

509 
	`c_log_debug
("(%sËcuº queuêÀn:%d", 
__FUNCTION__
, 
cuº_Àn
);

510 if(
b
 =
NULL
)

513 
	`c_log_debug
("(%s) Message is NULL curr_queue_len:%d\n",

514 
__FUNCTION__
, 
cuº_Àn
);

518 
	`c_log_debug
("(%sËb_Àn:%d", 
__FUNCTION__
, 
b
->
Àn
);

520 if(
b
->
Àn
)

522 i‡(!
	`of_hdr_vÆid
(
b
->
d©a
))

524 
	`c_log_îr
("(%s) Corrupted header dpid:%lu b_len:%d queue_len:%d",

525 
__FUNCTION__
, 
b
->
dpid
, b->
Àn
, 
cuº_Àn
);

531 
oÂ_hódî
 *
h
;

532 
h
 = (*)
b
->
d©a
;

533 
	`c_log_debug
("(%sËxid:0x%x VALID!!!",
__FUNCTION__
, 
h
->
xid
);

541 
	`c_log_debug
("(%s) GetÅhe switch context dp_id:%luÜen:%d\n",

542 
__FUNCTION__
, 
b
->
dpid
, 
cuº_Àn
);

544 
sw
 = 
	`of_swôch_gë
(&
˘æ_hdl
, 
b
->
dpid
);

545 if(
sw
 !
NULL
)

548 
	`of_swôch_ªcv_msg
(
sw
, 
b
);

553 
	`c_log_debug
("(%s) couldÇot get switch context for dp_id:%lu\n",

554 
__FUNCTION__
, 
b
->
dpid
);

561 
	`u¶ìp
(1000);

565 
	}
}

568 
	$c_thªad_evít_lo›
(
c_cmn_˘x
 *
cmn_˘x
)

570 
	`c_log_debug
("%s:Åid(%u)", 
__FUNCTION__
, ()
	`±hªad_£lf
());

571  
	`evít_ba£_di•©ch
(
cmn_˘x
->
ba£
);

572 
	}
}

575 
	$c_maö_thªad_run
(
c_maö_˘x
 *
m_˘x
)

578 
m_˘x
->
cmn_˘x
.
run_°©e
) {

579 
THREAD_STATE_PRE_INIT
:

581 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

582 
m_˘x
->
cmn_˘x
.
run_°©e
 = 
THREAD_STATE_FINAL_INIT
;

584 
THREAD_STATE_FINAL_INIT
:

585  
	`c_maö_thªad_föÆ_öô
(
m_˘x
);

586 
THREAD_STATE_RUNNING
:

587  
	`mul_cc_thªad_evít_lo›_lib_suµ‹t
((*)
m_˘x
);

590 
	}
}

615 
	$c_≠p_thªad_¥e_öô
(
c_≠p_˘x
 *
≠p_˘x
)

617 
ùc_∑th_°r
[64];

619 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

620 
≠p_˘x
->
cmn_˘x
.
ba£
 = 
	`evít_ba£_√w
();

621 
	`as£π
(
≠p_˘x
->
cmn_˘x
.
ba£
);

623 
	`¢¥ötf
(
ùc_∑th_°r
, 63, "%s%d", 
C_IPC_APP_PATH
, 
≠p_˘x
->
thªad_idx
);

624 
≠p_˘x
->
maö_wrk_c⁄n
.
rd_fd
 = 
	`›í
(
ùc_∑th_°r
,

625 
O_RDONLY
 | 
O_NONBLOCK
);

626 
	`as£π
(
≠p_˘x
->
maö_wrk_c⁄n
.
rd_fd
 > 0);

628 
≠p_˘x
->
maö_wrk_c⁄n
.
rd_evít
 = 
	`evít_√w
◊µ_˘x->
cmn_˘x
.
ba£
,

629 
≠p_˘x
->
maö_wrk_c⁄n
.
rd_fd
,

630 
EV_READ
|
EV_PERSIST
,

631 
c_w‹kî_ùc_ªad
, (*)
≠p_˘x
);

632 
	`evít_add
(
≠p_˘x
->
maö_wrk_c⁄n
.
rd_evít
, 
NULL
);

633 
≠p_˘x
->
cmn_˘x
.
run_°©e
 = 
THREAD_STATE_FINAL_INIT
;

636 
	}
}

639 
	$c_≠p_thªad_föÆ_öô
(
c_≠p_˘x
 *
≠p_˘x
)

641 
˘æ_hdl_t
 
˘æ_hdl
;

642 
˝u_£t_t
 
˝u
;

645 
	`CPU_ZERO
(&
˝u
);

646 
	`CPU_SET
(
≠p_˘x
->
thªad_idx
 + 
˘æ_hdl
.
n_thªads
, &
˝u
);

647 
	`±hªad_£èfföôy_≈
(
	`±hªad_£lf
(), (
˝u_£t_t
), &
˝u
);

649 
	`c_buûtö_≠p_°¨t
(
≠p_˘x
);

650 
≠p_˘x
->
cmn_˘x
.
run_°©e
 = 
THREAD_STATE_RUNNING
;

653 
	}
}

656 
	$c_≠p_thªad_run
(
c_≠p_˘x
 *
≠p_˘x
)

658 
≠p_˘x
->
cmn_˘x
.
run_°©e
) {

659 
THREAD_STATE_PRE_INIT
:

660  
	`c_≠p_thªad_¥e_öô
(
≠p_˘x
);

661 
THREAD_STATE_FINAL_INIT
:

662  
	`c_≠p_thªad_föÆ_öô
(
≠p_˘x
);

663 
THREAD_STATE_RUNNING
:

664  
	`c_thªad_evít_lo›
((*)
≠p_˘x
);

667 
	}
}

678 
	$c_thªad_run
(*
˘x
)

680 
c_cmn_˘x
 *
cmn_˘x
 = 
˘x
;

682 
cmn_˘x
->
thªad_ty≥
) {

683 
THREAD_MAIN
:

685  
	`c_maö_thªad_run
(
˘x
);

690 
THREAD_VTY
:

691  
	`c_vty_thªad_run
(
˘x
);

692 
THREAD_APP
:

693  
	`c_≠p_thªad_run
(
˘x
);

699 
	}
}

702 
	$c_thªad_maö
(*
¨g
)

704 
	`C_THREAD_RUN
(
¨g
);

705 
	}
}

708 
	$c_thªad_°¨t
(*
hdl
, 
¡hªads
, 
n_≠±hªads
)

710 
˘æ_hdl_t
 *
˘æ_hdl
 = 
hdl
;

711 
thªad_Æloc_¨gs
 
¨gs
 = { 0 ,

712 
n_≠±hªads
, 
THREAD_MAIN
, 0, 
hdl
 };

722 
c_maö_˘x
 *
maö_˘x
 = 
	`c_Æloc_thªad_˘x
(&
¨gs
);

723 
˘æ_hdl
->
maö_˘x
 = (*)main_ctx;

726 
	`±hªad_¸óã
(&
maö_˘x
->
cmn_˘x
.
thªad
, 
NULL
, 
c_thªad_maö
, main_ctx);

728 
	}
}

	@mul/mul_vty.c

19 
	~"mul.h
"

20 
	~"mul_vty.h
"

22 
c_vty_thªad_run
(*
¨g
);

24 *
	gvty_addr
 = 
NULL
;

25 
	gvty_p‹t
 = 
C_VTY_PORT
;

26 
˘æ_hdl_t
 
˘æ_hdl
;

28 c⁄° *
	gof_swôch_°©es
[] = {

33 
NULL
,

37 
	$oÂ_ˇ∑bûôõs_to°r
(*
°rög
, 
uöt32_t
 
ˇ∑bûôõs
)

39 i‡(
ˇ∑bûôõs
 == 0) {

40 
	`°r˝y
(
°rög
, "No capabilities\n");

43 i‡(
ˇ∑bûôõs
 & 
OFPC_FLOW_STATS
) {

44 
	`°rˇt
(
°rög
, "FLOW_STATS ");

46 i‡(
ˇ∑bûôõs
 & 
OFPC_TABLE_STATS
) {

47 
	`°rˇt
(
°rög
, "TABLE_STATS ");

49 i‡(
ˇ∑bûôõs
 & 
OFPC_PORT_STATS
) {

50 
	`°rˇt
(
°rög
, "PORT_STATS ");

52 i‡(
ˇ∑bûôõs
 & 
OFPC_STP
) {

53 
	`°rˇt
(
°rög
, "STP ");

55 i‡(
ˇ∑bûôõs
 & 
OFPC_IP_REASM
) {

56 
	`°rˇt
(
°rög
, "IP_REASM ");

58 i‡(
ˇ∑bûôõs
 & 
OFPC_QUEUE_STATS
) {

59 
	`°rˇt
(
°rög
, "QUEUE_STATS ");

61 i‡(
ˇ∑bûôõs
 & 
OFPC_ARP_MATCH_IP
) {

62 
	`°rˇt
(
°rög
, "ARP_MATCH_IP");

64 
	}
}

66 
UNUSED


67 
	$oÂ_p‹t_„©uªs_to°r
(*
°rög
, 
uöt32_t
 
„©uªs
)

69 i‡(
„©uªs
 == 0) {

70 
	`°r˝y
(
°rög
, "Unsupported\n");

73 i‡(
„©uªs
 & 
OFPPF_10MB_HD
) {

74 
	`°rˇt
(
°rög
, "10MB-HD ");

76 i‡(
„©uªs
 & 
OFPPF_10MB_FD
) {

77 
	`°rˇt
(
°rög
, "10MB-FD ");

79 i‡(
„©uªs
 & 
OFPPF_100MB_HD
) {

80 
	`°rˇt
(
°rög
, "100MB-HD ");

82 i‡(
„©uªs
 & 
OFPPF_100MB_FD
) {

83 
	`°rˇt
(
°rög
, "100MB-FD ");

85 i‡(
„©uªs
 & 
OFPPF_1GB_HD
) {

86 
	`°rˇt
(
°rög
, "1GB-HD ");

88 i‡(
„©uªs
 & 
OFPPF_1GB_FD
) {

89 
	`°rˇt
(
°rög
, "1GB-FD ");

91 i‡(
„©uªs
 & 
OFPPF_10GB_FD
) {

92 
	`°rˇt
(
°rög
, "10GB-FD ");

94 i‡(
„©uªs
 & 
OFPPF_COPPER
) {

95 
	`°rˇt
(
°rög
, "COPPER ");

97 i‡(
„©uªs
 & 
OFPPF_FIBER
) {

98 
	`°rˇt
(
°rög
, "FIBER ");

100 i‡(
„©uªs
 & 
OFPPF_AUTONEG
) {

101 
	`°rˇt
(
°rög
, "AUTO_NEG ");

103 i‡(
„©uªs
 & 
OFPPF_PAUSE
) {

104 
	`°rˇt
(
°rög
, "AUTO_PAUSE ");

106 i‡(
„©uªs
 & 
OFPPF_PAUSE_ASYM
) {

107 
	`°rˇt
(
°rög
, "AUTO_PAUSE_ASYM ");

109 
	}
}

112 
	$oÂ_p‹t_c⁄fig_to°r
(*
°rög
, 
uöt32_t
 
c⁄fig
)

114 i‡(
c⁄fig
 & 
OFPPC_PORT_DOWN
) {

115 
	`°rˇt
(
°rög
, " PORT_DOWN");

117 
	`°rˇt
(
°rög
, " PORT_UP");

119 
	}
}

122 
	$of_show_swôch_öfo
(*
k
, *
v
 
UNUSED
, *
¨g
)

124 
c_swôch_t
 *
sw
 = 
k
;

125 
vty
 *vty = 
¨g
;

128 
	`vty_out
 (
vty
, "0x%012llx %-11s %-26s %-8d %s",

129 
sw
->
d©≠©h_id
,

130 
of_swôch_°©es
[
sw
->
swôch_°©e
],

131 
sw
->
c⁄n
.
c⁄n_°r
,

132 
sw
->
n_p‹ts
,

133 
VTY_NEWLINE
);

134 
	}
}

137 
DEFUN
 (
show_of_swôch
,

138 
show_of_swôch_cmd
,

140 
SHOW_STR


145 
vty_out
 (
vty
,

148 
VTY_NEWLINE
, VTY_NEWLINE);

150 
vty_out
 (
vty
,

153 
VTY_NEWLINE
, VTY_NEWLINE);

155 
of_swôch_åavî£_Æl
(&
˘æ_hdl
, 
of_show_swôch_öfo
, 
vty
);

157 
vty_out
 (
vty
,

160 
VTY_NEWLINE
, VTY_NEWLINE);

162  
	gCMD_SUCCESS
;

166 
DEFUN
 (
show_of_swôch_dëaû
,

167 
show_of_swôch_dëaû_cmd
,

169 
SHOW_STR


174 
uöt64_t
 
	gdp_id
;

175 
c_swôch_t
 *
	gsw
;

176 c⁄° 
oÂ_phy_p‹t
 *
	gp_öfo
;

177 
	g°rög
[
OFP_PRINT_MAX_STRLEN
];

178 
uöt32_t
 
	gi
;

180 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

182 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

184 i‡(!
	gsw
) {

185  
	gCMD_SUCCESS
;

188 
vty_out
 (
vty
,

191 
VTY_NEWLINE
, VTY_NEWLINE);

192 
vty_out
 (
vty
, "D©≠©h-id : 0x%Œx%s", ()
dp_id
, 
VTY_NEWLINE
);

193 
vty_out
 (
vty
, "OFP-Vîsi⁄ : 0x%d%s", 
sw
->
vîsi⁄
, 
VTY_NEWLINE
);

194 
vty_out
 (
vty
, "Buf„r† : %d%s", 
sw
->
n_buf„rs
, 
VTY_NEWLINE
);

195 
vty_out
 (
vty
, "TabÀ† : %d%s", 
sw
->
n_èbÀs
, 
VTY_NEWLINE
);

196 
vty_out
 (
vty
, "A˘i⁄† : 0x%x%s", 
sw
->
a˘i⁄s
, 
VTY_NEWLINE
);

198 
mem£t
(
°rög
, 0, 
OFP_PRINT_MAX_STRLEN
);

199 
oÂ_ˇ∑bûôõs_to°r
(
°rög
, 
sw
->
ˇ∑bûôõs
);

201 
vty_out
 (
vty
, "C≠abûôõs: 0x%x(%s)%s", 
sw
->
ˇ∑bûôõs
,

202 
°rög
, 
VTY_NEWLINE
);

203 
vty_out
 (
vty
, "Num P‹t† : %d%s", 
sw
->
n_p‹ts
, 
VTY_NEWLINE
);

205 
vty_out
 (
vty
,

208 
VTY_NEWLINE
);

209 
vty_out
 (
vty
, " Port info%s",

210 
VTY_NEWLINE
);

211 
vty_out
 (
vty
,

214 
VTY_NEWLINE
);

216 
	gi
 = 0; i < 
	gOFSW_MAX_PORTS
; i ++) {

217 i‡(
	gsw
->
	gp‹ts
[
i
].
	gvÆid
) {

218 
	gp_öfo
 = &
sw
->
p‹ts
[
i
].
p_öfo
;

220 
mem£t
(
°rög
, 0, 
OFP_PRINT_MAX_STRLEN
);

221 
oÂ_p‹t_c⁄fig_to°r
(
°rög
, 
p_öfo
->
c⁄fig
);

224 
vty_out
 (
vty
, "%-6d %-10s %02x:%02x:%02x:%02x:%02x:%02x %-15s",

225 
p_öfo
->
p‹t_no
,Ö_öfo->
«me
,

226 
p_öfo
->
hw_addr
[0],Ö_info->hw_addr[1],Ö_info->hw_addr[2],

227 
p_öfo
->
hw_addr
[3],Ö_info->hw_addr[4],Ö_info->hw_addr[5],

228 
°rög
);

230 
mem£t
(
°rög
, 0, 
OFP_PRINT_MAX_STRLEN
);

231 
vty_out
 (
vty
, "%s", 
VTY_NEWLINE
);

234 
vty_out
 (
vty
,

237 
VTY_NEWLINE
, VTY_NEWLINE);

239 
of_swôch_put
(
sw
);

241  
	gCMD_SUCCESS
;

245 
cmd_node
 
	gÊow_a˘i⁄s_node
 =

247 
FLOW_NODE
,

250 
NULL
,

251 
NULL


254 
	svty_Êow_a˘i⁄_∑rms


256 *
	msw
;

257 *
	mÊ
;

258 
uöt8_t
 
	ma˘i⁄_Àn
;

259 *
	ma˘i⁄s
;

260 
uöt32_t
 
	mwûdˇrds
;

261 
boﬁ
 
	mdr›_pkt
;

265 
	$vty_of_¥öt_Êow
(*
¨g
, 
c_Ê_íåy_t
 *
ít
)

267 *
Êow_¥öt_°r
 = 
NULL
;

268 *
a˘i⁄s_¥öt_°r
 = 
NULL
;

269 *
wc_¥öt_°r
 = 
NULL
;

270 *
Êow_≠p_°r
 = 
NULL
;

271 
vty
 *vty = 
¨g
;

273 
Êow_¥öt_°r
 = 
	`of_dump_Êow
(&
ít
->
Ê
,É¡->
FL_WILDCARDS
);

274 
	`vty_out
(
vty
, "%s\r\n", 
Êow_¥öt_°r
);

276 
a˘i⁄s_¥öt_°r
 = 
	`of_dump_a˘i⁄s
(
ít
->
a˘i⁄s
,É¡->
a˘i⁄_Àn
);

277 
	`vty_out
(
vty
, "%s\r\n", 
a˘i⁄s_¥öt_°r
);

279 
	`vty_out
(
vty
, "%s: %hu\r\n", "Prio", 
ít
->
FL_PRIO
);

280 
	`vty_out
(
vty
, "%s: %s %s %s\r\n", "Flags",

281 
ít
->
FL_FLAGS
 & 
C_FL_ENT_STATIC
 ? "static":"dynamic",

282 
ít
->
FL_FLAGS
 & 
C_FL_ENT_CLONE
 ? "clone": "no-clone",

283 
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
 ? "local": "non-local");

285 i‡(!(
ít
->
FL_FLAGS
 & 
C_FL_ENT_CLONE
Ë&& (ít->FL_FLAGS & 
C_FL_ENT_GSTATS
)

286 && !(
ít
->
FL_FLAGS
 & 
C_FL_ENT_LOCAL
)) {

287 
	`vty_out
(
vty
, "%s: Bytes %llu Packets %llu\r\n", "Stats",

288 ()
ít
->
Ê_°©s
.
byã_cou¡
,

289 ()
ít
->
Ê_°©s
.
pkt_cou¡
);

291 
	`vty_out
(
vty
, "%s Bps %f Pps %f\r\n", " ",

292 ()
ít
->
Ê_°©s
.
bps
, (Î¡->Ê_°©s.
µs
);

295 
Êow_≠p_°r
 = 
	`of_dump_Ê_≠p
(
ít
);

296 
	`vty_out
(
vty
, "%s\r\n", 
Êow_≠p_°r
);

298 
	`vty_out
 (
vty
,

301 
VTY_NEWLINE
, VTY_NEWLINE);

304 i‡(
Êow_¥öt_°r
Ë
	`‰ì
(flow_print_str);

305 i‡(
a˘i⁄s_¥öt_°r
Ë
	`‰ì
(actions_print_str);

306 i‡(
wc_¥öt_°r
Ë
	`‰ì
(wc_print_str);

307 i‡(
Êow_≠p_°r
Ë
	`‰ì
(flow_app_str);

308 
	}
}

311 
DEFUN
 (
show_of_swôch_Êow
,

312 
show_of_swôch_Êow_cmd
,

314 
SHOW_STR


319 
uöt64_t
 
	gdp_id
;

320 
c_swôch_t
 *
	gsw
;

322 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

324 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

326 i‡(!
	gsw
) {

327  
	gCMD_SUCCESS
;

330 
of_Êow_åavî£_tbl_Æl
(
sw
, 
vty
, 
vty_of_¥öt_Êow
);

332 
of_swôch_put
(
sw
);

334  
	gCMD_SUCCESS
;

337 
DEFUN
 (
of_add_ouçut_a˘i⁄
,

338 
of_add_ouçut_a˘i⁄_cmd
,

344 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

345 
uöt8_t
 *
	ga˘_wr_±r
;

347 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

348 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_ouçut
((**)&
a˘_wr_±r
,

349 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

350 
©oi
(
¨gv
[0]));

352  
	gCMD_SUCCESS
;

355 
DEFUN
 (
of_add_£t_vid_a˘i⁄
,

356 
of_add_£t_vid_a˘i⁄_cmd
,

362 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

363 
uöt8_t
 *
	ga˘_wr_±r
;

365 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

366 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_vid
((**)&
a˘_wr_±r
,

367 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

368 
°πouŒ
(
¨gv
[0], 
NULL
, 10));

370  
	gCMD_SUCCESS
;

373 
DEFUN
 (
of_add_°rù_vœn_a˘i⁄
,

374 
of_add_°rù_vœn_a˘i⁄_cmd
,

379 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

380 
uöt8_t
 *
	ga˘_wr_±r
;

382 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

383 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_°rù_vœn
((**)&
a˘_wr_±r
,

384 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
);

386  
	gCMD_SUCCESS
;

389 
DEFUN
 (
of_add_£t_vp˝_a˘i⁄
,

390 
of_add_£t_vp˝_a˘i⁄_cmd
,

396 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

397 
uöt8_t
 *
	ga˘_wr_±r
;

399 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

400 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_vœn_p˝
((**)&
a˘_wr_±r
,

401 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

402 
°πouŒ
(
¨gv
[0], 
NULL
, 10));

404  
	gCMD_SUCCESS
;

408 
DEFUN
 (
of_add_£t_dmac_a˘i⁄
,

409 
of_add_£t_dmac_a˘i⁄_cmd
,

415 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

416 
uöt8_t
 *
	ga˘_wr_±r
;

417 
uöt8_t
 
	gdmac
[6];

418 *
	gmac_°r
, *
	g√xt
 = 
NULL
;

419 
	gi
 = 0;

422 
	gmac_°r
 = (*)
¨gv
[0];

423 
	gi
 = 0; i < 6; i++) {

424 
	gdmac
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

425 if(
	gmac_°r
 =
√xt
)

427 
	gmac_°r
 = 
√xt
 + 1;

430 i‡(
	gi
 != 6) {

431 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

432  
	gCMD_WARNING
;

436 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

437 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_dmac
((**)&
a˘_wr_±r
,

438 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

439 
dmac
);

441  
	gCMD_SUCCESS
;

444 
DEFUN
 (
of_add_£t_smac_a˘i⁄
,

445 
of_add_£t_smac_a˘i⁄_cmd
,

451 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

452 
uöt8_t
 *
	ga˘_wr_±r
;

453 
uöt8_t
 
	gsmac
[6];

454 *
	gmac_°r
, *
	g√xt
 = 
NULL
;

455 
	gi
 = 0;

458 
	gmac_°r
 = (*)
¨gv
[0];

459 
	gi
 = 0; i < 6; i++) {

460 
	gsmac
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

461 if(
	gmac_°r
 =
√xt
)

463 
	gmac_°r
 = 
√xt
 + 1;

466 i‡(
	gi
 != 6) {

467 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

468  
	gCMD_WARNING
;

472 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

473 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_smac
((**)&
a˘_wr_±r
,

474 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

475 
smac
);

477  
	gCMD_SUCCESS
;

480 
DEFUN
 (
of_add_£t_nw_ßddr_a˘i⁄
,

481 
of_add_£t_nw_ßddr_a˘i⁄_cmd
,

487 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

488 
uöt8_t
 *
	ga˘_wr_±r
;

489 
ö_addr
 
	gù_addr
;

491 i‡(
öë_©⁄
(
¨gv
[0], &
ù_addr
) <= 0) {

492 
vty_out
(
vty
, "MÆf‹med i∞addªss%s", 
VTY_NEWLINE
);

493  
	gCMD_WARNING
;

495 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

496 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_nw_ßddr
((**)&
a˘_wr_±r
,

497 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

498 
¡ohl
(
ù_addr
.
s_addr
));

500  
	gCMD_SUCCESS
;

503 
DEFUN
 (
of_add_£t_nw_daddr_a˘i⁄
,

504 
of_add_£t_nw_daddr_a˘i⁄_cmd
,

510 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

511 
uöt8_t
 *
	ga˘_wr_±r
;

512 
ö_addr
 
	gù_addr
;

514 i‡(
öë_©⁄
(
¨gv
[0], &
ù_addr
) <= 0) {

515 
vty_out
(
vty
, "MÆf‹med i∞addªss%s", 
VTY_NEWLINE
);

516  
	gCMD_WARNING
;

518 
	ga˘_wr_±r
 = (
uöt8_t
 *)
¨gs
->
a˘i⁄s
 +árgs->
a˘i⁄_Àn
;

519 
	g¨gs
->
	ga˘i⁄_Àn
 +
of_make_a˘i⁄_£t_nw_daddr
((**)&
a˘_wr_±r
,

520 
OF_MAX_ACTION_LEN
 - 
¨gs
->
a˘i⁄_Àn
,

521 
¡ohl
(
ù_addr
.
s_addr
));

523  
	gCMD_SUCCESS
;

526 
DEFUN
 (
of_add_dr›_a˘i⁄
,

527 
of_add_dr›_a˘i⁄_cmd
,

532 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

535 
	g¨gs
->
	gdr›_pkt
 = 
åue
;

537  
	gCMD_SUCCESS
;

542 
DEFUN
 (
Êow_a˘i⁄s
,

543 
Êow_a˘i⁄s_cmd
,

548 
	gvty
->
	gnode
 = 
FLOW_NODE
;

550  
	gCMD_SUCCESS
;

554 
DEFUN
 (
Êow_a˘i⁄s_commô
,

555 
Êow_a˘i⁄s_commô_cmd
,

559 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

560 
of_Êow_mod_∑øms
 
	gÊ_∑rms
;

561 
c_swôch_t
 *
	gsw
;

562 *
	g≠p
;

564 i‡(
	g¨gs
) {

565 
	gsw
 = 
¨gs
->
sw
;

566 i‡((
	g¨gs
->
	ga˘i⁄_Àn
 >4 || 
¨gs
->
dr›_pkt
)&&árgs->
sw
) {

568 
≠p
 = 
c_≠p_gë
(&
˘æ_hdl
, 
C_VTY_NAME
);

569 i‡(
	g≠p
 && 
	gsw
->
	gswôch_°©e
 =
SW_REGISTERED
) {

572 
mem£t
(&
Ê_∑rms
, 0, (fl_parms));

574 
	gÊ_∑rms
.
	gÊow
 = 
¨gs
->
Ê
;

575 i‡(!
	g¨gs
->
	gdr›_pkt
) {

576 
	gÊ_∑rms
.
	ga˘i⁄s
 = 
¨gs
->
a˘i⁄s
;

577 
	gÊ_∑rms
.
	ga˘i⁄_Àn
 = 
¨gs
->
a˘i⁄_Àn
;

578 
	gÊ_∑rms
.
	g¥io
 = 
C_FL_PRIO_DFL
;

580 i‡(
	g¨gs
->
	ga˘i⁄s
Ë
‰ì
(
¨gs
->
a˘i⁄s
);

581 
	gÊ_∑rms
.
	g¥io
 = 
C_FL_PRIO_DRP
;

582 
vty_out
(
vty
, "IgnoringállÇon-dropáctions ifány%s",

583 
VTY_NEWLINE
);

585 
	gÊ_∑rms
.
	gwûdˇrds
 = 
¨gs
->
wûdˇrds
;

586 
	gÊ_∑rms
.
	gbuf„r_id
 = (
uöt32_t
)(-1);

587 
	gÊ_∑rms
.
	gÊags
 = 
C_FL_ENT_GSTATS
 | 
C_FL_ENT_STATIC
;

588 
	gÊ_∑rms
.
	g¥io
 = 
C_FL_PRIO_DFL
;

589 
	gÊ_∑rms
.
	gtbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

590 
	gÊ_∑rms
.
	g≠p_ow√r
 = 
≠p
;

591 
of_Êow_add
(
¨gs
->
sw
, &
Ê_∑rms
);

593 i‡(
	g≠p
Ë
c_≠p_put
(
≠p
);

594 
vty_out
(
vty
, "C™'àgë vtyáµ h™dÀ%s", 
VTY_NEWLINE
);

596 
vty_out
(
vty
, "Nÿa˘i⁄†added.FlowÇŸádded%s", 
VTY_NEWLINE
);

599 i‡(
	g¨gs
->
	gÊ
) {

600 
‰ì
(
¨gs
->
Ê
);

602 
‰ì
(
¨gs
);

603 
	gvty
->
	gödex
 = 
NULL
;

606 
	gvty
->
	gnode
 = 
CONFIG_NODE
;

607  
	gCMD_SUCCESS
;

612 
DEFUN
 (
Êow_a˘i⁄s_exô
,

613 
Êow_a˘i⁄s_exô_cmd
,

617 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
 = 
vty
->
ödex
;

619 i‡(
	g¨gs
) {

620 
‰ì
(
¨gs
->
Ê
);

621 
‰ì
(
¨gs
);

624 
	gvty
->
	gnode
 = 
CONFIG_NODE
;

625  
	gCMD_SUCCESS
;

628 
DEFUN
 (
of_Êow_dñ_exm
,

629 
of_Êow_dñ_exm_cmd
,

662 
	gi
;

663 
uöt64_t
 
	gdp_id
;

664 
c_swôch_t
 *
	gsw
;

665 
Êow
 *
	gÊow
;

666 
	gªt
;

667 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

668 
of_Êow_mod_∑øms
 
	gÊ_∑rms
;

669 *
	g≠p
;

671 
mem£t
(&
Ê_∑rms
, 0, (fl_parms));

673 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

674 
as£π
(
Êow
);

676 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

677 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

678 i‡(!
	gsw
) {

679 
‰ì
(
Êow
);

680  
	gCMD_WARNING
;

683 
	gªt
 = 
öë_©⁄
(
¨gv
[1], (
ö_addr
 *)&
Êow
->
nw_d°
);

684 i‡(
	gªt
 <= 0) {

685 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

686 
	gdîef_‰ì_îr_out
;

689 
	gªt
 = 
öë_©⁄
(
¨gv
[2], (
ö_addr
 *)&
Êow
->
nw_§c
);

690 i‡(
	gªt
 <= 0) {

691 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

692 
	gdîef_‰ì_îr_out
;

695 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

696 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

697 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

698 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

700 
	gmac_°r
 = (*)
¨gv
[7];

701 
	gi
 = 0; i < 6; i++) {

702 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

703 if(
	gmac_°r
 =
√xt
)

705 
	gmac_°r
 = 
√xt
 + 1;

708 i‡(
	gi
 != 6) {

709 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

710 
	gdîef_‰ì_îr_out
;

713 
	gmac_°r
 = (*)
¨gv
[8];

714 
	gi
 = 0; i < 6; i++) {

715 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

716 if(
	gmac_°r
 =
√xt
)

718 
	gmac_°r
 = 
√xt
 + 1;

721 i‡(
	gi
 != 6) {

722 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

723 
	gdîef_‰ì_îr_out
;

726 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

727 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

728 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

729 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

731 
	gÊ_∑rms
.
	gÊow
 = 
Êow
;

732 
	gÊ_∑rms
.
	g¥io
 = 
C_FL_PRIO_DFL
;

733 
	gÊ_∑rms
.
	gtbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

735 i‡(!(
	g≠p
 = 
c_≠p_gë
(&
˘æ_hdl
, 
C_VTY_NAME
))) {

736 
	gdîef_‰ì_îr_out
;

739 
	gÊ_∑rms
.
	g≠p_ow√r
 = 
≠p
;

741 i‡(
of_Êow_dñ
(
sw
, &
Ê_∑rms
)) {

742 
vty_out
(
vty
, "Flow delete failed\r\n");

744 
vty_out
(
vty
, "Flow deleted\r\n");

747 
c_≠p_put
(
≠p
);

748 
of_swôch_put
(
sw
);

750 
‰ì
(
Êow
);

752  
	gCMD_SUCCESS
;

754 
	gdîef_‰ì_îr_out
:

755 
‰ì
(
Êow
);

756 
of_swôch_put
(
sw
);

757  
	gCMD_WARNING
;

761 
DEFUN_NOSH
 (
of_Êow_vty_add
,

762 
of_Êow_vty_add_cmd
,

796 
	gi
;

797 
uöt64_t
 
	gdp_id
;

798 
c_swôch_t
 *
	gsw
;

799 
Êow
 *
	gÊow
;

800 
	gªt
;

801 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

802 
uöt32_t
 
	gwûdˇrds
 = 0;

803 
¥efix_ùv4
 
	gd°_p
, 
	g§c_p
;

804 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
;

805 
uöt32_t
 
	gnmask
;

807 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

808 
as£π
(
Êow
);

810 
	g¨gs
 = 
ˇŒoc
(1, (*
¨gs
));

811 
as£π
(
¨gs
);

813 
	g¨gs
->
	ga˘i⁄s
 = 
ˇŒoc
(1, 
OF_MAX_ACTION_LEN
);

814 
	g¨gs
->
	ga˘i⁄_Àn
 = 0;

816 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

817 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

818 i‡(!
	gsw
) {

819 
‰ì
(
Êow
);

820 
‰ì
(
¨gs
);

821  
	gCMD_WARNING
;

824 
	gªt
 = 
°r2¥efix
(
¨gv
[1], (*)&
d°_p
);

825 i‡(
	gªt
 <= 0) {

826 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

827 
	gdîef_‰ì_îr_out
;

830 i‡(
	gd°_p
.
	g¥efixÀn
) {

831 
	gnmask
 = 
make_öë_mask
(
d°_p
.
¥efixÀn
);

832 
	gwûdˇrds
 |((32 - 
d°_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_DST_BITS
)-1))

833 << 
OFPFW_NW_DST_SHIFT
;

836 
	gwûdˇrds
 |
OFPFW_NW_DST_ALL
;

837 
	gnmask
 = ~0;

841 
	gÊow
->
	gnw_d°
 = 
d°_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

843 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
§c_p
);

844 i‡(
	gªt
 <= 0) {

845 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

846 
	gdîef_‰ì_îr_out
;

849 i‡(
	g§c_p
.
	g¥efixÀn
) {

850 
	gnmask
 = (
make_öë_mask
(
§c_p
.
¥efixÀn
));

851 
	gwûdˇrds
 |((32 - 
§c_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_SRC_BITS
)-1))

852 << 
OFPFW_NW_SRC_SHIFT
;

855 
	gwûdˇrds
 |
OFPFW_NW_SRC_ALL
;

856 
	gnmask
 = ~0;

859 
	gÊow
->
	gnw_§c
 = 
§c_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

861 i‡(!
°∫cmp
(
¨gv
[3], "*", 
°æí
(argv[3]))) {

862 
	gÊow
->
	gnw_¥Ÿo
 = 0;

863 
	gwûdˇrds
 |
OFPFW_NW_PROTO
;

865 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

869 i‡(!
°∫cmp
(
¨gv
[4], "*", 
°æí
(argv[4]))) {

870 
	gÊow
->
	gnw_tos
 = 0;

871 
	gwûdˇrds
 |
OFPFW_NW_TOS
;

873 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

876 i‡(!
°∫cmp
(
¨gv
[5], "*", 
°æí
(argv[5]))) {

877 
	gÊow
->
	gç_d°
 = 0;

878 
	gwûdˇrds
 |
OFPFW_TP_DST
;

880 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

883 i‡(!
°∫cmp
(
¨gv
[6], "*", 
°æí
(argv[6]))) {

884 
	gÊow
->
	gç_§c
 = 0;

885 
	gwûdˇrds
 |
OFPFW_TP_SRC
;

887 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

890 i‡(!
°∫cmp
(
¨gv
[7], "*", 
°æí
(argv[7]))) {

891 
mem£t
(&
Êow
->
dl_§c
, 0, 6);

892 
	gwûdˇrds
 |
OFPFW_DL_SRC
;

894 
	gmac_°r
 = (*)
¨gv
[7];

895 
	gi
 = 0; i < 6; i++) {

896 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

897 if(
	gmac_°r
 =
√xt
)

899 
	gmac_°r
 = 
√xt
 + 1;

902 i‡(
	gi
 != 6) {

903 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

904 
	gdîef_‰ì_îr_out
;

909 i‡(!
°∫cmp
(
¨gv
[8], "*", 
°æí
(argv[8]))) {

910 
mem£t
(&
Êow
->
dl_d°
, 0, 6);

911 
	gwûdˇrds
 |
OFPFW_DL_DST
;

913 
	gmac_°r
 = (*)
¨gv
[8];

914 
	gi
 = 0; i < 6; i++) {

915 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

916 if(
	gmac_°r
 =
√xt
)

918 
	gmac_°r
 = 
√xt
 + 1;

921 i‡(
	gi
 != 6) {

922 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

923 
	gdîef_‰ì_îr_out
;

927 i‡(!
°∫cmp
(
¨gv
[9], "*", 
°æí
(argv[9]))) {

928 
	gÊow
->
	gdl_ty≥
 = 0;

929 
	gwûdˇrds
 |
OFPFW_DL_TYPE
;

931 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

934 i‡(!
°∫cmp
(
¨gv
[10], "*", 
°æí
(argv[10]))) {

935 
	gÊow
->
	gdl_vœn
 = 0;

936 
	gwûdˇrds
 |
OFPFW_DL_VLAN
;

938 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

941 i‡(!
°∫cmp
(
¨gv
[11], "*", 
°æí
(argv[11]))) {

942 
	gÊow
->
	gdl_vœn_p˝
 = 0;

943 
	gwûdˇrds
 |
OFPFW_DL_VLAN_PCP
;

945 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

948 i‡(!
°∫cmp
(
¨gv
[12], "*", 
°æí
(argv[12]))) {

949 
	gÊow
->
	gö_p‹t
 = 0;

950 
	gwûdˇrds
 |
OFPFW_IN_PORT
;

952 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

956 *
	gÊ_°r
 = 
of_dump_Êow
(
Êow
);

957 
¥ötf
 ("%s\n", 
Ê_°r
);

958 
¥ötf
 ("0x%x\n", 
wûdˇrds
);

959 
‰ì
(
Ê_°r
);

962 
	g¨gs
->
	gÊ
 = 
Êow
;

963 
	g¨gs
->
	gsw
 = 
sw
;

964 
	g¨gs
->
	gwûdˇrds
 = 
ht⁄l
(
wûdˇrds
);

966 
	gvty
->
	gödex
 = 
¨gs
;

968 i‡((
	gªt
 = 
Êow_a˘i⁄s_cmd
.
func
(
£lf
, 
vty
, 
¨gc
, 
¨gv
)Ë!
CMD_SUCCESS
) {

969 
dîef_‰ì_îr_out
;

972 
of_swôch_put
(
sw
);

974  
	gCMD_SUCCESS
;

976 
	gdîef_‰ì_îr_out
:

977 
‰ì
(
¨gs
);

978 
‰ì
(
Êow
);

979 
of_swôch_put
(
sw
);

980  
	gCMD_WARNING
;

984 
DEFUN
 (
of_Êow_vty_dñ
,

985 
of_Êow_vty_dñ_cmd
,

1019 
	gi
;

1020 
uöt64_t
 
	gdp_id
;

1021 
c_swôch_t
 *
	gsw
;

1022 
Êow
 *
	gÊow
;

1023 
	gªt
;

1024 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

1025 
uöt32_t
 
	gwûdˇrds
 = 0;

1026 
¥efix_ùv4
 
	gd°_p
, 
	g§c_p
;

1027 
uöt32_t
 
	gnmask
;

1028 
of_Êow_mod_∑øms
 
	gÊ_∑rms
;

1029 *
	g≠p
;

1031 
mem£t
(&
Ê_∑rms
, 0, (fl_parms));

1033 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

1034 
as£π
(
Êow
);

1036 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

1037 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

1038 i‡(!
	gsw
) {

1039 
‰ì
(
Êow
);

1040  
	gCMD_WARNING
;

1043 
	gªt
 = 
°r2¥efix
(
¨gv
[1], (*)&
d°_p
);

1044 i‡(
	gªt
 <= 0) {

1045 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1046 
	gdîef_‰ì_îr_out
;

1049 i‡(
	gd°_p
.
	g¥efixÀn
) {

1050 
	gnmask
 = 
make_öë_mask
(
d°_p
.
¥efixÀn
);

1051 
	gwûdˇrds
 |((32 - 
d°_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_DST_BITS
)-1))

1052 << 
OFPFW_NW_DST_SHIFT
;

1054 
	gwûdˇrds
 |
OFPFW_NW_DST_ALL
;

1055 
	gnmask
 = ~0;

1059 
	gÊow
->
	gnw_d°
 = 
d°_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

1061 
	gªt
 = 
°r2¥efix
(
¨gv
[2], (*)&
§c_p
);

1062 i‡(
	gªt
 <= 0) {

1063 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1064 
	gdîef_‰ì_îr_out
;

1067 i‡(
	g§c_p
.
	g¥efixÀn
) {

1068 
	gnmask
 = (
make_öë_mask
(
§c_p
.
¥efixÀn
));

1069 
	gwûdˇrds
 |((32 - 
§c_p
.
¥efixÀn
Ë& ((1 << 
OFPFW_NW_SRC_BITS
)-1))

1070 << 
OFPFW_NW_SRC_SHIFT
;

1072 
	gwûdˇrds
 |
OFPFW_NW_SRC_ALL
;

1073 
	gnmask
 = ~0;

1076 
	gÊow
->
	gnw_§c
 = 
§c_p
.
¥efix
.
s_addr
 & 
ht⁄l
(
nmask
);

1078 i‡(!
°∫cmp
(
¨gv
[3], "*", 
°æí
(argv[3]))) {

1079 
	gÊow
->
	gnw_¥Ÿo
 = 0;

1080 
	gwûdˇrds
 |
OFPFW_NW_PROTO
;

1082 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

1086 i‡(!
°∫cmp
(
¨gv
[4], "*", 
°æí
(argv[4]))) {

1087 
	gÊow
->
	gnw_tos
 = 0;

1088 
	gwûdˇrds
 |
OFPFW_NW_TOS
;

1090 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

1093 i‡(!
°∫cmp
(
¨gv
[5], "*", 
°æí
(argv[5]))) {

1094 
	gÊow
->
	gç_d°
 = 0;

1095 
	gwûdˇrds
 |
OFPFW_TP_DST
;

1097 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

1100 i‡(!
°∫cmp
(
¨gv
[6], "*", 
°æí
(argv[6]))) {

1101 
	gÊow
->
	gç_§c
 = 0;

1102 
	gwûdˇrds
 |
OFPFW_TP_SRC
;

1104 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

1107 i‡(!
°∫cmp
(
¨gv
[7], "*", 
°æí
(argv[7]))) {

1108 
mem£t
(&
Êow
->
dl_§c
, 0, 6);

1109 
	gwûdˇrds
 |
OFPFW_DL_SRC
;

1111 
	gmac_°r
 = (*)
¨gv
[7];

1112 
	gi
 = 0; i < 6; i++) {

1113 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

1114 if(
	gmac_°r
 =
√xt
)

1116 
	gmac_°r
 = 
√xt
 + 1;

1119 i‡(
	gi
 != 6) {

1120 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

1121 
	gdîef_‰ì_îr_out
;

1126 i‡(!
°∫cmp
(
¨gv
[8], "*", 
°æí
(argv[8]))) {

1127 
mem£t
(&
Êow
->
dl_d°
, 0, 6);

1128 
	gwûdˇrds
 |
OFPFW_DL_DST
;

1130 
	gmac_°r
 = (*)
¨gv
[8];

1131 
	gi
 = 0; i < 6; i++) {

1132 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

1133 if(
	gmac_°r
 =
√xt
)

1135 
	gmac_°r
 = 
√xt
 + 1;

1138 i‡(
	gi
 != 6) {

1139 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

1140 
	gdîef_‰ì_îr_out
;

1144 i‡(!
°∫cmp
(
¨gv
[9], "*", 
°æí
(argv[9]))) {

1145 
	gÊow
->
	gdl_ty≥
 = 0;

1146 
	gwûdˇrds
 |
OFPFW_DL_TYPE
;

1148 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

1151 i‡(!
°∫cmp
(
¨gv
[10], "*", 
°æí
(argv[10]))) {

1152 
	gÊow
->
	gdl_vœn
 = 0;

1153 
	gwûdˇrds
 |
OFPFW_DL_VLAN
;

1155 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

1158 i‡(!
°∫cmp
(
¨gv
[11], "*", 
°æí
(argv[11]))) {

1159 
	gÊow
->
	gdl_vœn_p˝
 = 0;

1160 
	gwûdˇrds
 |
OFPFW_DL_VLAN_PCP
;

1162 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

1165 i‡(!
°∫cmp
(
¨gv
[12], "*", 
°æí
(argv[12]))) {

1166 
	gÊow
->
	gö_p‹t
 = 0;

1167 
	gwûdˇrds
 |
OFPFW_IN_PORT
;

1169 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

1173 *
	gÊ_°r
 = 
of_dump_Êow
(
Êow
);

1174 
¥ötf
 ("%s\n", 
Ê_°r
);

1175 
¥ötf
 ("0x%x\n", 
wûdˇrds
);

1176 
‰ì
(
Ê_°r
);

1178 
	gÊ_∑rms
.
	gÊow
 = 
Êow
;

1179 
	gÊ_∑rms
.
	gwûdˇrds
 = 
ht⁄l
(
wûdˇrds
);

1180 
	gÊ_∑rms
.
	g¥io
 = 
C_FL_PRIO_DFL
;

1181 
	gÊ_∑rms
.
	gtbl_idx
 = 
C_RULE_FLOW_TBL_DFL
;

1183 i‡(!(
	g≠p
 = 
c_≠p_gë
(&
˘æ_hdl
, 
C_VTY_NAME
))) {

1184 
	gdîef_‰ì_îr_out
;

1187 
	gÊ_∑rms
.
	g≠p_ow√r
 = 
≠p
;

1189 i‡(
of_Êow_dñ
(
sw
, &
Ê_∑rms
)) {

1190 
vty_out
(
vty
, "Flow delete failed\r\n");

1192 
vty_out
(
vty
, "Flow deleted\r\n");

1195 
c_≠p_put
(
≠p
);

1196 
of_swôch_put
(
sw
);

1198 
‰ì
(
Êow
);

1200  
	gCMD_SUCCESS
;

1202 
	gdîef_‰ì_îr_out
:

1203 
‰ì
(
Êow
);

1204 
of_swôch_put
(
sw
);

1205  
	gCMD_WARNING
;

1209 
DEFUN_NOSH
 (
of_Êow_add_exm
,

1210 
of_Êow_add_exm_cmd
,

1243 
	gi
;

1244 
uöt64_t
 
	gdp_id
;

1245 
c_swôch_t
 *
	gsw
;

1246 
Êow
 *
	gÊow
;

1247 
	gªt
;

1248 *
	gmac_°r
 = 
NULL
, *
	g√xt
 = NULL;

1249 
vty_Êow_a˘i⁄_∑rms
 *
	g¨gs
;

1251 
	gÊow
 = 
ˇŒoc
(1, (*
Êow
));

1252 
as£π
(
Êow
);

1254 
	g¨gs
 = 
ˇŒoc
(1, (*
¨gs
));

1255 
as£π
(
¨gs
);

1257 
	g¨gs
->
	ga˘i⁄s
 = 
ˇŒoc
(1, 
OF_MAX_ACTION_LEN
);

1258 
	g¨gs
->
	ga˘i⁄_Àn
 = 0;

1260 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

1261 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

1262 i‡(!
	gsw
) {

1263 
‰ì
(
Êow
);

1264 
‰ì
(
¨gs
);

1265  
	gCMD_WARNING
;

1268 
	gªt
 = 
öë_©⁄
(
¨gv
[1], (
ö_addr
 *)&
Êow
->
nw_d°
);

1269 i‡(
	gªt
 <= 0) {

1270 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1271 
	gdîef_‰ì_îr_out
;

1274 
	gªt
 = 
öë_©⁄
(
¨gv
[2], (
ö_addr
 *)&
Êow
->
nw_§c
);

1275 i‡(
	gªt
 <= 0) {

1276 
vty_out
 (
vty
, "%% MÆf‹medáddªss%s", 
VTY_NEWLINE
);

1277 
	gdîef_‰ì_îr_out
;

1280 
	gÊow
->
	gnw_¥Ÿo
 = 
©oi
(
¨gv
[3]);

1281 
	gÊow
->
	gnw_tos
 = 
©oi
(
¨gv
[4]);

1282 
	gÊow
->
	gç_d°
 = 
ht⁄s
(
©oi
(
¨gv
[5]));

1283 
	gÊow
->
	gç_§c
 = 
ht⁄s
(
©oi
(
¨gv
[6]));

1285 
	gmac_°r
 = (*)
¨gv
[7];

1286 
	gi
 = 0; i < 6; i++) {

1287 
	gÊow
->
	gdl_§c
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

1288 if(
	gmac_°r
 =
√xt
)

1290 
	gmac_°r
 = 
√xt
 + 1;

1293 i‡(
	gi
 != 6) {

1294 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

1295 
	gdîef_‰ì_îr_out
;

1298 
	gmac_°r
 = (*)
¨gv
[8];

1299 
	gi
 = 0; i < 6; i++) {

1300 
	gÊow
->
	gdl_d°
[
i
] = (
uöt8_t
)
°πoul
(
mac_°r
, &
√xt
, 16);

1301 if(
	gmac_°r
 =
√xt
)

1303 
	gmac_°r
 = 
√xt
 + 1;

1306 i‡(
	gi
 != 6) {

1307 
vty_out
 (
vty
, "%% MÆf‹med ma¯addªss%s", 
VTY_NEWLINE
);

1308 
	gdîef_‰ì_îr_out
;

1311 
	gÊow
->
	gdl_ty≥
 = 
ht⁄s
(
©oi
(
¨gv
[9]));

1312 
	gÊow
->
	gdl_vœn
 = 
ht⁄s
(
©oi
(
¨gv
[10]));

1313 
	gÊow
->
	gdl_vœn_p˝
 = 
ht⁄s
(
©oi
(
¨gv
[11]));

1314 
	gÊow
->
	gö_p‹t
 = 
ht⁄s
(
©oi
(
¨gv
[12]));

1316 
	g¨gs
->
	gÊ
 = 
Êow
;

1317 
	g¨gs
->
	gsw
 = 
sw
;

1319 
	gvty
->
	gödex
 = 
¨gs
;

1321 i‡((
	gªt
 = 
Êow_a˘i⁄s_cmd
.
func
(
£lf
, 
vty
, 
¨gc
, 
¨gv
)Ë!
CMD_SUCCESS
) {

1322 
dîef_‰ì_îr_out
;

1325 
of_swôch_put
(
sw
);

1327  
	gCMD_SUCCESS
;

1329 
	gdîef_‰ì_îr_out
:

1330 
‰ì
(
Êow
);

1331 
‰ì
(
¨gs
);

1332 
of_swôch_put
(
sw
);

1333  
	gCMD_WARNING
;

1336 
DEFUN
 (
of_Êow_ª£t
,

1337 
of_Êow_ª£t_cmd
,

1344 
uöt64_t
 
	gdp_id
;

1345 
c_swôch_t
 *
	gsw
;

1346 
Êow
 
	gÊow
;

1347 
of_Êow_mod_∑øms
 
	gÊ_∑rms
;

1349 
mem£t
(&
Ê_∑rms
, 0, (fl_parms));

1350 
mem£t
(&
Êow
, 0, (flow));

1352 
	gdp_id
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

1353 
	gsw
 = 
of_swôch_gë
(&
˘æ_hdl
, 
dp_id
);

1354 i‡(!
	gsw
) {

1355  
	gCMD_WARNING
;

1358 
__of_£nd_Êow_dñ_noˇche
(
sw
, &
Êow
, 
ht⁄l
(
OFPFW_ALL
),

1359 
OFPP_NONE
, 
Ál£
);

1361 
of_swôch_Êow_tbl_ª£t
(
sw
);

1362 
of_swôch_put
(
sw
);

1364 
vty_out
(
vty
, "All FlowsÑeset\r\n");

1366  
	gCMD_SUCCESS
;

1370 
	$modvty__öôˇŒs
(*
¨g
)

1372 
öôˇŒ_t
 *
mod_öô
;

1374 
mod_öô
 = &
__°¨t_modvtyöô_£c
;

1376 (*
mod_öô
)(
¨g
);

1377 
mod_öô
++;

1378 } 
mod_öô
 < &
__°›_modvtyöô_£c
);

1379 
	}
}

1382 
	$mul_vty_öô
()

1384 
	`ö°Æl_node
(&
Êow_a˘i⁄s_node
, 
NULL
);

1385 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_cmd
);

1386 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_dëaû_cmd
);

1387 
	`ö°Æl_ñemít
(
CONFIG_NODE
, &
of_Êow_add_exm_cmd
);

1388 
	`ö°Æl_ñemít
(
CONFIG_NODE
, &
of_Êow_dñ_exm_cmd
);

1389 
	`ö°Æl_ñemít
(
CONFIG_NODE
, &
of_Êow_vty_add_cmd
);

1390 
	`ö°Æl_ñemít
(
CONFIG_NODE
, &
of_Êow_vty_dñ_cmd
);

1391 
	`ö°Æl_ñemít
(
CONFIG_NODE
, &
of_Êow_ª£t_cmd
);

1392 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_swôch_Êow_cmd
);

1393 
	`ö°Æl_deÁu…
(
FLOW_NODE
);

1394 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_ouçut_a˘i⁄_cmd
);

1395 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_vid_a˘i⁄_cmd
);

1396 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_dmac_a˘i⁄_cmd
);

1397 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
Êow_a˘i⁄s_exô_cmd
);

1398 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
Êow_a˘i⁄s_commô_cmd
);

1399 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_nw_ßddr_a˘i⁄_cmd
);

1400 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_nw_daddr_a˘i⁄_cmd
);

1401 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_smac_a˘i⁄_cmd
);

1402 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_°rù_vœn_a˘i⁄_cmd
);

1403 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_£t_vp˝_a˘i⁄_cmd
);

1404 
	`ö°Æl_ñemít
(
FLOW_NODE
, &
of_add_dr›_a˘i⁄_cmd
);

1406 
	`modvty__öôˇŒs
(
NULL
);

1407 
	}
}

1410 
	$c_vty_thªad_run
(*
¨g
)

1412 
uöt64_t
 
dpid
 = 0;

1413 
thªad
Åhread;

1414 
c_vty_˘x
 *
vty_˘x
 = 
¨g
;

1415 
˘æ_hdl_t
 *
c_hdl
 = 
vty_˘x
->
cmn_˘x
.c_hdl;

1417 
	`c_£t_thªad_dÊ_afföôy
();

1419 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1422 
	`mul_ªgi°î_≠p
(
NULL
, 
C_VTY_NAME
, 0, 0, 1, &
dpid
, NULL);

1424 
c_hdl
->
vty_ma°î
 = 
	`thªad_ma°î_¸óã
();

1426 
	`cmd_öô
(1);

1427 
	`vty_öô
(
c_hdl
->
vty_ma°î
);

1428 
	`mul_vty_öô
();

1429 
	`s‹t_node
();

1431 
	`vty_£rv_sock
(
vty_addr
, 
vty_p‹t
, 
C_VTYSH_PATH
, 1);

1433 
	`c_log_debug
(" VTY THREAD RUNNING \n");

1436 
	`thªad_„tch
(
c_hdl
->
vty_ma°î
, &
thªad
))

1437 
	`thªad_ˇŒ
(&
thªad
);

1441 
	}
}

	@mul_events.h

	@services/loadable/topo_routing/mul_lldp.c

19 
	~"mul_å.h
"

21 
t›o_hdl_t
 *
	gt›o_hdl
;

29 
	$__Œdp_gë_max_swôch_Æüs
(
t›o_hdl_t
 *
t›o
)

31  
t›o
->
max_sw_Æüs
;

32 
	}
}

40 
	$__Œdp_gë_num_swôches
(
t›o_hdl_t
 *
t›o
)

42  
	`g_hash_èbÀ_size
(
t›o
->
swôches
);

43 
	}
}

51 
	$Œdp_£nd_π_√igh_c⁄n
(*
p‹t_¨g
, *
u_¨g
)

53 
å_√igh_quîy_¨g_t
 *
√igh_quîy
 = 
u_¨g
;

54 
Œdp_p‹t_t
 *
p‹t
 = 
p‹t_¨g
;

55 
lweight_∑ú_t
 
lw_∑ú
;

57 
	`as£π
(
√igh_quîy
 &&Çeigh_quîy->
å
);

59 
lw_∑ú
.
œ
 = 
p‹t
->
p‹t_no
;

60 
lw_∑ú
.
lb
 = 
p‹t
->
√ighb‹_p‹t
;

61 
lw_∑ú
.
weight
 = 
NEIGH_DFL_WEIGHT
;

63 i‡(
√igh_quîy
->
å
->
π
.
π_add_√igh_c⁄n
) {

64 
√igh_quîy
->
å
->
π
.
	`π_add_√igh_c⁄n
(neigh_query->tr,

65 
√igh_quîy
->
§c_sw
,

66 
√igh_quîy
->
d°_sw
,

67 &
lw_∑ú
);

71 
	}
}

80 
	$__Œdp_öô_√igh_∑ú_adja˚ncõs
(
å_√igh_quîy_¨g_t
 *
¨g
)

82 
t›o_hdl_t
 *
t›o
;

83 
Œdp_swôch_t
 *
‰om_sw
, *
to_sw
;

84 
Œdp_√igh_t
 *
√ighbour
;

85 
locked
 = 0;

87 i‡(!
¨g
) {

88 
	`c_log_îr
("%s: InvÆidárg", 
FN
);

92 
t›o
 = 
¨g
->
å
->
t›o_hdl
;

94 
‰om_sw
 = 
	`Œdp_gë_swôch_‰om_im≠
(
t›o
, 
¨g
->
§c_sw
);

95 
to_sw
 = 
	`Œdp_gë_swôch_‰om_im≠
(
t›o
, 
¨g
->
d°_sw
);

97 i‡(!
‰om_sw
 || !
to_sw
) {

98 
	`c_log_îr
("%s: NULL swôchárgs", 
FN
);

102 
locked
 = !
	`c_rd_åylock
(&
‰om_sw
->
lock
);

104 
√ighbour
 = 
	`g_hash_èbÀ_lookup
(
‰om_sw
->
√ighb‹s
, &
to_sw
->
dpid
);

106 i‡(!
√ighbour
) {

107 i‡(
locked
Ë
	`c_rd_u∆ock
(&
‰om_sw
->
lock
);

113 
	`Œdp_åavî£_Æl_√igh_p‹ts
(
√ighbour
, 
Œdp_£nd_π_√igh_c⁄n
,

114 (*)
¨g
);

116 i‡(
locked
Ë
	`c_rd_u∆ock
(&
‰om_sw
->
lock
);

117 
	}
}

125 
	$Œdp_swôch_åavî£_Æl
(
t›o_hdl_t
 *
t›o_hdl
, 
GHFunc
 
ôî_‚
, *
¨g
)

128 
	`c_rd_lock
(&
t›o_hdl
->
swôch_lock
);

129 i‡(
t›o_hdl
->
swôches
) {

130 
	`g_hash_èbÀ_f‹óch
(
t›o_hdl
->
swôches
,

131 (
GHFunc
)
ôî_‚
, 
¨g
);

133 
	`c_rd_u∆ock
(&
t›o_hdl
->
swôch_lock
);

135 
	}
}

144 
	$__Œdp_swôch_åavî£_Æl
(
t›o_hdl_t
 *
t›o_hdl
, 
GHFunc
 
ôî_‚
, *
¨g
)

147 i‡(
t›o_hdl
->
swôches
) {

148 
	`g_hash_èbÀ_f‹óch
(
t›o_hdl
->
swôches
,

149 (
GHFunc
)
ôî_‚
, 
¨g
);

151 
	}
}

160 
	$Œdp_p‹t_åavî£_Æl
(
Œdp_swôch_t
 *
Œdpsw
, 
GHFunc
 
ôî_‚
, *
¨g
)

163 
	`c_rd_lock
(&
Œdpsw
->
lock
);

164 i‡(
Œdpsw
->
p‹ts
) {

165 
	`g_hash_èbÀ_f‹óch
(
Œdpsw
->
p‹ts
, (
GHFunc
)
ôî_‚
, 
¨g
);

167 
	`c_rd_u∆ock
(&
Œdpsw
->
lock
);

170 
	}
}

179 
	$__Œdp_p‹t_åavî£_Æl
(
Œdp_swôch_t
 *
Œdpsw
, 
GHFunc
 
ôî_‚
, *
¨g
)

182 i‡(
Œdpsw
->
p‹ts
) {

183 
	`g_hash_èbÀ_f‹óch
(
Œdpsw
->
p‹ts
, (
GHFunc
)
ôî_‚
, 
¨g
);

187 
	}
}

196 
	$__Œdp_num_p‹ts_ö_swôch
(
Œdp_swôch_t
 *
Œdpsw
)

198 i‡(
Œdpsw
->
p‹ts
) {

199  
	`g_hash_èbÀ_size
(
Œdpsw
->
p‹ts
);

203 
	}
}

211 
Œdp_p‹t_t
 *

212 
	$Œdp_p‹t_föd
(
Œdp_swôch_t
 *
Œdp_sw
, 
uöt16_t
 
p‹t_id
)

214 
Œdp_p‹t_t
 *
this_p‹t
 = 
NULL
;

216 
	`c_wr_lock
(&
Œdp_sw
->
lock
);

218 i‡(!(
this_p‹t
 = 
	`g_hash_èbÀ_lookup
(
Œdp_sw
->
p‹ts
, &
p‹t_id
))){

219 
	`c_wr_u∆ock
(&
Œdp_sw
->
lock
);

220  
NULL
;

223 
	`c_wr_u∆ock
(&
Œdp_sw
->
lock
);

225  
this_p‹t
;

226 
	}
}

234 
Œdp_p‹t_t
 *

235 
	$__Œdp_p‹t_föd
(
Œdp_swôch_t
 *
Œdp_sw
, 
uöt16_t
 
p‹t_id
)

237 
Œdp_p‹t_t
 *
this_p‹t
 = 
NULL
;

239 i‡(!(
this_p‹t
 = 
	`g_hash_èbÀ_lookup
(
Œdp_sw
->
p‹ts
, &
p‹t_id
))){

240  
NULL
;

243  
this_p‹t
;

244 
	}
}

253 
	$Œdp_embed_√igh_öfo_ö_£rvi˚
(*
key
 
UNUSED
, *
sw_¨g
, *
u¨g
)

255 
Œdp_p‹t_t
 *
p‹t
 = (Œdp_p‹t_à*)
sw_¨g
;

256 
c_oÂ_p‹t_√igh
 *
p‹t_√igh
 = *(c_oÂ_p‹t_√igh **)(
u¨g
);

258 
	`mem£t
(
p‹t_√igh
, 0, (*port_neigh));

259 
p‹t_√igh
->
p‹t_no
 = 
	`ht⁄s
(
p‹t
->port_no);

260 i‡(
p‹t
->
°©us
 =
LLDP_PORT_STATUS_NEIGHBOR
) {

261 
p‹t_√igh
->
√igh_¥e£¡
 = 
	`ht⁄s
(
COFP_NEIGH_SWITCH
);

262 
p‹t_√igh
->
√igh_dpid
 = 
	`ht⁄Œ
(
p‹t
->
√ighb‹_dpid
);

263 
p‹t_√igh
->
√igh_p‹t
 = 
	`ht⁄s
(
p‹t
->
√ighb‹_p‹t
);

266 *(
c_oÂ_p‹t_√igh
 **)(
u¨g
Ë(
p‹t_√igh
 + 1);

267 
	}
}

274 
cbuf
 *

275 
	$Œdp_£rvi˚_√igh_ªque°
(
uöt64_t
 
dpid
, 
uöt32_t
 
xid
)

277 
Œdp_swôch_t
 *
Œdpsw
;

278 
size_t
 
num_p‹ts
;

279 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

280 
c_oÂ_swôch_√igh
 *
coÂ_¢
;

281 *
√igh_p‹t_d©a
;

282 
cbuf
 *
b
;

284 
Œdpsw
 = 
	`„tch_™d_ªèö_swôch
(
dpid
);

285 i‡(!
Œdpsw
){

286 
	`c_log_îr
("%s: swôch(0x%ŒxËd€†nŸÉxi°", 
FN
,

287 ()
dpid
);

288  
NULL
;

291 
	`c_rd_lock
(&
Œdpsw
->
lock
);

293 
num_p‹ts
 = 
	`__Œdp_num_p‹ts_ö_swôch
(
Œdpsw
);

294 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
) +

295 (
c_oÂ_swôch_√igh
) +

296 (
num_p‹ts
 * (
c_oÂ_p‹t_√igh
)),

297 
C_OFPT_AUX_CMD
, 
xid
);

299 
coÂ_auc
 = (*)(
b
->
d©a
);

300 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_TR_NEIGH_STATUS
);

301 
coÂ_¢
 = (*)(
coÂ_auc
->
d©a
);

302 
coÂ_¢
->
swôch_id
.
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

303 
√igh_p‹t_d©a
 = 
coÂ_¢
->
d©a
;

305 
	`__Œdp_p‹t_åavî£_Æl
(
Œdpsw
, 
Œdp_embed_√igh_öfo_ö_£rvi˚
,

306 (*)(&
√igh_p‹t_d©a
));

308 
	`c_rd_u∆ock
(&
Œdpsw
->
lock
);

310 
	`Œdp_swôch_uƒef
(
Œdpsw
);

312  
b
;

313 
	}
}

323 
	$Œdp_p‹t_c⁄√˘_to_√igh
(
Œdp_swôch_t
 *
this_swôch
, 
Œdp_p‹t_t
 *
this_p‹t
,

324 
uöt64_t
 
Ÿhî_id
, 
uöt16_t
 
Ÿhî_p‹t_id
, 
time_t
 
âl
)

326 
Œdp_√igh_t
 *
√ighb‹
;

329 i‡(!
this_swôch
 || !
this_p‹t
){

330 
	`c_log_îr
("%s: NuŒ swôch o∏p‹à¨gs", 
FN
);

334 i‡(
this_p‹t
->
°©us
 =
LLDP_PORT_STATUS_NEIGHBOR
 &&

335 
this_p‹t
->
√ighb‹_dpid
 =
Ÿhî_id
 &&

336 
this_p‹t
->
√ighb‹_p‹t
 =
Ÿhî_p‹t_id
) {

339 
this_p‹t
->
âl
 =Åtl;

349 
this_p‹t
->
°©us
 = 
LLDP_PORT_STATUS_NEIGHBOR
;

350 
this_p‹t
->
√ighb‹_dpid
 = 
Ÿhî_id
;

351 
this_p‹t
->
√ighb‹_p‹t
 = 
Ÿhî_p‹t_id
;

352 
this_p‹t
->
âl
 =Åtl;

355 i‡((
√ighb‹
 = 
	`g_hash_èbÀ_lookup
(
this_swôch
->
√ighb‹s
,

356 &
this_p‹t
->
√ighb‹_dpid
))) {

361 
√ighb‹
->
p‹ts
 = 
	`g_¶i°_ªmove_Æl
“eighb‹->p‹ts, 
this_p‹t
);

364 
√ighb‹
 = 
	`mÆloc
((
Œdp_√igh_t
));

365 i‡(!
√ighb‹
){

366 
	`c_log_îr
("%s: faûedÅÿÆlo¯p‹t_li°", 
FN
);

369 
√ighb‹
->
Ÿhî_dpid
 = 
this_p‹t
->
√ighb‹_dpid
;

370 
√ighb‹
->
p‹ts
 = 
NULL
;

372 
	`g_hash_èbÀ_ö£π
(
this_swôch
->
√ighb‹s
,

373 &
√ighb‹
->
Ÿhî_dpid
,Çeighbor);

377 
√ighb‹
->
p‹ts
 = 
	`g_¶i°_≠≥nd
“eighb‹->p‹ts, 
this_p‹t
);

379 
	`c_log_debug
("%s:switch %llxÖort %u <-> switch %llxÖort %u ",

380 
FN
, ()
this_swôch
->
dpid
, 
this_p‹t
->
p‹t_no
,

381 ()
Ÿhî_id
, 
Ÿhî_p‹t_id
);

383 
	`å_övoke_routög
(
t›o_hdl
->
å
);

386 
	}
}

395 
	$Œdp_p‹t_disc⁄√˘_to_√igh
(
Œdp_swôch_t
 *
this_swôch
,

396 
Œdp_p‹t_t
 *
this_p‹t
,

397 
uöt16_t
 
p‹t_id
,

398 
boﬁ
 
√ed_lock
,

399 
boﬁ
 
ã¨_∑ú
)

401 
Œdp_√igh_t
 *
√ighb‹
;

404 i‡(!
this_swôch
){

405 
	`c_log_îr
("%s: NUŒ swôchárg", 
FN
);

410 
	`as£π
(!
this_p‹t
 || !
√ed_lock
);

412 i‡(
√ed_lock
)

413 
	`c_wr_lock
(&
this_swôch
->
lock
);

415 i‡(!
this_p‹t
) {

416 i‡(!(
this_p‹t
 = 
	`g_hash_èbÀ_lookup
(
this_swôch
->
p‹ts
, &
p‹t_id
))){

417 
	`c_log_îr
("%s: unknow¿p‹à%hx f‹ swôch %Œx" ,
FN
,

418 
p‹t_id
, ()
this_swôch
->
dpid
);

419 
out_îr
;

423 i‡(
this_p‹t
->
°©us
 !
LLDP_PORT_STATUS_NEIGHBOR
){

424 
	`c_log_debug
("%s: Port %u of switch %llx hasÇoÇeigh",

425 
FN
, 
this_p‹t
->
p‹t_no
,

426 ()
this_swôch
->
dpid
);

427 
out_îr
;

430 i‡(
this_swôch
->
√ighb‹s
 &&

431 (
√ighb‹
 = 
	`g_hash_èbÀ_lookup
(
this_swôch
->
√ighb‹s
,

432 &
this_p‹t
->
√ighb‹_dpid
))) {

433 
	`g_hash_èbÀ_ªmove
(
this_swôch
->
√ighb‹s
, &
this_p‹t
->
√ighb‹_dpid
);

437 
this_p‹t
->
°©us
 = 
LLDP_PORT_STATUS_INIT
;

439 
	`c_log_debug
("%s:Ö‹à%hx o‡swôch %Œx -> m¨kedÇÿ√igh" ,
FN
,

440 
this_p‹t
->
p‹t_no
, ()
this_swôch
->
dpid
);

442 i‡(
√ed_lock
Ë
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

444 i‡(
ã¨_∑ú
) {

445 i‡(!(
this_swôch
 = 
	`„tch_™d_ªèö_swôch
(
this_p‹t
->
√ighb‹_dpid
))) {

446 
	`c_log_îr
("%s: Unknow¿swôch %Œx" ,
FN
,

447 ()
this_p‹t
->
√ighb‹_dpid
);

451 
	`c_wr_lock
(&
this_swôch
->
lock
);

452 i‡(!(
this_p‹t
 = 
	`__Œdp_p‹t_föd
(
this_swôch
,

453 
this_p‹t
->
√ighb‹_p‹t
))) {

454 
	`c_log_îr
("%s: unknow¿p‹à%hx f‹ swôch %Œx" ,
FN
,

455 
this_p‹t
->
√ighb‹_p‹t
,

456 ()
this_swôch
->
dpid
);

457 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

461 
	`Œdp_p‹t_disc⁄√˘_to_√igh
(
this_swôch
,

462 
this_p‹t
,

463 
this_p‹t
->
√ighb‹_p‹t
,

464 
Ál£
, false);

465 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

466 
	`Œdp_swôch_uƒef
(
this_swôch
);

469 
	`å_övoke_routög
(
t›o_hdl
->
å
);

473 
out_îr
:

474 i‡(
√ed_lock
Ë
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

476 
	}
}

479 
	$Œdp_åavî£_Æl_√igh_p‹ts
(
Œdp_√igh_t
 *
√igh
, 
GFunc
 
ôî_‚
, *
u_¨g
)

481 
	`g_¶i°_f‹óch
(
√igh
->
p‹ts
, 
ôî_‚
, 
u_¨g
);

482 
	}
}

490 
	$c⁄√˘_Œdp_swôch_√igh_∑ú
(
uöt64_t
 
swôch_id
,

491 
uöt16_t
 
p‹t_id
,

492 
uöt64_t
 
√igh_swôch_id
,

493 
uöt16_t
 
√igh_p‹t_id
,

494 
time_t
 
âl
)

496 
Œdp_swôch_t
 *
Œdp_swôch
;

497 
Œdp_p‹t_t
 *
Œdp_p‹t
;

499 i‡(!(
Œdp_swôch
 = 
	`„tch_™d_ªèö_swôch
(
swôch_id
))) {

500 
	`c_log_îr
("%s: No switch 0x%llx found",

501 
FN
, ()
swôch_id
);

505 
	`c_wr_lock
(&
Œdp_swôch
->
lock
);

506 i‡(!(
Œdp_p‹t
 = 
	`__Œdp_p‹t_föd
(
Œdp_swôch
, 
p‹t_id
))) {

507 
	`c_log_îr
("%s:Öort %hu 0x%llxÇot found",

508 
FN
, 
p‹t_id
, ()
swôch_id
);

509 
îr_out
;

512 i‡(
	`Œdp_p‹t_c⁄√˘_to_√igh
(
Œdp_swôch
, 
Œdp_p‹t
,

513 
√igh_swôch_id
, 
√igh_p‹t_id
, 
âl
)){

514 
îr_out
;

517 
	`c_wr_u∆ock
(&
Œdp_swôch
->
lock
);

518 
	`Œdp_swôch_uƒef
(
Œdp_swôch
);

522 
îr_out
:

523 
	`c_wr_u∆ock
(&
Œdp_swôch
->
lock
);

524 
	`Œdp_swôch_uƒef
(
Œdp_swôch
);

527 
	}
}

535 
	$Œdp_swôch_add
(*
≠p_¨g
, 
c_oÂ_swôch_add_t
 *
oÂ_ß
)

537 
uöt64_t
 
dpid
 = 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
);

538 
Œdp_swôch_t
 *
√w_swôch
;

539 
oÂ_phy_p‹t
 *
p‹t
;

540 
uöt16_t
 
i
;

541 
uöt16_t
 
num_p‹t
;

542 
Êow
 
Ê
;

543 
uöt32_t
 
wûdˇrds
 = 
OFPFW_ALL
;

545 
	`c_wr_lock
(&
t›o_hdl
->
swôch_lock
);

547 i‡(
	`g_hash_èbÀ_lookup
(
t›o_hdl
->
swôches
,&
dpid
)){

548 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

549 
	`c_log_îr
("%s: swôch (0x%ŒxËÆªadyÉxi°s", 
FN
,

550 ()
dpid
);

554 i‡(!(
√w_swôch
 = 
	`ˇŒoc
(1, (*new_switch)))) {

555 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

556 
	`c_log_îr
("%s:Üldp_swôcháŒo¯Áûed", 
FN
);

560 
√w_swôch
->
dpid
 = dpid;

561 
√w_swôch
->
Æüs_id
 = 
	`C_GET_ALIAS_IN_SWADD
(
oÂ_ß
);

562 i‡(
	`Œdp_add_swôch_to_im≠
(
t›o_hdl
, 
√w_swôch
) < 0) {

563 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

564 
	`c_log_îr
("%s:Üldp_swôch im≠ádd faûed", 
FN
);

565 
îr_‰ì
;

568 
√w_swôch
->
p‹ts
 = 
	`g_hash_èbÀ_√w_fuŒ
(
p‹tid_hash_func
,

569 
p‹tid_equÆ_func
,

570 
NULL
, NULL);

571 i‡(!
√w_swôch
->
p‹ts
){

572 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

573 
	`c_log_îr
("%s: Eº‹ i¿p‹t†èbÀáŒoc", 
FN
);

574 
îr_puèlüs
;

577 
√w_swôch
->
√ighb‹s
 = 
	`g_hash_èbÀ_√w_fuŒ
(
dpid_hash_func
,

578 
dpid_equÆ_func
,

579 
NULL
,

580 
Œdp_√igh_p‹éi°_de°roy
);

581 i‡(!
√w_swôch
->
√ighb‹s
){

582 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

583 
	`c_log_îr
("%s: Eº‹ i¿√ighb‹†èbÀáŒoc", 
FN
);

584 
îr_‰ì_p‹ts
;

587 
	`c_rw_lock_öô
(&
√w_swôch
->
lock
);

588 
	`Œdp_swôch_ªf
(
√w_swôch
);

590 
num_p‹t
 = ( 
	`¡ohs
((
oÂ_ß
->
hódî
).
Àngth
) -

591 (
c_oÂ_swôch_add_t
ËË/ (
oÂ_phy_p‹t
);

593 
i
 = 0; i < 
num_p‹t
; i++){

594 
p‹t
 = &((
oÂ_phy_p‹t
 *Ë&(
oÂ_ß
[1]))[
i
];

595 
	`Œdp_p‹t_add
(
≠p_¨g
, 
√w_swôch
, 
p‹t
, 
Ál£
);

599 
	`g_hash_èbÀ_ö£π
(
t›o_hdl
->
swôches
, &
√w_swôch
->
dpid
,Çew_switch);

601 i‡(
√w_swôch
->
Æüs_id
 > 
t›o_hdl
->
max_sw_Æüs
) {

602 
t›o_hdl
->
max_sw_Æüs
 = 
√w_swôch
->
Æüs_id
;

605 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

608 
	`mul_≠p_£nd_Êow_dñ
(
MUL_TR_SERVICE_NAME
, 
NULL
, 
dpid
, &
Ê
,

609 
OFPFW_ALL
, 
OFPP_NONE
, 0, 
C_FL_ENT_NOCACHE
);

612 
	`mem£t
(&
Ê
, 0, (fl));

613 
wûdˇrds
 &~(
OFPFW_DL_TYPE
);

614 
Ê
.
dl_ty≥
 = 
	`ht⁄s
(0x88cc);

617 
	`mul_≠p_£nd_Êow_add
(
MUL_TR_SERVICE_NAME
, 
≠p_¨g
, 
dpid
, &
Ê
, (
uöt32_t
)-1,

618 
NULL
, 0, 0, 0, 
wûdˇrds
, 
C_FL_PRIO_DFL
,

619 
C_FL_ENT_LOCAL
);

623 
îr_‰ì_p‹ts
:

624 
	`g_hash_èbÀ_de°roy
(
√w_swôch
->
p‹ts
);

625 
îr_puèlüs
:

626 
	`Œdp_dñ_swôch_‰om_im≠
(
t›o_hdl
, 
√w_swôch
);

627 
îr_‰ì
:

628 
	`‰ì
(
√w_swôch
);

630 
	}
}

638 
	$Œdp_max_Æüs_födî
(*
key
 
UNUSED
, *
sw_¨g
, *
u¨g
)

640 
Œdp_swôch_t
 *
sw
 = (Œdp_swôch_à*)
sw_¨g
;

641 
t›o_hdl_t
 *
hdl
 = 
u¨g
;

643 i‡(
sw
->
Æüs_id
 > 
hdl
->
max_sw_Æüs
) {

644 
hdl
->
max_sw_Æüs
 = 
sw
->
Æüs_id
;

647 
	}
}

655 
	$__Œdp_max_Æüsid_ª£t
(
t›o_hdl_t
 *
hdl
)

657 
hdl
->
max_sw_Æüs
 = -1;

658 
	`__Œdp_swôch_åavî£_Æl
(
t›o_hdl
, 
Œdp_max_Æüs_födî
,Åopo_hdl);

659 
	}
}

667 
	$Œdp_swôch_dñëe
(
uöt64_t
 
dpid
)

669 
	`c_wr_lock
(&
t›o_hdl
->
swôch_lock
);

672 
	`g_hash_èbÀ_ªmove
(
t›o_hdl
->
swôches
, &
dpid
);

674 
	`__Œdp_max_Æüsid_ª£t
(
t›o_hdl
);

676 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

678 
	`c_log_debug
("%s: swôch (0x%ŒdËªmoved.",
FN
,()
dpid
);

679 
	}
}

687 
	$Œdp_∑ckë_h™dÀr
(
uöt64_t
 
ª˚ivî_id
, 
uöt16_t
 
ª˚ivî_p‹t
, 
Œdp_pkt_t
 *
pkt
)

690 
uöt64_t
 
£ndî_id
;

691 
uöt16_t
 
£ndî_p‹t
;

693 
time_t
 
âl
;

696 i‡(
pkt
->
chassis_év_ty≥
 !
LLDP_CHASSIS_ID_TLV
 ||

697 
pkt
->
chassis_év_subty≥
 !
LLDP_CHASSIS_ID_LOCALLY_ASSIGNED
 ||

698 
pkt
->
p‹t_év_ty≥
 !
LLDP_PORT_ID_TLV
 ||

699 
pkt
->
p‹t_év_subty≥
 !
LLDP_PORT_ID_LOCALLY_ASSIGNED
 ||

700 
pkt
->
âl_év_ty≥
 !
LLDP_TTL_TLV
 ||

701 
pkt
->
íd_of_Œdpdu_év_ty≥
 !
LLDP_END_OF_LLDPDU_TLV
) {

702 
	`c_log_debug
("%s: invÆidÖackë m¨kedá†Œd∞∑ckë",
FN
);

707 
£ndî_id
 = 
	`¡ohŒ
(
pkt
->
chassis_év_id
);

708 
£ndî_p‹t
 = 
	`¡ohs
(
pkt
->
p‹t_év_id
);

711 
âl
 = 
	`time
(
NULL
Ë+ 
	`¡ohs
(
pkt
->
âl_év_âl
);

718  
	`c⁄√˘_Œdp_swôch_√igh_∑ú
(
ª˚ivî_id
, 
ª˚ivî_p‹t
,

719 
£ndî_id
, 
£ndî_p‹t
, 
âl
);

720 
	}
}

728 
	$Œdp_p‹t_add
(*
≠p_¨g
, 
Œdp_swôch_t
 *
this_swôch
,

729 
oÂ_phy_p‹t
 *
p‹t_öfo
, 
boﬁ
 
√ed_lock
)

731 
uöt32_t
 
c⁄fig_mask
;

732 
uöt32_t
 
°©e_mask
;

733 
Œdp_p‹t_t
 *
√w_p‹t
;

735 
uöt16_t
 
p‹t_no
 = 
	`¡ohs
(
p‹t_öfo
->port_no);

737 i‡(
p‹t_no
 > 
OFPP_MAX
){

742 
	`c_log_debug
("%s:áddög %uÅÿswôch 0x%Œx", 
FN
, 
p‹t_no
,

743 ()
this_swôch
->
dpid
);

745 i‡(
√ed_lock
) {

746 
	`c_wr_lock
(&
this_swôch
->
lock
);

749 i‡(
	`__Œdp_p‹t_föd
(
this_swôch
, 
p‹t_no
)) {

751 
	`c_log_îr
("%s: switch 0x%llxÖort 0x%hxálreadyÉxists",

752 
FN
, ()
this_swôch
->
dpid
, 
p‹t_no
);

753 
îr_out
;

757 
√w_p‹t
 = 
	`ˇŒoc
(1, (
Œdp_p‹t_t
));

758 i‡(!
√w_p‹t
) {

759 
	`c_log_îr
("%s: failedÅoállocÖort 0x%hxÅo switch 0x%llx",

760 
FN
, 
p‹t_no
, ()
this_swôch
->
dpid
);

761 
îr_out
;

763 
√w_p‹t
->
Œdp_sw
 = 
this_swôch
;

764 
√w_p‹t
->
c⁄fig
 = 
	`¡ohl
(
p‹t_öfo
->config);

765 
√w_p‹t
->
°©e
 = 
	`¡ohl
(
p‹t_öfo
->state);

766 
√w_p‹t
->
°©us
 = 
LLDP_PORT_STATUS_INIT
;

767 
√w_p‹t
->
p‹t_no
 =Öort_no;

768 
	`mem˝y
(
√w_p‹t
->
hw_addr
,
p‹t_öfo
->hw_addr,
OFP_ETH_ALEN
);

771 
	`g_hash_èbÀ_ö£π
(
this_swôch
->
p‹ts
, &(
√w_p‹t
->
p‹t_no
),Çew_port);

773 
c⁄fig_mask
 = 
	`¡ohl
(
p‹t_öfo
->
c⁄fig
);

774 
°©e_mask
 = 
	`¡ohl
(
p‹t_öfo
->
°©e
);

777 i‡(!(
c⁄fig_mask
 & 
OFPPC_PORT_DOWN
Ë&& !(
°©e_mask
 & 
OFPPS_LINK_DOWN
)) {

778 
	`Œdp_tx
(
≠p_¨g
, 
this_swôch
, 
√w_p‹t
);

780 
	`c_log_debug
("%s:Port %u of switch %llx is down",

781 
FN
, 
p‹t_no
, ()
this_swôch
->
dpid
);

784 i‡(
√ed_lock
) {

785 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

790 
îr_out
:

791 i‡(
√ed_lock
) {

792 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

796 
	}
}

804 
	$Œdp_p‹t_add_wôh_dpid
(*
≠p_¨g
, 
uöt64_t
 
dpid
,

805 
oÂ_phy_p‹t
 *
p‹t_öfo
)

807 
Œdp_swôch_t
 *
Œdp_sw
;

809 if(!(
Œdp_sw
 = 
	`„tch_™d_ªèö_swôch
(
dpid
))) {

810 
	`c_log_îr
("%s: Nÿswôch 0x%Œx found", 
FN
, 
dpid
);

813 
	`Œdp_p‹t_add
(
≠p_¨g
, 
Œdp_sw
, 
p‹t_öfo
, 
åue
);

815 
	`Œdp_swôch_uƒef
(
Œdp_sw
);

817 
	}
}

825 
	$Œdp_p‹t_mod
(*
≠p_¨g
, 
uöt64_t
 
swôch_id
, 
c_oÂ_p‹t_°©us_t
 *
oÂ_p°s
)

827 
Œdp_swôch_t
 *
this_swôch
 = 
NULL
;

828 
Œdp_p‹t_t
 *
this_p‹t
 = 
NULL
;

829 
oÂ_phy_p‹t
 *
oÂp
 = &
oÂ_p°s
->
desc
;

830 
uöt32_t
 
c⁄fig_mask
, 
°©e_mask
;

831 
uöt16_t
 
p‹t_no
;

833 
p‹t_no
 = 
	`¡ohs
(
oÂ_p°s
->
desc
.port_no);

834 i‡(
p‹t_no
 > 
OFPP_MAX
){

839 
c⁄fig_mask
 = 
	`¡ohl
(
oÂ_p°s
->config_mask);

840 
°©e_mask
 = 
	`¡ohl
(
oÂ_p°s
->state_mask);

842 i‡(!
c⁄fig_mask
 || !
°©e_mask
) {

846 i‡(!(
this_swôch
 = 
	`„tch_™d_ªèö_swôch
(
swôch_id
))) {

847 
	`c_log_îr
("%s: Swôch-id 0x%ŒxÇŸ found", 
FN
, 
swôch_id
);

851 
	`c_wr_lock
(&
this_swôch
->
lock
);

852 i‡(!(
this_p‹t
 = 
	`__Œdp_p‹t_föd
(
this_swôch
, 
p‹t_no
))) {

853 
	`c_log_îr
("%s: Switch-id 0x%llxÖort %huÇot found",

854 
FN
, 
swôch_id
, 
p‹t_no
);

855 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

856 
	`Œdp_swôch_uƒef
(
this_swôch
);

860 
this_p‹t
->
°©e
 = 
	`¡ohl
(
oÂp
->state);

861 
this_p‹t
->
c⁄fig
 = 
	`¡ohl
(
oÂp
->config);

863 i‡(
this_p‹t
->
c⁄fig
 & 
OFPPC_PORT_DOWN
 ||

864 
this_p‹t
->
°©e
 & 
OFPPS_LINK_DOWN
) {

869 
	`c_log_debug
("%s: switch 0x%llxÖort(%u)->DOWN",

870 
FN
, 
this_swôch
->
dpid
, 
p‹t_no
);

872 
	`Œdp_p‹t_disc⁄√˘_to_√igh
(
this_swôch
, 
this_p‹t
, 0, 
Ál£
, 
åue
);

875 
	`c_log_debug
("%s: switch 0x%llxÖort(%u)->UP",

876 
FN
, 
this_swôch
->
dpid
, 
p‹t_no
);

878 
	`Œdp_tx
(
≠p_¨g
, 
this_swôch
, 
this_p‹t
);

881 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

882 
	`Œdp_swôch_uƒef
(
this_swôch
);

885 
	}
}

893 
	$Œdp_p‹t_dñëe
(
uöt64_t
 
swôch_id
, 
oÂ_phy_p‹t
 *
p‹t_öfo
)

895 
Œdp_swôch_t
 *
this_swôch
;

896 
Œdp_p‹t_t
 *
this_p‹t
;

897 
uöt16_t
 
p‹t_no
 = 
	`¡ohs
(
p‹t_öfo
->port_no);

899 i‡(
p‹t_no
 > 
OFPP_MAX
){

905 
this_swôch
 = 
	`„tch_™d_ªèö_swôch
(
swôch_id
);

906 
	`c_wr_lock
(&
this_swôch
->
lock
);

907 i‡(!(
this_p‹t
 = 
	`g_hash_èbÀ_lookup
(
this_swôch
->
p‹ts
,&
p‹t_no
))){

908 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

909 
	`Œdp_swôch_uƒef
(
this_swôch
);

910 
	`c_log_debug
("%s:Öort %hxÇot found (switch 0x%llx)",

911 
FN
, 
p‹t_no
, (Ë
swôch_id
);

915 
	`Œdp_p‹t_disc⁄√˘_to_√igh
(
this_swôch
, 
this_p‹t
, 0, 
Ál£
, 
åue
);

918 
	`g_hash_èbÀ_ªmove
(
this_swôch
->
p‹ts
, &
p‹t_no
);

920 
	`‰ì
(
this_p‹t
);

922 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

923 
	`Œdp_swôch_uƒef
(
this_swôch
);

926 
	}
}

935 
	$Œdp_p‹t_°©us_h™dÀr
(*
≠p_¨g
, 
c_oÂ_p‹t_°©us_t
 *
p‹t_°©
)

937 
uöt64_t
 
ª˚ivî_id
 = 
	`¡ohŒ
(
p‹t_°©
->
d©≠©h_id
);

939 
p‹t_°©
->
ªas⁄
){

940 
OFPPR_ADD
:

941 
	`Œdp_p‹t_add_wôh_dpid
(
≠p_¨g
, 
ª˚ivî_id
, &
p‹t_°©
->
desc
);

943 
OFPPR_MODIFY
:

944 
	`Œdp_p‹t_mod
(
≠p_¨g
, 
ª˚ivî_id
, 
p‹t_°©
);

946 
OFPPR_DELETE
:

947 
	`Œdp_p‹t_dñëe
(
ª˚ivî_id
, &
p‹t_°©
->
desc
);

950 
	`c_log_îr
("%s: unknow¿ªas⁄ %d", 
FN
, 
p‹t_°©
->
ªas⁄
);

953 
	}
}

962 
	$Œdp_˛ó«Œ_swôches
(
å_°ru˘_t
 *
å
)

964 
t›o_hdl_t
 *
t›o_hdl
 = 
å
->topo_hdl;

965 
	`g_hash_èbÀ_ªmove_Æl
(
t›o_hdl
->
swôches
);

966 
	}
}

974 
	$Œdp_¸óã_∑ckë
(*
§c_addr
, 
uöt64_t
 
§cId
, 
uöt16_t
 
§cP‹t
,

975 
Œdp_pkt_t
 *
buf„r
)

977 
uöt8_t
 
de°_addr
[
OFP_ETH_ALEN
] = {0x01,0x80,0xc2,0x00,0x00,0x0e};

979 
	`mem˝y
(
buf„r
->
ëh_hód
.
de°_addr
,de°_addr,
OFP_ETH_ALEN
);

980 
	`mem˝y
(
buf„r
->
ëh_hód
.
§c_addr
,§c_addr,
OFP_ETH_ALEN
);

981 
buf„r
->
ëh_hód
.
ëhîty≥
 = 
	`ht⁄s
(0x88cc);

982 
buf„r
->
chassis_év_ty≥
 = 
LLDP_CHASSIS_ID_TLV
;

983 
buf„r
->
chassis_év_Àngth
 = (
uöt64_t
) + 1;

984 
buf„r
->
chassis_év_subty≥
 = 
LLDP_CHASSIS_ID_LOCALLY_ASSIGNED
;

985 
buf„r
->
chassis_év_id
 = 
	`ht⁄Œ
(
§cId
);

986 
buf„r
->
p‹t_év_ty≥
 = 
LLDP_PORT_ID_TLV
;

987 
buf„r
->
p‹t_év_Àngth
 = (
uöt16_t
) + 1;

988 
buf„r
->
p‹t_év_subty≥
 = 
LLDP_PORT_ID_LOCALLY_ASSIGNED
;

989 
buf„r
->
p‹t_év_id
 = 
	`ht⁄s
(
§cP‹t
);

990 
buf„r
->
âl_év_ty≥
 = 
LLDP_TTL_TLV
;

991 
buf„r
->
âl_év_Àngth
 = 2;

992 
buf„r
->
âl_év_âl
 = 
	`ht⁄s
(
LLDP_DEFAULT_TTL
);

993 
buf„r
->
íd_of_Œdpdu_év_ty≥
 = 
LLDP_END_OF_LLDPDU_TLV
;

994 
buf„r
->
íd_of_Œdpdu_év_Àngth
 = 0;

995 
	}
}

1003 
	$Œdp_tx
(*
≠p_¨g
, 
Œdp_swôch_t
 *
Œdp_swôch
, 
Œdp_p‹t_t
 *
Œdp_p‹t
)

1005 
of_pkt_out_∑øms
 
∑øms
;

1006 
oÂ_a˘i⁄_ouçut
 
›_a˘
;

1007 
Œdp_pkt_t
 
Œdp_d©a
;

1008 
uöt8_t
 
debug_hwaddr_buf
[
LLDP_HWADDR_DEBUG_STRING_LEN
];

1010 
	`as£π
(
Œdp_swôch
 && 
Œdp_p‹t
);

1013 
	`Œdp_¸óã_∑ckë
(
Œdp_p‹t
->
hw_addr
, 
Œdp_swôch
->
dpid
,

1014 
Œdp_p‹t
->
p‹t_no
, &
Œdp_d©a
);

1016 
	`c⁄v_hwaddr
(
Œdp_p‹t
->
hw_addr
, 
debug_hwaddr_buf
);

1019 
∑øms
.
buf„r_id
 = (
uöt32_t
)(-1);

1020 
∑øms
.
ö_p‹t
 = 
OFPP_NONE
;

1021 
∑øms
.
a˘i⁄_li°
 = &
›_a˘
;

1022 
	`of_make_a˘i⁄_ouçut
((**)&
∑øms
.
a˘i⁄_li°
, (
›_a˘
),

1023 
Œdp_p‹t
->
p‹t_no
);

1024 
∑øms
.
a˘i⁄_Àn
 = (
›_a˘
);

1025 
∑øms
.
d©a_Àn
 = (
Œdp_pkt_t
);

1026 
∑øms
.
d©a
 = &
Œdp_d©a
;

1029 
	`mul_≠p_£nd_pkt_out
(
≠p_¨g
, 
Œdp_swôch
->
dpid
, &
∑øms
);

1031 
	}
}

1039 
	$__Œdp_≥r_p‹t_timî
(
UNUSED
 *
key
, *
vÆue
, *
time_¨g
)

1041 
time_t
 
cuº_time
 = *—ime_à*)
time_¨g
;

1042 
Œdp_p‹t_t
 *
this_p‹t
 = (Œdp_p‹t_à*)
vÆue
;

1043 
Œdp_swôch_t
 *
this_swôch
 = 
this_p‹t
->
Œdp_sw
;

1045 i‡(
this_p‹t
->
°©us
 =
LLDP_PORT_STATUS_NEIGHBOR
) {

1048 i‡(
this_p‹t
->
âl
 <
cuº_time
) {

1049 
	`c_log_debug
("%s:switch 0x%llxÖort %u <-> "

1051 
FN
, (Ë
this_swôch
->
dpid
,

1052 
this_p‹t
->
p‹t_no
,

1053 ()
this_p‹t
->
√ighb‹_dpid
,

1054 
this_p‹t
->
√ighb‹_p‹t
);

1056 
	`Œdp_p‹t_disc⁄√˘_to_√igh
(
this_swôch
, 
this_p‹t
, 0, 
Ál£
, 
åue
);

1061 if(!
this_p‹t
->
√xt_¥obe
 ||Åhis_p‹t->√xt_¥obê<
cuº_time
) {

1068 
this_p‹t
->
√xt_¥obe
 = 
cuº_time
 + 
LLDP_PROBE_PORT_INTERVAL
;

1069 
	`Œdp_tx
(
NULL
, 
this_swôch
, 
this_p‹t
);

1072 
	}
}

1081 
	$Œdp_≥r_swôch_timî
(*
key
 
UNUSED
, *
vÆue
, *
¨g
)

1083 
Œdp_swôch_t
 *
this_swôch
 = (Œdp_swôch_à*)
vÆue
;

1089 
	`c_wr_lock
(&
this_swôch
->
lock
);

1091 i‡(
this_swôch
->
p‹ts
){

1092 
	`g_hash_èbÀ_f‹óch
(
this_swôch
->
p‹ts
, 
__Œdp_≥r_p‹t_timî
,

1093 
¨g
);

1096 
	`c_wr_u∆ock
(&
this_swôch
->
lock
);

1097 
	}
}

1105 
	$Œdp_upd©e_timî
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED, *
¨g
)

1108 
t›o_hdl_t
 *
hdl
 = 
¨g
;

1109 
timevÆ
 
tv
 = { 
LLDP_UPDATE_INTVL_SEC
 , 
LLDP_UPDATE_INTVL_USEC
 };

1110 
time_t
 
check_time
 = 
	`time
(
NULL
);

1112 
	`c_rd_lock
(&
t›o_hdl
->
swôch_lock
);

1113 
	`g_hash_èbÀ_f‹óch
(
t›o_hdl
->
swôches
, 
Œdp_≥r_swôch_timî
, &
check_time
);

1114 
	`c_rd_u∆ock
(&
t›o_hdl
->
swôch_lock
);

1116 i‡(
hdl
->
å
->
π
.
π_åiggî
 ||

1117 
hdl
->
å
->
π
.
π_√xt_åiggî_ts
 <
check_time
) {

1119 
hdl
->
å
->
π
.
π_åiggî
 = 
Ál£
;

1120 
	`c_wr_lock
(&
t›o_hdl
->
swôch_lock
);

1121 
	`__å_övoke_routög
(
hdl
->
å
);

1122 
	`c_wr_u∆ock
(&
t›o_hdl
->
swôch_lock
);

1123 
hdl
->
å
->
π
.
π_√xt_åiggî_ts
 = 
check_time
 + 
RT_PERIODIC_TRIGGER_TS
;

1127 
	`evtimî_add
(
hdl
->
Œdp_upd©e_evít
, &
tv
);

1129 
	}
}

1137 
	$mul_Œdp_öô
(
å_°ru˘_t
 *
å
)

1139 
evít_ba£
 *
ba£
 = 
å
->
≠p_˘x
;

1140 
timevÆ
 
upd©e_tv
 = { 
LLDP_UPDATE_INTVL_INIT_SEC
,

1141 
LLDP_UPDATE_INTVL_USEC
 };

1142 
t›o_hdl_t
 *
hdl
 = 
NULL
;

1144 
	`c_log_debug
("%s", 
FN
);

1146 
hdl
 = 
	`ˇŒoc
(1, (
t›o_hdl_t
));

1147 i‡(!
hdl
) {

1148 
	`c_log_îr
("%s:áŒo¯Áûed", 
FN
);

1152 
	`Œdp_öô_sw_im≠
(
hdl
);

1154 
	`c_rw_lock_öô
(&
hdl
->
swôch_lock
);

1155 
	`c_rw_lock_öô
(&
hdl
->
pkt_lock
);

1156 
hdl
->
å
 =År;

1157 
hdl
->
swôches
 = 
	`g_hash_èbÀ_√w_fuŒ
(
dpid_hash_func
,

1158 
dpid_equÆ_func
,

1159 
NULL
, 
Œdp_swôch_ªmove
);

1160 
hdl
->
Œdp_upd©e_evít
 = 
	`evtimî_√w
(
ba£
, 
Œdp_upd©e_timî
, (*)hdl);

1161 
	`evtimî_add
(
hdl
->
Œdp_upd©e_evít
, &
upd©e_tv
);

1163 
t›o_hdl
 = 
hdl
;

1164 
å
->
t›o_hdl
 = 
hdl
;

1167 
	}
}

	@services/loadable/topo_routing/mul_lldp_common.c

18 
	~"mul_å.h
"

20 
t›o_hdl_t
 *
t›o_hdl
;

28 
	$Œdp_√igh_p‹éi°_de°roy
(*
key
)

30 
Œdp_√igh_t
 *
√ighbour
 = (Œdp_√igh_à*)
key
;

31 i‡(
√ighbour
->
p‹ts
) {

32 
	`g_¶i°_‰ì
(
√ighbour
->
p‹ts
);

33 
√ighbour
->
p‹ts
 = 
NULL
;

35 
	`‰ì
(
√ighbour
);

36 
	}
}

44 
	$Œdp_≥r_p‹t_ªmove
(
UNUSED
 *
key
, *
vÆue
, *
swôch_¨g
)

46 
Œdp_swôch_t
 *
Œdp_swôch
 = 
swôch_¨g
;

47 
Œdp_p‹t_t
 *
p‹t
 = (Œdp_p‹t_à*)
vÆue
;

49 
	`c_wr_lock
(&
Œdp_swôch
->
lock
);

50 i‡(
p‹t
->
°©us
 =
LLDP_PORT_STATUS_NEIGHBOR
) {

51 
	`Œdp_p‹t_disc⁄√˘_to_√igh
(
Œdp_swôch
, 
p‹t
, 0, 
Ál£
, false);

54 
	`c_wr_u∆ock
(&
Œdp_swôch
->
lock
);

56 
	`‰ì
(
p‹t
);

57 
	}
}

65 
	$Œdp_swôch_uƒef
(
Œdp_swôch_t
 *
Œdp_swôch
)

67 
	`©omic_dec
(&
Œdp_swôch
->
ªf
, 1);

73 i‡(
	`©omic_ªad
(&
Œdp_swôch
->
ªf
) == 0){

76 
	`Œdp_dñ_swôch_‰om_im≠
(
t›o_hdl
, 
Œdp_swôch
);

83 i‡(
Œdp_swôch
->
p‹ts
){

85 
	`g_hash_èbÀ_f‹óch
(
Œdp_swôch
->
p‹ts
, 
Œdp_≥r_p‹t_ªmove
,

86 
Œdp_swôch
);

87 
	`g_hash_èbÀ_de°roy
(
Œdp_swôch
->
p‹ts
);

90 
	`c_rw_lock_de°roy
(&
Œdp_swôch
->
lock
);

92 
	`c_log_debug
("Œd∞(0x%ŒxË‰ìd",()
Œdp_swôch
->
dpid
);

94 
	`‰ì
(
Œdp_swôch
);

96 
	}
}

103 
Œdp_swôch_t
 *

104 
	$„tch_™d_ªèö_swôch
(
uöt64_t
 
dpid
)

106 
Œdp_swôch_t
 *
this_swôch
;

107 
	`c_rd_lock
(&
t›o_hdl
->
swôch_lock
);

109 
this_swôch
 = 
	`g_hash_èbÀ_lookup
(
t›o_hdl
->
swôches
,&
dpid
);

111 i‡(
this_swôch
)

112 
	`Œdp_swôch_ªf
(
this_swôch
);

115 
	`c_rd_u∆ock
(&
t›o_hdl
->
swôch_lock
);

117  
this_swôch
;

118 
	}
}

126 
	$Œdp_öô_sw_im≠
(
t›o_hdl_t
 *
t›o
)

128 
	`as£π
(
t›o
);

130 i‡(!
t›o
->
sw_im≠
) {

131 
t›o
->
sw_im≠
 = 
	`ˇŒoc
(1, (
Œdp_Æüs_swm≠_ñem_t
) *

132 
MAX_SWITCHES_PER_CLUSTER
);

134 
	`c_log_îr
("%s: Swôch iM≠áÃódyáŒoˇãd", 
FN
);

138 
	`as£π
(
t›o
->
sw_im≠
);

140 
t›o
->
max_sw_Æüs
 = -1;

143 
	}
}

151 
	$Œdp_add_swôch_to_im≠
(
t›o_hdl_t
 *
t›o
, 
Œdp_swôch_t
 *
sw
)

153 
Œdp_Æüs_swm≠_ñem_t
 *
m≠_ñem
 = 
NULL
;

155 
	`as£π
(
t›o
 &&Å›o->
sw_im≠
);

157 i‡(
sw
->
Æüs_id
 < 0 || sw->Æüs_id >
MAX_SWITCHES_PER_CLUSTER
) {

158 
	`c_log_îr
("%s: Can'táddÅo imapálias-id(%d) out ofÑange",

159 
FN
, 
sw
->
Æüs_id
);

163 
m≠_ñem
 = (
Œdp_Æüs_swm≠_ñem_t
 *)(
t›o
->
sw_im≠
Ë+ 
sw
->
Æüs_id
;

165 i‡(
m≠_ñem
->
Œdp_sw
) {

166 
	`c_log_îr
("%s: id (%dË-> (%p)", 
FN
, 
sw
->
Æüs_id
, 
m≠_ñem
->
Œdp_sw
);

170 
m≠_ñem
->
Œdp_sw
 = 
sw
;

173 
	}
}

182 
	$Œdp_dñ_swôch_‰om_im≠
(
t›o_hdl_t
 *
t›o
, 
Œdp_swôch_t
 *
sw
)

184 
Œdp_Æüs_swm≠_ñem_t
 *
m≠_ñem
 = 
NULL
;

186 
	`as£π
(
t›o
 &&Å›o->
sw_im≠
);

188 i‡(
sw
->
Æüs_id
 < 0 || sw->Æüs_id >
MAX_SWITCHES_PER_CLUSTER
) {

189 
	`c_log_îr
("%s: Can'táddÅo imapálias-id(%d) out ofÑange",

190 
FN
, 
sw
->
Æüs_id
);

194 
m≠_ñem
 = (
Œdp_Æüs_swm≠_ñem_t
 *)(
t›o
->
sw_im≠
Ë+ 
sw
->
Æüs_id
;

196 
m≠_ñem
->
Œdp_sw
 = 
NULL
;

199 
	`c_log_îr
("%s: id (%dË-> (%p)", 
FN
, 
sw
->
Æüs_id
, 
m≠_ñem
->
Œdp_sw
);

200 
	}
}

	@services/loadable/topo_routing/mul_lldp_common.h

19 #i‚de‡
__MUL_LLDP_COMMON_H__


20 
	#__MUL_LLDP_COMMON_H__


	)

23 
	st›o_hdl_
 {

24 
evít
 *
	mŒdp_upd©e_evít
;

25 
GHashTabÀ
 *
	mswôches
;

26 
c_rw_lock_t
 
	mswôch_lock
;

27 
c_rw_lock_t
 
	mpkt_lock
;

28 *
	msw_im≠
;

29 
	mmax_sw_Æüs
;

31 
å_°ru˘_t
 *
	må
;

35 
	sŒdp_£¡_pkt_
 {

36 
uöt64_t
 
	m£ndî_id
;

37 
uöt16_t
 
	mp‹t_id
;

39 
uöt8_t
 
	mchecked
;

43 
	sŒdp_swôch_
 {

44 
c_rw_lock_t
 
	mlock
;

45 
c_©omic_t
 
	mªf
;

46 
uöt64_t
 
	mdpid
;

47 
	mÆüs_id
;

48 
GHashTabÀ
 *
	mp‹ts
;

49 
GHashTabÀ
 *
	m√ighb‹s
;

52 
	eŒdp_p‹t_°©us
 {

53 
	mLLDP_PORT_STATUS_INIT
,

54 
	mLLDP_PORT_STATUS_NEIGHBOR
,

55 
	mLLDP_PORT_STATUS_EXTERNAL


59 
	sŒdp_p‹t_
 {

60 
uöt16_t
 
	mp‹t_no
;

61 
uöt8_t
 
	m°©us
;

62 
uöt32_t
 
	mc⁄fig
;

63 
uöt32_t
 
	m°©e
;

66 
uöt16_t
 
	m√ighb‹_p‹t
;

67 
uöt64_t
 
	m√ighb‹_dpid
;

68 
uöt8_t
 
	mhw_addr
[
OFP_ETH_ALEN
];

69 
time_t
 
	mâl
;

70 
time_t
 
	m√xt_¥obe
;

71 
Œdp_swôch_
 *
	mŒdp_sw
;

74 
	sŒdp_Æüs_swm≠_ñem_


76 
Œdp_swôch_
 *
	mŒdp_sw
;

78 
Œdp_Æüs_swm≠_ñem_
 
	tŒdp_Æüs_swm≠_ñem_t
;

80 
	sŒdp_√igh_
 {

81 
uöt64_t
 
	mŸhî_dpid
;

82 
GSLi°
 *
	mp‹ts
;

85 
t›o_π_öfo_
 
	tt›o_π_öfo_t
;

86 
t›o_hdl_
 
	tt›o_hdl_t
;

87 
Œdp_swôch_
 
	tŒdp_swôch_t
;

88 
Œdp_p‹t_
 
	tŒdp_p‹t_t
;

89 
Œdp_√igh_
 
	tŒdp_√igh_t
;

90 
Œdp_£¡_pkt_
 
	tŒdp_£¡_pkt_t
;

92 
ölöe
 

93 
	$Œdp_swôch_ªf
(
Œdp_swôch_t
 *
Œdp_swôch
)

95 
	`©omic_öc
(&
Œdp_swôch
->
ªf
,1);

96 
	}
}

98 
ölöe
 

99 
	$Œdp_sw_rd_lock
(
t›o_hdl_t
 *
hdl
)

101 
	`c_rd_lock
(&
hdl
->
swôch_lock
);

102 
	}
}

104 
ölöe
 

105 
	$Œdp_sw_rd_u∆ock
(
t›o_hdl_t
 *
hdl
)

107 
	`c_rd_u∆ock
(&
hdl
->
swôch_lock
);

108 
	}
}

110 
ölöe
 

111 
	$Œdp_sw_wr_u∆ock
(
t›o_hdl_t
 *
hdl
)

113 
	`c_wr_u∆ock
(&
hdl
->
swôch_lock
);

114 
	}
}

116 
ölöe
 

117 
	$Œdp_sw_wr_åylock
(
t›o_hdl_t
 *
hdl
)

119  
	`c_wr_åylock
(&
hdl
->
swôch_lock
);

120 
	}
}

122 
ölöe
 
Œdp_swôch_t
 *

123 
	$Œdp_gë_swôch_‰om_im≠
(
t›o_hdl_t
 *
t›o
, 
idx
)

125  ((
Œdp_Æüs_swm≠_ñem_t
 *)(
t›o
->
sw_im≠
Ë+ 
idx
)->
Œdp_sw
;

126 
	}
}

128 
cbuf
 *
Œdp_£rvi˚_√igh_ªque°
(
uöt64_t
 
dpid
, 
uöt32_t
 
xid
);

129 
Œdp_swôch_åavî£_Æl
(
t›o_hdl_t
 *
t›o_hdl
, 
GHFunc
 
ôî_‚
, *
¨g
);

130 
Œdp_swôch_add
(*
≠p_¨g
, 
c_oÂ_swôch_add_t
 *
oÂ_ß
);

131 
Œdp_swôch_dñëe
(
uöt64_t
 
dpid
);

132 
Œdp_p‹t_åavî£_Æl
(
Œdp_swôch_t
 *
Œdpsw
, 
GHFunc
 
ôî_‚
, *
¨g
);

133 
Œdp_p‹t_add
(*
≠p_¨g
, 
Œdp_swôch_t
 *
sw
, 
oÂ_phy_p‹t
 *
p‹t_öfo
,

134 
boﬁ
 
√ed_lock
);

135 
Œdp_∑ckë_h™dÀr
(
uöt64_t
 
ª˚ivî_id
, 
uöt16_t
 
ª˚ivî_p‹t
, 
Œdp_pkt_t
 *
pkt
);

136 
Œdp_p‹t_°©us_h™dÀr
(*
≠p_¨g
, 
c_oÂ_p‹t_°©us_t
 *
p‹t_°©
);

137 
mul_Œdp_öô
(
å_°ru˘_t
 *
å
);

138 
Œdp_p‹t_t
 *
Œdp_p‹t_föd
(
Œdp_swôch_t
 *
Œdp_sw
, 
uöt16_t
 
p‹t_id
);

139 
Œdp_p‹t_t
 *
__Œdp_p‹t_föd
(
Œdp_swôch_t
 *
Œdp_sw
, 
uöt16_t
 
p‹t_id
);

140 
Œdp_swôch_t
 *
„tch_™d_ªèö_swôch
(
uöt64_t
 
dpid
);

141 
Œdp_√igh_p‹éi°_de°roy
(*
key
);

142 
Œdp_swôch_uƒef
(
Œdp_swôch_t
 *
Œdp_swôch
);

143 
Œdp_åavî£_Æl_√igh_p‹ts
(
Œdp_√igh_t
 *
√igh
, 
GFunc
 
ôî_‚
, *
u_¨g
);

144 
Œdp_˛ó«Œ_swôches
(
å_°ru˘_t
 *
å
);

145 
Œdp_öô_sw_im≠
(
t›o_hdl_t
 *
t›o
);

146 
Œdp_add_swôch_to_im≠
(
t›o_hdl_t
 *
t›o
, 
Œdp_swôch_t
 *
sw
);

147 
Œdp_dñ_swôch_‰om_im≠
(
t›o_hdl_t
 *
t›o
, 
Œdp_swôch_t
 *
sw
);

148 
Œdp_p‹t_disc⁄√˘_to_√igh
(
Œdp_swôch_t
 *
this_swôch
,

149 
Œdp_p‹t_t
 *
this_p‹t
,

150 
uöt16_t
 
p‹t_id
, 
boﬁ
 
√ed_lock
, boﬁ 
ã¨_∑ú
);

151 
Œdp_tx
(*
≠p_¨g
, 
Œdp_swôch_t
 *
Œdp_swôch
,

152 
Œdp_p‹t_t
 *
Œdp_p‹t
);

153 
__Œdp_gë_num_swôches
(
t›o_hdl_t
 *
t›o
);

154 
__Œdp_gë_max_swôch_Æüs
(
t›o_hdl_t
 *
t›o
);

155 
__Œdp_öô_√igh_∑ú_adja˚ncõs
(
å_√igh_quîy_¨g_t
 *
¨g
);

	@services/loadable/topo_routing/mul_lldp_debug.c

19 
	~"mul_å.h
"

22 
	$c⁄v_hwaddr
(
uöt8_t
 *
hwaddr
, *
°rög_buf„r
)

24 
	`•rötf
(
°rög_buf„r
,"%02X-%02X-%02X-%02X-%02X-%02X",
hwaddr
[0],hwaddr[1],hwaddr[2],hwaddr[3],hwaddr[4],hwaddr[5]);

25 
	}
}

28 
	$dump_swôch
(
Œdp_swôch_t
 *
this_swôch
)

30 
	`c_log_debug
("swôch 0x%Œx: ", ()
this_swôch
->
dpid
);

31 
	`g_hash_èbÀ_f‹óch
(
this_swôch
->
p‹ts
,
dump_p‹t
,&this_swôch->
dpid
);

32 
	}
}

34 
	$dump_p‹t
(*
key
 
UNUSED
, *
vÆue
, *
u£r_d©a
)

36 
hwaddr_°r
[
LLDP_HWADDR_DEBUG_STRING_LEN
];

37 
Œdp_p‹t_t
 *
this_p‹t
 = (Œdp_p‹t_à*Ë
vÆue
;

38 
uöt64_t
 
dpid
 = *(uöt64_à*)
u£r_d©a
;

40 
	`c⁄v_hwaddr
(
this_p‹t
->
hw_addr
,
hwaddr_°r
);

42 
	`c_log_debug
("swôch 0x%ŒxÖ‹à%hu: hwaddr=%†c⁄fig=%d sèã=%dÖ‹t_°©us=%d", ()
dpid
, 
this_p‹t
->
p‹t_no
, 
hwaddr_°r
,Åhis_p‹t->
c⁄fig
,Åhis_p‹t->
°©e
,Åhis_p‹t->
°©us
);

43 
	}
}

	@services/loadable/topo_routing/mul_lldp_debug.h

18 #i‚de‡
LLDP_DEBUG_H_


19 
	#LLDP_DEBUG_H_


	)

21 
	#LLDP_HWADDR_DEBUG_STRING_LEN
 19

	)

23 
c⁄v_hwaddr
(
uöt8_t
 *
hwaddr
, *
°rög_buf„r
);

24 
dump_swôch
(
Œdp_swôch_t
 *
this_swôch
);

25 
dump_p‹t
(*
key
 
UNUSED
, *
vÆue
, *
u£r_d©a
);

	@services/loadable/topo_routing/mul_lldp_hash.c

19 
	~"mul_å.h
"

27 
	$dpid_hash_func
(c⁄° *
key
)

29  
	`hash_byãs
(
key
,(
uöt64_t
),1);

30 
	}
}

38 
	$dpid_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
)

40 
uöt64_t
 
idA
 = *((uöt64_à*)
key1
);

41 
uöt64_t
 
idB
 = *((uöt64_à*)
key2
);

43  
idA
 =
idB
;

44 
	}
}

52 
	$Œdp_swôch_ªmove
(*
d©a
)

54 
	`Œdp_swôch_uƒef
((
Œdp_swôch_t
 *)
d©a
);

55 
	}
}

63 
	$p‹tid_hash_func
(c⁄° * 
key
)

65  *((
uöt16_t
 *)
key
);

66 
	}
}

74 
	$p‹tid_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
)

76 
uöt16_t
 
idA
 = *((uöt16_à*)
key1
);

77 
uöt16_t
 
idB
 = *((uöt16_à*)
key2
);

78  
idA
 =
idB
;

79 
	}
}

83 
	$£¡_pkt_hash_func
(c⁄° *
key
)

86  
	`hash_byãs
(
key
, (
uöt64_t
Ë+ (
uöt16_t
),1);

87 
	}
}

89 
	$£¡_pkt_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
)

91 
Œdp_£¡_pkt_t
 *
pkt1
,*
pkt2
;

92 
pkt1
 = (
Œdp_£¡_pkt_t
 *)
key1
;

93 
pkt2
 = (
Œdp_£¡_pkt_t
 *)
key2
;

94  (
pkt1
->
£ndî_id
 =
pkt2
->£ndî_idË&& (pkt1->
p‹t_id
 ==Ökt2->port_id);

95 
	}
}

	@services/loadable/topo_routing/mul_lldp_hash.h

18 #i‚de‡
__MUL_LLDP_HASH_H__


19 
	#__MUL_LLDP_HASH_H__


	)

21 
dpid_hash_func
(c⁄° *
key
);

22 
dpid_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
);

23 
Œdp_swôch_ªmove
(*
d©a
);

25 
p‹tid_hash_func
(c⁄° * 
key
);

26 
p‹tid_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
);

28 
£¡_pkt_hash_func
(c⁄° *
key
);

29 
£¡_pkt_equÆ_func
(c⁄° *
key1
, c⁄° *
key2
);

	@services/loadable/topo_routing/mul_lldp_pkt.h

18 #i‚de‡
__LLDP_H__


19 
	#__LLDP_H__


	)

22 
	#LLDP_UPDATE_INTVL_SEC
 2

	)

23 
	#LLDP_UPDATE_INTVL_USEC
 0

	)

24 
	#LLDP_UPDATE_INTVL_INIT_SEC
 (
LLDP_UPDATE_INTVL_SEC
)

	)

27 
	#LLDP_PKT_TIMER_INTVL_SEC
 10

	)

28 
	#LLDP_PKT_TIMER_INTVL_USEC
 0

	)

31 
	#LLDP_DEFAULT_TTL
 20

	)

32 
	#LLDP_PROBE_PORT_INTERVAL
 (2)

	)

35 
	eŒdp_év_ty≥
{

37 
	mLLDP_END_OF_LLDPDU_TLV
 = 0,

38 
	mLLDP_CHASSIS_ID_TLV
 = 1,

39 
	mLLDP_PORT_ID_TLV
 = 2,

40 
	mLLDP_TTL_TLV
 = 3,

43 
	mLLDP_PORT_DESC_TLV
 = 4,

44 
	mLLDP_SYSTEM_NAME_TLV
 = 5,

45 
	mLLDP_SYSTEM_DESC_TLV
 = 6,

46 
	mLLDP_SYSTEM_CAPABILITY_TLV
 = 7,

47 
	mLLDP_MGMT_ADDR_TLV
 = 8

51 
	eŒdp_chassis_id_subty≥
 {

52 
	mLLDP_CHASSIS_ID_LOCALLY_ASSIGNED
 = 7

55 
	eŒdp_p‹t_id_subty≥
 {

56 
	mLLDP_PORT_ID_LOCALLY_ASSIGNED
 = 7

59 
	sëhî√t2_hódî


61 
uöt8_t
 
	mde°_addr
[
OFP_ETH_ALEN
];

62 
uöt8_t
 
	m§c_addr
[
OFP_ETH_ALEN
];

63 
uöt16_t
 
	mëhîty≥
;

67 
	sŒdp_pkt_
 {

68 
ëhî√t2_hódî
 
	mëh_hód
;

69 
	mchassis_év_ty≥
 : 7;

70 
	mchassis_év_Àngth
 : 9;

71 
uöt8_t
 
	mchassis_év_subty≥
;

72 
uöt64_t
 
	mchassis_év_id
;

73 
	mp‹t_év_ty≥
 : 7;

74 
	mp‹t_év_Àngth
 : 9;

75 
uöt8_t
 
	mp‹t_év_subty≥
;

76 
uöt16_t
 
	mp‹t_év_id
;

77 
	mâl_év_ty≥
 : 7;

78 
	mâl_év_Àngth
 : 9;

79 
uöt16_t
 
	mâl_év_âl
;

80 
	míd_of_Œdpdu_év_ty≥
 : 7;

81 
	míd_of_Œdpdu_év_Àngth
 : 9;

82 } 
__©åibuã__
 ((
∑cked
));

84 
Œdp_pkt_
 
	tŒdp_pkt_t
;

	@services/loadable/topo_routing/mul_lldp_vty.c

18 
	~"mul_å.h
"

19 
	~"mul_vty.h
"

21 
t›o_hdl_t
 *
t›o_hdl
;

24 
	$show_Œdp_swôch_summ¨y
(*
key
 
UNUSED
, *
sw_¨g
, *
u¨g
)

26 
Œdp_swôch_t
 *
Œdpsw
 = (Œdp_swôch_à*)
sw_¨g
;

27 
vty
 *vty = (vty *)
u¨g
;

30 
uöt64_t
 
dpid
;

31 
uöt32_t
 
p‹t_cou¡
;

32 
uöt32_t
 
√ighb‹_cou¡
;

35 
	`c_rd_lock
(&
Œdpsw
->
lock
);

36 
dpid
 = 
Œdpsw
->dpid;

37 
p‹t_cou¡
 = 
	`g_hash_èbÀ_size
(
Œdpsw
->
p‹ts
);

38 
√ighb‹_cou¡
 = 
	`g_hash_èbÀ_size
(
Œdpsw
->
p‹ts
);

39 
	`c_rd_u∆ock
(&
Œdpsw
->
lock
);

42 
	`vty_out
 (
vty
,"0x%10Œx | %12d | %10u | %u%s", ()
dpid
,

43 
Œdpsw
->
Æüs_id
, 
p‹t_cou¡
, 
√ighb‹_cou¡
, 
VTY_NEWLINE
);

44 
	}
}

47 
DEFUN
 (
show_Œdp_swôch_Æl
,

48 
show_Œdp_swôch_Æl_cmd
,

50 
SHOW_STR


55 
vty_out
 (
vty
,

58 
VTY_NEWLINE
);

59 
vty_out
 (
vty
,"%12†| %12†| %10†| %s%s","swôch-id", "Æüs-id", "#Ö‹ts","#Çeighb‹s",
VTY_NEWLINE
);

60 
vty_out
 (
vty
,

63 
VTY_NEWLINE
);

65 
Œdp_swôch_åavî£_Æl
(
t›o_hdl
, 
show_Œdp_swôch_summ¨y
, 
vty
);

67 
vty_out
 (
vty
,

70 
VTY_NEWLINE
,VTY_NEWLINE);

72  
	gCMD_SUCCESS
;

76 
	$show_Œdp_p‹t_öfo
(*
key
 
UNUSED
, *
sw_¨g
, *
u¨g
)

78 
Œdp_p‹t_t
 *
p‹t
 = (Œdp_p‹t_à*)
sw_¨g
;

79 
vty
 *vty = (vty *)
u¨g
;

82 
uöt16_t
 
p‹t_no
;

83 
uöt8_t
 
Œdp_p‹t_°©us
;

84 
uöt64_t
 
Ÿhî_dpid
;

85 
uöt16_t
 
Ÿhî_p‹tid
;

87 c⁄° *
°©us_°r
;

89 
p‹t_no
 = 
p‹t
->port_no;

90 
Œdp_p‹t_°©us
 = 
p‹t
->
°©us
;

91 
°©us_°r
 = 
	`Œdp_gë_p‹t_°©us_°rög
(
Œdp_p‹t_°©us
);

92 i‡(
Œdp_p‹t_°©us
 =
LLDP_PORT_STATUS_NEIGHBOR
){

94 
Ÿhî_dpid
 = 
p‹t
->
√ighb‹_dpid
;

95 
Ÿhî_p‹tid
 = 
p‹t
->
√ighb‹_p‹t
;

97 
	`vty_out
 (
vty
,"%12u | %10†| %10Œu | %u%s",
p‹t_no
,
°©us_°r
,()
Ÿhî_dpid
,
Ÿhî_p‹tid
,
VTY_NEWLINE
);

101 
	`vty_out
 (
vty
,"%12u | %10†| %10†| %s%s",
p‹t_no
,
°©us_°r
,"","",
VTY_NEWLINE
);

103 
	}
}

108 
DEFUN
 (
show_Œdp_swôch_dëaû
,

109 
show_Œdp_swôch_dëaû_cmd
,

111 
SHOW_STR


116 
uöt64_t
 
	gswôchId
;

117 
Œdp_swôch_t
 *
	gŒdpsw
;

119 
	gswôchId
 = 
°πouŒ
(
¨gv
[0], 
NULL
, 16);

121 
	gŒdpsw
 = 
„tch_™d_ªèö_swôch
(
swôchId
);

122 i‡(!
	gŒdpsw
){

123 
vty_out
(
vty
,"swôch(0x%ŒxËd€†nŸÉxi°",()
swôchId
);

124  
	gCMD_WARNING
;

127 
vty_out
 (
vty
,

130 
VTY_NEWLINE
);

131 
vty_out
 (
vty
,"%12†| %10†| %10†| %s%s","p‹à#","°©us","√ighb‹ #","√ighb‹Ö‹à#",
VTY_NEWLINE
);

132 
vty_out
 (
vty
,

135 
VTY_NEWLINE
);

137 
Œdp_p‹t_åavî£_Æl
(
Œdpsw
,
show_Œdp_p‹t_öfo
,
vty
);

138 
vty_out
 (
vty
,

141 
VTY_NEWLINE
, VTY_NEWLINE);

143 
Œdp_swôch_uƒef
(
Œdpsw
);

144  
	gCMD_SUCCESS
;

149 
	$Œdp_vty_öô
(*
¨g
 
UNUSED
)

152 
	`c_log_debug
("%s: in°Ælög vty comm™d", 
FN
);

153 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Œdp_swôch_Æl_cmd
);

154 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_Œdp_swôch_dëaû_cmd
);

155 
	}
}

	@services/loadable/topo_routing/mul_lldp_vty.h

19 #i‚de‡
__LLDP_VTY_H__


20 
	#__LLDP_VTY_H__


	)

23 
Œdp_vty_öô
(*
¨g
 
UNUSED
);

26 
ölöe
 const *

27 
	$Œdp_gë_p‹t_°©us_°rög
(
uöt8_t
 
Œdp_p‹t_°©us
)

29 
Œdp_p‹t_°©us
){

30 
LLDP_PORT_STATUS_INIT
:  "LINK INIT";

31 
LLDP_PORT_STATUS_NEIGHBOR
:  "SWITCH";

32 
LLDP_PORT_STATUS_EXTERNAL
:  "EXT. LINK";

36 
	}
}

	@services/loadable/topo_routing/mul_route.h

19 #i‚de‡
__MUL_ROUTE_H__


20 
	#__MUL_ROUTE_H__


	)

22 
	#RT_HB_INTVL_SEC
 2

	)

23 
	#RT_HB_INTVL_INITSEC
 6

	)

24 
	#RT_HB_INTVL_USEC
 0

	)

26 
	#RT_MAX_GET_RETRIES
 100

	)

28 
	#NEIGH_NO_PATH
 (
INT_MAX
)

	)

29 
	#NEIGH_NO_LINK
 (
uöt16_t
)(-1)

	)

31 
	slweight_∑ú_


33 
uöt16_t
 
	mœ
;

34 
uöt16_t
 
	mlb
;

35 
	#NEIGH_DFL_WEIGHT
 (100)

	)

36 
	mweight
;

37 
boﬁ
 
	m⁄lök
;

39 
lweight_∑ú_
 
	tlweight_∑ú_t
;

41 
	#RT_MATRIX_ELEM
(
M
, 
T
, 
sz
, 
row
, 
cﬁ
Ë(((T *)((((
	`T
 (*)[sz])(M))+row)))+cﬁ)

	)

43 
	sπ_adj_ñem_


45 
uöt32_t
 
	m∑ús
;

46 
	#RT_MAX_ADJ_PAIRS
 (4)

	)

47 
lweight_∑ú_t
 
	madj_∑ús
[
RT_MAX_ADJ_PAIRS
];

49 
π_adj_ñem_
 
	tπ_adj_ñem_t
;

51 
	sπ_∑th_ñem_


53 
	msw_Æüs
;

54 
	#RT_PELEM_FIRST_HOP
 0x1

	)

55 
	#RT_PELEM_LAST_HOP
 0x2

	)

56 
uöt8_t
 
	mÊags
;

57 
lweight_∑ú_t
 
	mlök
;

59 
π_∑th_ñem_
 
	tπ_∑th_ñem_t
;

61 
	sπ_å™sô_ñem_


63 
	mn_∑ths
;

64 
	#RT_MAX_EQ_PATHS
 4

	)

65 
	msw_Æüs
[
RT_MAX_EQ_PATHS
];

67 
π_å™sô_ñem_
 
	tπ_å™sô_ñem_t
;

69 
	sπ_li°


71 
GSLi°
 *
	mrouã
;

72 
π_li°
 *
	m√xt
;

74 
π_li°
 
	tπ_li°_t
;

76 
mul_rouã_∑th_åavî£
(
GSLi°
 *
úouã
, 
GFunc
 
ôî_‚
, *
¨g
);

77 
mul_de°roy_rouã
(
GSLi°
 *
rouã
);

78 
size_t
 
mul_rouã_gë_nodes
(*
π_£rvi˚
);

79 
GSLi°
 *
mul_rouã_gë
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
);

80 
GSLi°
 *
mul_rouã_gë_mp
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
, *
u_¨g
,

81 
	$size_t
 (*
mp_£À˘
)(*
u_¨g
, 
size_t
 
max_rouãs
));

82 
	`mul_rouã_öô_block_mëa
(*
π_öfo
, *
blk
);

83 *
	`mul_rouã_£rvi˚_gë
();

84 
	`mul_rouã_£rvi˚_de°roy
(*
π_£rvi˚
);

	@services/loadable/topo_routing/mul_route_apsp.c

20 
	~"mul_å.h
"

23 
mul_rouã_≠•_dump_adj_m©rix
(*
å_hdl
);

31 
ölöe
 

32 
	$mul_˛ór_rouã_m©rix
(
π_≠•_t
 *
π_≠•_öfo
)

34 
	`mem£t
(
π_≠•_öfo
->
adj_m©rix
, 0,

35 
RT_APSP_BLOCK_SIZE
 - (
π_≠•_°©e_t
));

36 
	}
}

43 
ölöe
 

44 
	$mul_˛ór_rouã_°©e_öfo
(
π_≠•_t
 *
π_≠•_öfo
)

46 
π_≠•_öfo
->
°©e_öfo
->
°©e
 = 
RT_APSP_NONE
;

47 
π_≠•_öfo
->
°©e_öfo
->
ˇlc_ts
 = 0;

48 
π_≠•_öfo
->
°©e_öfo
->
nodes
 = 0;

49 
	}
}

61 
	$mul_rouã_≠•_hórbót
(
evutû_sockë_t
 
fd
 
UNUSED
, 
evít
 UNUSED,

62 *
¨g
)

64 
å_°ru˘_t
 *
å
 = 
¨g
;

65 
π_≠•_t
 *
π_≠•_öfo
;

66 
π_¥Ÿ_hdl_t
 *
π_¥Ÿ
;

67 
timevÆ
 
tv
 = { 
RT_HB_INTVL_SEC
,

68 
RT_HB_INTVL_USEC
 };

70 
	`as£π
(
å
 &&År->
π
.
π_¥iv
);

72 
π_¥Ÿ
 = 
å
->
π
.
π_¥iv
;

73 
π_≠•_öfo
 = 
	`RT_APSP_INFO
(
å
);

75 
π_≠•_öfo
->
°©e_öfo
->
£rv_ts
 = 
	`time
(
NULL
);

77 
	`evtimî_add
(
π_¥Ÿ
->
π_timî_evít
, &
tv
);

78 
	}
}

87 
	$mul_rouã_≠•_add_√igh_c⁄n
(*
hdl
, 
sw_a
, 
sw_b
,

88 
lweight_∑ú_t
 *
√w_adj
)

90 
å_°ru˘_t
 *
å
 = 
hdl
;

91 
π_≠•_t
 *
π_≠•_öfo
;

92 
π_adj_ñem_t
 *
adj_ñem
 = 
NULL
;

93 
lweight_∑ú_t
 *
adj
 = 
NULL
;

94 
∑ú
 = 0;

96 
	`as£π
(
å
 &&År->
π
.
π_¥iv
);

97 
π_≠•_öfo
 = 
	`RT_APSP_INFO
(
å
);

100 i‡(!(
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_INIT
)) {

101 
	`c_log_îr
("%s: APSP SèãÇŸ inôülized", 
FN
);

105 i‡(
π_≠•_öfo
->
°©e_öfo
->
nodes
 <
sw_a
 ||

106 
π_≠•_öfo
->
°©e_öfo
->
nodes
 <
sw_a
) {

107 
	`c_log_îr
("%s: Sèã mism©ch, C™àc⁄töue", 
FN
);

111 
	`c_log_debug
("%s:src_sw:port(%d:%d)->dst_sw:port(%d:%d)",

112 
FN
, 
sw_a
, 
√w_adj
->
œ
, 
sw_b
,Çew_adj->
lb
);

114 
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
sw_a
, 
sw_b
);

115 i‡(
adj_ñem
->
∑ús
 >
RT_MAX_ADJ_PAIRS
-1) {

116 
	`c_log_îr
("%s: C™àsuµ‹àadja˚ncyÖaú†> %u", 
FN
, 
RT_MAX_ADJ_PAIRS
);

120 
∑ú
 = 0;Öaú < 
adj_ñem
->
∑ús
;Öair++) {

121 
adj
 = &
adj_ñem
->
adj_∑ús
[
∑ú
];

123 i‡(
adj
->
œ
 =
√w_adj
->œ &&ádj->
lb
 ==Çew_adj->lb) {

124 i‡(
adj
->
weight
 !
√w_adj
->weight) {

125 
adj
->
weight
 = 
√w_adj
->weight;

126 
π_≠•_öfo
->
°©e_öfo
->
°©e
 &~
RT_APSP_ADJ_INIT
;

132 i‡(
∑ú
 < 
RT_MAX_ADJ_PAIRS
) {

133 
adj
 = &
adj_ñem
->
adj_∑ús
[
∑ú
];

135 
adj
->
œ
 = 
√w_adj
->la;

136 
adj
->
lb
 = 
√w_adj
->lb;

137 
adj
->
weight
 = 
√w_adj
->weight;

138 
adj
->
⁄lök
 = 
åue
;

139 
adj_ñem
->
∑ús
++;

141 
π_≠•_öfo
->
°©e_öfo
->
°©e
 &~
RT_APSP_ADJ_INIT
;

145 
	}
}

154 
	$mul_rouã_≠•_öô_°©e
(*
hdl
)

156 
å_°ru˘_t
 *
å
 = 
hdl
;

157 
π_¥Ÿ_hdl_t
 *
π_¥Ÿ
;

158 
π_≠•_t
 *
π_≠•_öfo
;

159 
å_√igh_quîy_¨g_t
 
å_√igh_¨g
;

160 
i
 = 0, 
j
 = 0, 
k
 =0, 
nodes
 = 0;

162 i‡(!
å
 || !å->
π
.
π_¥iv
) {

163 
	`c_log_îr
("%s: InvÆidÅ∏h™dÀ", 
FN
);

164  -
EINVAL
;

167 
π_¥Ÿ
 = 
å
->
π
.
π_¥iv
;

169 
	`c_log_debug
("%s: ", 
FN
);

171 i‡(!
π_¥Ÿ
->
π_¥Ÿ_öfo
) {

172 
	`c_log_îr
("%s: [Áèl] RTáp• blockÇŸ found", 
FN
);

173  -
EINVAL
;

177 
π_≠•_öfo
 = 
π_¥Ÿ
->
π_¥Ÿ_öfo
;

179 
	`mul_rouã_≠•_˛ón_°©e
(
hdl
);

181 
nodes
 = 
	`__å_gë_max_swôch_Æüs
(
π_¥Ÿ
->
å_hdl
);

182 i‡(
nodes
++ < 0) {

183 
	`c_log_îr
("%s: Nÿnode†ö gøph", 
FN
);

184  -
EINVAL
;

187 
	`c_£q_wr_lock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

190 
	`mul_˛ór_rouã_m©rix
(
π_≠•_öfo
);

192 
π_≠•_öfo
->
°©e_öfo
->
nodes
 =Çodes;

194 ; 
i
 < 
nodes
; i++) {

195 
j
 = 0; j < 
nodes
; j++) {

196 
π_adj_ñem_t
 *
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
i
, 
j
);

197 
	`π_öô_adj_∑ús_disc⁄√˘ed
(
adj_ñem
);

198 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
i
, 
j
)->
n_∑ths
 = 0;

199 
k
 = 0; k < 
RT_MAX_EQ_PATHS
; k++) {

200 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
i
, 
j
)->
sw_Æüs
[
k
]

201 
NEIGH_NO_PATH
;

206 
π_≠•_öfo
->
°©e_öfo
->
°©e
 = 
RT_APSP_INIT
;

208 
å_√igh_¨g
.
å
 =År;

210 
i
 = 0; i < 
nodes
; i++) {

211 
j
 = 0; j < 
nodes
; j++) {

212 
å_√igh_¨g
.
§c_sw
 = 
i
;

213 
å_√igh_¨g
.
d°_sw
 = 
j
;

214 
	`__å_öô_√igh_∑ú_adja˚ncõs
(&
å_√igh_¨g
);

217 
π_≠•_öfo
->
°©e_öfo
->
°©e
 |
RT_APSP_ADJ_INIT
;

218 
	`c_£q_wr_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

221 
	}
}

230 
	$mul_rouã_≠•_ˇlc
(*
hdl
)

232 
å_°ru˘_t
 *
å
 = 
hdl
;

233 
π_≠•_t
 *
π_≠•_öfo
;

234 
fw_i
, 
fw_j
, 
fw_k
;

235 
w_ik
, 
w_kj
, 
w_ij
;

236 
n_∑ths
;

237 
size_t
 
nodes
 = 0;

239 
	`as£π
(
å
 &&År->
π
.
π_¥iv
);

241 
π_≠•_öfo
 = 
	`RT_APSP_INFO
(
å
);

243 
	`c_£q_wr_lock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

245 i‡(!(
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_INIT
) ||

246 !(
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_ADJ_INIT
) ) {

247 
	`c_£q_wr_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

248 
	`c_log_îr
("%s:Ñà≠•ÇŸ inôülized", 
FN
);

249  -
EINVAL
;

252 
nodes
 = 
π_≠•_öfo
->
°©e_öfo
->nodes;

253 
π_≠•_öfo
->
°©e_öfo
->
°©e
 |
RT_APSP_RUN
;

255 
fw_k
 = 0; fw_k < 
nodes
; fw_k++) {

256 
fw_i
 = 0; fw_ò< 
nodes
; fw_i++) {

257 
fw_j
 = 0; fw_j < 
nodes
; fw_j++) {

258 i‡(
fw_i
 =
fw_j
) ;

259 
w_ij
 = 
	`π_≠•_gë_weight
(
π_≠•_öfo
, 
fw_i
, 
fw_j
);

260 
w_ik
 = 
	`π_≠•_gë_weight
(
π_≠•_öfo
, 
fw_i
, 
fw_k
);

261 
w_kj
 = 
	`π_≠•_gë_weight
(
π_≠•_öfo
, 
fw_k
, 
fw_j
);

265 i‡(
w_ik
 !
NEIGH_NO_PATH
 && 
w_kj
 != NEIGH_NO_PATH) {

266 i‡(
w_ik
 + 
w_kj
 < 
w_ij
) {

267 
	`π_≠•_£t_weight
(
π_≠•_öfo
, 
fw_i
, 
fw_j
, 
w_ik
 + 
w_kj
);

268 
n_∑ths
 = 0;Ç_∑th†< 
RT_MAX_EQ_PATHS
;Ç_paths++) {

269 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

270 ->
sw_Æüs
[
n_∑ths
] = 
NEIGH_NO_PATH
;

273 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

274 ->
n_∑ths
 = 1;

275 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

276 ->
sw_Æüs
[0] = 
fw_k
;

277 } i‡(
w_ik
 + 
w_kj
 =
w_ij
 &&

278 
fw_k
 !
fw_i
 && fw_k !
fw_j
) {

280 
n_∑ths
 = 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

281 ->
n_∑ths
;

282 i‡(
n_∑ths
 < 
RT_MAX_EQ_PATHS
) {

283 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

284 ->
sw_Æüs
[
n_∑ths
++] = 
fw_k
;

285 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
fw_i
, 
fw_j
)

286 ->
n_∑ths
 =Ç_paths;

294 
π_≠•_öfo
->
°©e_öfo
->
ˇlc_ts
 = 
	`time
(
NULL
);

295 
π_≠•_öfo
->
°©e_öfo
->
°©e
 &~
RT_APSP_RUN
;

296 
π_≠•_öfo
->
°©e_öfo
->
°©e
 |
RT_APSP_CONVERGED
;

298 
	`c_£q_wr_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

301 
	}
}

311 
ölöe
 

312 
	$add_rouã_∑th_ñem
(
GSLi°
 **
rouã_∑th
, 
node
, 
lweight_∑ú_t
 *
adj
)

314 
π_∑th_ñem_t
 *
∑th_ñem
;

316 
∑th_ñem
 = 
	`ˇŒoc
(1, (*path_elem));

317 
∑th_ñem
->
sw_Æüs
 = 
node
;

319 
	`mem˝y
(&
∑th_ñem
->
lök
, 
adj
, (
lweight_∑ú_t
));

321 *
rouã_∑th
 = 
	`g_¶i°_≠≥nd
((*rouã_∑th), 
∑th_ñem
);

322 
	}
}

334 
GSLi°
 *

335 
	$mul_rouã_≠•_gë_∑th
(*
hdl
, 
§c_sw
, 
de°_sw
)

337 
å_°ru˘_t
 *
å
 = 
hdl
;

338 
π_≠•_t
 *
π_≠•_öfo
;

340 
	`as£π
(
å
 &&År->
π
.
π_¥iv
);

341 
π_≠•_öfo
 = 
	`RT_APSP_INFO
(
å
);

343  
	`mul_rouã_≠•_gë_•
(
π_≠•_öfo
, 
§c_sw
, 
de°_sw
);

344 
	}
}

353 
	$mul_rouã_≠•_˛ón_°©e
(*
hdl
)

355 
å_°ru˘_t
 *
å
 = 
hdl
;

356 
π_¥Ÿ_hdl_t
 *
π_¥Ÿ
;

357 
π_≠•_t
 *
π_≠•_öfo
;

359 i‡(!
å
 || !å->
π
.
π_¥iv
) {

360 
	`c_log_îr
("%s: InvÆidÅ∏h™dÀ", 
FN
);

361  -
EINVAL
;

364 
π_¥Ÿ
 = 
å
->
π
.
π_¥iv
;

365 
π_≠•_öfo
 = 
π_¥Ÿ
->
π_¥Ÿ_öfo
;

367 i‡(
π_≠•_öfo
) {

368 
	`c_£q_wr_lock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

369 
	`mul_˛ór_rouã_°©e_öfo
(
π_≠•_öfo
);

370 
	`c_£q_wr_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

374 
	}
}

382 
	$mul_rouã_≠•_dump_adj_m©rix
(*
å_hdl
)

384 
	#APSP_ADJ_PBUF_SZ
 4096

	)

385 *
pbuf
;

386 
i
 = 0, 
j
 = 0, 
Àn
 = 0;

387 
π_≠•_t
 *
π_≠•_öfo
;

388 
å_°ru˘_t
 *
å
 = 
å_hdl
;

390 
	`as£π
(
å
 &&År->
π
.
π_¥iv
);

391 
π_≠•_öfo
 = 
	`RT_APSP_INFO
(
å
);

393 
pbuf
 = 
	`ˇŒoc
(1, 
APSP_ADJ_PBUF_SZ
);

395 
i
 = 0; i < 
π_≠•_öfo
->
°©e_öfo
->
nodes
; i++) {

396 
j
 = 0; j < 
π_≠•_öfo
->
°©e_öfo
->
nodes
; j++) {

397 
lweight_∑ú_t
 *
∑ú
 = 
	`π_≠•_gë_∑ú
(
π_≠•_öfo
, 
i
, 
j
);

399 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
APSP_ADJ_PBUF_SZ
-len-1,

400 "(%d)->(%dË%hu %hu %d\r\n", 
i
, 
j
,

401 
∑ú
->
œ
,Öaú->
lb
,Öaú->
weight
);

402 i‡(
Àn
 >
APSP_ADJ_PBUF_SZ
-1) ;

406  
pbuf
;

407 
	}
}

415 
	$mul_rouã_öô_≠•
(
π_¥Ÿ_hdl_t
 *
π_¥Ÿ
)

417 
π_≠•_t
 *
π_≠•_öfo
;

418 
rouã_£rv_fd
 = -1;

419 *
blk_±r
;

421 i‡(
π_¥Ÿ
->
π_¥Ÿ_öfo
) {

422 
	`c_log_îr
("%s: RTáp• infÿÆªadyáŒoˇãd", 
FN
);

423  -
EINVAL
;

426 
π_≠•_öfo
 = 
	`ˇŒoc
(1, (*rt_apsp_info));

427 i‡(!
π_≠•_öfo
) {

428 
	`c_log_îr
("%s: RTáp• infÿÆloˇti⁄ faû", 
FN
);

429  -
ENOMEM
;

434 
rouã_£rv_fd
 = 
	`shm_›í
(
MUL_TR_SERVICE_NAME
,

435 
O_CREAT
 | 
O_RDWR
, 0666);

436 i‡(
rouã_£rv_fd
 < 0) {

437 
	`c_log_îr
("%s: RTáp• blockáŒo¯Áû", 
FN
);

438 
‰ì
;

441 if((
	`·runˇã
(
rouã_£rv_fd
, 
RT_APSP_BLOCK_SIZE
)) != 0) {

442 
	`c_log_îr
("%s: RTáp• block sizê£àÁûed", 
FN
);

443 
‰ì
;

446 
blk_±r
 = 
	`mm≠
(0, 
RT_APSP_BLOCK_SIZE
, 
PROT_READ
 | 
PROT_WRITE
,

447 
MAP_SHARED
, 
rouã_£rv_fd
, 0);

448 i‡(
blk_±r
 =
MAP_FAILED
) {

449 
	`c_log_îr
("%s: RTáp• block m≠ faû", 
FN
);

450 
u∆ök
;

454 
π_¥Ÿ
->
π_¥Ÿ_öfo
 = 
π_≠•_öfo
;

455 
	`mem£t
(
blk_±r
, 0, 
RT_APSP_BLOCK_SIZE
);

457 
	`mul_rouã_öô_block_mëa
(
π_≠•_öfo
, 
blk_±r
);

458 
	`c_£q_lock_öô
(&
π_≠•_öfo
->
°©e_öfo
->
lock
);

460 
	`˛o£
(
rouã_£rv_fd
);

463 
u∆ök
:

464 
	`shm_u∆ök
(
MUL_TR_SERVICE_NAME
);

465 
‰ì
:

466 
	`‰ì
(
π_≠•_öfo
);

468 
	}
}

476 
	$mul_rouã_öô
(
å_°ru˘_t
 *
å
)

478 
timevÆ
 
tv
 = { 
RT_HB_INTVL_SEC
,

479 
RT_HB_INTVL_USEC
 };

480 
π_öfo_t
 *
π_öfo
;

481 
π_¥Ÿ_hdl_t
 *
π_¥Ÿ
;

482 
evít_ba£
 *
ba£
 = 
å
->
≠p_˘x
;

484 i‡(!
å
) {

485 
	`c_log_îr
("%s: NÿT›ÿh™dÀ", 
FN
);

486 
	`as£π
(0);

489 
π_öfo
 = &
å
->
π
;

491 
π_öfo
->
π_¥iv
 = 
	`ˇŒoc
(1, (
π_¥Ÿ_hdl_t
));

492 i‡(!
π_öfo
->
π_¥iv
) {

493 
	`c_log_îr
("%s: CouldÇŸáŒo¯¥Ÿocﬁ h™dÀ", 
FN
);

494 
	`as£π
(0);

497 
π_öfo
->
π_öô_°©e
 = 
mul_rouã_≠•_öô_°©e
;

498 
π_öfo
->
π_add_√igh_c⁄n
 = 
mul_rouã_≠•_add_√igh_c⁄n
;

499 
π_öfo
->
π_ˇlc
 = 
mul_rouã_≠•_ˇlc
;

500 
π_öfo
->
π_gë_•
 = 
mul_rouã_≠•_gë_∑th
;

501 
π_öfo
->
π_˛ón_°©e
 = 
mul_rouã_≠•_˛ón_°©e
;

502 
π_öfo
->
π_dump_adj_m©rix
 = 
mul_rouã_≠•_dump_adj_m©rix
;

504 
π_¥Ÿ
 = 
π_öfo
->
π_¥iv
;

506 
π_¥Ÿ
->
å_hdl
 = 
å
;

507 
	`c_rw_lock_öô
(&
π_¥Ÿ
->
π_lock
);

509 i‡(
	`mul_rouã_öô_≠•
(
π_¥Ÿ
) < 0) {

510 
	`as£π
(0);

513 
π_¥Ÿ
->
π_timî_evít
 = 
	`evtimî_√w
(
ba£
, 
mul_rouã_≠•_hórbót
,

514 (*)
å
);

515 
	`evtimî_add
(
π_¥Ÿ
->
π_timî_evít
, &
tv
);

517 
	`c_log_debug
("%s", 
FN
);

520 
	}
}

	@services/loadable/topo_routing/mul_route_apsp.h

19 #i‚de‡
__MUL_ROUTE_APSP_H__


20 
	#__MUL_ROUTE_APSP_H__


	)

22 
	~"mul_rouã.h
"

24 
	#RT_APSP_MAX_MATRIX_SZ
(
sz
Ë(
MAX_SWITCHES_PER_CLUSTER
*MAX_SWITCHES_PER_CLUSTER*sz)

	)

26 
	#RT_APSP_BLOCK_SIZE
 ((
π_≠•_°©e_t
) + \

27 
	`RT_APSP_MAX_MATRIX_SZ
((
π_adj_ñem_t
)) + \

28 
	`RT_APSP_MAX_MATRIX_SZ
((
π_å™sô_ñem_t
)))

	)

30 
	#RT_APSP_PATH_ELEM
(
H
, 
i
, 
j
Ë
	`RT_MATRIX_ELEM
((H)->
∑ths
, 
π_å™sô_ñem_t
, (H)->
°©e_öfo
->
nodes
, i, j)

	)

31 
	#RT_APSP_ADJ_ELEM
(
H
, 
i
, 
j
Ë
	`RT_MATRIX_ELEM
((H)->
adj_m©rix
, 
π_adj_ñem_t
, (H)->
°©e_öfo
->
nodes
, i, j)

	)

33 
	sπ_≠•_°©e_


35 
	#RT_APSP_NONE
 0x0

	)

36 
	#RT_APSP_INIT
 0x1

	)

37 
	#RT_APSP_ADJ_INIT
 0x2

	)

38 
	#RT_APSP_RUN
 0x4

	)

39 
	#RT_APSP_CONVERGED
 0x8

	)

40 
uöt32_t
 
	m°©e
;

41 
time_t
 
	mˇlc_ts
;

42 
time_t
 
	m£rv_ts
;

43 
size_t
 
	mnodes
;

44 
c_£q_lock_t
 
	mlock
;

46 
π_≠•_°©e_
 
	tπ_≠•_°©e_t
;

48 
	sπ_≠•_


50 
π_≠•_°©e_t
 *
	m°©e_öfo
;

51 *
	madj_m©rix
;

52 *
	m∑ths
;

54 
π_≠•_
 
	tπ_≠•_t
;

56 
ölöe
 

57 
	$π_≠•_£À˘_mp
(
π_adj_ñem_t
 *
adj_ñem
 
UNUSED
)

61 
	}
}

63 
ölöe
 

64 
	$π_≠•_gë_weight
(
π_≠•_t
 *
π_≠•_öfo
, 
node_a
, 
node_b
)

66 
lweight_∑ú_t
 *
∑ú
;

67 
π_adj_ñem_t
 *
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
node_a
, 
node_b
);

72 
∑ú
 = &
adj_ñem
->
adj_∑ús
[
	`π_≠•_£À˘_mp
(adj_elem)];

74  
∑ú
->
weight
;

75 
	}
}

77 
ölöe
 

78 
	$π_≠•_⁄lök_√igh
(
π_≠•_t
 *
π_≠•_öfo
, 
node_a
, 
node_b
)

80 
lweight_∑ú_t
 *
∑ú
;

81 
π_adj_ñem_t
 *
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
node_a
, 
node_b
);

83 
∑ú
 = &
adj_ñem
->
adj_∑ús
[
	`π_≠•_£À˘_mp
(adj_elem)];

85  
∑ú
->
⁄lök
;

86 
	}
}

88 
ölöe
 

89 
	$π_≠•_£t_weight
(
π_≠•_t
 *
π_≠•_öfo
, 
node_a
, 
node_b
, 
weight
)

91 
lweight_∑ú_t
 *
∑ú
;

92 
π_adj_ñem_t
 *
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
node_a
, 
node_b
);

94 
∑ú
 = &
adj_ñem
->
adj_∑ús
[
	`π_≠•_£À˘_mp
(adj_elem)];

96 
∑ú
->
weight
 = weight;

97 
	}
}

99 
ölöe
 
lweight_∑ú_t
 *

100 
	$π_≠•_gë_∑ú
(
π_≠•_t
 *
π_≠•_öfo
, 
node_a
, 
node_b
)

102 
lweight_∑ú_t
 *
∑ú
;

103 
π_adj_ñem_t
 *
adj_ñem
 = 
	`RT_APSP_ADJ_ELEM
(
π_≠•_öfo
, 
node_a
, 
node_b
);

105 
∑ú
 = &
adj_ñem
->
adj_∑ús
[
	`π_≠•_£À˘_mp
(adj_elem)];

107  
∑ú
;

108 
	}
}

110 
ölöe
 
boﬁ


111 
	$π_≠•_c⁄vîged
(
π_≠•_t
 *
π_≠•_öfo
)

113  (
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_INIT
 &&

114 
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_ADJ_INIT
 &&

115 
π_≠•_öfo
->
°©e_öfo
->
°©e
 & 
RT_APSP_CONVERGED
);

116 
	}
}

	@services/loadable/topo_routing/mul_route_apsp_priv.h

20 #i‚de‡
__MUL_ROUTE_APSP_PRIV_H__


21 
	#__MUL_ROUTE_APSP_PRIV_H__


	)

23 
	#RT_APSP_INFO
(
å
Ë(((
π_¥Ÿ_hdl_t
 *)—r->
π
.
π_¥iv
))->
π_¥Ÿ_öfo
)

	)

25 
mul_rouã_≠•_ˇlc
(*
hdl
);

26 
GSLi°
 *
mul_rouã_≠•_gë_∑th
(*
hdl
, 
§c_sw
, 
de°_sw
);

27 
mul_rouã_≠•_˛ón_°©e
(*
hdl
);

28 
mul_rouã_≠•_öô_°©e
(*
hdl
);

29 
mul_rouã_≠•_add_√igh_c⁄n
(*
hdl
, 
sw_a
, 
sw_b
,

30 
lweight_∑ú_t
 *
√w_adj
);

31 
GSLi°
 *
mul_rouã_≠•_gë_•
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
);

	@services/loadable/topo_routing/mul_route_priv.h

19 #i‚de‡
__MUL_ROUTE_PRIV_H__


20 
	#__MUL_ROUTE_PRIV_H__


	)

22 
	~"mul_Œdp_comm⁄.h
"

24 
	sπ_¥Ÿ_hdl_


26 
c_rw_lock_t
 
	mπ_lock
;

27 *
	mπ_¥Ÿ_öfo
;

28 
evít
 *
	mπ_timî_evít
;

29 
å_°ru˘_t
 *
	må_hdl
;

31 
π_¥Ÿ_hdl_
 
	tπ_¥Ÿ_hdl_t
;

33 
ölöe
 

34 
	$π_öô_adj_∑ú_disc⁄√˘ed
(
lweight_∑ú_t
 *
∑ú
)

36 
∑ú
->
œ
 = 
NEIGH_NO_LINK
;

37 
∑ú
->
lb
 = 
NEIGH_NO_LINK
;

38 
∑ú
->
weight
 = 
NEIGH_NO_PATH
;

39 
	}
}

41 
ölöe
 

42 
	$π_öô_adj_∑ús_disc⁄√˘ed
(
π_adj_ñem_t
 *
adj_ñem
)

44 
∑ú
 = 0;

46 
adj_ñem
->
∑ús
 = 0;

48 
∑ú
 = 0;Öaú < 
RT_MAX_ADJ_PAIRS
;Öair++) {

49 
	`π_öô_adj_∑ú_disc⁄√˘ed
(&
adj_ñem
->
adj_∑ús
[
∑ú
]);

51 
	}
}

53 
ölöe
 *

54 
	$π_Æloc_m©rix
(
size_t
 
n
, size_à
ñem_sz
)

56 *
π_m©rix
 = 
	`ˇŒoc
(1, 
n
 *Ç * 
ñem_sz
);

57 
	`as£π
(
π_m©rix
);

59  
π_m©rix
;

60 
	}
}

62 
ölöe
 

63 
	$π_‰ì_m©rix
(*
m©rix_±r
)

65 
	`‰ì
(
m©rix_±r
);

66 
	}
}

68 #ifde‡
CONFIG_MUL_RT


69 
mul_rouã_öô
(
å_°ru˘_t
 *
å
);

70 
rouã_vty_öô
(*
¨g
);

72 
ölöe
 

73 
	$mul_rouã_öô
(
å_°ru˘_t
 *
å
 
UNUSED
)

76 
	}
}

78 
ölöe
 

79 
	$rouã_vty_öô
(*
¨g
 
UNUSED
)

81 
	}
}

	@services/loadable/topo_routing/mul_route_servlet.c

20 
	~"mul_comm⁄.h
"

21 
	~"mul_rouã.h
"

22 
	~"mul_rouã_≠•.h
"

24 
GSLi°
 *
mul_rouã_≠•_gë_•
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
);

32 
	$mul_rouã_∑th_åavî£
(
GSLi°
 *
úouã
, 
GFunc
 
ôî_‚
, *
¨g
)

34 i‡(
úouã
) {

35 
	`g_¶i°_f‹óch
(
úouã
, (
GFunc
)
ôî_‚
, 
¨g
);

38 
	}
}

46 
	$mul_‰ì_π_löks
(*
±r
)

48 
	`‰ì
(
±r
);

49 
	}
}

57 
	$mul_de°roy_rouã
(
GSLi°
 *
rouã
)

59 i‡(
rouã
) {

60 
	`g_¶i°_‰ì_fuŒ
(
rouã
, 
mul_‰ì_π_löks
);

62 
	}
}

70 
	$mul_rouã_öô_block_mëa
(*
π_öfo
, *
blk
)

72 
π_≠•_t
 *
π_≠•_öfo
 = 
π_öfo
;

74 
π_≠•_öfo
->
°©e_öfo
 = 
blk
;

75 
π_≠•_öfo
->
adj_m©rix
 = (*)(((
uöt8_t
 *)(
blk
))+(
π_≠•_°©e_t
));

76 
π_≠•_öfo
->
∑ths
 = (*)((
uöt8_t
 *)‘t_≠•_öfo->
adj_m©rix
) +

77 
	`RT_APSP_MAX_MATRIX_SZ
((
π_adj_ñem_t
)));

78 
	}
}

86 
	$mul_rouã_£rvi˚_gë
()

88 *
±r
 = 
NULL
;

89 
π_≠•_t
 *
π_≠•_öfo
;

90 
£rv_fd
;

92 
	`c_log_debug
("%s: ", 
FN
);

94 i‡((
£rv_fd
 = 
	`shm_›í
(
MUL_TR_SERVICE_NAME
, 
O_RDONLY
, 0)) < 0) {

95 
	`c_log_îr
("%s: C™àgë sîvi˚ (u«vaûabÀ)", 
FN
);

96  
NULL
;

99 
	`≥º‹
("shm_open");

101 
±r
 = 
	`mm≠
(0, 
RT_APSP_BLOCK_SIZE
, 
PROT_READ
, 
MAP_SHARED
, 
£rv_fd
, 0);

102 i‡(
±r
 =
MAP_FAILED
) {

103 
	`c_log_îr
("%s: C™àgë sîvi˚ (ÁûedÅÿm≠)", 
FN
);

104  
NULL
;

107 
π_≠•_öfo
 = 
	`ˇŒoc
(1, (*rt_apsp_info));

108 i‡(!
π_≠•_öfo
) {

109 
	`c_log_îr
("%s: RTáp• infÿÆloˇti⁄ faû", 
FN
);

110  
NULL
;

113 
	`mul_rouã_öô_block_mëa
(
π_≠•_öfo
, 
±r
);

115 
	`˛o£
(
£rv_fd
);

117  (*)
π_≠•_öfo
;

118 
	}
}

126 
	$mul_rouã_£rvi˚_de°roy
(*
π_£rvi˚
)

128 
	`munm≠
((*)
π_£rvi˚
, 
RT_APSP_BLOCK_SIZE
);

130 
	`shm_u∆ök
(
MUL_TR_SERVICE_NAME
);

131 
	}
}

138 
ölöe
 

139 
	$add_rouã_∑th_ñem
(
GSLi°
 **
rouã_∑th
, 
node
, 
lweight_∑ú_t
 *
adj
,

140 
boﬁ
 
œ°_h›
)

142 
π_∑th_ñem_t
 *
∑th_ñem
;

144 
∑th_ñem
 = 
	`ˇŒoc
(1, (*path_elem));

145 
∑th_ñem
->
sw_Æüs
 = 
node
;

146 
∑th_ñem
->
Êags
 = 
œ°_h›
 ? 
RT_PELEM_LAST_HOP
 :0;

148 
	`mem˝y
(&
∑th_ñem
->
lök
, 
adj
, (
lweight_∑ú_t
));

150 i‡(!(*
rouã_∑th
)) {

151 
∑th_ñem
->
Êags
 |
RT_PELEM_FIRST_HOP
;

154 *
rouã_∑th
 = 
	`g_¶i°_≠≥nd
((*rouã_∑th), 
∑th_ñem
);

155 
	}
}

163 
	$mul_rouã_≠•_gë_subp
(
π_≠•_t
 *
π_≠•_öfo
, 
§c
, 
de°
,

164 
GSLi°
 **
∑th
)

166 
å™sô_sw
 = 
NEIGH_NO_PATH
;

168 i‡(((
å™sô_sw
 = 
	`RT_APSP_PATH_ELEM
(
π_≠•_öfo
, 
§c
, 
de°
)->
sw_Æüs
[0])

169 =
NEIGH_NO_PATH
)) {

170 i‡(
	`π_≠•_⁄lök_√igh
(
π_≠•_öfo
, 
§c
, 
de°
)) {

171 
	`add_rouã_∑th_ñem
(
∑th
, 
§c
,

172 
	`π_≠•_gë_∑ú
(
π_≠•_öfo
, 
§c
, 
de°
),

173 
Ál£
);

175 
	`c_log_îr
("%s: Nÿrouã bëwì¿%dÅÿ%d", 
FN
, 
§c
, 
de°
);

180 
	`mul_rouã_≠•_gë_subp
(
π_≠•_öfo
, 
§c
, 
å™sô_sw
, 
∑th
);

181 
	`mul_rouã_≠•_gë_subp
(
π_≠•_öfo
, 
å™sô_sw
, 
de°
, 
∑th
);

184 
	}
}

194 
GSLi°
 *

195 
	$mul_rouã_≠•_gë_•
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
)

197 
lock
, 
max_ªåõs
 = 0;

198 
π_≠•_t
 *
π_≠•_öfo
 = 
π_£rvi˚
;

199 
GSLi°
 *
∑th
 = 
NULL
;

200 
lweight_∑ú_t
 
œ°_h›
 = { 
NEIGH_NO_LINK
, NEIGH_NO_LINK,

201 
NEIGH_NO_PATH
, 
Ál£
 };

203 i‡(
§c_sw
 =
de°_sw
) {

204 
rouã_ßme_node
;

207 
ªåy
:

208 i‡(
max_ªåõs
++ >
RT_MAX_GET_RETRIES
) {

209 
	`c_log_îr
("Too much writer contention or service died");

210  
NULL
;

213 
lock
 = 
	`c_£q_rd_lock
(&
π_≠•_öfo
->
°©e_öfo
->lock);

214 i‡(!
	`π_≠•_c⁄vîged
(
π_≠•_öfo
)) {

215 i‡(
	`c_£q_rd_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
,Üock)) {

216 
ªåy
;

218 
	`c_log_îr
("%s: Rouã†nŸ yë c⁄vîged", 
FN
);

219  
NULL
;

222 i‡(
	`π_≠•_gë_weight
(
π_≠•_öfo
, 
§c_sw
, 
de°_sw
Ë=
NEIGH_NO_PATH
) {

223 i‡(
	`c_£q_rd_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
,Üock)) {

224 
ªåy
;

226 
	`c_log_îr
("%s: NŸáÇeigbou∏(%d:%dË%d", 
FN
, 
§c_sw
, 
de°_sw
,

227 
	`π_≠•_gë_weight
(
π_≠•_öfo
, 
§c_sw
, 
de°_sw
));

228  
NULL
;

231 
	`mul_rouã_≠•_gë_subp
(
π_≠•_öfo
, 
§c_sw
, 
de°_sw
, &
∑th
);

233 i‡(
	`c_£q_rd_u∆ock
(&
π_≠•_öfo
->
°©e_öfo
->
lock
,Üock)) {

234 
	`mul_de°roy_rouã
(
∑th
);

235 
ªåy
;

238 
rouã_ßme_node
:

239 
	`add_rouã_∑th_ñem
(&
∑th
, 
de°_sw
, &
œ°_h›
, 
åue
);

241  
∑th
;

242 
	}
}

250 
boﬁ


251 
	$mul_rouã_£rvi˚_Æive
(*
£rvi˚
)

253 
π_≠•_t
 *
π_≠•_öfo
 = 
£rvi˚
;

254 
time_t
 
cuº_ts
 = 
	`time
(
NULL
);

256 i‡(
cuº_ts
 >

257 (
π_≠•_öfo
->
°©e_öfo
->
£rv_ts
 + (2*
RT_HB_INTVL_SEC
))) {

258 
	`c_log_îr
("%s: %†nŸávaûabÀ", 
FN
, 
MUL_TR_SERVICE_NAME
);

259  
Ál£
;

262  
åue
;

263 
	}
}

272 
size_t


273 
	$mul_rouã_gë_nodes
(*
π_£rvi˚
)

275 
π_≠•_t
 *
π_≠•_öfo
 = 
π_£rvi˚
;

277 i‡(!
	`mul_rouã_£rvi˚_Æive
(
π_£rvi˚
)) {

281  
π_≠•_öfo
->
°©e_öfo
->
nodes
;

282 
	}
}

294 
GSLi°
 *

295 
	$mul_rouã_gë
(*
π_£rvi˚
, 
§c_sw
, 
de°_sw
)

297 
π_≠•_t
 *
π_≠•_öfo
 = 
π_£rvi˚
;

299 i‡(!
	`mul_rouã_£rvi˚_Æive
(
π_£rvi˚
)) {

303 i‡(
§c_sw
 < 0 || 
de°_sw
 < 0 ||

304 ((
§c_sw
 !
de°_sw
Ë&& (§c_sw >
π_≠•_öfo
->
°©e_öfo
->
nodes
 ||

305 
de°_sw
 >
π_≠•_öfo
->
°©e_öfo
->
nodes
))) {

306 
	`c_log_îr
("%s: src(%d) or dst(%d) out ofÑange(%d)",

307 
FN
, 
§c_sw
, 
de°_sw
, 
π_≠•_öfo
->
°©e_öfo
->
nodes
);

308  
NULL
;

311  
	`mul_rouã_≠•_gë_•
(
π_£rvi˚
, 
§c_sw
, 
de°_sw
);

312 
	}
}

	@services/loadable/topo_routing/mul_route_vty.c

18 
	~"mul_å.h
"

19 
	~"mul_vty.h
"

21 
å_°ru˘_t
 *
å_hdl
;

24 
mul_rouã_≠•_dump_adj_m©rix
(
å_°ru˘_t
 *
å
);

26 
DEFUN
 (
show_rouã_m©rix
,

27 
show_rouã_m©rix_cmd
,

29 
SHOW_STR


33 *
	gpbuf
 = 
NULL
;

35 
	gpbuf
 = 
å_show_rouã_adj_m©rix
(
å_hdl
);

37 i‡(
	gpbuf
) {

38 
vty_out
(
vty
, "%s", 
pbuf
);

39 
‰ì
(
pbuf
);

42  
	gCMD_SUCCESS
;

45 
DEFUN
 (
show_of_rouã
,

46 
show_of_rouã_cmd
,

48 
SHOW_STR


54 
	g§c_Æüsid
;

55 
	gd°_Æüsid
;

56 
GSLi°
 *
	gúouã
 = 
NULL
;

57 *
	gpbuf
 = 
NULL
;

59 
	g§c_Æüsid
 = 
©oi
(
¨gv
[0]);

60 
	gd°_Æüsid
 = 
©oi
(
¨gv
[1]);

62 
	gúouã
 = 
å_gë_rouã
(
å_hdl
, 
§c_Æüsid
, 
d°_Æüsid
);

63 i‡(!
	gúouã
) {

64 
vty_out
(
vty
, "Nÿrouã found%s", 
VTY_NEWLINE
);

65  
	gCMD_SUCCESS
;

68 
	gpbuf
 = 
å_dump_rouã
(
úouã
);

70 
vty_out
 (
vty
,

73 
VTY_NEWLINE
);

75 i‡(
	gpbuf
) {

76 
vty_out
(
vty
, "%s", 
pbuf
);

77 
‰ì
(
pbuf
);

80 
vty_out
 (
vty
,

83 
VTY_NEWLINE
);

85 
å_de°roy_rouã
(
úouã
);

88  
	gCMD_SUCCESS
;

93 
	$rouã_vty_öô
(*
¨g
 
UNUSED
)

96 
	`c_log_debug
("%s: in°ÆlögÑouã vty comm™d", 
FN
);

97 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_of_rouã_cmd
);

98 
	`ö°Æl_ñemít
(
ENABLE_NODE
, &
show_rouã_m©rix_cmd
);

99 
	}
}

	@services/loadable/topo_routing/mul_tr.c

19 
	~"mul_å.h
"

21 
å_°ru˘_t
 *
	gå_hdl
;

27 
	$__å_gë_max_swôch_Æüs
(
å_°ru˘_t
 *
å
)

29  
	`__Œdp_gë_max_swôch_Æüs
(
å
->
t›o_hdl
);

30 
	}
}

36 
	$__å_gë_num_swôches
(
å_°ru˘_t
 *
å
)

38  
	`__Œdp_gë_num_swôches
(
å
->
t›o_hdl
);

39 
	}
}

45 
	$__å_öô_√igh_∑ú_adja˚ncõs
(
å_√igh_quîy_¨g_t
 *
¨g
)

47  
	`__Œdp_öô_√igh_∑ú_adja˚ncõs
(
¨g
);

48 
	}
}

54 
	$å_show_rouã_adj_m©rix
(
å_°ru˘_t
 *
å
)

56 *
pbuf
 = 
NULL
;

58 
	`Œdp_sw_rd_lock
(
å
->
t›o_hdl
);

60 if(
å
->
π
.
π_dump_adj_m©rix
) {

61 
pbuf
 = 
å
->
π
.
	`π_dump_adj_m©rix
(tr);

64 
	`Œdp_sw_rd_u∆ock
(
å_hdl
->
t›o_hdl
);

66  
pbuf
;

67 
	}
}

74 
GSLi°
 *

75 
	$å_gë_rouã
(
å_°ru˘_t
 *
å
, 
§c_node
, 
d°_node
)

77 
GSLi°
 *
rouã
 = 
NULL
;

78 
num_nodes
 = 0;

79 
	`Œdp_sw_rd_lock
(
å
->
t›o_hdl
);

81 
num_nodes
 = 
	`__å_gë_max_swôch_Æüs
(
å
);

83 i‡(!(
num_nodes
) ||

84 
§c_node
 < 0 || 
d°_node
 < 0 ||

85 
§c_node
 > 
num_nodes
 || 
d°_node
 >Çum_nodes) {

86 
	`Œdp_sw_rd_u∆ock
(
å
->
t›o_hdl
);

87  
NULL
;

90 if(
å
->
π
.
π_gë_•
) {

91 
rouã
 = 
å
->
π
.
	`π_gë_•
—r, 
§c_node
, 
d°_node
);

94 
	`Œdp_sw_rd_u∆ock
(
å_hdl
->
t›o_hdl
);

96  
rouã
;

97 
	}
}

105 
	$å_dump_rouã
(
GSLi°
 *
rouã_∑th
)

107 *
pbuf
 = 
	`ˇŒoc
(1, 
TR_ROUTE_PBUF_SZ
);

108 
Àn
 = 0;

109 
GSLi°
 *
ôî©‹
 = 
NULL
;

110 
π_∑th_ñem_t
 *
π_ñem
 = 
NULL
;

112 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
TR_ROUTE_PBUF_SZ
-len-1, "iROUTE:\r\n");

113 
	`as£π
(
Àn
 < 
TR_ROUTE_PBUF_SZ
-1);

115 
ôî©‹
 = 
rouã_∑th
; iãøt‹; iãøt‹ = iãøt‹->
√xt
) {

116 
π_ñem
 = 
ôî©‹
->
d©a
;

118 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
TR_ROUTE_PBUF_SZ
-len-1,

120 
π_ñem
->
sw_Æüs
,Ñt_ñem->
lök
.
œ
);

121 
	`as£π
(
Àn
 < 
TR_ROUTE_PBUF_SZ
-1);

125 
Àn
 +
	`¢¥ötf
(
pbuf
+Àn, 
TR_ROUTE_PBUF_SZ
-len-1, "||\r\n");

126 
	`as£π
(
Àn
 < 
TR_ROUTE_PBUF_SZ
-1);

128  
pbuf
;

129 
	}
}

137 
	$å_de°roy_rouã
(
GSLi°
 *
rouã
)

139  
	`mul_de°roy_rouã
(
rouã
);

140 
	}
}

149 
	$__å_övoke_routög
(
å_°ru˘_t
 *
å
)

151 i‡(
å
->
π
.
π_˛ón_°©e
) {

152 
å
->
π
.
	`π_˛ón_°©e
(tr);

154 i‡(
å
->
π
.
π_öô_°©e
) {

155 
å
->
π
.
	`π_öô_°©e
(tr);

157 i‡(
å
->
π
.
π_ˇlc
) {

158 
å
->
π
.
	`π_ˇlc
(tr);

161 i‡(!
å
->
π
.
π_öô_åiggî
) {

162 
å
->
π
.
π_öô_åiggî
 = 
åue
;

164 
	}
}

174 
	$å_övoke_routög
(
å_°ru˘_t
 *
å
)

176 
lock
;

178 i‡(!
å
->
π
.
π_öô_åiggî
) {

182 
lock
 = !
	`Œdp_sw_wr_åylock
(
å
->
t›o_hdl
);

183 
	`__å_övoke_routög
(
å
);

184 i‡(
lock
) {

185 
	`Œdp_sw_wr_u∆ock
(
å
->
t›o_hdl
);

187 
	}
}

195 
	$å_£rvi˚_îr‹
(*
å_£rvi˚
, 
cbuf
 *
b
,

196 
uöt16_t
 
ty≥
, uöt16_à
code
)

198 
cbuf
 *
√w_b
;

199 
c_oÂ_îr‹_msg_t
 *
coÂ_em
;

200 *
d©a
;

201 
size_t
 
d©a_Àn
;

203 
d©a_Àn
 = 
b
->
Àn
 > 
C_OFP_MAX_ERR_LEN
?

204 
C_OFP_MAX_ERR_LEN
 : 
b
->
Àn
;

206 
√w_b
 = 
	`of_¥ï_msg
((*
coÂ_em
Ë+ 
d©a_Àn
, 
C_OFPT_ERR_MSG
, 0);

208 
coÂ_em
 = (*)(
√w_b
->
d©a
);

209 
coÂ_em
->
ty≥
 = 
	`ht⁄s
(type);

210 
coÂ_em
->
code
 = 
	`ht⁄l
(code);

212 
d©a
 = (*)(
coÂ_em
 + 1);

213 
	`mem˝y
(
d©a
, 
b
->d©a, 
d©a_Àn
);

215 
	`c_£rvi˚_£nd
(
å_£rvi˚
, 
√w_b
);

216 
	}
}

224 
	$å_£rvi˚_ªque°_√igh
(*
å_£rvi˚
,

225 
cbuf
 *
ªq_b
,

226 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
)

228 
cbuf
 *
b
;

229 
c_oÂ_ªq_dpid_©å_t
 *
ªq_dpid
 = (*)(
coÂ_Øc
->
d©a
);

231 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
Ë< (*
ªq_dpid
)) {

232 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
,

233 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

234 (*
ªq_dpid
));

238 
b
 = 
	`Œdp_£rvi˚_√igh_ªque°
(
	`¡ohŒ
(
ªq_dpid
->
d©≠©h_id
),

239 
coÂ_Øc
->
hódî
.
xid
);

240 i‡(
b
) {

241 
	`c_£rvi˚_£nd
(
å_£rvi˚
, 
b
);

243 
	`å_£rvi˚_îr‹
(
å_£rvi˚
, 
ªq_b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_DPID
);

245 
	}
}

253 
	$å_£rvi˚_h™dÀr
(*
å_£rvi˚
, 
cbuf
 *
b
)

255 
c_oÂ_aux≠p_cmd
 *
coÂ_Øc
 = (*)(
b
->
d©a
);

257 i‡(
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
Ë< (
c_oÂ_aux≠p_cmd
)) {

258 
	`c_log_îr
("%s: Sizêî∏(%uËo‡(%u)", 
FN
,

259 
	`¡ohs
(
coÂ_Øc
->
hódî
.
Àngth
),

260 (
c_oÂ_aux≠p_cmd
));

261  
	`å_£rvi˚_îr‹
(
å_£rvi˚
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_LEN
);

264 
	`¡ohl
(
coÂ_Øc
->
cmd_code
)) {

265 
C_AUX_CMD_TR_GET_NEIGH
:

266  
	`å_£rvi˚_ªque°_√igh
(
å_£rvi˚
, 
b
, 
coÂ_Øc
);

268 
	`å_£rvi˚_îr‹
(
å_£rvi˚
, 
b
, 
OFPET_BAD_REQUEST
, 
OFPBRC_BAD_GENERIC
);

270 
	}
}

278 
	$å_¸óã_£rvi˚
(
å_°ru˘_t
 *
å_hdl
 
UNUSED
)

280  
	`mul_≠p_¸óã_£rvi˚
(
MUL_TR_SERVICE_NAME
, 
å_£rvi˚_h™dÀr
);

281 
	}
}

289 
	$å_∑ckë_ö_h™dÀr
(
c_oÂ_∑ckë_ö_t
 *
oÂ_pö
)

291 
uöt64_t
 
ª˚ivî_id
 = 
	`¡ohŒ
(
oÂ_pö
->
d©≠©h_id
);

292 
uöt16_t
 
p‹t_id
 = 
	`¡ohs
(
oÂ_pö
->
ö_p‹t
);

294 
Œdp_pkt_t
 *
Œdp_pkt
;

298 
ëhî√t2_hódî
 *
hód
 = (ëhî√t2_hódî *)
oÂ_pö
->
d©a
;

299 
uöt16_t
 
ëhîty≥
 = 
	`¡ohs
(
hód
->ethertype);

301 
ëhîty≥
){

304 
Œdp_pkt
 = (
Œdp_pkt_t
 *)
oÂ_pö
->
d©a
;

305  
	`Œdp_∑ckë_h™dÀr
(
ª˚ivî_id
, 
p‹t_id
, 
Œdp_pkt
);

309 
	`c_log_debug
("%s:Éthîty≥ 0x%hxÇŸÑecognized ",
FN
,
ëhîty≥
);

313 
	}
}

321 
	$å_p‹t_°©us_h™dÀr
(*
≠p_¨g
, 
c_oÂ_p‹t_°©us_t
 *
p‹t_°©
)

323  
	`Œdp_p‹t_°©us_h™dÀr
(
≠p_¨g
, 
p‹t_°©
);

324 
	}
}

332 
	$å_˛ó«Œ
(
å_°ru˘_t
 *
å
)

334 
	`Œdp_˛ó«Œ_swôches
(
å
);

335 if(
å
->
π
.
π_˛ón_°©e
) {

336 
å
->
π
.
	`π_˛ón_°©e
(tr);

338 
	}
}

346 
	$å_evít_nŸifõr
(*
≠p_¨g
, *
pkt_¨g
)

348 
cbuf
 *
b
 = 
pkt_¨g
;

349 
oÂ_hódî
 *
hdr
;

350 
uöt64_t
 
dpid
;

351 i‡(!
b
) {

352 
	`c_log_îr
("%s: InvÆidárg", 
FN
);

356 
hdr
 = (*)(
b
->
d©a
);

358 
hdr
->
ty≥
) {

359 
C_OFPT_SWITCH_ADD
:

361 
c_oÂ_swôch_add_t
 *
oÂ_ß
 = (*)(
hdr
);

362 
dpid
 = 
	`¡ohŒ
(
oÂ_ß
->
d©≠©h_id
);

363 i‡(
	`Œdp_swôch_add
(
≠p_¨g
, 
oÂ_ß
) == 0)

364 
	`c_log_debug
("LLDP Swôch 0x%Œxádded", (Ë
dpid
);

368 
C_OFPT_SWITCH_DELETE
:

370 
c_oÂ_swôch_dñëe_t
 *
oÂ_sd
 = (*)(
hdr
);

371 
dpid
 = 
	`¡ohŒ
(
oÂ_sd
->
d©≠©h_id
);

372 
	`Œdp_swôch_dñëe
(
dpid
);

373 
	`c_log_debug
("LLDP Swôch 0x%Œx dñëed", ()
dpid
);

377 
C_OFPT_PACKET_IN
:

379 
c_oÂ_∑ckë_ö_t
 *
oÂ_pö
 = (*)(
hdr
);

381 
	`å_∑ckë_ö_h™dÀr
(
oÂ_pö
);

385 
C_OFPT_PORT_STATUS
:

387 
c_oÂ_p‹t_°©us_t
 *
oÂ_p°s
 = (*)(
hdr
);

389 
	`å_p‹t_°©us_h™dÀr
(
≠p_¨g
, 
oÂ_p°s
);

392 
C_OFPT_RECONN_APP
:

393 
	`mul_ªgi°î_≠p
(
NULL
, 
MUL_TR_SERVICE_NAME
, 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

394 0, 
NULL
, 
å_evít_nŸifõr
);

396 
C_OFPT_NOCONN_APP
:

403 
	`å_˛ó«Œ
(
å_hdl
);

406 
	`c_log_îr
("%s: Unknow¿evíàty≥ %u", 
FN
, 
hdr
->
ty≥
);

409 
	}
}

415 
	$å_moduÀ_öô
(*
˘x
)

417 
å_°ru˘_t
 *
å
 = 
NULL
;

419 
	`c_log_debug
("%s", 
FN
);

421 
å
 = 
	`ˇŒoc
(1, (
å_°ru˘_t
));

422 i‡(!
å
) {

423 
	`c_log_îr
("%s:áŒo¯Áûed", 
FN
);

427 
å
->
≠p_˘x
 = 
˘x
;

428 
å_hdl
 = 
å
;

430 #ifde‡
CONFIG_MUL_RT


431 
	`mul_rouã_öô
(
å
);

434 
å
->
π
.
π_√xt_åiggî_ts
 = 
	`time
(
NULL
Ë+ 
RT_INIT_TRIGGER_TS
;

436 
	`mul_Œdp_öô
(
å
);

438 
å
->
å_£rvi˚
 = 
	`å_¸óã_£rvi˚
(tr);

439 i‡(!
å
->
å_£rvi˚
) {

440 
	`c_log_îr
("%s: TR sîvi˚ couldÇŸ bê¸óãd", 
FN
);

444 
	`mul_ªgi°î_≠p
(
NULL
, 
MUL_TR_SERVICE_NAME
, 
C_APP_ALL_SW
, 
C_APP_ALL_EVENTS
,

445 0, 
NULL
, 
å_evít_nŸifõr
);

446 
	}
}

452 
	$å_vty_öô
(*
¨g
 
UNUSED
)

454 
	`Œdp_vty_öô
(
å_hdl
);

455 
	`rouã_vty_öô
(
å_hdl
);

456 
	}
}

458 
moduÀ_öô
(
å_moduÀ_öô
);

459 
moduÀ_vty_öô
(
å_vty_öô
);

	@services/loadable/topo_routing/mul_tr.h

19 #i‚de‡
__MUL_TOPO_ROUTING_H__


20 
	#__MUL_TOPO_ROUTING_H__


	)

22 
	#CONFIG_MUL_RT


	)

24 
	~"mul_comm⁄.h
"

25 
	~"mul_rouã.h
"

26 
	~"mul_rouã_≠•.h
"

27 
	~"mul_å_comm⁄.h
"

28 
	~"mul_Œdp_pkt.h
"

29 
	~"mul_Œdp_hash.h
"

30 
	~"mul_Œdp_comm⁄.h
"

31 
	~"mul_Œdp_debug.h
"

32 
	~"mul_Œdp_vty.h
"

33 
	~"mul_rouã_¥iv.h
"

34 
	~"mul_rouã_≠•_¥iv.h
"

	@services/loadable/topo_routing/mul_tr_common.h

20 #i‚de‡
__MUL_TR_COMMON_H__


21 
	#__MUL_TR_COMMON_H__


	)

23 
	sπ_öfo_


25 
boﬁ
 
	mπ_åiggî
;

26 
boﬁ
 
	mπ_öô_åiggî
;

27 
	#RT_INIT_TRIGGER_TS
 (4)

	)

28 
	#RT_PERIODIC_TRIGGER_TS
 (10*60)

	)

29 
time_t
 
	mπ_√xt_åiggî_ts
;

30 *
	mπ_¥iv
;

31 (*
	mπ_öô_°©e
)(*
	må
);

32 (*
	mπ_add_√igh_c⁄n
)(*
	må_°ru˘
, 
	msw_a
, 
	msw_b
,

33 
lweight_∑ú_
 *
	m√w_adj
);

34 
	mGSLi°
 *(*
	mπ_gë_•
)(*
	må_°ru˘
, 
	mÆüs_§c_swid
,

35 
	mÆüs_d°_swid
);

36 (*
	mπ_ˇlc
)(*
	må_°ru˘
);

37 (*
	mπ_˛ón_°©e
)(*
	må_°ru˘
);

38 *(*
	mπ_dump_adj_m©rix
)(*
	må_°ru˘
);

42 
	så_°ru˘_
 {

43 *
	m≠p_˘x
;

44 *
	mt›o_hdl
;

45 *
	må_£rvi˚
;

47 
π_öfo_
 
	mπ
;

50 
	så_√igh_quîy_¨g
 {

51 
å_°ru˘_
 *
	må
;

52 
	m§c_sw
;

53 
	md°_sw
;

56 
å_°ru˘_
 
	tå_°ru˘_t
;

57 
å_√igh_quîy_¨g
 
	tå_√igh_quîy_¨g_t
;

58 
π_öfo_
 
	tπ_öfo_t
;

60 
	#TR_ROUTE_PBUF_SZ
 (4096)

	)

62 
__å_övoke_routög
(
å_°ru˘_t
 *
å
);

63 
å_övoke_routög
(
å_°ru˘_t
 *
å
);

64 
__å_gë_num_swôches
(
å_°ru˘_t
 *
å
);

65 
__å_gë_max_swôch_Æüs
(
å_°ru˘_t
 *
å
);

66 
__å_öô_√igh_∑ú_adja˚ncõs
(
å_√igh_quîy_¨g_t
 *
¨g
);

68 
GSLi°
 *
å_gë_rouã
(
å_°ru˘_t
 *
å
, 
§c_node
, 
d°_node
);

69 
å_de°roy_rouã
(
GSLi°
 *
rouã
);

70 *
å_dump_rouã
(
GSLi°
 *
rouã_∑th
);

71 *
å_show_rouã_adj_m©rix
(
å_°ru˘_t
 *
å
);

73 
å_moduÀ_öô
(*
˘x
);

74 
å_vty_öô
(*
¨g
);

	@services/loadable/topo_routing/mul_tr_servlet.c

20 
	~"mul_comm⁄.h
"

21 
	~"mul_å_£rvÀt.h
"

29 
	$mul_dump_√igh
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
)

31 *
pbuf
 = 
	`ˇŒoc
(1, 
TR_DFL_PBUF_SZ
);

32 
c_oÂ_aux≠p_cmd_t
 *
coÂ_auc
 = (*)(
b
->
d©a
);

33 
num_p‹ts
, 
i
 = 0, 
Àn
 = 0;

34 
c_oÂ_p‹t_√igh
 *
p‹t
;

35 
c_oÂ_swôch_√igh_t
 *
√igh
 = (*)(
coÂ_auc
->
d©a
);

36 
boﬁ
 
√igh_swôch
 = 
Ál£
;

38 
num_p‹ts
 = (
	`¡ohs
(
coÂ_auc
->
hódî
.
Àngth
Ë- ((
c_oÂ_swôch_√igh_t
)

39 + (
c_oÂ_aux≠p_cmd_t
)))/ (
c_oÂ_p‹t_√igh
);

41 
p‹t
 = (*)(
√igh
->
d©a
);

42 ; 
i
 < 
num_p‹ts
; i++) {

43 
√igh_swôch
 = 
	`¡ohs
(
p‹t
->
√igh_¥e£¡
Ë& 
COFP_NEIGH_SWITCH
 ?

44 
åue
: 
Ál£
;

45 
Àn
 +
	`¢¥ötf
(
pbuf
 +Üí, 
TR_DFL_PBUF_SZ
-len-1,

47 
	`¡ohs
(
p‹t
->
p‹t_no
), 
√igh_swôch
 ? "SWITCH" : "EXT",

48 
	`¡ohŒ
(
p‹t
->
√igh_dpid
), 
	`¡ohs
’‹t->
√igh_p‹t
));

49 i‡(
Àn
 >
TR_DFL_PBUF_SZ
-1) {

50 
out_buf_îr
;

52 
p‹t
++;

54 
out
:

55 i‡(
‰ì_buf
) {

56 
	`‰ì_cbuf
(
b
);

58  
pbuf
;

59 
out_buf_îr
:

60 
	`c_log_îr
("%s:Öbu‡Ælo¯Áûed", 
FN
);

61 
out
;

62 
	}
}

71 
cbuf
 *

72 
	$mul_√igh_gë
(*
£rvi˚
, 
uöt64_t
 
dpid
)

74 
cbuf
 *
b
;

75 
c_oÂ_aux≠p_cmd
 *
coÂ_auc
;

76 
c_oÂ_ªq_dpid_©å
 *
coÂ_rda
;

77 
oÂ_hódî
 *
h
;

79 
b
 = 
	`of_¥ï_msg
((
c_oÂ_aux≠p_cmd
) +

80 (
c_oÂ_ªq_dpid_©å
),

81 
C_OFPT_AUX_CMD
, 0);

83 
coÂ_auc
 = (*)(
b
->
d©a
);

84 
coÂ_auc
->
cmd_code
 = 
	`ht⁄l
(
C_AUX_CMD_TR_GET_NEIGH
);

85 
coÂ_rda
 = (*)(
coÂ_auc
->
d©a
);

86 
coÂ_rda
->
d©≠©h_id
 = 
	`ht⁄Œ
(
dpid
);

88 
	`c_£rvi˚_£nd
(
£rvi˚
, 
b
);

89 
b
 = 
	`c_£rvi˚_waô_ª•⁄£
(
£rvi˚
);

90 i‡(
b
) {

91 
h
 = (*)(
b
->
d©a
);

92 i‡(
h
->
ty≥
 =
C_OFPT_ERR_MSG
) {

93 
	`c_log_îr
("%s: Faûed", 
FN
);

94 
	`‰ì_cbuf
(
b
);

95  
NULL
;

99  
b
;

100 
	}
}

	@services/loadable/topo_routing/mul_tr_servlet.h

19 #i‚de‡ 
__MUL_TR_SERVLET_H__


20 
	#__MUL_TR_SERVLET_H__


	)

22 
	#TR_DFL_PBUF_SZ
 (4096)

	)

24 
cbuf
 *
mul_√igh_gë
(*
£rvi˚
, 
uöt64_t
 
dpid
);

25 *
mul_dump_√igh
(
cbuf
 *
b
, 
boﬁ
 
‰ì_buf
);

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/arpa/telnet.h

32 #i‚de‡
_ARPA_TELNET_H


33 
	#_ARPA_TELNET_H
 1

	)

38 
	#IAC
 255

	)

39 
	#DONT
 254

	)

40 
	#DO
 253

	)

41 
	#WONT
 252

	)

42 
	#WILL
 251

	)

43 
	#SB
 250

	)

44 
	#GA
 249

	)

45 
	#EL
 248

	)

46 
	#EC
 247

	)

47 
	#AYT
 246

	)

48 
	#AO
 245

	)

49 
	#IP
 244

	)

50 
	#BREAK
 243

	)

51 
	#DM
 242

	)

52 
	#NOP
 241

	)

53 
	#SE
 240

	)

54 
	#EOR
 239

	)

55 
	#ABORT
 238

	)

56 
	#SUSP
 237

	)

57 
	#xEOF
 236

	)

59 
	#SYNCH
 242

	)

61 #ifde‡
TELCMDS


62 *
	gãlcmds
[] = {

68 *
ãlcmds
[];

71 
	#TELCMD_FIRST
 
xEOF


	)

72 
	#TELCMD_LAST
 
IAC


	)

73 
	#TELCMD_OK
(
x
Ë(()(xË<
TELCMD_LAST
 && \

74 ()(
x
Ë>
TELCMD_FIRST
)

	)

75 
	#TELCMD
(
x
Ë
ãlcmds
[(x)-
TELCMD_FIRST
]

	)

78 
	#TELOPT_BINARY
 0

	)

79 
	#TELOPT_ECHO
 1

	)

80 
	#TELOPT_RCP
 2

	)

81 
	#TELOPT_SGA
 3

	)

82 
	#TELOPT_NAMS
 4

	)

83 
	#TELOPT_STATUS
 5

	)

84 
	#TELOPT_TM
 6

	)

85 
	#TELOPT_RCTE
 7

	)

86 
	#TELOPT_NAOL
 8

	)

87 
	#TELOPT_NAOP
 9

	)

88 
	#TELOPT_NAOCRD
 10

	)

89 
	#TELOPT_NAOHTS
 11

	)

90 
	#TELOPT_NAOHTD
 12

	)

91 
	#TELOPT_NAOFFD
 13

	)

92 
	#TELOPT_NAOVTS
 14

	)

93 
	#TELOPT_NAOVTD
 15

	)

94 
	#TELOPT_NAOLFD
 16

	)

95 
	#TELOPT_XASCII
 17

	)

96 
	#TELOPT_LOGOUT
 18

	)

97 
	#TELOPT_BM
 19

	)

98 
	#TELOPT_DET
 20

	)

99 
	#TELOPT_SUPDUP
 21

	)

100 
	#TELOPT_SUPDUPOUTPUT
 22

	)

101 
	#TELOPT_SNDLOC
 23

	)

102 
	#TELOPT_TTYPE
 24

	)

103 
	#TELOPT_EOR
 25

	)

104 
	#TELOPT_TUID
 26

	)

105 
	#TELOPT_OUTMRK
 27

	)

106 
	#TELOPT_TTYLOC
 28

	)

107 
	#TELOPT_3270REGIME
 29

	)

108 
	#TELOPT_X3PAD
 30

	)

109 
	#TELOPT_NAWS
 31

	)

110 
	#TELOPT_TSPEED
 32

	)

111 
	#TELOPT_LFLOW
 33

	)

112 
	#TELOPT_LINEMODE
 34

	)

113 
	#TELOPT_XDISPLOC
 35

	)

114 
	#TELOPT_OLD_ENVIRON
 36

	)

115 
	#TELOPT_AUTHENTICATION
 37

	)

116 
	#TELOPT_ENCRYPT
 38

	)

117 
	#TELOPT_NEW_ENVIRON
 39

	)

118 
	#TELOPT_EXOPL
 255

	)

121 
	#NTELOPTS
 (1+
TELOPT_NEW_ENVIRON
)

	)

122 #ifde‡
TELOPTS


123 *
	gãl›ts
[
NTELOPTS
+1] = {

136 
	#TELOPT_FIRST
 
TELOPT_BINARY


	)

137 
	#TELOPT_LAST
 
TELOPT_NEW_ENVIRON


	)

138 
	#TELOPT_OK
(
x
Ë(()(xË<
TELOPT_LAST
)

	)

139 
	#TELOPT
(
x
Ë
ãl›ts
[(x)-
TELOPT_FIRST
]

	)

143 
	#TELQUAL_IS
 0

	)

144 
	#TELQUAL_SEND
 1

	)

145 
	#TELQUAL_INFO
 2

	)

146 
	#TELQUAL_REPLY
 2

	)

147 
	#TELQUAL_NAME
 3

	)

149 
	#LFLOW_OFF
 0

	)

150 
	#LFLOW_ON
 1

	)

151 
	#LFLOW_RESTART_ANY
 2

	)

152 
	#LFLOW_RESTART_XON
 3

	)

158 
	#LM_MODE
 1

	)

159 
	#LM_FORWARDMASK
 2

	)

160 
	#LM_SLC
 3

	)

162 
	#MODE_EDIT
 0x01

	)

163 
	#MODE_TRAPSIG
 0x02

	)

164 
	#MODE_ACK
 0x04

	)

165 
	#MODE_SOFT_TAB
 0x08

	)

166 
	#MODE_LIT_ECHO
 0x10

	)

168 
	#MODE_MASK
 0x1f

	)

171 
	#MODE_FLOW
 0x0100

	)

172 
	#MODE_ECHO
 0x0200

	)

173 
	#MODE_INBIN
 0x0400

	)

174 
	#MODE_OUTBIN
 0x0800

	)

175 
	#MODE_FORCE
 0x1000

	)

177 
	#SLC_SYNCH
 1

	)

178 
	#SLC_BRK
 2

	)

179 
	#SLC_IP
 3

	)

180 
	#SLC_AO
 4

	)

181 
	#SLC_AYT
 5

	)

182 
	#SLC_EOR
 6

	)

183 
	#SLC_ABORT
 7

	)

184 
	#SLC_EOF
 8

	)

185 
	#SLC_SUSP
 9

	)

186 
	#SLC_EC
 10

	)

187 
	#SLC_EL
 11

	)

188 
	#SLC_EW
 12

	)

189 
	#SLC_RP
 13

	)

190 
	#SLC_LNEXT
 14

	)

191 
	#SLC_XON
 15

	)

192 
	#SLC_XOFF
 16

	)

193 
	#SLC_FORW1
 17

	)

194 
	#SLC_FORW2
 18

	)

196 
	#NSLC
 18

	)

202 
	#SLC_NAMELIST
 "0", "SYNCH", "BRK", "IP", "AO", "AYT", "EOR", \

204 "LNEXT", "XON", "XOFF", "FORW1", "FORW2", 0,

	)

205 #ifdef 
SLC_NAMES


206 *
	g¶c_«mes
[] = {

207 
SLC_NAMELIST


210 *
¶c_«mes
[];

211 
	#SLC_NAMES
 
SLC_NAMELIST


	)

214 
	#SLC_NAME_OK
(
x
Ë(()(xË<
NSLC
)

	)

215 
	#SLC_NAME
(
x
Ë
¶c_«mes
[x]

	)

217 
	#SLC_NOSUPPORT
 0

	)

218 
	#SLC_CANTCHANGE
 1

	)

219 
	#SLC_VARIABLE
 2

	)

220 
	#SLC_DEFAULT
 3

	)

221 
	#SLC_LEVELBITS
 0x03

	)

223 
	#SLC_FUNC
 0

	)

224 
	#SLC_FLAGS
 1

	)

225 
	#SLC_VALUE
 2

	)

227 
	#SLC_ACK
 0x80

	)

228 
	#SLC_FLUSHIN
 0x40

	)

229 
	#SLC_FLUSHOUT
 0x20

	)

231 
	#OLD_ENV_VAR
 1

	)

232 
	#OLD_ENV_VALUE
 0

	)

233 
	#NEW_ENV_VAR
 0

	)

234 
	#NEW_ENV_VALUE
 1

	)

235 
	#ENV_ESC
 2

	)

236 
	#ENV_USERVAR
 3

	)

245 
	#AUTH_WHO_CLIENT
 0

	)

246 
	#AUTH_WHO_SERVER
 1

	)

247 
	#AUTH_WHO_MASK
 1

	)

252 
	#AUTH_HOW_ONE_WAY
 0

	)

253 
	#AUTH_HOW_MUTUAL
 2

	)

254 
	#AUTH_HOW_MASK
 2

	)

256 
	#AUTHTYPE_NULL
 0

	)

257 
	#AUTHTYPE_KERBEROS_V4
 1

	)

258 
	#AUTHTYPE_KERBEROS_V5
 2

	)

259 
	#AUTHTYPE_SPX
 3

	)

260 
	#AUTHTYPE_MINK
 4

	)

261 
	#AUTHTYPE_CNT
 5

	)

263 
	#AUTHTYPE_TEST
 99

	)

265 #ifdef 
AUTH_NAMES


266 *
	gauthty≥_«mes
[] = {

270 *
authty≥_«mes
[];

273 
	#AUTHTYPE_NAME_OK
(
x
Ë(()(xË< 
AUTHTYPE_CNT
)

	)

274 
	#AUTHTYPE_NAME
(
x
Ë
authty≥_«mes
[x]

	)

279 
	#ENCRYPT_IS
 0

	)

280 
	#ENCRYPT_SUPPORT
 1

	)

281 
	#ENCRYPT_REPLY
 2

	)

282 
	#ENCRYPT_START
 3

	)

283 
	#ENCRYPT_END
 4

	)

284 
	#ENCRYPT_REQSTART
 5

	)

285 
	#ENCRYPT_REQEND
 6

	)

286 
	#ENCRYPT_ENC_KEYID
 7

	)

287 
	#ENCRYPT_DEC_KEYID
 8

	)

288 
	#ENCRYPT_CNT
 9

	)

290 
	#ENCTYPE_ANY
 0

	)

291 
	#ENCTYPE_DES_CFB64
 1

	)

292 
	#ENCTYPE_DES_OFB64
 2

	)

293 
	#ENCTYPE_CNT
 3

	)

295 #ifdef 
ENCRYPT_NAMES


296 *
	gí¸y±_«mes
[] = {

301 *
	gí˘y≥_«mes
[] = {

305 *
í¸y±_«mes
[];

306 *
í˘y≥_«mes
[];

310 
	#ENCRYPT_NAME_OK
(
x
Ë(()(xË< 
ENCRYPT_CNT
)

	)

311 
	#ENCRYPT_NAME
(
x
Ë
í¸y±_«mes
[x]

	)

313 
	#ENCTYPE_NAME_OK
(
x
Ë(()(xË< 
ENCTYPE_CNT
)

	)

314 
	#ENCTYPE_NAME
(
x
Ë
í˘y≥_«mes
[x]

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/event2/event.h

27 #i‚de‡
_EVENT2_EVENT_H_


28 
	#_EVENT2_EVENT_H_


	)

183 #ifde‡
__˝lu•lus


187 
	~<evít2/evít-c⁄fig.h
>

188 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


189 
	~<sys/ty≥s.h
>

191 #ifde‡
_EVENT_HAVE_SYS_TIME_H


192 
	~<sys/time.h
>

195 
	~<°dio.h
>

198 
	~<evít2/utû.h
>

213 
evít_ba£


214 #ifde‡
_EVENT_IN_DOXYGEN


272 
evít


273 #ifde‡
_EVENT_IN_DOXYGEN


291 
evít_c⁄fig


292 #ifde‡
_EVENT_IN_DOXYGEN


317 
evít_íabÀ_debug_mode
();

328 
evít_debug_u«ssign
(
evít
 *);

337 
evít_ba£
 *
evít_ba£_√w
();

349 
evít_ªöô
(
evít_ba£
 *
ba£
);

364 
evít_ba£_di•©ch
(
evít_ba£
 *);

372 c⁄° *
evít_ba£_gë_mëhod
(c⁄° 
evít_ba£
 *);

386 c⁄° **
evít_gë_suµ‹ãd_mëhods
();

398 
evít_c⁄fig
 *
evít_c⁄fig_√w
();

405 
evít_c⁄fig_‰ì
(
evít_c⁄fig
 *
cfg
);

419 
evít_c⁄fig_avoid_mëhod
(
evít_c⁄fig
 *
cfg
, c⁄° *
mëhod
);

430 
	eevít_mëhod_„©uª
 {

432 
EV_FEATURE_ET
 = 0x01,

437 
EV_FEATURE_O1
 = 0x02,

440 
EV_FEATURE_FDS
 = 0x04

451 
	eevít_ba£_c⁄fig_Êag
 {

454 
EVENT_BASE_FLAG_NOLOCK
 = 0x01,

457 
EVENT_BASE_FLAG_IGNORE_ENV
 = 0x02,

464 
EVENT_BASE_FLAG_STARTUP_IOCP
 = 0x04,

468 
EVENT_BASE_FLAG_NO_CACHE_TIME
 = 0x08,

484 
EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST
 = 0x10

494 
evít_ba£_gë_„©uªs
(c⁄° 
evít_ba£
 *
ba£
);

518 
evít_c⁄fig_ªquúe_„©uªs
(
evít_c⁄fig
 *
cfg
, 
„©uª
);

526 
evít_c⁄fig_£t_Êag
(
evít_c⁄fig
 *
cfg
, 
Êag
);

537 
evít_c⁄fig_£t_num_˝us_höt
(
evít_c⁄fig
 *
cfg
, 
˝us
);

551 
evít_ba£
 *
evít_ba£_√w_wôh_c⁄fig
(c⁄° 
evít_c⁄fig
 *);

561 
evít_ba£_‰ì
(
evít_ba£
 *);

566 
	#_EVENT_LOG_DEBUG
 0

	)

567 
	#_EVENT_LOG_MSG
 1

	)

568 
	#_EVENT_LOG_WARN
 2

	)

569 
	#_EVENT_LOG_ERR
 3

	)

577 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

588 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

595 (*
evít_Áèl_cb
)(
	tîr
);

609 
evít_£t_Áèl_ˇŒback
(
evít_Áèl_cb
 
cb
);

620 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

629 
	#EVLOOP_ONCE
 0x01

	)

632 
	#EVLOOP_NONBLOCK
 0x02

	)

653 
evít_ba£_lo›
(
evít_ba£
 *, );

670 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

685 
evít_ba£_lo›bªak
(
evít_ba£
 *);

699 
evít_ba£_gŸ_exô
(
evít_ba£
 *);

713 
evít_ba£_gŸ_bªak
(
evít_ba£
 *);

724 
	#EV_TIMEOUT
 0x01

	)

726 
	#EV_READ
 0x02

	)

728 
	#EV_WRITE
 0x04

	)

730 
	#EV_SIGNAL
 0x08

	)

737 
	#EV_PERSIST
 0x10

	)

739 
	#EV_ET
 0x20

	)

747 
	#evtimî_assign
(
ev
, 
b
, 
cb
, 
¨g
) \

748 
	`evít_assign
((
ev
), (
b
), -1, 0, (
cb
), (
¨g
))

	)

749 
	#evtimî_√w
(
b
, 
cb
, 
¨g
Ë
	`evít_√w
((b), -1, 0, (cb), (¨g))

	)

750 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

751 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

752 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_TIMEOUT
, (tv))

	)

753 
	#evtimî_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

762 
	#evsig«l_add
(
ev
, 
tv
Ë
	`evít_add
(”v), (tv))

	)

763 
	#evsig«l_assign
(
ev
, 
b
, 
x
, 
cb
, 
¨g
) \

764 
	`evít_assign
((
ev
), (
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, (
¨g
))

	)

765 
	#evsig«l_√w
(
b
, 
x
, 
cb
, 
¨g
) \

766 
	`evít_√w
((
b
), (
x
), 
EV_SIGNAL
|
EV_PERSIST
, (
cb
), (
¨g
))

	)

767 
	#evsig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

768 
	#evsig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
(”v), 
EV_SIGNAL
, (tv))

	)

769 
	#evsig«l_öôülized
(
ev
Ë
	`evít_öôülized
”v)

	)

783 (*
evít_ˇŒback_‚
)(
	tevutû_sockë_t
, , *);

833 
evít
 *
evít_√w
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

874 
evít_assign
(
evít
 *, 
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *);

882 
evít_‰ì
(
evít
 *);

906 
evít_ba£_⁄˚
(
evít_ba£
 *, 
evutû_sockë_t
, , 
evít_ˇŒback_‚
, *, c⁄° 
timevÆ
 *);

930 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

943 
evít_dñ
(
evít
 *);

960 
evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
);

975 
evít_≥ndög
(c⁄° 
evít
 *
ev
, 
evíts
, 
timevÆ
 *
tv
);

993 
evít_öôülized
(c⁄° 
evít
 *
ev
);

998 
	#evít_gë_sig«l
(
ev
Ë(()
	`evít_gë_fd
”v))

	)

1004 
evutû_sockë_t
 
evít_gë_fd
(c⁄° 
evít
 *
ev
);

1009 
evít_ba£
 *
evít_gë_ba£
(c⁄° 
evít
 *
ev
);

1014 
evít_gë_evíts
(c⁄° 
evít
 *
ev
);

1019 
evít_ˇŒback_‚
 
evít_gë_ˇŒback
(c⁄° 
evít
 *
ev
);

1024 *
evít_gë_ˇŒback_¨g
(c⁄° 
evít
 *
ev
);

1033 
evít_gë_assignmít
(c⁄° 
evít
 *event,

1034 
evít_ba£
 **
ba£_out
, 
evutû_sockë_t
 *
fd_out
, *
evíts_out
,

1035 
evít_ˇŒback_‚
 *
ˇŒback_out
, **
¨g_out
);

1050 
size_t
 
evít_gë_°ru˘_evít_size
();

1061 c⁄° *
evít_gë_vîsi⁄
();

1074 
ev_uöt32_t
 
evít_gë_vîsi⁄_numbî
();

1077 
	#LIBEVENT_VERSION
 
_EVENT_VERSION


	)

1080 
	#LIBEVENT_VERSION_NUMBER
 
_EVENT_NUMERIC_VERSION


	)

1083 
	#EVENT_MAX_PRIORITIES
 256

	)

1111 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

1121 
evít_¥i‹ôy_£t
(
evít
 *, );

1142 c⁄° 
timevÆ
 *
evít_ba£_öô_comm⁄_timeout
(
evít_ba£
 *
ba£
,

1143 c⁄° 
timevÆ
 *
duøti⁄
);

1145 #i‡!
deföed
(
_EVENT_DISABLE_MM_REPLACEMENT
Ë|| deföed(
_EVENT_IN_DOXYGEN
)

1168 
evít_£t_mem_fun˘i⁄s
(

1169 *(*
mÆloc_‚
)(
size_t
 
sz
),

1170 *(*
ªÆloc_‚
)(*
±r
, 
size_t
 
sz
),

1171 (*
‰ì_‚
)(*
±r
));

1174 
	#EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED


	)

1177 
evít_ba£_dump_evíts
(
evít_ba£
 *, 
FILE
 *);

1190 
evít_ba£_gëtimeofday_ˇched
(
evít_ba£
 *
ba£
,

1191 
timevÆ
 *
tv
);

1193 #ifde‡
__˝lu•lus


	@/usr/include/execinfo.h

19 #i‚de‡
_EXECINFO_H


20 
	#_EXECINFO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

33 **
	$backåa˚_symbﬁs
 (*
__c⁄°
 *
__¨øy
, 
__size
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$backåa˚_symbﬁs_fd
 (*
__c⁄°
 *
__¨øy
, 
__size
, 
__fd
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/gnu-versions.h

20 #i‚de‡
_GNU_VERSIONS_H


21 
	#_GNU_VERSIONS_H
 1

	)

47 
	#_GNU_OBSTACK_INTERFACE_VERSION
 1

	)

48 
	#_GNU_REGEX_INTERFACE_VERSION
 1

	)

49 
	#_GNU_GLOB_INTERFACE_VERSION
 1

	)

50 
	#_GNU_GETOPT_INTERFACE_VERSION
 2

	)

	@/usr/include/grp.h

24 #i‚def 
_GRP_H


25 
	#_GRP_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 
	#__√ed_size_t


	)

34 
	~<°ddef.h
>

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

44 
	sgroup


46 *
	mgr_«me
;

47 *
	mgr_∑sswd
;

48 
__gid_t
 
	mgr_gid
;

49 **
	mgr_mem
;

53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


54 
	#__√ed_FILE


	)

55 
	~<°dio.h
>

59 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


64 
£tgª¡
 ();

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

68 || 
deföed
 
__USE_XOPEN2K8


73 
ídgª¡
 ();

79 
group
 *
gëgª¡
 ();

82 #ifdef 
__USE_SVID


89 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

92 #ifde‡
__USE_GNU


99 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

100 
FILE
 *
__ª°ri˘
 
__f
);

107 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

113 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

115 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


117 #ifde‡
__USE_MISC


120 
	#NSS_BUFLEN_GROUP
 1024

	)

136 #ifde‡
__USE_GNU


137 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

138 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

139 
group
 **
__ª°ri˘
 
__ªsu…
);

146 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
group
 **
__ª°ri˘
 
__ªsu…
);

154 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

155 
group
 *
__ª°ri˘
 
__ªsu…buf
,

156 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

157 
group
 **
__ª°ri˘
 
__ªsu…
);

159 #ifdef 
__USE_SVID


167 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

168 
group
 *
__ª°ri˘
 
__ªsu…buf
,

169 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

170 
group
 **
__ª°ri˘
 
__ªsu…
);

176 #ifdef 
__USE_BSD


178 
	#__√ed_size_t


	)

179 
	~<°ddef.h
>

182 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

192 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

193 
__gid_t
 *
__groups
, *
__ngroups
);

203 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

207 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

39 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

40 
	#BPF_LD
 0x00

	)

41 
	#BPF_LDX
 0x01

	)

42 
	#BPF_ST
 0x02

	)

43 
	#BPF_STX
 0x03

	)

44 
	#BPF_ALU
 0x04

	)

45 
	#BPF_JMP
 0x05

	)

46 
	#BPF_RET
 0x06

	)

47 
	#BPF_MISC
 0x07

	)

50 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

51 
	#BPF_W
 0x00

	)

52 
	#BPF_H
 0x08

	)

53 
	#BPF_B
 0x10

	)

54 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

55 
	#BPF_IMM
 0x00

	)

56 
	#BPF_ABS
 0x20

	)

57 
	#BPF_IND
 0x40

	)

58 
	#BPF_MEM
 0x60

	)

59 
	#BPF_LEN
 0x80

	)

60 
	#BPF_MSH
 0xa0

	)

63 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

64 
	#BPF_ADD
 0x00

	)

65 
	#BPF_SUB
 0x10

	)

66 
	#BPF_MUL
 0x20

	)

67 
	#BPF_DIV
 0x30

	)

68 
	#BPF_OR
 0x40

	)

69 
	#BPF_AND
 0x50

	)

70 
	#BPF_LSH
 0x60

	)

71 
	#BPF_RSH
 0x70

	)

72 
	#BPF_NEG
 0x80

	)

73 
	#BPF_JA
 0x00

	)

74 
	#BPF_JEQ
 0x10

	)

75 
	#BPF_JGT
 0x20

	)

76 
	#BPF_JGE
 0x30

	)

77 
	#BPF_JSET
 0x40

	)

78 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

79 
	#BPF_K
 0x00

	)

80 
	#BPF_X
 0x08

	)

83 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

84 
	#BPF_A
 0x10

	)

87 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

88 
	#BPF_TAX
 0x00

	)

89 
	#BPF_TXA
 0x80

	)

91 #i‚de‡
BPF_MAXINSNS


92 
	#BPF_MAXINSNS
 4096

	)

98 #i‚de‡
BPF_STMT


99 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

101 #i‚de‡
BPF_JUMP


102 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

108 
	#BPF_MEMWORDS
 16

	)

115 
	#SKF_AD_OFF
 (-0x1000)

	)

116 
	#SKF_AD_PROTOCOL
 0

	)

117 
	#SKF_AD_PKTTYPE
 4

	)

118 
	#SKF_AD_IFINDEX
 8

	)

119 
	#SKF_AD_NLATTR
 12

	)

120 
	#SKF_AD_NLATTR_NEST
 16

	)

121 
	#SKF_AD_MARK
 20

	)

122 
	#SKF_AD_QUEUE
 24

	)

123 
	#SKF_AD_HATYPE
 28

	)

124 
	#SKF_AD_RXHASH
 32

	)

125 
	#SKF_AD_CPU
 36

	)

126 
	#SKF_AD_MAX
 40

	)

127 
	#SKF_NET_OFF
 (-0x100000)

	)

128 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

28 
	#NETLINK_CRYPTO
 21

	)

30 
	#MAX_LINKS
 32

	)

32 
	ssockaddr_∆
 {

33 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

53 
	#NLM_F_DUMP_INTR
 16

	)

56 
	#NLM_F_ROOT
 0x100

	)

57 
	#NLM_F_MATCH
 0x200

	)

58 
	#NLM_F_ATOMIC
 0x400

	)

59 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

62 
	#NLM_F_REPLACE
 0x100

	)

63 
	#NLM_F_EXCL
 0x200

	)

64 
	#NLM_F_CREATE
 0x400

	)

65 
	#NLM_F_APPEND
 0x800

	)

76 
	#NLMSG_ALIGNTO
 4U

	)

77 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

78 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

79 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

80 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

81 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

82 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

83 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

84 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

86 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

87 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

89 
	#NLMSG_NOOP
 0x1

	)

90 
	#NLMSG_ERROR
 0x2

	)

91 
	#NLMSG_DONE
 0x3

	)

92 
	#NLMSG_OVERRUN
 0x4

	)

94 
	#NLMSG_MIN_TYPE
 0x10

	)

96 
	s∆msgîr
 {

97 
	mîr‹
;

98 
∆msghdr
 
	mmsg
;

101 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

102 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

103 
	#NETLINK_PKTINFO
 3

	)

104 
	#NETLINK_BROADCAST_ERROR
 4

	)

105 
	#NETLINK_NO_ENOBUFS
 5

	)

107 
	s∆_pktöfo
 {

108 
__u32
 
	mgroup
;

111 
	#NET_MAJOR
 36

	)

114 
	mNETLINK_UNCONNECTED
 = 0,

115 
	mNETLINK_CONNECTED
,

127 
	s∆©å
 {

128 
__u16
 
	m∆a_Àn
;

129 
__u16
 
	m∆a_ty≥
;

142 
	#NLA_F_NESTED
 (1 << 15)

	)

143 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

144 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

146 
	#NLA_ALIGNTO
 4

	)

147 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

148 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	mRTA_MARK
,

286 
	m__RTA_MAX


289 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

291 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

292 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

303 
	sπ√xth›
 {

304 
	mπnh_Àn
;

305 
	mπnh_Êags
;

306 
	mπnh_h›s
;

307 
	mπnh_ifödex
;

312 
	#RTNH_F_DEAD
 1

	)

313 
	#RTNH_F_PERVASIVE
 2

	)

314 
	#RTNH_F_ONLINK
 4

	)

318 
	#RTNH_ALIGNTO
 4

	)

319 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

320 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

321 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

322 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

323 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

324 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

325 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

329 
	sπa_ˇcheöfo
 {

330 
__u32
 
	mπa_˛¡ªf
;

331 
__u32
 
	mπa_œ°u£
;

332 
__s32
 
	mπa_expúes
;

333 
__u32
 
	mπa_îr‹
;

334 
__u32
 
	mπa_u£d
;

336 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

337 
__u32
 
	mπa_id
;

338 
__u32
 
	mπa_ts
;

339 
__u32
 
	mπa_tßge
;

345 
	mRTAX_UNSPEC
,

346 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

347 
	mRTAX_LOCK
,

348 
	#RTAX_LOCK
 
RTAX_LOCK


	)

349 
	mRTAX_MTU
,

350 
	#RTAX_MTU
 
RTAX_MTU


	)

351 
	mRTAX_WINDOW
,

352 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

353 
	mRTAX_RTT
,

354 
	#RTAX_RTT
 
RTAX_RTT


	)

355 
	mRTAX_RTTVAR
,

356 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

357 
	mRTAX_SSTHRESH
,

358 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

359 
	mRTAX_CWND
,

360 
	#RTAX_CWND
 
RTAX_CWND


	)

361 
	mRTAX_ADVMSS
,

362 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

363 
	mRTAX_REORDERING
,

364 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

365 
	mRTAX_HOPLIMIT
,

366 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

367 
	mRTAX_INITCWND
,

368 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

369 
	mRTAX_FEATURES
,

370 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

371 
	mRTAX_RTO_MIN
,

372 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

373 
	mRTAX_INITRWND
,

374 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

375 
	m__RTAX_MAX


378 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

380 
	#RTAX_FEATURE_ECN
 0x00000001

	)

381 
	#RTAX_FEATURE_SACK
 0x00000002

	)

382 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

383 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

385 
	sπa_£ssi⁄
 {

386 
__u8
 
	m¥Ÿo
;

387 
__u8
 
	m∑d1
;

388 
__u16
 
	m∑d2
;

392 
__u16
 
	m•‹t
;

393 
__u16
 
	mdp‹t
;

394 } 
	mp‹ts
;

397 
__u8
 
	mty≥
;

398 
__u8
 
	mcode
;

399 
__u16
 
	midít
;

400 } 
	micm±
;

402 
__u32
 
	m•i
;

403 } 
	mu
;

410 
	sπgímsg
 {

411 
	mπgí_Ámûy
;

423 
	siföfomsg
 {

424 
	mifi_Ámûy
;

425 
	m__ifi_∑d
;

426 
	mifi_ty≥
;

427 
	mifi_ödex
;

428 
	mifi_Êags
;

429 
	mifi_ch™ge
;

436 
	s¥efixmsg
 {

437 
	m¥efix_Ámûy
;

438 
	m¥efix_∑d1
;

439 
	m¥efix_∑d2
;

440 
	m¥efix_ifödex
;

441 
	m¥efix_ty≥
;

442 
	m¥efix_Àn
;

443 
	m¥efix_Êags
;

444 
	m¥efix_∑d3
;

449 
	mPREFIX_UNSPEC
,

450 
	mPREFIX_ADDRESS
,

451 
	mPREFIX_CACHEINFO
,

452 
	m__PREFIX_MAX


455 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

457 
	s¥efix_ˇcheöfo
 {

458 
__u32
 
	m¥e„ºed_time
;

459 
__u32
 
	mvÆid_time
;

467 
	stcmsg
 {

468 
	mtcm_Ámûy
;

469 
	mtcm__∑d1
;

470 
	mtcm__∑d2
;

471 
	mtcm_ifödex
;

472 
__u32
 
	mtcm_h™dÀ
;

473 
__u32
 
	mtcm_∑ª¡
;

474 
__u32
 
	mtcm_öfo
;

478 
	mTCA_UNSPEC
,

479 
	mTCA_KIND
,

480 
	mTCA_OPTIONS
,

481 
	mTCA_STATS
,

482 
	mTCA_XSTATS
,

483 
	mTCA_RATE
,

484 
	mTCA_FCNT
,

485 
	mTCA_STATS2
,

486 
	mTCA_STAB
,

487 
	m__TCA_MAX


490 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

492 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

493 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

499 
	sndu£r›tmsg
 {

500 
	mndu£r›t_Ámûy
;

501 
	mndu£r›t_∑d1
;

502 
	mndu£r›t_›ts_Àn
;

503 
	mndu£r›t_ifödex
;

504 
__u8
 
	mndu£r›t_icmp_ty≥
;

505 
__u8
 
	mndu£r›t_icmp_code
;

506 
	mndu£r›t_∑d2
;

507 
	mndu£r›t_∑d3
;

512 
	mNDUSEROPT_UNSPEC
,

513 
	mNDUSEROPT_SRCADDR
,

514 
	m__NDUSEROPT_MAX


517 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

520 
	#RTMGRP_LINK
 1

	)

521 
	#RTMGRP_NOTIFY
 2

	)

522 
	#RTMGRP_NEIGH
 4

	)

523 
	#RTMGRP_TC
 8

	)

525 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

526 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

527 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

528 
	#RTMGRP_IPV4_RULE
 0x80

	)

530 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

531 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

532 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

533 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

535 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

536 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

538 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

541 
	eπ√éök_groups
 {

542 
	mRTNLGRP_NONE
,

543 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

544 
	mRTNLGRP_LINK
,

545 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

546 
	mRTNLGRP_NOTIFY
,

547 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

548 
	mRTNLGRP_NEIGH
,

549 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

550 
	mRTNLGRP_TC
,

551 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

552 
	mRTNLGRP_IPV4_IFADDR
,

553 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

554 
	mRTNLGRP_IPV4_MROUTE
,

555 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

556 
	mRTNLGRP_IPV4_ROUTE
,

557 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

558 
	mRTNLGRP_IPV4_RULE
,

559 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

560 
	mRTNLGRP_IPV6_IFADDR
,

561 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

562 
	mRTNLGRP_IPV6_MROUTE
,

563 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

564 
	mRTNLGRP_IPV6_ROUTE
,

565 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

566 
	mRTNLGRP_IPV6_IFINFO
,

567 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

568 
	mRTNLGRP_DEC√t_IFADDR
,

569 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

570 
	mRTNLGRP_NOP2
,

571 
	mRTNLGRP_DEC√t_ROUTE
,

572 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

573 
	mRTNLGRP_DEC√t_RULE
,

574 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

575 
	mRTNLGRP_NOP4
,

576 
	mRTNLGRP_IPV6_PREFIX
,

577 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

578 
	mRTNLGRP_IPV6_RULE
,

579 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

580 
	mRTNLGRP_ND_USEROPT
,

581 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

582 
	mRTNLGRP_PHONET_IFADDR
,

583 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

584 
	mRTNLGRP_PHONET_ROUTE
,

585 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

586 
	mRTNLGRP_DCB
,

587 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

588 
	m__RTNLGRP_MAX


590 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

593 
	stˇmsg
 {

594 
	mtˇ_Ámûy
;

595 
	mtˇ__∑d1
;

596 
	mtˇ__∑d2
;

598 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

599 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

600 
	#TCA_ACT_TAB
 1

	)

601 
	#TCAA_MAX
 1

	)

604 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 197168

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/net/route.h

21 #i‚de‡
_NET_ROUTE_H


22 
	#_NET_ROUTE_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/w‹dsize.h
>

32 
	sπíåy


34 
	mπ_∑d1
;

35 
sockaddr
 
	mπ_d°
;

36 
sockaddr
 
	mπ_g©eway
;

37 
sockaddr
 
	mπ_gímask
;

38 
	mπ_Êags
;

39 
	mπ_∑d2
;

40 
	mπ_∑d3
;

41 
	mπ_tos
;

42 
	mπ_˛ass
;

43 #i‡
__WORDSIZE
 == 64

44 
	mπ_∑d4
[3];

46 
	mπ_∑d4
;

48 
	mπ_mëric
;

49 *
	mπ_dev
;

50 
	mπ_mtu
;

51 
	mπ_wödow
;

52 
	mπ_úâ
;

55 
	#π_mss
 
π_mtu


	)

58 
	sö6_πmsg


60 
ö6_addr
 
	mπmsg_d°
;

61 
ö6_addr
 
	mπmsg_§c
;

62 
ö6_addr
 
	mπmsg_g©eway
;

63 
u_öt32_t
 
	mπmsg_ty≥
;

64 
u_öt16_t
 
	mπmsg_d°_Àn
;

65 
u_öt16_t
 
	mπmsg_§c_Àn
;

66 
u_öt32_t
 
	mπmsg_mëric
;

67 
	mπmsg_öfo
;

68 
u_öt32_t
 
	mπmsg_Êags
;

69 
	mπmsg_ifödex
;

73 
	#RTF_UP
 0x0001

	)

74 
	#RTF_GATEWAY
 0x0002

	)

76 
	#RTF_HOST
 0x0004

	)

77 
	#RTF_REINSTATE
 0x0008

	)

78 
	#RTF_DYNAMIC
 0x0010

	)

79 
	#RTF_MODIFIED
 0x0020

	)

80 
	#RTF_MTU
 0x0040

	)

81 
	#RTF_MSS
 
RTF_MTU


	)

82 
	#RTF_WINDOW
 0x0080

	)

83 
	#RTF_IRTT
 0x0100

	)

84 
	#RTF_REJECT
 0x0200

	)

85 
	#RTF_STATIC
 0x0400

	)

86 
	#RTF_XRESOLVE
 0x0800

	)

87 
	#RTF_NOFORWARD
 0x1000

	)

88 
	#RTF_THROW
 0x2000

	)

89 
	#RTF_NOPMTUDISC
 0x4000

	)

92 
	#RTF_DEFAULT
 0x00010000

	)

93 
	#RTF_ALLONLINK
 0x00020000

	)

94 
	#RTF_ADDRCONF
 0x00040000

	)

96 
	#RTF_LINKRT
 0x00100000

	)

97 
	#RTF_NONEXTHOP
 0x00200000

	)

99 
	#RTF_CACHE
 0x01000000

	)

100 
	#RTF_FLOW
 0x02000000

	)

101 
	#RTF_POLICY
 0x04000000

	)

103 
	#RTCF_VALVE
 0x00200000

	)

104 
	#RTCF_MASQ
 0x00400000

	)

105 
	#RTCF_NAT
 0x00800000

	)

106 
	#RTCF_DOREDIRECT
 0x01000000

	)

107 
	#RTCF_LOG
 0x02000000

	)

108 
	#RTCF_DIRECTSRC
 0x04000000

	)

110 
	#RTF_LOCAL
 0x80000000

	)

111 
	#RTF_INTERFACE
 0x40000000

	)

112 
	#RTF_MULTICAST
 0x20000000

	)

113 
	#RTF_BROADCAST
 0x10000000

	)

114 
	#RTF_NAT
 0x08000000

	)

116 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

117 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

119 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

121 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

122 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

124 
	#RT_CLASS_UNSPEC
 0

	)

125 
	#RT_CLASS_DEFAULT
 253

	)

127 
	#RT_CLASS_MAIN
 254

	)

128 
	#RT_CLASS_LOCAL
 255

	)

129 
	#RT_CLASS_MAX
 255

	)

132 
	#RTMSG_ACK
 
NLMSG_ACK


	)

133 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

135 
	#RTMSG_NEWDEVICE
 0x11

	)

136 
	#RTMSG_DELDEVICE
 0x12

	)

137 
	#RTMSG_NEWROUTE
 0x21

	)

138 
	#RTMSG_DELROUTE
 0x22

	)

139 
	#RTMSG_NEWRULE
 0x31

	)

140 
	#RTMSG_DELRULE
 0x32

	)

141 
	#RTMSG_CONTROL
 0x40

	)

143 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/icmp6.h

19 #i‚de‡
_NETINET_ICMP6_H


20 
	#_NETINET_ICMP6_H
 1

	)

22 
	~<öây≥s.h
>

23 
	~<°rög.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
	#ICMP6_FILTER
 1

	)

29 
	#ICMP6_FILTER_BLOCK
 1

	)

30 
	#ICMP6_FILTER_PASS
 2

	)

31 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

32 
	#ICMP6_FILTER_PASSONLY
 4

	)

34 
	sicmp6_fûãr


36 
uöt32_t
 
	micmp6_fût
[8];

39 
	sicmp6_hdr


41 
uöt8_t
 
	micmp6_ty≥
;

42 
uöt8_t
 
	micmp6_code
;

43 
uöt16_t
 
	micmp6_cksum
;

46 
uöt32_t
 
	micmp6_un_d©a32
[1];

47 
uöt16_t
 
	micmp6_un_d©a16
[2];

48 
uöt8_t
 
	micmp6_un_d©a8
[4];

49 } 
	micmp6_d©aun
;

52 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

53 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

54 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

55 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

57 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

58 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

59 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

61 
	#ICMP6_DST_UNREACH
 1

	)

62 
	#ICMP6_PACKET_TOO_BIG
 2

	)

63 
	#ICMP6_TIME_EXCEEDED
 3

	)

64 
	#ICMP6_PARAM_PROB
 4

	)

66 
	#ICMP6_INFOMSG_MASK
 0x80

	)

68 
	#ICMP6_ECHO_REQUEST
 128

	)

69 
	#ICMP6_ECHO_REPLY
 129

	)

70 
	#MLD_LISTENER_QUERY
 130

	)

71 
	#MLD_LISTENER_REPORT
 131

	)

72 
	#MLD_LISTENER_REDUCTION
 132

	)

74 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

75 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

77 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

78 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

79 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

81 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

82 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

84 
	#ICMP6_PARAMPROB_HEADER
 0

	)

85 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

86 
	#ICMP6_PARAMPROB_OPTION
 2

	)

88 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

89 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

91 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

92 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

94 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

95 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

97 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

98 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

100 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

101 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

103 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

104 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

106 
	#ND_ROUTER_SOLICIT
 133

	)

107 
	#ND_ROUTER_ADVERT
 134

	)

108 
	#ND_NEIGHBOR_SOLICIT
 135

	)

109 
	#ND_NEIGHBOR_ADVERT
 136

	)

110 
	#ND_REDIRECT
 137

	)

112 
	snd_rouãr_sﬁicô


114 
icmp6_hdr
 
	mnd_rs_hdr
;

118 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

119 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

120 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

121 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

123 
	snd_rouãr_advît


125 
icmp6_hdr
 
	mnd_ø_hdr
;

126 
uöt32_t
 
	mnd_ø_ªachabÀ
;

127 
uöt32_t
 
	mnd_ø_ªå™smô
;

131 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

132 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

133 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

134 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

135 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

136 
	#ND_RA_FLAG_MANAGED
 0x80

	)

137 
	#ND_RA_FLAG_OTHER
 0x40

	)

138 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

139 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

141 
	snd_√ighb‹_sﬁicô


143 
icmp6_hdr
 
	mnd_ns_hdr
;

144 
ö6_addr
 
	mnd_ns_èrgë
;

148 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

149 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

150 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

151 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

153 
	snd_√ighb‹_advît


155 
icmp6_hdr
 
	mnd_«_hdr
;

156 
ö6_addr
 
	mnd_«_èrgë
;

160 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

161 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

162 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

163 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

164 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


165 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

166 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

167 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

169 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

170 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

171 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

174 
	snd_ªdúe˘


176 
icmp6_hdr
 
	mnd_rd_hdr
;

177 
ö6_addr
 
	mnd_rd_èrgë
;

178 
ö6_addr
 
	mnd_rd_d°
;

182 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

183 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

184 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

185 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

187 
	snd_›t_hdr


189 
uöt8_t
 
	mnd_›t_ty≥
;

190 
uöt8_t
 
	mnd_›t_Àn
;

194 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

195 
	#ND_OPT_TARGET_LINKADDR
 2

	)

196 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

197 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

198 
	#ND_OPT_MTU
 5

	)

199 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

200 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

202 
	snd_›t_¥efix_öfo


204 
uöt8_t
 
	mnd_›t_pi_ty≥
;

205 
uöt8_t
 
	mnd_›t_pi_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

207 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

208 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

209 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

210 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

211 
ö6_addr
 
	mnd_›t_pi_¥efix
;

214 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

215 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

216 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

218 
	snd_›t_rd_hdr


220 
uöt8_t
 
	mnd_›t_rh_ty≥
;

221 
uöt8_t
 
	mnd_›t_rh_Àn
;

222 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

223 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

227 
	snd_›t_mtu


229 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

230 
uöt8_t
 
	mnd_›t_mtu_Àn
;

231 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

232 
uöt32_t
 
	mnd_›t_mtu_mtu
;

235 
	smld_hdr


237 
icmp6_hdr
 
	mmld_icmp6_hdr
;

238 
ö6_addr
 
	mmld_addr
;

241 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

242 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

243 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

244 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

245 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

247 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

249 
	sicmp6_rouãr_ªnum


251 
icmp6_hdr
 
	mº_hdr
;

252 
uöt8_t
 
	mº_£gnum
;

253 
uöt8_t
 
	mº_Êags
;

254 
uöt16_t
 
	mº_maxdñay
;

255 
uöt32_t
 
	mº_ª£rved
;

258 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

259 
	#º_code
 
º_hdr
.
icmp6_code


	)

260 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

261 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

264 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

265 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

266 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

267 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

268 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

270 
	sº_pco_m©ch


272 
uöt8_t
 
	mΩm_code
;

273 
uöt8_t
 
	mΩm_Àn
;

274 
uöt8_t
 
	mΩm_‹döÆ
;

275 
uöt8_t
 
	mΩm_m©chÀn
;

276 
uöt8_t
 
	mΩm_möÀn
;

277 
uöt8_t
 
	mΩm_maxÀn
;

278 
uöt16_t
 
	mΩm_ª£rved
;

279 
ö6_addr
 
	mΩm_¥efix
;

283 
	#RPM_PCO_ADD
 1

	)

284 
	#RPM_PCO_CHANGE
 2

	)

285 
	#RPM_PCO_SETGLOBAL
 3

	)

287 
	sº_pco_u£


289 
uöt8_t
 
	mΩu_u£Àn
;

290 
uöt8_t
 
	mΩu_kì∂í
;

291 
uöt8_t
 
	mΩu_ømask
;

292 
uöt8_t
 
	mΩu_øÊags
;

293 
uöt32_t
 
	mΩu_v…ime
;

294 
uöt32_t
 
	mΩu_∂time
;

295 
uöt32_t
 
	mΩu_Êags
;

296 
ö6_addr
 
	mΩu_¥efix
;

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

300 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

302 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

304 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

305 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

307 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

310 
	sº_ªsu…


312 
uöt16_t
 
	mºr_Êags
;

313 
uöt8_t
 
	mºr_‹döÆ
;

314 
uöt8_t
 
	mºr_m©chedÀn
;

315 
uöt32_t
 
	mºr_ifid
;

316 
ö6_addr
 
	mºr_¥efix
;

319 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


320 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

321 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

322 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


323 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

324 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

328 
	snd_›t_adv_öãrvÆ


330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

331 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

332 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

333 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

337 
	snd_›t_home_agít_öfo


339 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

340 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

343 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/in_systm.h

20 #i‚de‡
_NETINET_IN_SYSTM_H


21 
	#_NETINET_IN_SYSTM_H
 1

	)

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
__BEGIN_DECLS


35 
u_öt16_t
 
	tn_sh‹t
;

36 
u_öt32_t
 
	tn_l⁄g
;

37 
u_öt32_t
 
	tn_time
;

39 
	g__END_DECLS


	@/usr/include/netinet/ip.h

19 #i‚de‡
__NETINET_IP_H


20 
	#__NETINET_IP_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
__BEGIN_DECLS


29 
	stime°amp


31 
u_öt8_t
 
	mÀn
;

32 
u_öt8_t
 
	m±r
;

33 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


34 
	mÊags
:4;

35 
	movîÊow
:4;

36 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


37 
	movîÊow
:4;

38 
	mÊags
:4;

42 
u_öt32_t
 
	md©a
[9];

45 
	sùhdr


47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	mihl
:4;

49 
	mvîsi⁄
:4;

50 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	mvîsi⁄
:4;

52 
	mihl
:4;

56 
u_öt8_t
 
	mtos
;

57 
u_öt16_t
 
	mtŸ_Àn
;

58 
u_öt16_t
 
	mid
;

59 
u_öt16_t
 
	m‰ag_off
;

60 
u_öt8_t
 
	mâl
;

61 
u_öt8_t
 
	m¥Ÿocﬁ
;

62 
u_öt16_t
 
	mcheck
;

63 
u_öt32_t
 
	mßddr
;

64 
u_öt32_t
 
	mdaddr
;

68 #ifde‡
__USE_BSD


108 
	sù


110 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


111 
	mù_hl
:4;

112 
	mù_v
:4;

114 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


115 
	mù_v
:4;

116 
	mù_hl
:4;

118 
u_öt8_t
 
	mù_tos
;

119 
u_sh‹t
 
	mù_Àn
;

120 
u_sh‹t
 
	mù_id
;

121 
u_sh‹t
 
	mù_off
;

122 
	#IP_RF
 0x8000

	)

123 
	#IP_DF
 0x4000

	)

124 
	#IP_MF
 0x2000

	)

125 
	#IP_OFFMASK
 0x1ff‡

	)

126 
u_öt8_t
 
	mù_âl
;

127 
u_öt8_t
 
	mù_p
;

128 
u_sh‹t
 
	mù_sum
;

129 
ö_addr
 
	mù_§c
, 
	mù_d°
;

135 
	sù_time°amp


137 
u_öt8_t
 
	mùt_code
;

138 
u_öt8_t
 
	mùt_Àn
;

139 
u_öt8_t
 
	mùt_±r
;

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	mùt_Êg
:4;

142 
	mùt_oÊw
:4;

144 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


145 
	mùt_oÊw
:4;

146 
	mùt_Êg
:4;

148 
u_öt32_t
 
	md©a
[9];

152 
	#IPVERSION
 4

	)

153 
	#IP_MAXPACKET
 65535

	)

161 
	#IPTOS_ECN_MASK
 0x03

	)

162 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

163 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

164 
	#IPTOS_ECN_ECT1
 0x01

	)

165 
	#IPTOS_ECN_ECT0
 0x02

	)

166 
	#IPTOS_ECN_CE
 0x03

	)

174 
	#IPTOS_DSCP_MASK
 0xfc

	)

175 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

176 
	#IPTOS_DSCP_AF11
 0x28

	)

177 
	#IPTOS_DSCP_AF12
 0x30

	)

178 
	#IPTOS_DSCP_AF13
 0x38

	)

179 
	#IPTOS_DSCP_AF21
 0x48

	)

180 
	#IPTOS_DSCP_AF22
 0x50

	)

181 
	#IPTOS_DSCP_AF23
 0x58

	)

182 
	#IPTOS_DSCP_AF31
 0x68

	)

183 
	#IPTOS_DSCP_AF32
 0x70

	)

184 
	#IPTOS_DSCP_AF33
 0x78

	)

185 
	#IPTOS_DSCP_AF41
 0x88

	)

186 
	#IPTOS_DSCP_AF42
 0x90

	)

187 
	#IPTOS_DSCP_AF43
 0x98

	)

188 
	#IPTOS_DSCP_EF
 0xb8

	)

195 
	#IPTOS_CLASS_MASK
 0xe0

	)

196 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

197 
	#IPTOS_CLASS_CS0
 0x00

	)

198 
	#IPTOS_CLASS_CS1
 0x20

	)

199 
	#IPTOS_CLASS_CS2
 0x40

	)

200 
	#IPTOS_CLASS_CS3
 0x60

	)

201 
	#IPTOS_CLASS_CS4
 0x80

	)

202 
	#IPTOS_CLASS_CS5
 0xa0

	)

203 
	#IPTOS_CLASS_CS6
 0xc0

	)

204 
	#IPTOS_CLASS_CS7
 0xe0

	)

206 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

212 
	#IPTOS_TOS_MASK
 0x1E

	)

213 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

214 
	#IPTOS_LOWDELAY
 0x10

	)

215 
	#IPTOS_THROUGHPUT
 0x08

	)

216 
	#IPTOS_RELIABILITY
 0x04

	)

217 
	#IPTOS_LOWCOST
 0x02

	)

218 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

223 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

224 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

225 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

226 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

227 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

228 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

229 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

230 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

231 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

232 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

237 
	#IPOPT_COPY
 0x80

	)

238 
	#IPOPT_CLASS_MASK
 0x60

	)

239 
	#IPOPT_NUMBER_MASK
 0x1f

	)

241 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

242 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

243 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

245 
	#IPOPT_CONTROL
 0x00

	)

246 
	#IPOPT_RESERVED1
 0x20

	)

247 
	#IPOPT_DEBMEAS
 0x40

	)

248 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

249 
	#IPOPT_RESERVED2
 0x60

	)

251 
	#IPOPT_EOL
 0

	)

252 
	#IPOPT_END
 
IPOPT_EOL


	)

253 
	#IPOPT_NOP
 1

	)

254 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

256 
	#IPOPT_RR
 7

	)

257 
	#IPOPT_TS
 68

	)

258 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

259 
	#IPOPT_SECURITY
 130

	)

260 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

261 
	#IPOPT_LSRR
 131

	)

262 
	#IPOPT_SATID
 136

	)

263 
	#IPOPT_SID
 
IPOPT_SATID


	)

264 
	#IPOPT_SSRR
 137

	)

265 
	#IPOPT_RA
 148

	)

270 
	#IPOPT_OPTVAL
 0

	)

271 
	#IPOPT_OLEN
 1

	)

272 
	#IPOPT_OFFSET
 2

	)

273 
	#IPOPT_MINOFF
 4

	)

275 
	#MAX_IPOPTLEN
 40

	)

278 
	#IPOPT_TS_TSONLY
 0

	)

279 
	#IPOPT_TS_TSANDADDR
 1

	)

280 
	#IPOPT_TS_PRESPEC
 3

	)

283 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

284 
	#IPOPT_SECUR_CONFID
 0xf135

	)

285 
	#IPOPT_SECUR_EFTO
 0x789a

	)

286 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

287 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

288 
	#IPOPT_SECUR_SECRET
 0xd788

	)

289 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

294 
	#MAXTTL
 255

	)

295 
	#IPDEFTTL
 64

	)

296 
	#IPFRAGTTL
 60

	)

297 
	#IPTTLDEC
 1

	)

299 
	#IP_MSS
 576

	)

301 
	g__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/strings.h

20 #i‚def 
_STRINGS_H


21 
	#_STRINGS_H
 1

	)

26 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

33 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

34 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

37 
	g__BEGIN_DECLS


39 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


41 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

42 
__THROW
 
__©åibuã_puª__
;

45 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

48 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

51 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


54 *
	`ödex
 (*
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

56 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

59 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


60 
__exã∫_Æways_ölöe
 *

61 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
__exã∫_Æways_ölöe
 
__c⁄°
 *

67 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


69  
	`__buûtö_ödex
 (
__s
, 
__c
);

72 
	}
}

74 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

75 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


82 *
	`rödex
 (*
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

84 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

87 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


88 
__exã∫_Æways_ölöe
 *

89 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
__exã∫_Æways_ölöe
 
__c⁄°
 *

95 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


97  
	`__buûtö_rödex
 (
__s
, 
__c
);

100 
	}
}

102 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


110 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

114 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

115 
__THROW
 
__©åibuã_puª__
;

118 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
;

121 #ifdef 
__USE_XOPEN2K8


125 
	~<xloˇÀ.h
>

129 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

130 
__loˇÀ_t
 
__loc
)

131 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

134 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


	@/usr/include/stropts.h

19 #i‚de‡
_STROPTS_H


20 
	#_STROPTS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/xtôy≥s.h
>

26 #i‚de‡
__gid_t_deföed


27 
__gid_t
 
	tgid_t
;

28 
	#__gid_t_deföed


	)

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 
__t_usˇœr_t
 
	tt_usˇœr_t
;

39 
	~<bôs/°r›ts.h
>

42 
__BEGIN_DECLS


45 
	$iß°ªam
 (
__fûdes
Ë
__THROW
;

51 
	`gëmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

52 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

53 *
__ª°ri˘
 
__Êag•
);

60 
	`gëpmsg
 (
__fûdes
, 
°rbuf
 *
__ª°ri˘
 
__˘Õå
,

61 
°rbuf
 *
__ª°ri˘
 
__d©≠å
,

62 *
__ª°ri˘
 
__b™dp
, *__ª°ri˘ 
__Êag•
);

67 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

73 
	`putmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

74 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__Êags
);

80 
	`puçmsg
 (
__fûdes
, 
__c⁄°
 
°rbuf
 *
__˘Õå
,

81 
__c⁄°
 
°rbuf
 *
__d©≠å
, 
__b™d
, 
__Êags
);

85 
	$Áâach
 (
__fûdes
, 
__c⁄°
 *
__∑th
Ë
__THROW
;

88 
	$fdëach
 (
__c⁄°
 *
__∑th
Ë
__THROW
;

90 
__END_DECLS


	@/usr/include/sys/fcntl.h

1 
	~<f˙é.h
>

	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/mman.h

20 #i‚def 
_SYS_MMAN_H


21 
	#_SYS_MMAN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_size_t


	)

26 
	~<°ddef.h
>

28 #i‚de‡
__off_t_deföed


29 #i‚de‡
__USE_FILE_OFFSET64


30 
__off_t
 
	toff_t
;

32 
__off64_t
 
	toff_t
;

34 
	#__off_t_deföed


	)

37 #i‚de‡
__mode_t_deföed


38 
__mode_t
 
	tmode_t
;

39 
	#__mode_t_deföed


	)

42 
	~<bôs/mm™.h
>

45 
	#MAP_FAILED
 ((*Ë-1)

	)

47 
	g__BEGIN_DECLS


57 #i‚de‡
__USE_FILE_OFFSET64


58 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

59 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

61 #ifde‡
__REDIRECT_NTH


62 * 
	`__REDIRECT_NTH
 (
mm≠
,

63 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

64 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

65 
mm≠64
);

67 
	#mm≠
 
mm≠64


	)

70 #ifde‡
__USE_LARGEFILE64


71 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

72 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

77 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

82 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

90 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

92 #ifde‡
__USE_BSD


95 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

97 #ifde‡
__USE_XOPEN2K


99 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

104 
	$mlock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

107 
	$mu∆ock
 (
__c⁄°
 *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

112 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

116 
	$mu∆ockÆl
 (Ë
__THROW
;

118 #ifde‡
__USE_MISC


124 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

125 
__THROW
;

128 #ifde‡
__USE_GNU


134 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

135 
__Êags
, ...Ë
__THROW
;

139 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

140 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

145 
	`shm_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

148 
	`shm_u∆ök
 (
__c⁄°
 *
__«me
);

150 
__END_DECLS


	@/usr/include/sys/param.h

20 #i‚de‡
_SYS_PARAM_H


21 
	#_SYS_PARAM_H
 1

	)

23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<limôs.h
>

28 
	~<löux/limôs.h
>

29 
	~<löux/∑øm.h
>

32 #ifde‡
__undef_ARG_MAX


33 #unde‡
ARG_MAX


34 #unde‡
__undef_ARG_MAX


39 
	#NBBY
 
CHAR_BIT


	)

40 #i‚def 
NGROUPS


41 
	#NGROUPS
 
NGROUPS_MAX


	)

43 
	#MAXSYMLINKS
 20

	)

44 
	#CANBSIZ
 
MAX_CANON


	)

45 
	#MAXPATHLEN
 
PATH_MAX


	)

49 
	#NOFILE
 256

	)

50 
	#NCARGS
 131072

	)

53 
	~<sys/ty≥s.h
>

56 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

57 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

58 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

59 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

62 #i‚de‡
howm™y


63 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

65 #ifde‡
__GNUC__


66 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

67 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

68 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

70 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

72 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

75 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

76 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

80 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/prctl.h

19 #i‚de‡
_SYS_PRCTL_H


20 
	#_SYS_PRCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<löux/¥˘l.h
>

25 
__BEGIN_DECLS


28 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

30 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/sysctl.h

19 #i‚def 
_SYS_SYSCTL_H


20 
	#_SYS_SYSCTL_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 #i‚de‡
_LINUX_KERNEL_H


27 
	#_LINUX_KERNEL_H
 1

	)

28 
	#__undef_LINUX_KERNEL_H


	)

30 #i‚de‡
_LINUX_TYPES_H


31 
	#_LINUX_TYPES_H
 1

	)

32 
	#__undef_LINUX_TYPES_H


	)

34 #i‚de‡
_LINUX_LIST_H


35 
	#_LINUX_LIST_H
 1

	)

36 
	#__undef_LINUX_LIST_H


	)

38 #i‚de‡
__LINUX_COMPILER_H


39 
	#__LINUX_COMPILER_H
 1

	)

40 
	#__u£r


	)

41 
	#__undef__LINUX_COMPILER_H


	)

44 
	~<löux/sys˘l.h
>

46 #ifde‡
__undef_LINUX_KERNEL_H


47 #unde‡
_LINUX_KERNEL_H


48 #unde‡
__undef_LINUX_KERNEL_H


50 #ifde‡
__undef_LINUX_TYPES_H


51 #unde‡
_LINUX_TYPES_H


52 #unde‡
__undef_LINUX_TYPES_H


54 #ifde‡
__undef_LINUX_LIST_H


55 #unde‡
_LINUX_LIST_H


56 #unde‡
__undef_LINUX_LIST_H


58 #ifde‡
__undef__LINUX_COMPILER_H


59 #unde‡
__LINUX_COMPILER_H


60 #unde‡
__u£r


61 #unde‡
__undef__LINUX_COMPILER_H


64 
__BEGIN_DECLS


67 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

68 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

70 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/sys/un.h

19 #i‚def 
_SYS_UN_H


20 
	#_SYS_UN_H
 1

	)

22 
	~<sys/cdefs.h
>

25 
	~<bôs/sockaddr.h
>

27 
__BEGIN_DECLS


30 
	ssockaddr_un


32 
__SOCKADDR_COMMON
 (
sun_
);

33 
	msun_∑th
[108];

37 #ifde‡
__USE_MISC


38 
	~<°rög.h
>

41 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

42 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

45 
	g__END_DECLS


	@/usr/include/sys/utsname.h

23 #i‚def 
_SYS_UTSNAME_H


24 
	#_SYS_UTSNAME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ut¢ame.h
>

32 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


33 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

35 #i‚de‡
_UTSNAME_NODENAME_LENGTH


36 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

38 #i‚de‡
_UTSNAME_RELEASE_LENGTH


39 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

41 #i‚de‡
_UTSNAME_VERSION_LENGTH


42 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

44 #i‚de‡
_UTSNAME_MACHINE_LENGTH


45 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

49 
	sut¢ame


52 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

55 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

58 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

60 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

63 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

65 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

67 #ifde‡
__USE_GNU


68 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

70 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

75 #ifde‡
__USE_SVID


77 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

82 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/ucontext.h

21 #i‚de‡
_UCONTEXT_H


22 
	#_UCONTEXT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<sys/uc⁄ãxt.h
>

29 
__BEGIN_DECLS


32 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

35 
	$£tc⁄ãxt
 (
__c⁄°
 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

39 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

40 
__c⁄°
 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROWNL
;

48 
	`makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

49 
__¨gc
, ...Ë
__THROW
;

51 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

57 
	#O_PATH
 010000000

	)

63 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


64 
	#O_DSYNC
 010000

	)

65 
	#O_RSYNC
 
O_SYNC


	)

68 #ifde‡
__USE_LARGEFILE64


69 #i‡
__WORDSIZE
 == 64

70 
	#O_LARGEFILE
 0

	)

72 
	#O_LARGEFILE
 0100000

	)

77 
	#F_DUPFD
 0

	)

78 
	#F_GETFD
 1

	)

79 
	#F_SETFD
 2

	)

80 
	#F_GETFL
 3

	)

81 
	#F_SETFL
 4

	)

82 #i‡
__WORDSIZE
 == 64

83 
	#F_GETLK
 5

	)

84 
	#F_SETLK
 6

	)

85 
	#F_SETLKW
 7

	)

87 
	#F_GETLK64
 5

	)

88 
	#F_SETLK64
 6

	)

89 
	#F_SETLKW64
 7

	)

91 #i‚de‡
__USE_FILE_OFFSET64


92 
	#F_GETLK
 5

	)

93 
	#F_SETLK
 6

	)

94 
	#F_SETLKW
 7

	)

96 
	#F_GETLK
 
F_GETLK64


	)

97 
	#F_SETLK
 
F_SETLK64


	)

98 
	#F_SETLKW
 
F_SETLKW64


	)

100 
	#F_GETLK64
 12

	)

101 
	#F_SETLK64
 13

	)

102 
	#F_SETLKW64
 14

	)

105 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


106 
	#F_SETOWN
 8

	)

107 
	#F_GETOWN
 9

	)

110 #ifde‡
__USE_GNU


111 
	#F_SETSIG
 10

	)

112 
	#F_GETSIG
 11

	)

113 
	#F_SETOWN_EX
 15

	)

114 
	#F_GETOWN_EX
 16

	)

117 #ifde‡
__USE_GNU


118 
	#F_SETLEASE
 1024

	)

119 
	#F_GETLEASE
 1025

	)

120 
	#F_NOTIFY
 1026

	)

121 
	#F_SETPIPE_SZ
 1031

	)

122 
	#F_GETPIPE_SZ
 1032

	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#F_DUPFD_CLOEXEC
 1030

	)

130 
	#FD_CLOEXEC
 1

	)

133 
	#F_RDLCK
 0

	)

134 
	#F_WRLCK
 1

	)

135 
	#F_UNLCK
 2

	)

138 
	#F_EXLCK
 4

	)

139 
	#F_SHLCK
 8

	)

141 #ifde‡
__USE_BSD


143 
	#LOCK_SH
 1

	)

144 
	#LOCK_EX
 2

	)

145 
	#LOCK_NB
 4

	)

147 
	#LOCK_UN
 8

	)

150 #ifde‡
__USE_GNU


151 
	#LOCK_MAND
 32

	)

152 
	#LOCK_READ
 64

	)

153 
	#LOCK_WRITE
 128

	)

154 
	#LOCK_RW
 192

	)

157 #ifde‡
__USE_GNU


159 
	#DN_ACCESS
 0x00000001

	)

160 
	#DN_MODIFY
 0x00000002

	)

161 
	#DN_CREATE
 0x00000004

	)

162 
	#DN_DELETE
 0x00000008

	)

163 
	#DN_RENAME
 0x00000010

	)

164 
	#DN_ATTRIB
 0x00000020

	)

165 
	#DN_MULTISHOT
 0x80000000

	)

168 
	sÊock


170 
	ml_ty≥
;

171 
	ml_whí˚
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
__off_t
 
	ml_°¨t
;

174 
__off_t
 
	ml_Àn
;

176 
__off64_t
 
	ml_°¨t
;

177 
__off64_t
 
	ml_Àn
;

179 
__pid_t
 
	ml_pid
;

182 #ifde‡
__USE_LARGEFILE64


183 
	sÊock64


185 
	ml_ty≥
;

186 
	ml_whí˚
;

187 
__off64_t
 
	ml_°¨t
;

188 
__off64_t
 
	ml_Àn
;

189 
__pid_t
 
	ml_pid
;

193 #ifde‡
__USE_GNU


195 
	e__pid_ty≥


197 
	mF_OWNER_TID
 = 0,

198 
	mF_OWNER_PID
,

199 
	mF_OWNER_PGRP
,

200 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


204 
	sf_ow√r_ex


206 
__pid_ty≥
 
	mty≥
;

207 
__pid_t
 
	mpid
;

213 #ifdef 
__USE_BSD


214 
	#FAPPEND
 
O_APPEND


	)

215 
	#FFSYNC
 
O_FSYNC


	)

216 
	#FASYNC
 
O_ASYNC


	)

217 
	#FNONBLOCK
 
O_NONBLOCK


	)

218 
	#FNDELAY
 
O_NDELAY


	)

222 #ifde‡
__USE_XOPEN2K


223 
	#POSIX_FADV_NORMAL
 0

	)

224 
	#POSIX_FADV_RANDOM
 1

	)

225 
	#POSIX_FADV_SEQUENTIAL
 2

	)

226 
	#POSIX_FADV_WILLNEED
 3

	)

227 
	#POSIX_FADV_DONTNEED
 4

	)

228 
	#POSIX_FADV_NOREUSE
 5

	)

232 #ifde‡
__USE_GNU


234 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

237 
	#SYNC_FILE_RANGE_WRITE
 2

	)

240 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

245 
	#SPLICE_F_MOVE
 1

	)

246 
	#SPLICE_F_NONBLOCK
 2

	)

249 
	#SPLICE_F_MORE
 4

	)

250 
	#SPLICE_F_GIFT
 8

	)

254 
	sfûe_h™dÀ


256 
	mh™dÀ_byãs
;

257 
	mh™dÀ_ty≥
;

259 
	mf_h™dÀ
[0];

263 
	#MAX_HANDLE_SZ
 128

	)

267 #ifde‡
__USE_ATFILE


268 
	#AT_FDCWD
 -100

	)

271 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

272 
	#AT_REMOVEDIR
 0x200

	)

274 
	#AT_SYMLINK_FOLLOW
 0x400

	)

275 
	#AT_NO_AUTOMOUNT
 0x800

	)

277 
	#AT_EMPTY_PATH
 0x1000

	)

278 
	#AT_EACCESS
 0x200

	)

282 
	g__BEGIN_DECLS


284 #ifde‡
__USE_GNU


287 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

288 
__THROW
;

295 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

296 
__Êags
);

303 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

304 
size_t
 
__cou¡
, 
__Êags
);

310 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

311 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

312 
__Êags
);

318 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

319 
__Êags
);

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

330 
__off64_t
 
__Àn
),

331 
ÁŒoˇã64
);

333 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

336 #ifde‡
__USE_LARGEFILE64


337 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

338 
__off64_t
 
__Àn
);

343 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

344 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

345 
__Êags
Ë
__THROW
;

351 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

352 
__Êags
);

356 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

21 #i‚de‡
_SYS_MMAN_H


34 
	#PROT_READ
 0x1

	)

35 
	#PROT_WRITE
 0x2

	)

36 
	#PROT_EXEC
 0x4

	)

37 
	#PROT_NONE
 0x0

	)

38 
	#PROT_GROWSDOWN
 0x01000000

	)

40 
	#PROT_GROWSUP
 0x02000000

	)

44 
	#MAP_SHARED
 0x01

	)

45 
	#MAP_PRIVATE
 0x02

	)

46 #ifde‡
__USE_MISC


47 
	#MAP_TYPE
 0x0‡

	)

51 
	#MAP_FIXED
 0x10

	)

52 #ifde‡
__USE_MISC


53 
	#MAP_FILE
 0

	)

54 
	#MAP_ANONYMOUS
 0x20

	)

55 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

56 
	#MAP_32BIT
 0x40

	)

60 #ifde‡
__USE_MISC


61 
	#MAP_GROWSDOWN
 0x00100

	)

62 
	#MAP_DENYWRITE
 0x00800

	)

63 
	#MAP_EXECUTABLE
 0x01000

	)

64 
	#MAP_LOCKED
 0x02000

	)

65 
	#MAP_NORESERVE
 0x04000

	)

66 
	#MAP_POPULATE
 0x08000

	)

67 
	#MAP_NONBLOCK
 0x10000

	)

68 
	#MAP_STACK
 0x20000

	)

69 
	#MAP_HUGETLB
 0x40000

	)

73 
	#MS_ASYNC
 1

	)

74 
	#MS_SYNC
 4

	)

75 
	#MS_INVALIDATE
 2

	)

78 
	#MCL_CURRENT
 1

	)

79 
	#MCL_FUTURE
 2

	)

83 #ifde‡
__USE_GNU


84 
	#MREMAP_MAYMOVE
 1

	)

85 
	#MREMAP_FIXED
 2

	)

89 #ifde‡
__USE_BSD


90 
	#MADV_NORMAL
 0

	)

91 
	#MADV_RANDOM
 1

	)

92 
	#MADV_SEQUENTIAL
 2

	)

93 
	#MADV_WILLNEED
 3

	)

94 
	#MADV_DONTNEED
 4

	)

95 
	#MADV_REMOVE
 9

	)

96 
	#MADV_DONTFORK
 10

	)

97 
	#MADV_DOFORK
 11

	)

98 
	#MADV_MERGEABLE
 12

	)

99 
	#MADV_UNMERGEABLE
 13

	)

100 
	#MADV_HUGEPAGE
 14

	)

101 
	#MADV_NOHUGEPAGE
 15

	)

102 
	#MADV_HWPOISON
 100

	)

106 #ifde‡
__USE_XOPEN2K


107 
	#POSIX_MADV_NORMAL
 0

	)

108 
	#POSIX_MADV_RANDOM
 1

	)

109 
	#POSIX_MADV_SEQUENTIAL
 2

	)

110 
	#POSIX_MADV_WILLNEED
 3

	)

111 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

106 
	m__RLIMIT_RTTIME
 = 15,

107 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

109 
	m__RLIMIT_NLIMITS
 = 16,

110 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


111 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

112 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

116 #i‚de‡
__USE_FILE_OFFSET64


117 
	#RLIM_INFINITY
 (()(~0UL))

	)

119 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

122 #ifde‡
__USE_LARGEFILE64


123 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

127 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

128 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

132 #i‚de‡
__USE_FILE_OFFSET64


133 
__æim_t
 
	tæim_t
;

135 
__æim64_t
 
	tæim_t
;

137 #ifde‡
__USE_LARGEFILE64


138 
__æim64_t
 
	tæim64_t
;

141 
	sæimô


144 
æim_t
 
	mæim_cur
;

146 
æim_t
 
	mæim_max
;

149 #ifde‡
__USE_LARGEFILE64


150 
	sæimô64


153 
æim64_t
 
	mæim_cur
;

155 
æim64_t
 
	mæim_max
;

160 
	e__rußge_who


163 
	mRUSAGE_SELF
 = 0,

164 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

167 
	mRUSAGE_CHILDREN
 = -1

168 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

170 #ifde‡
__USE_GNU


173 
	mRUSAGE_THREAD
 = 1

174 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

176 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

180 
	#__√ed_timevÆ


	)

181 
	~<bôs/time.h
>

184 
	srußge


187 
timevÆ
 
	mru_utime
;

189 
timevÆ
 
	mru_°ime
;

191 
	mru_maxrss
;

194 
	mru_ixrss
;

196 
	mru_idrss
;

198 
	mru_i§ss
;

201 
	mru_möÊt
;

203 
	mru_majÊt
;

205 
	mru_nsw≠
;

208 
	mru_öblock
;

210 
	mru_oublock
;

212 
	mru_msg¢d
;

214 
	mru_msgrcv
;

216 
	mru_nsig«ls
;

220 
	mru_nvcsw
;

223 
	mru_nivcsw
;

227 
	#PRIO_MIN
 -20

	)

228 
	#PRIO_MAX
 20

	)

232 
	e__¥i‹ôy_which


234 
	mPRIO_PROCESS
 = 0,

235 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

236 
	mPRIO_PGRP
 = 1,

237 
	#PRIO_PGRP
 
PRIO_PGRP


	)

238 
	mPRIO_USER
 = 2

239 
	#PRIO_USER
 
PRIO_USER


	)

243 
	g__BEGIN_DECLS


245 #ifde‡
__USE_GNU


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

249 
__c⁄°
 
æimô
 *
__√w_limô
,

250 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

254 
__æimô_ªsour˚
 
__ªsour˚
,

255 
__c⁄°
 
æimô
 *
__√w_limô
,

256 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

258 
	#¥limô
 
¥limô64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

263 
__c⁄°
 
æimô64
 *
__√w_limô
,

264 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

268 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_CAIF
 37

	)

113 
	#PF_ALG
 38

	)

114 
	#PF_NFC
 39

	)

115 
	#PF_MAX
 40

	)

118 
	#AF_UNSPEC
 
PF_UNSPEC


	)

119 
	#AF_LOCAL
 
PF_LOCAL


	)

120 
	#AF_UNIX
 
PF_UNIX


	)

121 
	#AF_FILE
 
PF_FILE


	)

122 
	#AF_INET
 
PF_INET


	)

123 
	#AF_AX25
 
PF_AX25


	)

124 
	#AF_IPX
 
PF_IPX


	)

125 
	#AF_APPLETALK
 
PF_APPLETALK


	)

126 
	#AF_NETROM
 
PF_NETROM


	)

127 
	#AF_BRIDGE
 
PF_BRIDGE


	)

128 
	#AF_ATMPVC
 
PF_ATMPVC


	)

129 
	#AF_X25
 
PF_X25


	)

130 
	#AF_INET6
 
PF_INET6


	)

131 
	#AF_ROSE
 
PF_ROSE


	)

132 
	#AF_DEC√t
 
PF_DEC√t


	)

133 
	#AF_NETBEUI
 
PF_NETBEUI


	)

134 
	#AF_SECURITY
 
PF_SECURITY


	)

135 
	#AF_KEY
 
PF_KEY


	)

136 
	#AF_NETLINK
 
PF_NETLINK


	)

137 
	#AF_ROUTE
 
PF_ROUTE


	)

138 
	#AF_PACKET
 
PF_PACKET


	)

139 
	#AF_ASH
 
PF_ASH


	)

140 
	#AF_ECONET
 
PF_ECONET


	)

141 
	#AF_ATMSVC
 
PF_ATMSVC


	)

142 
	#AF_RDS
 
PF_RDS


	)

143 
	#AF_SNA
 
PF_SNA


	)

144 
	#AF_IRDA
 
PF_IRDA


	)

145 
	#AF_PPPOX
 
PF_PPPOX


	)

146 
	#AF_WANPIPE
 
PF_WANPIPE


	)

147 
	#AF_LLC
 
PF_LLC


	)

148 
	#AF_CAN
 
PF_CAN


	)

149 
	#AF_TIPC
 
PF_TIPC


	)

150 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

151 
	#AF_IUCV
 
PF_IUCV


	)

152 
	#AF_RXRPC
 
PF_RXRPC


	)

153 
	#AF_ISDN
 
PF_ISDN


	)

154 
	#AF_PHONET
 
PF_PHONET


	)

155 
	#AF_IEEE802154
 
PF_IEEE802154


	)

156 
	#AF_CAIF
 
PF_CAIF


	)

157 
	#AF_ALG
 
PF_ALG


	)

158 
	#AF_NFC
 
PF_NFC


	)

159 
	#AF_MAX
 
PF_MAX


	)

165 
	#SOL_RAW
 255

	)

166 
	#SOL_DECNET
 261

	)

167 
	#SOL_X25
 262

	)

168 
	#SOL_PACKET
 263

	)

169 
	#SOL_ATM
 264

	)

170 
	#SOL_AAL
 265

	)

171 
	#SOL_IRDA
 266

	)

174 
	#SOMAXCONN
 128

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_SIZE
 128

	)

191 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
__ss_Æig¡y≥
 
	m__ss_Æign
;

197 
	m__ss_∑ddög
[
_SS_PADSIZE
];

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

244 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

247 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

253 
	smsghdr


255 *
	mmsg_«me
;

256 
sockÀn_t
 
	mmsg_«mñí
;

258 
iovec
 *
	mmsg_iov
;

259 
size_t
 
	mmsg_iovÀn
;

261 *
	mmsg_c⁄åﬁ
;

262 
size_t
 
	mmsg_c⁄åﬁÀn
;

267 
	mmsg_Êags
;

270 #ifde‡
__USE_GNU


272 
	smmsghdr


274 
msghdr
 
	mmsg_hdr
;

275 
	mmsg_Àn
;

280 
	scmsghdr


282 
size_t
 
	mcmsg_Àn
;

287 
	mcmsg_Àvñ
;

288 
	mcmsg_ty≥
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

295 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

296 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

298 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

300 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

301 
	#CMSG_FIRSTHDR
(
mhdr
) \

302 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

303 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

304 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

305 & (
size_t
Ë~( (size_tË- 1))

	)

306 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

307 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

308 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

310 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

311 
cmsghdr
 *
__cmsg
Ë
__THROW
;

312 #ifde‡
__USE_EXTERN_INLINES


313 #i‚de‡
_EXTERN_INLINE


314 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

316 
_EXTERN_INLINE
 
cmsghdr
 *

317 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

319 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

321  (
cmsghdr
 *) 0;

323 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

324 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

325 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


326 + 
__mhdr
->
msg_c⁄åﬁÀn
)

327 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

328 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

330  (
cmsghdr
 *) 0;

331  
__cmsg
;

332 
	}
}

339 
	mSCM_RIGHTS
 = 0x01

340 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

341 #ifde‡
__USE_GNU


342 , 
	mSCM_CREDENTIALS
 = 0x02

343 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

347 #ifde‡
__USE_GNU


349 
	su¸ed


351 
pid_t
 
	mpid
;

352 
uid_t
 
	muid
;

353 
gid_t
 
	mgid
;

358 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


359 #i‚de‡
FIOGETOWN


360 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

362 #i‚de‡
FIOSETOWN


363 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

365 #i‚de‡
SIOCATMARK


366 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

368 #i‚de‡
SIOCGPGRP


369 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

371 #i‚de‡
SIOCGSTAMP


372 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

374 #i‚de‡
SIOCGSTAMPNS


375 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

377 #i‚de‡
SIOCSPGRP


378 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

383 
	~<asm/sockë.h
>

385 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


386 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


387 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


388 #unde‡
FIOGETOWN


390 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


391 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


392 #unde‡
FIOSETOWN


394 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


395 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


396 #unde‡
SIOCATMARK


398 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


399 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


400 #unde‡
SIOCGPGRP


402 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


403 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


404 #unde‡
SIOCGSTAMP


406 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


407 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


408 #unde‡
SIOCGSTAMPNS


410 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


411 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


412 #unde‡
SIOCSPGRP


417 
	slögî


419 
	ml_⁄off
;

420 
	ml_lögî
;

424 
__BEGIN_DECLS


431 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

432 
__vÀn
, 
__Êags
,

433 
__c⁄°
 
time•ec
 *
__tmo
);

439 
£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

440 
__vÀn
, 
__Êags
);

442 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/stropts.h

19 #i‚de‡
_STROPTS_H


23 #i‚de‡
_BITS_STROPTS_H


24 
	#_BITS_STROPTS_H
 1

	)

26 
	~<bôs/ty≥s.h
>

29 
	#__SID
 ('S' << 8)

	)

31 
	#I_NREAD
 (
__SID
 | 1Ë

	)

33 
	#I_PUSH
 (
__SID
 | 2Ë

	)

35 
	#I_POP
 (
__SID
 | 3Ë

	)

37 
	#I_LOOK
 (
__SID
 | 4Ë

	)

40 
	#I_FLUSH
 (
__SID
 | 5Ë

	)

41 
	#I_SRDOPT
 (
__SID
 | 6Ë

	)

42 
	#I_GRDOPT
 (
__SID
 | 7Ë

	)

43 
	#I_STR
 (
__SID
 | 8Ë

	)

45 
	#I_SETSIG
 (
__SID
 | 9Ë

	)

47 
	#I_GETSIG
 (
__SID
 |10Ë

	)

50 
	#I_FIND
 (
__SID
 |11Ë

	)

53 
	#I_LINK
 (
__SID
 |12Ë

	)

54 
	#I_UNLINK
 (
__SID
 |13Ë

	)

55 
	#I_PEEK
 (
__SID
 |15Ë

	)

59 
	#I_FDINSERT
 (
__SID
 |16Ë

	)

62 
	#I_SENDFD
 (
__SID
 |17Ë

	)

66 
	#I_RECVFD
 (
__SID
 |14Ë

	)

67 
	#I_SWROPT
 (
__SID
 |19Ë

	)

68 
	#I_GWROPT
 (
__SID
 |20Ë

	)

69 
	#I_LIST
 (
__SID
 |21Ë

	)

71 
	#I_PLINK
 (
__SID
 |22Ë

	)

73 
	#I_PUNLINK
 (
__SID
 |23Ë

	)

75 
	#I_FLUSHBAND
 (
__SID
 |28Ë

	)

76 
	#I_CKBAND
 (
__SID
 |29Ë

	)

79 
	#I_GETBAND
 (
__SID
 |30Ë

	)

81 
	#I_ATMARK
 (
__SID
 |31Ë

	)

84 
	#I_SETCLTIME
 (
__SID
 |32Ë

	)

87 
	#I_GETCLTIME
 (
__SID
 |33Ë

	)

88 
	#I_CANPUT
 (
__SID
 |34Ë

	)

92 
	#FMNAMESZ
 8

	)

95 
	#FLUSHR
 0x01

	)

96 
	#FLUSHW
 0x02

	)

97 
	#FLUSHRW
 0x03

	)

98 #ifde‡
__USE_GNU


99 
	#FLUSHBAND
 0x04

	)

103 
	#S_INPUT
 0x0001

	)

105 
	#S_HIPRI
 0x0002

	)

106 
	#S_OUTPUT
 0x0004

	)

108 
	#S_MSG
 0x0008

	)

111 
	#S_ERROR
 0x0010

	)

112 
	#S_HANGUP
 0x0020

	)

113 
	#S_RDNORM
 0x0040

	)

114 
	#S_WRNORM
 
S_OUTPUT


	)

115 
	#S_RDBAND
 0x0080

	)

117 
	#S_WRBAND
 0x0100

	)

119 
	#S_BANDURG
 0x0200

	)

125 
	#RS_HIPRI
 0x01

	)

128 
	#RNORM
 0x0000

	)

129 
	#RMSGD
 0x0001

	)

130 
	#RMSGN
 0x0002

	)

131 
	#RPROTDAT
 0x0004

	)

133 
	#RPROTDIS
 0x0008

	)

135 
	#RPROTNORM
 0x0010

	)

138 #ifde‡
__USE_GNU


139 
	#RPROTMASK
 0x001C

	)

143 
	#SNDZERO
 0x001

	)

145 #ifde‡
__USE_GNU


146 
	#SNDPIPE
 0x002

	)

151 
	#ANYMARK
 0x01

	)

152 
	#LASTMARK
 0x02

	)

156 #ifde‡
__USE_GNU


157 
	#MUXID_ALL
 (-1Ë

	)

163 
	#MSG_HIPRI
 0x01

	)

164 
	#MSG_ANY
 0x02

	)

165 
	#MSG_BAND
 0x04

	)

168 
	#MORECTL
 1

	)

170 
	#MOREDATA
 2

	)

174 
	sb™döfo


176 
	mbi_¥i
;

177 
	mbi_Êag
;

180 
	s°rbuf


182 
	mmaxÀn
;

183 
	mÀn
;

184 *
	mbuf
;

187 
	s°Ωìk


189 
°rbuf
 
	m˘lbuf
;

190 
°rbuf
 
	md©abuf
;

191 
t_usˇœr_t
 
	mÊags
;

194 
	s°rfdö£π


196 
°rbuf
 
	m˘lbuf
;

197 
°rbuf
 
	md©abuf
;

198 
t_usˇœr_t
 
	mÊags
;

199 
	mfûdes
;

200 
	moff£t
;

203 
	s°rio˘l


205 
	mic_cmd
;

206 
	mic_timout
;

207 
	mic_Àn
;

208 *
	mic_dp
;

211 
	s°ºecvfd


213 
	mfd
;

214 
uid_t
 
	muid
;

215 
gid_t
 
	mgid
;

216 
	m__fûl
[8];

220 
	s°r_mli°


222 
	ml_«me
[
FMNAMESZ
 + 1];

225 
	s°r_li°


227 
	m¶_nmods
;

228 
°r_mli°
 *
	m¶_modli°
;

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

52 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


53 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

55 
__BEGIN_DECLS


58 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

59 
__liov˙t
,

60 
__c⁄°
 
iovec
 *
__rvec
,

61 
__riov˙t
,

62 
__Êags
)

63 
__THROW
;

66 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

67 
__liov˙t
,

68 
__c⁄°
 
iovec
 *
__rvec
,

69 
__riov˙t
,

70 
__Êags
)

71 
__THROW
;

73 
__END_DECLS


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/utsname.h

19 #i‚de‡
_SYS_UTSNAME_H


24 
	#_UTSNAME_LENGTH
 65

	)

29 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/bits/xtitypes.h

20 #i‚de‡
_STROPTS_H


24 #i‚de‡
_BITS_XTITYPES_H


25 
	#_BITS_XTITYPES_H
 1

	)

27 
	~<bôs/ty≥s.h
>

30 
__SLONG32_TYPE
 
	t__t_sˇœr_t
;

31 
__ULONG32_TYPE
 
	t__t_usˇœr_t
;

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/event2/event-config.h

10 #i‚de‡
_EVENT2_EVENT_CONFIG_H_


11 
	#_EVENT2_EVENT_CONFIG_H_


	)

31 
	#_EVENT_HAVE_ARPA_INET_H
 1

	)

34 
	#_EVENT_HAVE_CLOCK_GETTIME
 1

	)

38 
	#_EVENT_HAVE_DECL_CTL_KERN
 1

	)

42 
	#_EVENT_HAVE_DECL_KERN_ARND
 0

	)

46 
	#_EVENT_HAVE_DECL_KERN_RANDOM
 1

	)

50 
	#_EVENT_HAVE_DECL_RANDOM_UUID
 1

	)

56 
	#_EVENT_HAVE_DLFCN_H
 1

	)

59 
	#_EVENT_HAVE_EPOLL
 1

	)

62 
	#_EVENT_HAVE_EPOLL_CTL
 1

	)

65 
	#_EVENT_HAVE_EVENTFD
 1

	)

71 
	#_EVENT_HAVE_FCNTL
 1

	)

74 
	#_EVENT_HAVE_FCNTL_H
 1

	)

77 
	#_EVENT_HAVE_FD_MASK
 1

	)

80 
	#_EVENT_HAVE_GETADDRINFO
 1

	)

83 
	#_EVENT_HAVE_GETEGID
 1

	)

86 
	#_EVENT_HAVE_GETEUID
 1

	)

101 
	#_EVENT_HAVE_GETNAMEINFO
 1

	)

104 
	#_EVENT_HAVE_GETPROTOBYNUMBER
 1

	)

110 
	#_EVENT_HAVE_GETTIMEOFDAY
 1

	)

113 
	#_EVENT_HAVE_INET_ATON
 1

	)

116 
	#_EVENT_HAVE_INET_NTOP
 1

	)

119 
	#_EVENT_HAVE_INET_PTON
 1

	)

122 
	#_EVENT_HAVE_INTTYPES_H
 1

	)

131 
	#_EVENT_HAVE_LIBZ
 1

	)

134 
	#_EVENT_HAVE_MEMORY_H
 1

	)

137 
	#_EVENT_HAVE_MMAP
 1

	)

140 
	#_EVENT_HAVE_NETDB_H
 1

	)

146 
	#_EVENT_HAVE_NETINET_IN_H
 1

	)

149 
	#_EVENT_HAVE_OPENSSL
 1

	)

152 
	#_EVENT_HAVE_OPENSSL_BIO_H
 1

	)

155 
	#_EVENT_HAVE_PIPE
 1

	)

158 
	#_EVENT_HAVE_POLL
 1

	)

161 
	#_EVENT_HAVE_POLL_H
 1

	)

173 
	#_EVENT_HAVE_PTHREADS
 1

	)

176 
	#_EVENT_HAVE_PUTENV
 1

	)

179 
	#_EVENT_HAVE_SA_FAMILY_T
 1

	)

182 
	#_EVENT_HAVE_SELECT
 1

	)

185 
	#_EVENT_HAVE_SENDFILE
 1

	)

188 
	#_EVENT_HAVE_SETENV
 1

	)

191 
	#_EVENT_HAVE_SETFD
 1

	)

194 
	#_EVENT_HAVE_SIGACTION
 1

	)

197 
	#_EVENT_HAVE_SIGNAL
 1

	)

200 
	#_EVENT_HAVE_SPLICE
 1

	)

203 
	#_EVENT_HAVE_STDARG_H
 1

	)

206 
	#_EVENT_HAVE_STDDEF_H
 1

	)

209 
	#_EVENT_HAVE_STDINT_H
 1

	)

212 
	#_EVENT_HAVE_STDLIB_H
 1

	)

215 
	#_EVENT_HAVE_STRINGS_H
 1

	)

218 
	#_EVENT_HAVE_STRING_H
 1

	)

224 
	#_EVENT_HAVE_STRSEP
 1

	)

227 
	#_EVENT_HAVE_STRTOK_R
 1

	)

230 
	#_EVENT_HAVE_STRTOLL
 1

	)

233 
	#_EVENT_HAVE_STRUCT_ADDRINFO
 1

	)

236 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

239 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR16
 1

	)

242 
	#_EVENT_HAVE_STRUCT_IN6_ADDR_S6_ADDR32
 1

	)

245 
	#_EVENT_HAVE_STRUCT_SOCKADDR_IN6
 1

	)

254 
	#_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE
 1

	)

257 
	#_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
 1

	)

266 
	#_EVENT_HAVE_SYS_EPOLL_H
 1

	)

269 
	#_EVENT_HAVE_SYS_EVENTFD_H
 1

	)

275 
	#_EVENT_HAVE_SYS_IOCTL_H
 1

	)

278 
	#_EVENT_HAVE_SYS_MMAN_H
 1

	)

281 
	#_EVENT_HAVE_SYS_PARAM_H
 1

	)

284 
	#_EVENT_HAVE_SYS_QUEUE_H
 1

	)

287 
	#_EVENT_HAVE_SYS_SELECT_H
 1

	)

290 
	#_EVENT_HAVE_SYS_SENDFILE_H
 1

	)

293 
	#_EVENT_HAVE_SYS_SOCKET_H
 1

	)

296 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

299 
	#_EVENT_HAVE_SYS_SYSCTL_H
 1

	)

302 
	#_EVENT_HAVE_SYS_TIME_H
 1

	)

305 
	#_EVENT_HAVE_SYS_TYPES_H
 1

	)

308 
	#_EVENT_HAVE_SYS_UIO_H
 1

	)

311 
	#_EVENT_HAVE_SYS_WAIT_H
 1

	)

314 
	#_EVENT_HAVE_TAILQFOREACH
 1

	)

317 
	#_EVENT_HAVE_TIMERADD
 1

	)

320 
	#_EVENT_HAVE_TIMERCLEAR
 1

	)

323 
	#_EVENT_HAVE_TIMERCMP
 1

	)

326 
	#_EVENT_HAVE_TIMERISSET
 1

	)

329 
	#_EVENT_HAVE_UINT16_T
 1

	)

332 
	#_EVENT_HAVE_UINT32_T
 1

	)

335 
	#_EVENT_HAVE_UINT64_T
 1

	)

338 
	#_EVENT_HAVE_UINT8_T
 1

	)

341 
	#_EVENT_HAVE_UINTPTR_T
 1

	)

344 
	#_EVENT_HAVE_UNISTD_H
 1

	)

347 
	#_EVENT_HAVE_UNSETENV
 1

	)

350 
	#_EVENT_HAVE_VASPRINTF
 1

	)

356 
	#_EVENT_HAVE_ZLIB_H
 1

	)

360 
	#_EVENT_LT_OBJDIR
 ".libs/"

	)

366 
	#_EVENT_NUMERIC_VERSION
 0x02001000

	)

369 
	#_EVENT_PACKAGE
 "libevít"

	)

372 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

375 
	#_EVENT_PACKAGE_NAME
 ""

	)

378 
	#_EVENT_PACKAGE_STRING
 ""

	)

381 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

384 
	#_EVENT_PACKAGE_URL
 ""

	)

387 
	#_EVENT_PACKAGE_VERSION
 ""

	)

394 
	#_EVENT_SIZEOF_INT
 4

	)

397 
	#_EVENT_SIZEOF_LONG
 8

	)

400 
	#_EVENT_SIZEOF_LONG_LONG
 8

	)

403 
	#_EVENT_SIZEOF_PTHREAD_T
 8

	)

406 
	#_EVENT_SIZEOF_SHORT
 2

	)

409 
	#_EVENT_SIZEOF_SIZE_T
 8

	)

412 
	#_EVENT_SIZEOF_VOID_P
 8

	)

415 
	#_EVENT_STDC_HEADERS
 1

	)

418 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

421 
	#_EVENT_VERSION
 "2.0.16-°abÀ"

	)

431 #i‚de‡
_EVENT___˝lu•lus


	@/usr/include/event2/util.h

26 #i‚de‡
_EVENT2_UTIL_H_


27 
	#_EVENT2_UTIL_H_


	)

36 #ifde‡
__˝lu•lus


40 
	~<evít2/evít-c⁄fig.h
>

41 #ifde‡
_EVENT_HAVE_SYS_TIME_H


42 
	~<sys/time.h
>

44 #ifde‡
_EVENT_HAVE_STDINT_H


45 
	~<°döt.h
>

46 #ñi‡
deföed
(
_EVENT_HAVE_INTTYPES_H
)

47 
	~<öây≥s.h
>

49 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


50 
	~<sys/ty≥s.h
>

52 #ifde‡
_EVENT_HAVE_STDDEF_H


53 
	~<°ddef.h
>

55 #ifde‡
_MSC_VER


56 
	~<Ba£Tsd.h
>

58 
	~<°d¨g.h
>

59 #ifde‡
_EVENT_HAVE_NETDB_H


60 #i‡!
deföed
(
_GNU_SOURCE
)

61 
	#_GNU_SOURCE


	)

63 
	~<√tdb.h
>

66 #ifde‡
WIN32


67 
	~<wösock2.h
>

69 
	~<sys/sockë.h
>

73 #i‡
deföed
(
_EVENT_SIZEOF_VOID__
Ë&& !deföed(
_EVENT_SIZEOF_VOID_P
)

74 
	#_EVENT_SIZEOF_VOID_P
 
_EVENT_SIZEOF_VOID__


	)

106 #ifde‡
_EVENT_HAVE_UINT64_T


107 
	#ev_uöt64_t
 
uöt64_t


	)

108 
	#ev_öt64_t
 
öt64_t


	)

109 #ñi‡
deföed
(
WIN32
)

110 
	#ev_uöt64_t
 
__öt64


	)

111 
	#ev_öt64_t
 sig√d 
__öt64


	)

112 #ñi‡
_EVENT_SIZEOF_LONG_LONG
 == 8

113 
	#ev_uöt64_t
 

	)

114 
	#ev_öt64_t
 

	)

115 #ñi‡
_EVENT_SIZEOF_LONG
 == 8

116 
	#ev_uöt64_t
 

	)

117 
	#ev_öt64_t
 

	)

118 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

119 
	#ev_uöt64_t
 ...

	)

120 
	#ev_öt64_t
 ...

	)

125 #ifde‡
_EVENT_HAVE_UINT32_T


126 
	#ev_uöt32_t
 
uöt32_t


	)

127 
	#ev_öt32_t
 
öt32_t


	)

128 #ñi‡
deföed
(
WIN32
)

129 
	#ev_uöt32_t
 

	)

130 
	#ev_öt32_t
 sig√d 

	)

131 #ñi‡
_EVENT_SIZEOF_LONG
 == 4

132 
	#ev_uöt32_t
 

	)

133 
	#ev_öt32_t
 sig√d 

	)

134 #ñi‡
_EVENT_SIZEOF_INT
 == 4

135 
	#ev_uöt32_t
 

	)

136 
	#ev_öt32_t
 sig√d 

	)

137 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

138 
	#ev_uöt32_t
 ...

	)

139 
	#ev_öt32_t
 ...

	)

144 #ifde‡
_EVENT_HAVE_UINT16_T


145 
	#ev_uöt16_t
 
uöt16_t


	)

146 
	#ev_öt16_t
 
öt16_t


	)

147 #ñi‡
deföed
(
WIN32
)

148 
	#ev_uöt16_t
 

	)

149 
	#ev_öt16_t
 sig√d 

	)

150 #ñi‡
_EVENT_SIZEOF_INT
 == 2

151 
	#ev_uöt16_t
 

	)

152 
	#ev_öt16_t
 sig√d 

	)

153 #ñi‡
_EVENT_SIZEOF_SHORT
 == 2

154 
	#ev_uöt16_t
 

	)

155 
	#ev_öt16_t
 sig√d 

	)

156 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

157 
	#ev_uöt16_t
 ...

	)

158 
	#ev_öt16_t
 ...

	)

163 #ifde‡
_EVENT_HAVE_UINT8_T


164 
	#ev_uöt8_t
 
uöt8_t


	)

165 
	#ev_öt8_t
 
öt8_t


	)

166 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

167 
	#ev_uöt8_t
 ...

	)

168 
	#ev_öt8_t
 ...

	)

170 
	#ev_uöt8_t
 

	)

171 
	#ev_öt8_t
 sig√d 

	)

174 #ifde‡
_EVENT_HAVE_UINTPTR_T


175 
	#ev_uöçå_t
 
uöçå_t


	)

176 
	#ev_öçå_t
 
öçå_t


	)

177 #ñi‡
_EVENT_SIZEOF_VOID_P
 <= 4

178 
	#ev_uöçå_t
 
ev_uöt32_t


	)

179 
	#ev_öçå_t
 
ev_öt32_t


	)

180 #ñi‡
_EVENT_SIZEOF_VOID_P
 <= 8

181 
	#ev_uöçå_t
 
ev_uöt64_t


	)

182 
	#ev_öçå_t
 
ev_öt64_t


	)

183 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

184 
	#ev_uöçå_t
 ...

	)

185 
	#ev_öçå_t
 ...

	)

190 #ifde‡
_EVENT_ssize_t


191 
	#ev_ssize_t
 
_EVENT_ssize_t


	)

193 
	#ev_ssize_t
 
ssize_t


	)

196 #ifde‡
WIN32


197 
	#ev_off_t
 
ev_öt64_t


	)

199 
	#ev_off_t
 
off_t


	)

218 
	#EV_UINT64_MAX
 ((((
ev_uöt64_t
)0xffffffffULË<< 32Ë| 0xffffffffUL)

	)

219 
	#EV_INT64_MAX
 ((((
ev_öt64_t
Ë0x7fffffffLË<< 32Ë| 0xffffffffL)

	)

220 
	#EV_INT64_MIN
 ((-
EV_INT64_MAX
Ë- 1)

	)

221 
	#EV_UINT32_MAX
 ((
ev_uöt32_t
)0xffffffffUL)

	)

222 
	#EV_INT32_MAX
 ((
ev_öt32_t
Ë0x7fffffffL)

	)

223 
	#EV_INT32_MIN
 ((-
EV_INT32_MAX
Ë- 1)

	)

224 
	#EV_UINT16_MAX
 ((
ev_uöt16_t
)0xffffUL)

	)

225 
	#EV_INT16_MAX
 ((
ev_öt16_t
Ë0x7fffL)

	)

226 
	#EV_INT16_MIN
 ((-
EV_INT16_MAX
Ë- 1)

	)

227 
	#EV_UINT8_MAX
 255

	)

228 
	#EV_INT8_MAX
 127

	)

229 
	#EV_INT8_MIN
 ((-
EV_INT8_MAX
Ë- 1)

	)

237 #i‡
_EVENT_SIZEOF_SIZE_T
 == 8

238 
	#EV_SIZE_MAX
 
EV_UINT64_MAX


	)

239 
	#EV_SSIZE_MAX
 
EV_INT64_MAX


	)

240 #ñi‡
_EVENT_SIZEOF_SIZE_T
 == 4

241 
	#EV_SIZE_MAX
 
EV_UINT32_MAX


	)

242 
	#EV_SSIZE_MAX
 
EV_INT32_MAX


	)

243 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

244 
	#EV_SIZE_MAX
 ...

	)

245 
	#EV_SSIZE_MAX
 ...

	)

250 
	#EV_SSIZE_MIN
 ((-
EV_SSIZE_MAX
Ë- 1)

	)

253 #ifde‡
WIN32


254 
	#ev_sockÀn_t
 

	)

255 #ñi‡
deföed
(
_EVENT_sockÀn_t
)

256 
	#ev_sockÀn_t
 
_EVENT_sockÀn_t


	)

258 
	#ev_sockÀn_t
 
sockÀn_t


	)

261 #ifde‡
_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE___SS_FAMILY


262 #i‡!
deföed
(
_EVENT_HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
) \

263 && !
deföed
(
ss_Ámûy
)

264 
	#ss_Ámûy
 
__ss_Ámûy


	)

271 #ifde‡
WIN32


272 
	#evutû_sockë_t
 
öçå_t


	)

274 
	#evutû_sockë_t
 

	)

288 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
evutû_sockë_t
 
sv
[2]);

294 
evutû_make_sockë_n⁄blockög
(
evutû_sockë_t
 
sock
);

307 
evutû_make_li°í_sockë_ªu£abÀ
(
evutû_sockë_t
 
sock
);

315 
evutû_make_sockë_˛o£⁄exec
(
evutû_sockë_t
 
sock
);

323 
evutû_˛o£sockë
(
evutû_sockë_t
 
sock
);

324 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`evutû_˛o£sockë
(s)

	)

327 #ifde‡
WIN32


329 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

331 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

332 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

334 
evutû_sockë_gëîr‹
(
evutû_sockë_t
 
sock
);

336 c⁄° *
evutû_sockë_îr‹_to_°rög
(
îrcode
);

337 #ñi‡
deföed
(
_EVENT_IN_DOXYGEN
)

353 
	#EVUTIL_SOCKET_ERROR
(Ë...

	)

355 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
Ë...

	)

357 
	#evutû_sockë_gëîr‹
(
sock
Ë...

	)

359 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë...

	)

362 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

363 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

364 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

365 
	#evutû_sockë_gëîr‹
(
sock
Ë(
î∫o
)

	)

366 
	#evutû_sockë_îr‹_to_°rög
(
îrcode
Ë(
	`°ªº‹
”ºcode))

	)

378 #ifde‡
_EVENT_HAVE_TIMERADD


379 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

380 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

382 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

384 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

385 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

386 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

387 (
vvp
)->
tv_£c
++; \

388 (
vvp
)->
tv_u£c
 -= 1000000; \

390 } 0)

	)

391 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

393 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

394 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

395 i‡((
vvp
)->
tv_u£c
 < 0) { \

396 (
vvp
)->
tv_£c
--; \

397 (
vvp
)->
tv_u£c
 += 1000000; \

399 } 0)

	)

402 #ifde‡
_EVENT_HAVE_TIMERCLEAR


403 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

405 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

411 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

412 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

413 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

414 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

416 #ifde‡
_EVENT_HAVE_TIMERISSET


417 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

419 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

423 #ifde‡
off£tof


424 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë
	`off£tof
—y≥, fõld)

	)

426 
	#evutû_off£tof
(
ty≥
, 
fõld
Ë((
off_t
)(&(—y≥ *)0)->fõld))

	)

431 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

434 #ifde‡
_EVENT_HAVE_GETTIMEOFDAY


435 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

437 
timez⁄e
;

438 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

444 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

445 #ifde‡
__GNUC__


446 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

452 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

455 c⁄° *
evutû_öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size_t
 
Àn
);

457 
evutû_öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

458 
sockaddr
;

480 
evutû_∑r£_sockaddr_p‹t
(c⁄° *
°r
, 
sockaddr
 *
out
, *
ouéí
);

487 
evutû_sockaddr_cmp
(c⁄° 
sockaddr
 *
ß1
, c⁄° sockadd∏*
ß2
,

488 
ö˛ude_p‹t
);

493 
evutû_ascii_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

497 
evutû_ascii_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
n
);

501 #ifde‡
_EVENT_HAVE_STRUCT_ADDRINFO


502 
	#evutû_addröfo
 
addröfo


	)

509 
	sevutû_addröfo
 {

510 
ai_Êags
;

511 
ai_Ámûy
;

512 
ai_sockty≥
;

513 
ai_¥Ÿocﬁ
;

514 
size_t
 
ai_addæí
;

515 *
ai_ˇn⁄«me
;

516 
sockaddr
 *
ai_addr
;

517 
evutû_addröfo
 *
ai_√xt
;

527 #ifde‡
EAI_ADDRFAMILY


528 
	#EVUTIL_EAI_ADDRFAMILY
 
EAI_ADDRFAMILY


	)

530 
	#EVUTIL_EAI_ADDRFAMILY
 -901

	)

532 #ifde‡
EAI_AGAIN


533 
	#EVUTIL_EAI_AGAIN
 
EAI_AGAIN


	)

535 
	#EVUTIL_EAI_AGAIN
 -902

	)

537 #ifde‡
EAI_BADFLAGS


538 
	#EVUTIL_EAI_BADFLAGS
 
EAI_BADFLAGS


	)

540 
	#EVUTIL_EAI_BADFLAGS
 -903

	)

542 #ifde‡
EAI_FAIL


543 
	#EVUTIL_EAI_FAIL
 
EAI_FAIL


	)

545 
	#EVUTIL_EAI_FAIL
 -904

	)

547 #ifde‡
EAI_FAMILY


548 
	#EVUTIL_EAI_FAMILY
 
EAI_FAMILY


	)

550 
	#EVUTIL_EAI_FAMILY
 -905

	)

552 #ifde‡
EAI_MEMORY


553 
	#EVUTIL_EAI_MEMORY
 
EAI_MEMORY


	)

555 
	#EVUTIL_EAI_MEMORY
 -906

	)

560 #i‡
deföed
(
EAI_NODATA
Ë&& (!deföed(
EAI_NONAME
) || EAI_NODATA != EAI_NONAME)

561 
	#EVUTIL_EAI_NODATA
 
EAI_NODATA


	)

563 
	#EVUTIL_EAI_NODATA
 -907

	)

565 #ifde‡
EAI_NONAME


566 
	#EVUTIL_EAI_NONAME
 
EAI_NONAME


	)

568 
	#EVUTIL_EAI_NONAME
 -908

	)

570 #ifde‡
EAI_SERVICE


571 
	#EVUTIL_EAI_SERVICE
 
EAI_SERVICE


	)

573 
	#EVUTIL_EAI_SERVICE
 -909

	)

575 #ifde‡
EAI_SOCKTYPE


576 
	#EVUTIL_EAI_SOCKTYPE
 
EAI_SOCKTYPE


	)

578 
	#EVUTIL_EAI_SOCKTYPE
 -910

	)

580 #ifde‡
EAI_SYSTEM


581 
	#EVUTIL_EAI_SYSTEM
 
EAI_SYSTEM


	)

583 
	#EVUTIL_EAI_SYSTEM
 -911

	)

586 
	#EVUTIL_EAI_CANCEL
 -90001

	)

588 #ifde‡
AI_PASSIVE


589 
	#EVUTIL_AI_PASSIVE
 
AI_PASSIVE


	)

591 
	#EVUTIL_AI_PASSIVE
 0x1000

	)

593 #ifde‡
AI_CANONNAME


594 
	#EVUTIL_AI_CANONNAME
 
AI_CANONNAME


	)

596 
	#EVUTIL_AI_CANONNAME
 0x2000

	)

598 #ifde‡
AI_NUMERICHOST


599 
	#EVUTIL_AI_NUMERICHOST
 
AI_NUMERICHOST


	)

601 
	#EVUTIL_AI_NUMERICHOST
 0x4000

	)

603 #ifde‡
AI_NUMERICSERV


604 
	#EVUTIL_AI_NUMERICSERV
 
AI_NUMERICSERV


	)

606 
	#EVUTIL_AI_NUMERICSERV
 0x8000

	)

608 #ifde‡
AI_V4MAPPED


609 
	#EVUTIL_AI_V4MAPPED
 
AI_V4MAPPED


	)

611 
	#EVUTIL_AI_V4MAPPED
 0x10000

	)

613 #ifde‡
AI_ALL


614 
	#EVUTIL_AI_ALL
 
AI_ALL


	)

616 
	#EVUTIL_AI_ALL
 0x20000

	)

618 #ifde‡
AI_ADDRCONFIG


619 
	#EVUTIL_AI_ADDRCONFIG
 
AI_ADDRCONFIG


	)

621 
	#EVUTIL_AI_ADDRCONFIG
 0x40000

	)

625 
evutû_addröfo
;

637 
evutû_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

638 c⁄° 
evutû_addröfo
 *
höts_ö
, evutû_addröfÿ**
ªs
);

641 
evutû_‰ìaddröfo
(
evutû_addröfo
 *
ai
);

643 c⁄° *
evutû_gai_°ªº‹
(
îr
);

651 
evutû_£cuª_∫g_gë_byãs
(*
buf
, 
size_t
 
n
);

669 
evutû_£cuª_∫g_öô
();

685 
evutû_£cuª_∫g_add_byãs
(c⁄° *
d©
, 
size_t
 
d©Àn
);

687 #ifde‡
__˝lu•lus


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	mIFLA_EXT_MASK
,

141 
	m__IFLA_MAX


145 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

148 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

149 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

152 
	mIFLA_INET_UNSPEC
,

153 
	mIFLA_INET_CONF
,

154 
	m__IFLA_INET_MAX
,

157 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

190 
	mIFLA_INET6_UNSPEC
,

191 
	mIFLA_INET6_FLAGS
,

192 
	mIFLA_INET6_CONF
,

193 
	mIFLA_INET6_STATS
,

194 
	mIFLA_INET6_MCAST
,

195 
	mIFLA_INET6_CACHEINFO
,

196 
	mIFLA_INET6_ICMP6STATS
,

197 
	m__IFLA_INET6_MAX


200 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

202 
	siÊa_ˇcheöfo
 {

203 
__u32
 
	mmax_ªasm_Àn
;

204 
__u32
 
	mt°amp
;

205 
__u32
 
	mªachabÀ_time
;

206 
__u32
 
	mªå™s_time
;

210 
	mIFLA_INFO_UNSPEC
,

211 
	mIFLA_INFO_KIND
,

212 
	mIFLA_INFO_DATA
,

213 
	mIFLA_INFO_XSTATS
,

214 
	m__IFLA_INFO_MAX
,

217 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

222 
	mIFLA_VLAN_UNSPEC
,

223 
	mIFLA_VLAN_ID
,

224 
	mIFLA_VLAN_FLAGS
,

225 
	mIFLA_VLAN_EGRESS_QOS
,

226 
	mIFLA_VLAN_INGRESS_QOS
,

227 
	m__IFLA_VLAN_MAX
,

230 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

232 
	siÊa_vœn_Êags
 {

233 
__u32
 
	mÊags
;

234 
__u32
 
	mmask
;

238 
	mIFLA_VLAN_QOS_UNSPEC
,

239 
	mIFLA_VLAN_QOS_MAPPING
,

240 
	m__IFLA_VLAN_QOS_MAX


243 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

245 
	siÊa_vœn_qos_m≠pög
 {

246 
__u32
 
	m‰om
;

247 
__u32
 
	mto
;

252 
	mIFLA_MACVLAN_UNSPEC
,

253 
	mIFLA_MACVLAN_MODE
,

254 
	m__IFLA_MACVLAN_MAX
,

257 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

259 
	emacvœn_mode
 {

260 
	mMACVLAN_MODE_PRIVATE
 = 1,

261 
	mMACVLAN_MODE_VEPA
 = 2,

262 
	mMACVLAN_MODE_BRIDGE
 = 4,

263 
	mMACVLAN_MODE_PASSTHRU
 = 8,

269 
	mIFLA_VF_INFO_UNSPEC
,

270 
	mIFLA_VF_INFO
,

271 
	m__IFLA_VF_INFO_MAX
,

274 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

277 
	mIFLA_VF_UNSPEC
,

278 
	mIFLA_VF_MAC
,

279 
	mIFLA_VF_VLAN
,

280 
	mIFLA_VF_TX_RATE
,

281 
	mIFLA_VF_SPOOFCHK
,

282 
	m__IFLA_VF_MAX
,

285 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

287 
	siÊa_vf_mac
 {

288 
__u32
 
	mvf
;

289 
__u8
 
	mmac
[32];

292 
	siÊa_vf_vœn
 {

293 
__u32
 
	mvf
;

294 
__u32
 
	mvœn
;

295 
__u32
 
	mqos
;

298 
	siÊa_vf_tx_øã
 {

299 
__u32
 
	mvf
;

300 
__u32
 
	møã
;

303 
	siÊa_vf_•oofchk
 {

304 
__u32
 
	mvf
;

305 
__u32
 
	m£âög
;

324 
	mIFLA_VF_PORT_UNSPEC
,

325 
	mIFLA_VF_PORT
,

326 
	m__IFLA_VF_PORT_MAX
,

329 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

332 
	mIFLA_PORT_UNSPEC
,

333 
	mIFLA_PORT_VF
,

334 
	mIFLA_PORT_PROFILE
,

335 
	mIFLA_PORT_VSI_TYPE
,

336 
	mIFLA_PORT_INSTANCE_UUID
,

337 
	mIFLA_PORT_HOST_UUID
,

338 
	mIFLA_PORT_REQUEST
,

339 
	mIFLA_PORT_RESPONSE
,

340 
	m__IFLA_PORT_MAX
,

343 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

345 
	#PORT_PROFILE_MAX
 40

	)

346 
	#PORT_UUID_MAX
 16

	)

347 
	#PORT_SELF_VF
 -1

	)

350 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

351 
	mPORT_REQUEST_PREASSOCIATE_RR
,

352 
	mPORT_REQUEST_ASSOCIATE
,

353 
	mPORT_REQUEST_DISASSOCIATE
,

357 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

358 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

359 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

360 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

361 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

362 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

363 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

365 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

366 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

367 
	mPORT_PROFILE_RESPONSE_INVALID
,

368 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

369 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

370 
	mPORT_PROFILE_RESPONSE_ERROR
,

373 
	siÊa_p‹t_vsi
 {

374 
__u8
 
	mvsi_mgr_id
;

375 
__u8
 
	mvsi_ty≥_id
[3];

376 
__u8
 
	mvsi_ty≥_vîsi⁄
;

377 
__u8
 
	m∑d
[3];

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

40 
	#NUD_INCOMPLETE
 0x01

	)

41 
	#NUD_REACHABLE
 0x02

	)

42 
	#NUD_STALE
 0x04

	)

43 
	#NUD_DELAY
 0x08

	)

44 
	#NUD_PROBE
 0x10

	)

45 
	#NUD_FAILED
 0x20

	)

48 
	#NUD_NOARP
 0x40

	)

49 
	#NUD_PERMANENT
 0x80

	)

50 
	#NUD_NONE
 0x00

	)

57 
	snda_ˇcheöfo
 {

58 
__u32
 
	mndm_c⁄fúmed
;

59 
__u32
 
	mndm_u£d
;

60 
__u32
 
	mndm_upd©ed
;

61 
__u32
 
	mndm_ªf˙t
;

89 
	sndt_°©s
 {

90 
__u64
 
	mndts_Ælocs
;

91 
__u64
 
	mndts_de°roys
;

92 
__u64
 
	mndts_hash_grows
;

93 
__u64
 
	mndts_ªs_Áûed
;

94 
__u64
 
	mndts_lookups
;

95 
__u64
 
	mndts_hôs
;

96 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

97 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

98 
__u64
 
	mndts_≥riodic_gc_runs
;

99 
__u64
 
	mndts_f‹˚d_gc_runs
;

103 
	mNDTPA_UNSPEC
,

104 
	mNDTPA_IFINDEX
,

105 
	mNDTPA_REFCNT
,

106 
	mNDTPA_REACHABLE_TIME
,

107 
	mNDTPA_BASE_REACHABLE_TIME
,

108 
	mNDTPA_RETRANS_TIME
,

109 
	mNDTPA_GC_STALETIME
,

110 
	mNDTPA_DELAY_PROBE_TIME
,

111 
	mNDTPA_QUEUE_LEN
,

112 
	mNDTPA_APP_PROBES
,

113 
	mNDTPA_UCAST_PROBES
,

114 
	mNDTPA_MCAST_PROBES
,

115 
	mNDTPA_ANYCAST_DELAY
,

116 
	mNDTPA_PROXY_DELAY
,

117 
	mNDTPA_PROXY_QLEN
,

118 
	mNDTPA_LOCKTIME
,

119 
	m__NDTPA_MAX


121 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

123 
	sndtmsg
 {

124 
__u8
 
	mndtm_Ámûy
;

125 
__u8
 
	mndtm_∑d1
;

126 
__u16
 
	mndtm_∑d2
;

129 
	sndt_c⁄fig
 {

130 
__u16
 
	mndtc_key_Àn
;

131 
__u16
 
	mndtc_íåy_size
;

132 
__u32
 
	mndtc_íåõs
;

133 
__u32
 
	mndtc_œ°_Êush
;

134 
__u32
 
	mndtc_œ°_ønd
;

135 
__u32
 
	mndtc_hash_∫d
;

136 
__u32
 
	mndtc_hash_mask
;

137 
__u32
 
	mndtc_hash_chaö_gc
;

138 
__u32
 
	mndtc_¥oxy_qÀn
;

142 
	mNDTA_UNSPEC
,

143 
	mNDTA_NAME
,

144 
	mNDTA_THRESH1
,

145 
	mNDTA_THRESH2
,

146 
	mNDTA_THRESH3
,

147 
	mNDTA_CONFIG
,

148 
	mNDTA_PARMS
,

149 
	mNDTA_STATS
,

150 
	mNDTA_GC_INTERVAL
,

151 
	m__NDTA_MAX


153 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

6 
	#PR_SET_PDEATHSIG
 1

	)

7 
	#PR_GET_PDEATHSIG
 2

	)

10 
	#PR_GET_DUMPABLE
 3

	)

11 
	#PR_SET_DUMPABLE
 4

	)

14 
	#PR_GET_UNALIGN
 5

	)

15 
	#PR_SET_UNALIGN
 6

	)

16 
	#PR_UNALIGN_NOPRINT
 1

	)

17 
	#PR_UNALIGN_SIGBUS
 2

	)

21 
	#PR_GET_KEEPCAPS
 7

	)

22 
	#PR_SET_KEEPCAPS
 8

	)

25 
	#PR_GET_FPEMU
 9

	)

26 
	#PR_SET_FPEMU
 10

	)

27 
	#PR_FPEMU_NOPRINT
 1

	)

28 
	#PR_FPEMU_SIGFPE
 2

	)

31 
	#PR_GET_FPEXC
 11

	)

32 
	#PR_SET_FPEXC
 12

	)

33 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

34 
	#PR_FP_EXC_DIV
 0x010000

	)

35 
	#PR_FP_EXC_OVF
 0x020000

	)

36 
	#PR_FP_EXC_UND
 0x040000

	)

37 
	#PR_FP_EXC_RES
 0x080000

	)

38 
	#PR_FP_EXC_INV
 0x100000

	)

39 
	#PR_FP_EXC_DISABLED
 0

	)

40 
	#PR_FP_EXC_NONRECOV
 1

	)

41 
	#PR_FP_EXC_ASYNC
 2

	)

42 
	#PR_FP_EXC_PRECISE
 3

	)

46 
	#PR_GET_TIMING
 13

	)

47 
	#PR_SET_TIMING
 14

	)

48 
	#PR_TIMING_STATISTICAL
 0

	)

50 
	#PR_TIMING_TIMESTAMP
 1

	)

53 
	#PR_SET_NAME
 15

	)

54 
	#PR_GET_NAME
 16

	)

57 
	#PR_GET_ENDIAN
 19

	)

58 
	#PR_SET_ENDIAN
 20

	)

59 
	#PR_ENDIAN_BIG
 0

	)

60 
	#PR_ENDIAN_LITTLE
 1

	)

61 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

64 
	#PR_GET_SECCOMP
 21

	)

65 
	#PR_SET_SECCOMP
 22

	)

68 
	#PR_CAPBSET_READ
 23

	)

69 
	#PR_CAPBSET_DROP
 24

	)

72 
	#PR_GET_TSC
 25

	)

73 
	#PR_SET_TSC
 26

	)

74 
	#PR_TSC_ENABLE
 1

	)

75 
	#PR_TSC_SIGSEGV
 2

	)

78 
	#PR_GET_SECUREBITS
 27

	)

79 
	#PR_SET_SECUREBITS
 28

	)

85 
	#PR_SET_TIMERSLACK
 29

	)

86 
	#PR_GET_TIMERSLACK
 30

	)

88 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

89 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

95 
	#PR_MCE_KILL
 33

	)

96 
	#PR_MCE_KILL_CLEAR
 0

	)

97 
	#PR_MCE_KILL_SET
 1

	)

99 
	#PR_MCE_KILL_LATE
 0

	)

100 
	#PR_MCE_KILL_EARLY
 1

	)

101 
	#PR_MCE_KILL_DEFAULT
 2

	)

103 
	#PR_MCE_KILL_GET
 34

	)

108 
	#PR_SET_MM
 35

	)

109 
	#PR_SET_MM_START_CODE
 1

	)

110 
	#PR_SET_MM_END_CODE
 2

	)

111 
	#PR_SET_MM_START_DATA
 3

	)

112 
	#PR_SET_MM_END_DATA
 4

	)

113 
	#PR_SET_MM_START_STACK
 5

	)

114 
	#PR_SET_MM_START_BRK
 6

	)

115 
	#PR_SET_MM_BRK
 7

	)

121 
	#PR_SET_PTRACER
 0x59616d61

	)

122 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

136 
	#PR_SET_NO_NEW_PRIVS
 38

	)

137 
	#PR_GET_NO_NEW_PRIVS
 39

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë(((ÁcË<< 3Ë| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (
__c⁄°
 *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

4 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_GNU


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_GNU


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

97 
__END_DECLS


101 #i‡!
deföed
 
__deföed_sched∑øm
 \

102 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

103 
	#__deföed_sched∑øm
 1

	)

105 
	s__sched_∑øm


107 
__sched_¥i‹ôy
;

109 #unde‡
__√ed_sched∑øm


113 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


114 
	#__˝u_£t_t_deföed


	)

116 
	#__CPU_SETSIZE
 1024

	)

117 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

120 
	t__˝u_mask
;

123 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

124 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

129 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

130 } 
	t˝u_£t_t
;

133 #i‡
	`__GNUC_PREREQ
 (2, 91)

134 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

137 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

139 
size_t
 
__i
; \

140 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

141 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

142 
__i
 = 0; __ò< 
__imax
; ++__i) \

143 
__bôs
[
__i
] = 0; \

144 
	}
} 0)

	)

146 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 |
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 &~
	`__CPUMASK
 (
__˝u
)) \

159 : 0; }))

	)

160 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

161 (
__exãnsi⁄__
 \

162 ({ 
size_t
 
__˝u
 = (
˝u
); \

163 
__˝u
 < 8 * (
£tsize
) \

164 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

165 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

166 : 0; }))

	)

168 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

169 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

171 #i‡
__GNUC_PREREQ
 (2, 91)

172 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

173 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

175 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

176 (
__exãnsi⁄__
 \

177 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

178 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

179 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

180 
size_t
 
__i
; \

181 
__i
 = 0; __ò< 
__imax
; ++__i) \

182 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

184 
__i
 =
__imax
; }))

	)

187 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

188 (
__exãnsi⁄__
 \

189 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

190 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

191 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

192 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

193 
size_t
 
__i
; \

194 
__i
 = 0; __ò< 
__imax
; ++__i) \

195 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

196 
__de°
; }))

	)

198 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

199 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

200 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

201 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

203 
__BEGIN_DECLS


205 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

206 
__THROW
;

207 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

208 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

210 
__END_DECLS


	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/syslog-ldbl.h

20 #i‚de‡
_SYS_SYSLOG_H


24 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

26 #ifde‡
__USE_BSD


27 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

30 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


31 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

33 #ifde‡
__USE_BSD


34 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

20 #i‚de‡
_SYS_SYSLOG_H


24 #i‚de‡
_BITS_SYSLOG_PATH_H


25 
	#_BITS_SYSLOG_PATH_H
 1

	)

27 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

20 #i‚de‡
_SYS_SYSLOG_H


25 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
, ...)

26 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 #ifde‡
__va_¨g_∑ck


29 
__exã∫_Æways_ölöe
 

30 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

32 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

33 
	}
}

34 #ñi‡!
deföed
 
__˝lu•lus


35 
	#sy¶og
(
¥i
, ...) \

36 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

40 #ifde‡
__USE_BSD


41 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
,

42 
__gnuc_va_li°
 
__≠
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

45 
__exã∫_Æways_ölöe
 

46 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

48 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

49 
	}
}

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

11 
	#SI_LOAD_SHIFT
 16

	)

12 
	ssysöfo
 {

13 
	mu±ime
;

14 
	mlﬂds
[3];

15 
	mtŸÆøm
;

16 
	m‰ìøm
;

17 
	msh¨edøm
;

18 
	mbuf„ºam
;

19 
	mtŸÆsw≠
;

20 
	m‰ìsw≠
;

21 
	m¥ocs
;

22 
	m∑d
;

23 
	mtŸÆhigh
;

24 
	m‰ìhigh
;

25 
	mmem_unô
;

26 
	m_f
[20-2*()-()];

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__¨ch_swab16


49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #ifde‡
__¨ch_swab32


58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #ifde‡
__¨ch_swab64


67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 
	#__swab16
(
x
) \

100 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

101 
	`___c⁄°™t_swab16
(
x
) : \

102 
	`__fswab16
(
x
))

	)

108 
	#__swab32
(
x
) \

109 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

110 
	`___c⁄°™t_swab32
(
x
) : \

111 
	`__fswab32
(
x
))

	)

117 
	#__swab64
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

119 
	`___c⁄°™t_swab64
(
x
) : \

120 
	`__fswab64
(
x
))

	)

128 
	#__swahw32
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

130 
	`___c⁄°™t_swahw32
(
x
) : \

131 
	`__fswahw32
(
x
))

	)

139 
	#__swahb32
(
x
) \

140 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

141 
	`___c⁄°™t_swahb32
(
x
) : \

142 
	`__fswahb32
(
x
))

	)

148 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

150 #ifde‡
__¨ch_swab16p


151  
	`__¨ch_swab16p
(
p
);

153  
	`__swab16
(*
p
);

155 
	}
}

161 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

163 #ifde‡
__¨ch_swab32p


164  
	`__¨ch_swab32p
(
p
);

166  
	`__swab32
(*
p
);

168 
	}
}

174 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

176 #ifde‡
__¨ch_swab64p


177  
	`__¨ch_swab64p
(
p
);

179  
	`__swab64
(*
p
);

181 
	}
}

189 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahw32p


192  
	`__¨ch_swahw32p
(
p
);

194  
	`__swahw32
(*
p
);

196 
	}
}

204 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

206 #ifde‡
__¨ch_swahb32p


207  
	`__¨ch_swahb32p
(
p
);

209  
	`__swahb32
(*
p
);

211 
	}
}

217 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

219 #ifde‡
__¨ch_swab16s


220 
	`__¨ch_swab16s
(
p
);

222 *
p
 = 
	`__swab16p
(p);

224 
	}
}

229 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

231 #ifde‡
__¨ch_swab32s


232 
	`__¨ch_swab32s
(
p
);

234 *
p
 = 
	`__swab32p
(p);

236 
	}
}

242 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

244 #ifde‡
__¨ch_swab64s


245 
	`__¨ch_swab64s
(
p
);

247 *
p
 = 
	`__swab64p
(p);

249 
	}
}

257 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahw32s


260 
	`__¨ch_swahw32s
(
p
);

262 *
p
 = 
	`__swahw32p
(p);

264 
	}
}

272 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

274 #ifde‡
__¨ch_swahb32s


275 
	`__¨ch_swahb32s
(
p
);

277 *
p
 = 
	`__swahb32p
(p);

279 
	}
}

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

78 
	#FIONCLEX
 0x5450

	)

79 
	#FIOCLEX
 0x5451

	)

80 
	#FIOASYNC
 0x5452

	)

81 
	#TIOCSERCONFIG
 0x5453

	)

82 
	#TIOCSERGWILD
 0x5454

	)

83 
	#TIOCSERSWILD
 0x5455

	)

84 
	#TIOCGLCKTRMIOS
 0x5456

	)

85 
	#TIOCSLCKTRMIOS
 0x5457

	)

86 
	#TIOCSERGSTRUCT
 0x5458

	)

87 
	#TIOCSERGETLSR
 0x5459

	)

88 
	#TIOCSERGETMULTI
 0x545A

	)

89 
	#TIOCSERSETMULTI
 0x545B

	)

91 
	#TIOCMIWAIT
 0x545C

	)

92 
	#TIOCGICOUNT
 0x545D

	)

98 #i‚de‡
FIOQSIZE


99 
	#FIOQSIZE
 0x5460

	)

103 
	#TIOCPKT_DATA
 0

	)

104 
	#TIOCPKT_FLUSHREAD
 1

	)

105 
	#TIOCPKT_FLUSHWRITE
 2

	)

106 
	#TIOCPKT_STOP
 4

	)

107 
	#TIOCPKT_START
 8

	)

108 
	#TIOCPKT_NOSTOP
 16

	)

109 
	#TIOCPKT_DOSTOP
 32

	)

110 
	#TIOCPKT_IOCTL
 64

	)

112 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 
	mvÆ
[2];

43 } 
	t__kî√l_fsid_t
;

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

31 #ifde‡
__GNUC__


32 
	t__kî√l_loff_t
;

36 
	mvÆ
[2];

37 } 
	t__kî√l_fsid_t
;

39 
	t__kî√l_ﬁd_uid_t
;

40 
	t__kî√l_ﬁd_gid_t
;

41 
__kî√l_uid_t
 
	t__kî√l_uid32_t
;

42 
__kî√l_gid_t
 
	t__kî√l_gid32_t
;

44 
	t__kî√l_ﬁd_dev_t
;

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 #ifde‡
__i386__


10 #ifde‡
CONFIG_X86_BSWAP


11 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

13 
	`__asm__
("xchgb %b0,%h0\n\t"

16 : "=q" (
vÆ
)

17 : "0" (
vÆ
));

21 
	`__asm__
("bswapl %0"

22 : "Ù" (
vÆ
)

23 : "0" (
vÆ
));

25  
vÆ
;

26 
	}
}

27 
	#__¨ch_swab32
 
__¨ch_swab32


	)

29 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

31 #ifde‡
__i386__


34 
__u32
 
a
;

35 
__u32
 
b
;

36 } 
s
;

37 
__u64
 
u
;

38 } 
v
;

39 
v
.
u
 = 
vÆ
;

40 #ifde‡
CONFIG_X86_BSWAP


41 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

42 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

43 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

45 
v
.
s
.
a
 = 
	`__¨ch_swab32
(v.s.a);

46 
v
.
s
.
b
 = 
	`__¨ch_swab32
(v.s.b);

47 
	`__asm__
("xchgl %0,%1"

48 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

49 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

51  
v
.
u
;

53 
	`__asm__
("bswapq %0"

54 : "Ù" (
vÆ
)

55 : "0" (
vÆ
));

56  
vÆ
;

58 
	}
}

59 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
351
11870
application/cli/mul_cli.c
application/cli/mul_cli.h
application/fabric/mul_fabric.c
application/fabric/mul_fabric.h
application/fabric/mul_fabric_common.h
application/fabric/mul_fabric_host.c
application/fabric/mul_fabric_pkt.c
application/fabric/mul_fabric_route.c
application/fabric/mul_fabric_servlet.c
application/fabric/mul_fabric_servlet.h
application/fabric/mul_fabric_switches.c
application/fabric/mul_fabric_util.h
application/fabric/mul_fabric_vty.c
application/l2switch/l2switch.c
application/l2switch/l2switch.h
common-libs/3rd-party/derived-lib/include/clog.h
common-libs/3rd-party/derived-lib/include/hash.h
common-libs/3rd-party/derived-lib/include/nicira-ext.h
common-libs/3rd-party/derived-lib/include/openflow-ext.h
common-libs/3rd-party/derived-lib/include/openflow-netlink.h
common-libs/3rd-party/derived-lib/include/openflow.h
common-libs/3rd-party/derived-lib/include/packets.h
common-libs/3rd-party/derived-lib/include/private-ext.h
common-libs/3rd-party/derived-lib/include/random.h
common-libs/3rd-party/derived-lib/include/xtoxll.h
common-libs/3rd-party/derived-lib/src/clog.c
common-libs/3rd-party/derived-lib/src/hash.c
common-libs/3rd-party/derived-lib/src/random.c
common-libs/3rd-party/quagga-lib/include/buffer.h
common-libs/3rd-party/quagga-lib/include/checksum.h
common-libs/3rd-party/quagga-lib/include/command.h
common-libs/3rd-party/quagga-lib/include/distribute.h
common-libs/3rd-party/quagga-lib/include/filter.h
common-libs/3rd-party/quagga-lib/include/getopt.h
common-libs/3rd-party/quagga-lib/include/hash.h
common-libs/3rd-party/quagga-lib/include/if.h
common-libs/3rd-party/quagga-lib/include/if_rmap.h
common-libs/3rd-party/quagga-lib/include/jhash.h
common-libs/3rd-party/quagga-lib/include/keychain.h
common-libs/3rd-party/quagga-lib/include/linklist.h
common-libs/3rd-party/quagga-lib/include/log.h
common-libs/3rd-party/quagga-lib/include/md5.h
common-libs/3rd-party/quagga-lib/include/memory.h
common-libs/3rd-party/quagga-lib/include/memtypes.h
common-libs/3rd-party/quagga-lib/include/network.h
common-libs/3rd-party/quagga-lib/include/plist.h
common-libs/3rd-party/quagga-lib/include/pqueue.h
common-libs/3rd-party/quagga-lib/include/prefix.h
common-libs/3rd-party/quagga-lib/include/privs.h
common-libs/3rd-party/quagga-lib/include/regex-gnu.h
common-libs/3rd-party/quagga-lib/include/route_types.h
common-libs/3rd-party/quagga-lib/include/routemap.h
common-libs/3rd-party/quagga-lib/include/sigevent.h
common-libs/3rd-party/quagga-lib/include/smux.h
common-libs/3rd-party/quagga-lib/include/sockopt.h
common-libs/3rd-party/quagga-lib/include/sockunion.h
common-libs/3rd-party/quagga-lib/include/str.h
common-libs/3rd-party/quagga-lib/include/stream.h
common-libs/3rd-party/quagga-lib/include/table.h
common-libs/3rd-party/quagga-lib/include/thread.h
common-libs/3rd-party/quagga-lib/include/vector.h
common-libs/3rd-party/quagga-lib/include/version.h
common-libs/3rd-party/quagga-lib/include/vty.h
common-libs/3rd-party/quagga-lib/include/workqueue.h
common-libs/3rd-party/quagga-lib/include/zassert.h
common-libs/3rd-party/quagga-lib/include/zclient.h
common-libs/3rd-party/quagga-lib/include/zebra.h
common-libs/3rd-party/quagga-lib/memtypes.h
common-libs/3rd-party/quagga-lib/route_types.h
common-libs/3rd-party/quagga-lib/src/buffer.c
common-libs/3rd-party/quagga-lib/src/checksum.c
common-libs/3rd-party/quagga-lib/src/command.c
common-libs/3rd-party/quagga-lib/src/daemon.c
common-libs/3rd-party/quagga-lib/src/distribute.c
common-libs/3rd-party/quagga-lib/src/filter.c
common-libs/3rd-party/quagga-lib/src/getopt.c
common-libs/3rd-party/quagga-lib/src/getopt1.c
common-libs/3rd-party/quagga-lib/src/hash.c
common-libs/3rd-party/quagga-lib/src/if.c
common-libs/3rd-party/quagga-lib/src/if_rmap.c
common-libs/3rd-party/quagga-lib/src/jhash.c
common-libs/3rd-party/quagga-lib/src/keychain.c
common-libs/3rd-party/quagga-lib/src/linklist.c
common-libs/3rd-party/quagga-lib/src/log.c
common-libs/3rd-party/quagga-lib/src/md5.c
common-libs/3rd-party/quagga-lib/src/memory.c
common-libs/3rd-party/quagga-lib/src/memtypes.c
common-libs/3rd-party/quagga-lib/src/network.c
common-libs/3rd-party/quagga-lib/src/pid_output.c
common-libs/3rd-party/quagga-lib/src/plist.c
common-libs/3rd-party/quagga-lib/src/pqueue.c
common-libs/3rd-party/quagga-lib/src/prefix.c
common-libs/3rd-party/quagga-lib/src/privs.c
common-libs/3rd-party/quagga-lib/src/regex.c
common-libs/3rd-party/quagga-lib/src/routemap.c
common-libs/3rd-party/quagga-lib/src/sigevent.c
common-libs/3rd-party/quagga-lib/src/smux.c
common-libs/3rd-party/quagga-lib/src/sockopt.c
common-libs/3rd-party/quagga-lib/src/sockunion.c
common-libs/3rd-party/quagga-lib/src/str.c
common-libs/3rd-party/quagga-lib/src/stream.c
common-libs/3rd-party/quagga-lib/src/table.c
common-libs/3rd-party/quagga-lib/src/thread.c
common-libs/3rd-party/quagga-lib/src/vector.c
common-libs/3rd-party/quagga-lib/src/vty.c
common-libs/3rd-party/quagga-lib/src/workqueue.c
common-libs/3rd-party/quagga-lib/src/zclient.c
common-libs/mul-lib/include/atomic.h
common-libs/mul-lib/include/c_util.h
common-libs/mul-lib/include/cbuf.h
common-libs/mul-lib/include/compiler.h
common-libs/mul-lib/include/idx_pool.h
common-libs/mul-lib/include/lock.h
common-libs/mul-lib/src/c_util.c
common-libs/mul-lib/src/cbuf.c
common-libs/mul-lib/src/idx_pool.c
common/config.h
common/mul_app_interface.h
common/mul_app_main.c
common/mul_app_main.h
common/mul_common.h
common/mul_of_msg.c
common/mul_of_msg.h
common/mul_packet.h
common/mul_service.c
common/mul_services.h
common/mul_vty.h
mul/mul.h
mul/mul_app_interface.c
mul/mul_events.c
mul/mul_events.h
mul/mul_fp.c
mul/mul_fp.h
mul/mul_ipc.c
mul/mul_main.c
mul/mul_of.c
mul/mul_of.h
mul/mul_priv.h
mul/mul_servlet.c
mul/mul_servlet.h
mul/mul_thread.h
mul/mul_thread_core.c
mul/mul_vty.c
mul_events.h
services/loadable/topo_routing/mul_lldp.c
services/loadable/topo_routing/mul_lldp_common.c
services/loadable/topo_routing/mul_lldp_common.h
services/loadable/topo_routing/mul_lldp_debug.c
services/loadable/topo_routing/mul_lldp_debug.h
services/loadable/topo_routing/mul_lldp_hash.c
services/loadable/topo_routing/mul_lldp_hash.h
services/loadable/topo_routing/mul_lldp_pkt.h
services/loadable/topo_routing/mul_lldp_vty.c
services/loadable/topo_routing/mul_lldp_vty.h
services/loadable/topo_routing/mul_route.h
services/loadable/topo_routing/mul_route_apsp.c
services/loadable/topo_routing/mul_route_apsp.h
services/loadable/topo_routing/mul_route_apsp_priv.h
services/loadable/topo_routing/mul_route_priv.h
services/loadable/topo_routing/mul_route_servlet.c
services/loadable/topo_routing/mul_route_vty.c
services/loadable/topo_routing/mul_tr.c
services/loadable/topo_routing/mul_tr.h
services/loadable/topo_routing/mul_tr_common.h
services/loadable/topo_routing/mul_tr_servlet.c
services/loadable/topo_routing/mul_tr_servlet.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/arpa/telnet.h
/usr/include/asm/byteorder.h
/usr/include/asm/types.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/event2/event.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/gnu-versions.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/filter.h
/usr/include/linux/netlink.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/malloc.h
/usr/include/memory.h
/usr/include/net/if.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/stropts.h
/usr/include/sys/fcntl.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/prctl.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/ucontext.h
/usr/include/unistd.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/asm-generic/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/stropts.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/bits/xtitypes.h
/usr/include/endian.h
/usr/include/event2/event-config.h
/usr/include/event2/util.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/limits.h
/usr/include/linux/neighbour.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/linux/prctl.h
/usr/include/linux/socket.h
/usr/include/linux/sysctl.h
/usr/include/locale.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/cdefs.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/locale.h
/usr/include/bits/predefs.h
/usr/include/bits/sched.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/swab.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno.h
/usr/include/asm/sockios.h
/usr/include/gnu/option-groups.h
/usr/include/linux/ioctl.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/ioctl.h
